File,Outputs,Mean [ms],StdDev [ms],RelStdDev [%],Best [ms],Median [ms],Worst [ms], Verification results
../../src/test/resources/frontend-generated/008-num-traits-pow.rs.vpr,0,6977,716,10,6202,6801,7930,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/348_cgmath_point.rs.vpr,2,3914,137,3,3793,3843,4107,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion !__t3 might not hold. (348_cgmath_point.rs.vpr@364.3); [assert.failed:assertion.false] Assert might fail. Assertion !__t8 might not hold. (348_cgmath_point.rs.vpr@2455.3)); List([assert.failed:assertion.false] Assert might fail. Assertion !__t3 might not hold. (348_cgmath_point.rs.vpr@364.3); [assert.failed:assertion.false] Assert might fail. Assertion !__t8 might not hold. (348_cgmath_point.rs.vpr@2455.3)); List([assert.failed:assertion.false] Assert might fail. Assertion !__t3 might not hold. (348_cgmath_point.rs.vpr@364.3); [assert.failed:assertion.false] Assert might fail. Assertion !__t8 might not hold. (348_cgmath_point.rs.vpr@2455.3)); List([assert.failed:assertion.false] Assert might fail. Assertion !__t3 might not hold. (348_cgmath_point.rs.vpr@364.3); [assert.failed:assertion.false] Assert might fail. Assertion !__t8 might not hold. (348_cgmath_point.rs.vpr@2455.3)); List([assert.failed:assertion.false] Assert might fail. Assertion !__t3 might not hold. (348_cgmath_point.rs.vpr@364.3); [assert.failed:assertion.false] Assert might fail. Assertion !__t8 might not hold. (348_cgmath_point.rs.vpr@2455.3)))
../../src/test/resources/frontend-generated/Ackermann_function.rs.vpr,0,2373,83,3,2298,2333,2490,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/Binary_search.rs.vpr,0,7905,105,1,7812,7852,8053,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/Dijkstras_algorithm-simpl.rs.vpr,0,1372,49,3,1333,1343,1442,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/Heapsort_generic.rs.vpr,0,35959,514,1,35245,36197,36435,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/Knights_tour.rs.vpr,0,49660,109,0,49509,49707,49766,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/Selection_sort.rs.vpr,1,186996,498,0,186525,186779,187686,Vector(List(Timeout occurred after 180 second(s) (<no position>)); List(Timeout occurred after 180 second(s) (<no position>)); List(Timeout occurred after 180 second(s) (<no position>)); List(Timeout occurred after 180 second(s) (<no position>)); List(Timeout occurred after 180 second(s) (<no position>)))
../../src/test/resources/frontend-generated/account.rs.vpr,0,1621,18,1,1599,1621,1644,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/ansi-term-external-call.rs.vpr,0,12570,94,0,12463,12555,12693,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/balance.rs.vpr,1,1672,16,0,1658,1663,1695,Vector(List([fold.failed:assertion.false] Folding u32(_1.val_ref.f$bal) might fail. Assertion 0 <= self.val_int might not hold. (balance.rs.vpr@589.3)); List([fold.failed:assertion.false] Folding u32(_1.val_ref.f$bal) might fail. Assertion 0 <= self.val_int might not hold. (balance.rs.vpr@589.3)); List([fold.failed:assertion.false] Folding u32(_1.val_ref.f$bal) might fail. Assertion 0 <= self.val_int might not hold. (balance.rs.vpr@589.3)); List([fold.failed:assertion.false] Folding u32(_1.val_ref.f$bal) might fail. Assertion 0 <= self.val_int might not hold. (balance.rs.vpr@589.3)); List([fold.failed:assertion.false] Folding u32(_1.val_ref.f$bal) might fail. Assertion 0 <= self.val_int might not hold. (balance.rs.vpr@589.3)))
../../src/test/resources/frontend-generated/case1-overflow.rs.vpr,0,14434,71,0,14352,14423,14527,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/complex-fn.rs.vpr,0,1225,44,3,1177,1216,1284,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/fail-pc.rs.vpr,2,1158,25,2,1140,1140,1194,Vector(List([postcondition.violated:assertion.false] Postcondition of m_fail_pc$$sum1$opensqu$0$closesqu$__$TY$__$int$$$int$ might not hold. Assertion result == _pure_1 * (_pure_1 + 1) / 2 might not hold. (fail-pc.rs.vpr@33.11); [application.precondition:assertion.false] Precondition of function m_fail_pc$$sum2$opensqu$0$closesqu$__$TY$__$int$$$int$ might not hold. Assertion -1 >= 0 might not hold. (fail-pc.rs.vpr@123.77)); List([postcondition.violated:assertion.false] Postcondition of m_fail_pc$$sum1$opensqu$0$closesqu$__$TY$__$int$$$int$ might not hold. Assertion result == _pure_1 * (_pure_1 + 1) / 2 might not hold. (fail-pc.rs.vpr@33.11); [application.precondition:assertion.false] Precondition of function m_fail_pc$$sum2$opensqu$0$closesqu$__$TY$__$int$$$int$ might not hold. Assertion -1 >= 0 might not hold. (fail-pc.rs.vpr@123.77)); List([postcondition.violated:assertion.false] Postcondition of m_fail_pc$$sum1$opensqu$0$closesqu$__$TY$__$int$$$int$ might not hold. Assertion result == _pure_1 * (_pure_1 + 1) / 2 might not hold. (fail-pc.rs.vpr@33.11); [application.precondition:assertion.false] Precondition of function m_fail_pc$$sum2$opensqu$0$closesqu$__$TY$__$int$$$int$ might not hold. Assertion -1 >= 0 might not hold. (fail-pc.rs.vpr@123.77)); List([postcondition.violated:assertion.false] Postcondition of m_fail_pc$$sum1$opensqu$0$closesqu$__$TY$__$int$$$int$ might not hold. Assertion result == _pure_1 * (_pure_1 + 1) / 2 might not hold. (fail-pc.rs.vpr@33.11); [application.precondition:assertion.false] Precondition of function m_fail_pc$$sum2$opensqu$0$closesqu$__$TY$__$int$$$int$ might not hold. Assertion -1 >= 0 might not hold. (fail-pc.rs.vpr@123.77)); List([postcondition.violated:assertion.false] Postcondition of m_fail_pc$$sum1$opensqu$0$closesqu$__$TY$__$int$$$int$ might not hold. Assertion result == _pure_1 * (_pure_1 + 1) / 2 might not hold. (fail-pc.rs.vpr@33.11); [application.precondition:assertion.false] Precondition of function m_fail_pc$$sum2$opensqu$0$closesqu$__$TY$__$int$$$int$ might not hold. Assertion -1 >= 0 might not hold. (fail-pc.rs.vpr@123.77)))
../../src/test/resources/frontend-generated/first-final.rs.vpr,0,9453,35,0,9404,9469,9486,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/forall-simple1.gobra.vpr,2,3,0,0,3,4,4,Vector(List({ x_pkg_V2;y_pkg_V2 } is not a valid Trigger (forall-simple1.gobra.vpr@16.52); { n_pkg_V4 } is not a valid Trigger (forall-simple1.gobra.vpr@43.35)); List({ x_pkg_V2;y_pkg_V2 } is not a valid Trigger (forall-simple1.gobra.vpr@16.52); { n_pkg_V4 } is not a valid Trigger (forall-simple1.gobra.vpr@43.35)); List({ x_pkg_V2;y_pkg_V2 } is not a valid Trigger (forall-simple1.gobra.vpr@16.52); { n_pkg_V4 } is not a valid Trigger (forall-simple1.gobra.vpr@43.35)); List({ x_pkg_V2;y_pkg_V2 } is not a valid Trigger (forall-simple1.gobra.vpr@16.52); { n_pkg_V4 } is not a valid Trigger (forall-simple1.gobra.vpr@43.35)); List({ x_pkg_V2;y_pkg_V2 } is not a valid Trigger (forall-simple1.gobra.vpr@16.52); { n_pkg_V4 } is not a valid Trigger (forall-simple1.gobra.vpr@43.35)))
../../src/test/resources/frontend-generated/forall-simple3.gobra.vpr,0,1093,3,0,1088,1095,1096,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/generics-basic-3-6.rs.vpr,1,1354,7,0,1344,1357,1363,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(m_generics_basic_3_6$$Number$opensqu$0$closesqu$$_beg_$i32$_end_(_old$pre$0); write) in (unfolding acc(i32(_old$pre$0.f$i); write) in _old$pre$0.f$i.val_int)) >= 8001 might not hold. (generics-basic-3-6.rs.vpr@219.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(m_generics_basic_3_6$$Number$opensqu$0$closesqu$$_beg_$i32$_end_(_old$pre$0); write) in (unfolding acc(i32(_old$pre$0.f$i); write) in _old$pre$0.f$i.val_int)) >= 8001 might not hold. (generics-basic-3-6.rs.vpr@219.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(m_generics_basic_3_6$$Number$opensqu$0$closesqu$$_beg_$i32$_end_(_old$pre$0); write) in (unfolding acc(i32(_old$pre$0.f$i); write) in _old$pre$0.f$i.val_int)) >= 8001 might not hold. (generics-basic-3-6.rs.vpr@219.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(m_generics_basic_3_6$$Number$opensqu$0$closesqu$$_beg_$i32$_end_(_old$pre$0); write) in (unfolding acc(i32(_old$pre$0.f$i); write) in _old$pre$0.f$i.val_int)) >= 8001 might not hold. (generics-basic-3-6.rs.vpr@219.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(m_generics_basic_3_6$$Number$opensqu$0$closesqu$$_beg_$i32$_end_(_old$pre$0); write) in (unfolding acc(i32(_old$pre$0.f$i); write) in _old$pre$0.f$i.val_int)) >= 8001 might not hold. (generics-basic-3-6.rs.vpr@219.3)))
../../src/test/resources/frontend-generated/global-const-4.gobra.vpr,0,1254,13,1,1239,1253,1271,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/seq-slice-simple1.gobra.vpr,0,1502,115,7,1388,1457,1661,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/seq-update-simple1.gobra.vpr,0,1466,67,4,1404,1434,1560,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/switch.gobra.vpr,0,1185,32,2,1155,1171,1230,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/testsarpverificationtest_rd_quantified.py.vpr,2,4619,276,5,4255,4681,4923,Vector(List([postcondition.violated:assertion.false] Postcondition of Clazz_m1_1 might not hold. Assertion false might not hold. (testsarpverificationtest_rd_quantified.py.vpr@977.11); [postcondition.violated:assertion.false] Postcondition of Clazz_m2_1 might not hold. Assertion false might not hold. (testsarpverificationtest_rd_quantified.py.vpr@1048.11)); List([postcondition.violated:assertion.false] Postcondition of Clazz_m1_1 might not hold. Assertion false might not hold. (testsarpverificationtest_rd_quantified.py.vpr@977.11); [postcondition.violated:assertion.false] Postcondition of Clazz_m2_1 might not hold. Assertion false might not hold. (testsarpverificationtest_rd_quantified.py.vpr@1048.11)); List([postcondition.violated:assertion.false] Postcondition of Clazz_m1_1 might not hold. Assertion false might not hold. (testsarpverificationtest_rd_quantified.py.vpr@977.11); [postcondition.violated:assertion.false] Postcondition of Clazz_m2_1 might not hold. Assertion false might not hold. (testsarpverificationtest_rd_quantified.py.vpr@1048.11)); List([postcondition.violated:assertion.false] Postcondition of Clazz_m1_1 might not hold. Assertion false might not hold. (testsarpverificationtest_rd_quantified.py.vpr@977.11); [postcondition.violated:assertion.false] Postcondition of Clazz_m2_1 might not hold. Assertion false might not hold. (testsarpverificationtest_rd_quantified.py.vpr@1048.11)); List([postcondition.violated:assertion.false] Postcondition of Clazz_m1_1 might not hold. Assertion false might not hold. (testsarpverificationtest_rd_quantified.py.vpr@977.11); [postcondition.violated:assertion.false] Postcondition of Clazz_m2_1 might not hold. Assertion false might not hold. (testsarpverificationtest_rd_quantified.py.vpr@1048.11)))
../../src/test/resources/frontend-generated/testsfunctionalverificationexamplescav_example.py.vpr,0,8909,137,1,8717,8982,9030,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/testsfunctionalverificationexamplesiap_bst.py.vpr,0,6596,298,4,6254,6553,6982,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/testsfunctionalverificationexamplesparkinson_recell.py.vpr,0,2962,17,0,2938,2971,2979,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/testsfunctionalverificationexamplesrosetta_qsort.py.vpr,0,8243,69,0,8146,8281,8304,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/testsfunctionalverificationexamplestest_student_enroll_preds.py.vpr,1,6191,89,1,6110,6148,6316,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion list___contains__(_checkDefined(s1; 12659).Student_courses; str___create__(3; 6644083)) might not hold. (testsfunctionalverificationexamplestest_student_enroll_preds.py.vpr@694.3)); List([assert.failed:assertion.false] Assert might fail. Assertion list___contains__(_checkDefined(s1; 12659).Student_courses; str___create__(3; 6644083)) might not hold. (testsfunctionalverificationexamplestest_student_enroll_preds.py.vpr@694.3)); List([assert.failed:assertion.false] Assert might fail. Assertion list___contains__(_checkDefined(s1; 12659).Student_courses; str___create__(3; 6644083)) might not hold. (testsfunctionalverificationexamplestest_student_enroll_preds.py.vpr@694.3)); List([assert.failed:assertion.false] Assert might fail. Assertion list___contains__(_checkDefined(s1; 12659).Student_courses; str___create__(3; 6644083)) might not hold. (testsfunctionalverificationexamplestest_student_enroll_preds.py.vpr@694.3)); List([assert.failed:assertion.false] Assert might fail. Assertion list___contains__(_checkDefined(s1; 12659).Student_courses; str___create__(3; 6644083)) might not hold. (testsfunctionalverificationexamplestest_student_enroll_preds.py.vpr@694.3)))
../../src/test/resources/frontend-generated/testsfunctionalverificationissues00017.py.vpr,1,3729,70,1,3661,3700,3827,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forall lambda25_21$x: Ref :: { (lambda25_21$x in range___sil_seq__(_checkDefined(a_2; 3301217))) } issubtype(typeof(lambda25_21$x); int()) ==> (lambda25_21$x in range___sil_seq__(_checkDefined(a_2; 3301217))) ==> (forall lambda25_42$y: Ref :: { (lambda25_42$y in range___sil_seq__(_checkDefined(b_1; 3235682))) } issubtype(typeof(lambda25_42$y); int()) ==> (lambda25_42$y in range___sil_seq__(_checkDefined(b_1; 3235682))) ==> int___eq__(lambda25_21$x; lambda25_42$y) ==> (forall lambda25_79$x: Ref :: { (lambda25_79$x in range___sil_seq__(_checkDefined(c_0; 3170147))) } issubtype(typeof(lambda25_79$x); int()) ==> (lambda25_79$x in range___sil_seq__(_checkDefined(c_0; 3170147))) ==> int___gt__(int___unbox__(lambda25_79$x); int___unbox__(lambda25_42$y))))) might not hold. (testsfunctionalverificationissues00017.py.vpr@629.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall lambda25_21$x: Ref :: { (lambda25_21$x in range___sil_seq__(_checkDefined(a_2; 3301217))) } issubtype(typeof(lambda25_21$x); int()) ==> (lambda25_21$x in range___sil_seq__(_checkDefined(a_2; 3301217))) ==> (forall lambda25_42$y: Ref :: { (lambda25_42$y in range___sil_seq__(_checkDefined(b_1; 3235682))) } issubtype(typeof(lambda25_42$y); int()) ==> (lambda25_42$y in range___sil_seq__(_checkDefined(b_1; 3235682))) ==> int___eq__(lambda25_21$x; lambda25_42$y) ==> (forall lambda25_79$x: Ref :: { (lambda25_79$x in range___sil_seq__(_checkDefined(c_0; 3170147))) } issubtype(typeof(lambda25_79$x); int()) ==> (lambda25_79$x in range___sil_seq__(_checkDefined(c_0; 3170147))) ==> int___gt__(int___unbox__(lambda25_79$x); int___unbox__(lambda25_42$y))))) might not hold. (testsfunctionalverificationissues00017.py.vpr@629.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall lambda25_21$x: Ref :: { (lambda25_21$x in range___sil_seq__(_checkDefined(a_2; 3301217))) } issubtype(typeof(lambda25_21$x); int()) ==> (lambda25_21$x in range___sil_seq__(_checkDefined(a_2; 3301217))) ==> (forall lambda25_42$y: Ref :: { (lambda25_42$y in range___sil_seq__(_checkDefined(b_1; 3235682))) } issubtype(typeof(lambda25_42$y); int()) ==> (lambda25_42$y in range___sil_seq__(_checkDefined(b_1; 3235682))) ==> int___eq__(lambda25_21$x; lambda25_42$y) ==> (forall lambda25_79$x: Ref :: { (lambda25_79$x in range___sil_seq__(_checkDefined(c_0; 3170147))) } issubtype(typeof(lambda25_79$x); int()) ==> (lambda25_79$x in range___sil_seq__(_checkDefined(c_0; 3170147))) ==> int___gt__(int___unbox__(lambda25_79$x); int___unbox__(lambda25_42$y))))) might not hold. (testsfunctionalverificationissues00017.py.vpr@629.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall lambda25_21$x: Ref :: { (lambda25_21$x in range___sil_seq__(_checkDefined(a_2; 3301217))) } issubtype(typeof(lambda25_21$x); int()) ==> (lambda25_21$x in range___sil_seq__(_checkDefined(a_2; 3301217))) ==> (forall lambda25_42$y: Ref :: { (lambda25_42$y in range___sil_seq__(_checkDefined(b_1; 3235682))) } issubtype(typeof(lambda25_42$y); int()) ==> (lambda25_42$y in range___sil_seq__(_checkDefined(b_1; 3235682))) ==> int___eq__(lambda25_21$x; lambda25_42$y) ==> (forall lambda25_79$x: Ref :: { (lambda25_79$x in range___sil_seq__(_checkDefined(c_0; 3170147))) } issubtype(typeof(lambda25_79$x); int()) ==> (lambda25_79$x in range___sil_seq__(_checkDefined(c_0; 3170147))) ==> int___gt__(int___unbox__(lambda25_79$x); int___unbox__(lambda25_42$y))))) might not hold. (testsfunctionalverificationissues00017.py.vpr@629.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall lambda25_21$x: Ref :: { (lambda25_21$x in range___sil_seq__(_checkDefined(a_2; 3301217))) } issubtype(typeof(lambda25_21$x); int()) ==> (lambda25_21$x in range___sil_seq__(_checkDefined(a_2; 3301217))) ==> (forall lambda25_42$y: Ref :: { (lambda25_42$y in range___sil_seq__(_checkDefined(b_1; 3235682))) } issubtype(typeof(lambda25_42$y); int()) ==> (lambda25_42$y in range___sil_seq__(_checkDefined(b_1; 3235682))) ==> int___eq__(lambda25_21$x; lambda25_42$y) ==> (forall lambda25_79$x: Ref :: { (lambda25_79$x in range___sil_seq__(_checkDefined(c_0; 3170147))) } issubtype(typeof(lambda25_79$x); int()) ==> (lambda25_79$x in range___sil_seq__(_checkDefined(c_0; 3170147))) ==> int___gt__(int___unbox__(lambda25_79$x); int___unbox__(lambda25_42$y))))) might not hold. (testsfunctionalverificationissues00017.py.vpr@629.3)))
../../src/test/resources/frontend-generated/testsfunctionalverificationissues00031.py.vpr,0,3046,32,1,3003,3055,3080,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/testsfunctionalverificationissues00057.py.vpr,3,2568,74,2,2464,2607,2633,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion b_1 != c_1 might not hold. (testsfunctionalverificationissues00057.py.vpr@501.3); [assert.failed:assertion.false] Assert might fail. Assertion null != null might not hold. (testsfunctionalverificationissues00057.py.vpr@536.3); [call.precondition:assertion.false] The precondition of method callee might not hold. Assertion issubtype(typeof(null); B()) might not hold. (testsfunctionalverificationissues00057.py.vpr@576.3)); List([assert.failed:assertion.false] Assert might fail. Assertion b_1 != c_1 might not hold. (testsfunctionalverificationissues00057.py.vpr@501.3); [assert.failed:assertion.false] Assert might fail. Assertion null != null might not hold. (testsfunctionalverificationissues00057.py.vpr@536.3); [call.precondition:assertion.false] The precondition of method callee might not hold. Assertion issubtype(typeof(null); B()) might not hold. (testsfunctionalverificationissues00057.py.vpr@576.3)); List([assert.failed:assertion.false] Assert might fail. Assertion b_1 != c_1 might not hold. (testsfunctionalverificationissues00057.py.vpr@501.3); [assert.failed:assertion.false] Assert might fail. Assertion null != null might not hold. (testsfunctionalverificationissues00057.py.vpr@536.3); [call.precondition:assertion.false] The precondition of method callee might not hold. Assertion issubtype(typeof(null); B()) might not hold. (testsfunctionalverificationissues00057.py.vpr@576.3)); List([assert.failed:assertion.false] Assert might fail. Assertion b_1 != c_1 might not hold. (testsfunctionalverificationissues00057.py.vpr@501.3); [assert.failed:assertion.false] Assert might fail. Assertion null != null might not hold. (testsfunctionalverificationissues00057.py.vpr@536.3); [call.precondition:assertion.false] The precondition of method callee might not hold. Assertion issubtype(typeof(null); B()) might not hold. (testsfunctionalverificationissues00057.py.vpr@576.3)); List([assert.failed:assertion.false] Assert might fail. Assertion b_1 != c_1 might not hold. (testsfunctionalverificationissues00057.py.vpr@501.3); [assert.failed:assertion.false] Assert might fail. Assertion null != null might not hold. (testsfunctionalverificationissues00057.py.vpr@536.3); [call.precondition:assertion.false] The precondition of method callee might not hold. Assertion issubtype(typeof(null); B()) might not hold. (testsfunctionalverificationissues00057.py.vpr@576.3)))
../../src/test/resources/frontend-generated/testsfunctionalverificationtest_behavioural_subtyping_classmethod.py.vpr,2,3090,66,2,3002,3107,3162,Vector(List([postcondition.violated:assertion.false] Postcondition of C___init___override_check might not hold. Assertion int___gt__(int___unbox__(self.A_val); 13) might not hold. (testsfunctionalverificationtest_behavioural_subtyping_classmethod.py.vpr@682.11); [postcondition.violated:assertion.false] Postcondition of F_construct_override_check might not hold. Assertion int___gt__(int___unbox__(_res.D_val); 7) might not hold. (testsfunctionalverificationtest_behavioural_subtyping_classmethod.py.vpr@837.11)); List([postcondition.violated:assertion.false] Postcondition of C___init___override_check might not hold. Assertion int___gt__(int___unbox__(self.A_val); 13) might not hold. (testsfunctionalverificationtest_behavioural_subtyping_classmethod.py.vpr@682.11); [postcondition.violated:assertion.false] Postcondition of F_construct_override_check might not hold. Assertion int___gt__(int___unbox__(_res.D_val); 7) might not hold. (testsfunctionalverificationtest_behavioural_subtyping_classmethod.py.vpr@837.11)); List([postcondition.violated:assertion.false] Postcondition of C___init___override_check might not hold. Assertion int___gt__(int___unbox__(self.A_val); 13) might not hold. (testsfunctionalverificationtest_behavioural_subtyping_classmethod.py.vpr@682.11); [postcondition.violated:assertion.false] Postcondition of F_construct_override_check might not hold. Assertion int___gt__(int___unbox__(_res.D_val); 7) might not hold. (testsfunctionalverificationtest_behavioural_subtyping_classmethod.py.vpr@837.11)); List([postcondition.violated:assertion.false] Postcondition of C___init___override_check might not hold. Assertion int___gt__(int___unbox__(self.A_val); 13) might not hold. (testsfunctionalverificationtest_behavioural_subtyping_classmethod.py.vpr@682.11); [postcondition.violated:assertion.false] Postcondition of F_construct_override_check might not hold. Assertion int___gt__(int___unbox__(_res.D_val); 7) might not hold. (testsfunctionalverificationtest_behavioural_subtyping_classmethod.py.vpr@837.11)); List([postcondition.violated:assertion.false] Postcondition of C___init___override_check might not hold. Assertion int___gt__(int___unbox__(self.A_val); 13) might not hold. (testsfunctionalverificationtest_behavioural_subtyping_classmethod.py.vpr@682.11); [postcondition.violated:assertion.false] Postcondition of F_construct_override_check might not hold. Assertion int___gt__(int___unbox__(_res.D_val); 7) might not hold. (testsfunctionalverificationtest_behavioural_subtyping_classmethod.py.vpr@837.11)))
../../src/test/resources/frontend-generated/testsfunctionalverificationtest_cast.py.vpr,2,2850,57,2,2771,2875,2905,Vector(List([application.precondition:assertion.false] Precondition of function object___cast__ might not hold. Assertion issubtype(typeof(list___getitem__(l_3; __prim__int___box__(0))); C()) might not hold. (testsfunctionalverificationtest_cast.py.vpr@558.69); [application.precondition:assertion.false] Precondition of function object___cast__ might not hold. Assertion issubtype(typeof(list___getitem__(l_6; __prim__int___box__(0))); D()) might not hold. (testsfunctionalverificationtest_cast.py.vpr@631.10)); List([application.precondition:assertion.false] Precondition of function object___cast__ might not hold. Assertion issubtype(typeof(list___getitem__(l_3; __prim__int___box__(0))); C()) might not hold. (testsfunctionalverificationtest_cast.py.vpr@558.69); [application.precondition:assertion.false] Precondition of function object___cast__ might not hold. Assertion issubtype(typeof(list___getitem__(l_6; __prim__int___box__(0))); D()) might not hold. (testsfunctionalverificationtest_cast.py.vpr@631.10)); List([application.precondition:assertion.false] Precondition of function object___cast__ might not hold. Assertion issubtype(typeof(list___getitem__(l_3; __prim__int___box__(0))); C()) might not hold. (testsfunctionalverificationtest_cast.py.vpr@558.69); [application.precondition:assertion.false] Precondition of function object___cast__ might not hold. Assertion issubtype(typeof(list___getitem__(l_6; __prim__int___box__(0))); D()) might not hold. (testsfunctionalverificationtest_cast.py.vpr@631.10)); List([application.precondition:assertion.false] Precondition of function object___cast__ might not hold. Assertion issubtype(typeof(list___getitem__(l_3; __prim__int___box__(0))); C()) might not hold. (testsfunctionalverificationtest_cast.py.vpr@558.69); [application.precondition:assertion.false] Precondition of function object___cast__ might not hold. Assertion issubtype(typeof(list___getitem__(l_6; __prim__int___box__(0))); D()) might not hold. (testsfunctionalverificationtest_cast.py.vpr@631.10)); List([application.precondition:assertion.false] Precondition of function object___cast__ might not hold. Assertion issubtype(typeof(list___getitem__(l_3; __prim__int___box__(0))); C()) might not hold. (testsfunctionalverificationtest_cast.py.vpr@558.69); [application.precondition:assertion.false] Precondition of function object___cast__ might not hold. Assertion issubtype(typeof(list___getitem__(l_6; __prim__int___box__(0))); D()) might not hold. (testsfunctionalverificationtest_cast.py.vpr@631.10)))
../../src/test/resources/frontend-generated/testsfunctionalverificationtest_definedness.py.vpr,2,2550,48,1,2500,2536,2615,Vector(List([application.precondition:assertion.false] Precondition of function _checkDefined might not hold. Assertion _isDefined(117) might not hold. (testsfunctionalverificationtest_definedness.py.vpr@540.9); [postcondition.violated:insufficient.permission] Postcondition of C___init__ might not hold. There might be insufficient permission to access self.C_argh. (testsfunctionalverificationtest_definedness.py.vpr@584.11)); List([application.precondition:assertion.false] Precondition of function _checkDefined might not hold. Assertion _isDefined(117) might not hold. (testsfunctionalverificationtest_definedness.py.vpr@540.9); [postcondition.violated:insufficient.permission] Postcondition of C___init__ might not hold. There might be insufficient permission to access self.C_argh. (testsfunctionalverificationtest_definedness.py.vpr@584.11)); List([application.precondition:assertion.false] Precondition of function _checkDefined might not hold. Assertion _isDefined(117) might not hold. (testsfunctionalverificationtest_definedness.py.vpr@540.9); [postcondition.violated:insufficient.permission] Postcondition of C___init__ might not hold. There might be insufficient permission to access self.C_argh. (testsfunctionalverificationtest_definedness.py.vpr@584.11)); List([application.precondition:assertion.false] Precondition of function _checkDefined might not hold. Assertion _isDefined(117) might not hold. (testsfunctionalverificationtest_definedness.py.vpr@540.9); [postcondition.violated:insufficient.permission] Postcondition of C___init__ might not hold. There might be insufficient permission to access self.C_argh. (testsfunctionalverificationtest_definedness.py.vpr@584.11)); List([application.precondition:assertion.false] Precondition of function _checkDefined might not hold. Assertion _isDefined(117) might not hold. (testsfunctionalverificationtest_definedness.py.vpr@540.9); [postcondition.violated:insufficient.permission] Postcondition of C___init__ might not hold. There might be insufficient permission to access self.C_argh. (testsfunctionalverificationtest_definedness.py.vpr@584.11)))
../../src/test/resources/frontend-generated/testsfunctionalverificationtest_exception.py.vpr,15,8052,32,0,8012,8053,8092,Vector(List([postcondition.violated:assertion.false] Postcondition of raised_and_declared_4 might not hold. Assertion int___eq__(incon_2.Container_value; __prim__int___box__(-3)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@812.11); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (testsfunctionalverificationtest_exception.py.vpr@922.7); [postcondition.violated:assertion.false] Postcondition of raised_and_caught_3 might not hold. Assertion int___eq__(out_2.Container_value; __prim__int___box__(13)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@1139.11); [postcondition.violated:assertion.false] Postcondition of raised_and_caught_4 might not hold. Assertion int___eq__(out_3.Container_value; __prim__int___box__(39)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@1184.11); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_exception.py.vpr@1369.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_exception.py.vpr@1555.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_exception.py.vpr@1782.5); [postcondition.violated:assertion.false] Postcondition of return_finally_2 might not hold. Assertion int___eq__(out_11.Container_value; __prim__int___box__(1)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@1947.11); [postcondition.violated:assertion.false] Postcondition of double_return_finally_2 might not hold. Assertion int___eq__(_res; __prim__int___box__(15)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2113.11); [postcondition.violated:assertion.false] Postcondition of exception_use_3 might not hold. Assertion bool___unbox__(inp_0) ==> int___eq__(out_16.Container_value; __prim__int___box__(74)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2366.11); [postcondition.violated:assertion.false] Postcondition of finally_declared_2 might not hold. Assertion int___eq__(out_18.Container_value; __prim__int___box__(13)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2513.11); [application.precondition:assertion.false] Precondition of function _checkDefined might not hold. Assertion _isDefined(216349762930) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2586.11); [postcondition.violated:assertion.false] Postcondition of join_paths_2 might not hold. Assertion int___eq__(c_0.Container_value; __prim__int___box__(13)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2647.11); [postcondition.violated:assertion.false] Postcondition of from_catch might not hold. Assertion false might not hold. (testsfunctionalverificationtest_exception.py.vpr@2689.11); [call.precondition:assertion.false] The precondition of method require might not hold. Assertion int___eq__(_checkDefined(c_4; 3432291).Container_value; __prim__int___box__(17)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2856.3)); List([postcondition.violated:assertion.false] Postcondition of raised_and_declared_4 might not hold. Assertion int___eq__(incon_2.Container_value; __prim__int___box__(-3)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@812.11); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (testsfunctionalverificationtest_exception.py.vpr@922.7); [postcondition.violated:assertion.false] Postcondition of raised_and_caught_3 might not hold. Assertion int___eq__(out_2.Container_value; __prim__int___box__(13)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@1139.11); [postcondition.violated:assertion.false] Postcondition of raised_and_caught_4 might not hold. Assertion int___eq__(out_3.Container_value; __prim__int___box__(39)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@1184.11); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_exception.py.vpr@1369.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_exception.py.vpr@1555.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_exception.py.vpr@1782.5); [postcondition.violated:assertion.false] Postcondition of return_finally_2 might not hold. Assertion int___eq__(out_11.Container_value; __prim__int___box__(1)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@1947.11); [postcondition.violated:assertion.false] Postcondition of double_return_finally_2 might not hold. Assertion int___eq__(_res; __prim__int___box__(15)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2113.11); [postcondition.violated:assertion.false] Postcondition of exception_use_3 might not hold. Assertion bool___unbox__(inp_0) ==> int___eq__(out_16.Container_value; __prim__int___box__(74)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2366.11); [postcondition.violated:assertion.false] Postcondition of finally_declared_2 might not hold. Assertion int___eq__(out_18.Container_value; __prim__int___box__(13)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2513.11); [application.precondition:assertion.false] Precondition of function _checkDefined might not hold. Assertion _isDefined(216349762930) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2586.11); [postcondition.violated:assertion.false] Postcondition of join_paths_2 might not hold. Assertion int___eq__(c_0.Container_value; __prim__int___box__(13)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2647.11); [postcondition.violated:assertion.false] Postcondition of from_catch might not hold. Assertion false might not hold. (testsfunctionalverificationtest_exception.py.vpr@2689.11); [call.precondition:assertion.false] The precondition of method require might not hold. Assertion int___eq__(_checkDefined(c_4; 3432291).Container_value; __prim__int___box__(17)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2856.3)); List([postcondition.violated:assertion.false] Postcondition of raised_and_declared_4 might not hold. Assertion int___eq__(incon_2.Container_value; __prim__int___box__(-3)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@812.11); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (testsfunctionalverificationtest_exception.py.vpr@922.7); [postcondition.violated:assertion.false] Postcondition of raised_and_caught_3 might not hold. Assertion int___eq__(out_2.Container_value; __prim__int___box__(13)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@1139.11); [postcondition.violated:assertion.false] Postcondition of raised_and_caught_4 might not hold. Assertion int___eq__(out_3.Container_value; __prim__int___box__(39)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@1184.11); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_exception.py.vpr@1369.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_exception.py.vpr@1555.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_exception.py.vpr@1782.5); [postcondition.violated:assertion.false] Postcondition of return_finally_2 might not hold. Assertion int___eq__(out_11.Container_value; __prim__int___box__(1)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@1947.11); [postcondition.violated:assertion.false] Postcondition of double_return_finally_2 might not hold. Assertion int___eq__(_res; __prim__int___box__(15)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2113.11); [postcondition.violated:assertion.false] Postcondition of exception_use_3 might not hold. Assertion bool___unbox__(inp_0) ==> int___eq__(out_16.Container_value; __prim__int___box__(74)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2366.11); [postcondition.violated:assertion.false] Postcondition of finally_declared_2 might not hold. Assertion int___eq__(out_18.Container_value; __prim__int___box__(13)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2513.11); [application.precondition:assertion.false] Precondition of function _checkDefined might not hold. Assertion _isDefined(216349762930) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2586.11); [postcondition.violated:assertion.false] Postcondition of join_paths_2 might not hold. Assertion int___eq__(c_0.Container_value; __prim__int___box__(13)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2647.11); [postcondition.violated:assertion.false] Postcondition of from_catch might not hold. Assertion false might not hold. (testsfunctionalverificationtest_exception.py.vpr@2689.11); [call.precondition:assertion.false] The precondition of method require might not hold. Assertion int___eq__(_checkDefined(c_4; 3432291).Container_value; __prim__int___box__(17)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2856.3)); List([postcondition.violated:assertion.false] Postcondition of raised_and_declared_4 might not hold. Assertion int___eq__(incon_2.Container_value; __prim__int___box__(-3)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@812.11); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (testsfunctionalverificationtest_exception.py.vpr@922.7); [postcondition.violated:assertion.false] Postcondition of raised_and_caught_3 might not hold. Assertion int___eq__(out_2.Container_value; __prim__int___box__(13)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@1139.11); [postcondition.violated:assertion.false] Postcondition of raised_and_caught_4 might not hold. Assertion int___eq__(out_3.Container_value; __prim__int___box__(39)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@1184.11); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_exception.py.vpr@1369.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_exception.py.vpr@1555.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_exception.py.vpr@1782.5); [postcondition.violated:assertion.false] Postcondition of return_finally_2 might not hold. Assertion int___eq__(out_11.Container_value; __prim__int___box__(1)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@1947.11); [postcondition.violated:assertion.false] Postcondition of double_return_finally_2 might not hold. Assertion int___eq__(_res; __prim__int___box__(15)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2113.11); [postcondition.violated:assertion.false] Postcondition of exception_use_3 might not hold. Assertion bool___unbox__(inp_0) ==> int___eq__(out_16.Container_value; __prim__int___box__(74)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2366.11); [postcondition.violated:assertion.false] Postcondition of finally_declared_2 might not hold. Assertion int___eq__(out_18.Container_value; __prim__int___box__(13)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2513.11); [application.precondition:assertion.false] Precondition of function _checkDefined might not hold. Assertion _isDefined(216349762930) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2586.11); [postcondition.violated:assertion.false] Postcondition of join_paths_2 might not hold. Assertion int___eq__(c_0.Container_value; __prim__int___box__(13)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2647.11); [postcondition.violated:assertion.false] Postcondition of from_catch might not hold. Assertion false might not hold. (testsfunctionalverificationtest_exception.py.vpr@2689.11); [call.precondition:assertion.false] The precondition of method require might not hold. Assertion int___eq__(_checkDefined(c_4; 3432291).Container_value; __prim__int___box__(17)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2856.3)); List([postcondition.violated:assertion.false] Postcondition of raised_and_declared_4 might not hold. Assertion int___eq__(incon_2.Container_value; __prim__int___box__(-3)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@812.11); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (testsfunctionalverificationtest_exception.py.vpr@922.7); [postcondition.violated:assertion.false] Postcondition of raised_and_caught_3 might not hold. Assertion int___eq__(out_2.Container_value; __prim__int___box__(13)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@1139.11); [postcondition.violated:assertion.false] Postcondition of raised_and_caught_4 might not hold. Assertion int___eq__(out_3.Container_value; __prim__int___box__(39)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@1184.11); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_exception.py.vpr@1369.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_exception.py.vpr@1555.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_exception.py.vpr@1782.5); [postcondition.violated:assertion.false] Postcondition of return_finally_2 might not hold. Assertion int___eq__(out_11.Container_value; __prim__int___box__(1)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@1947.11); [postcondition.violated:assertion.false] Postcondition of double_return_finally_2 might not hold. Assertion int___eq__(_res; __prim__int___box__(15)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2113.11); [postcondition.violated:assertion.false] Postcondition of exception_use_3 might not hold. Assertion bool___unbox__(inp_0) ==> int___eq__(out_16.Container_value; __prim__int___box__(74)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2366.11); [postcondition.violated:assertion.false] Postcondition of finally_declared_2 might not hold. Assertion int___eq__(out_18.Container_value; __prim__int___box__(13)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2513.11); [application.precondition:assertion.false] Precondition of function _checkDefined might not hold. Assertion _isDefined(216349762930) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2586.11); [postcondition.violated:assertion.false] Postcondition of join_paths_2 might not hold. Assertion int___eq__(c_0.Container_value; __prim__int___box__(13)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2647.11); [postcondition.violated:assertion.false] Postcondition of from_catch might not hold. Assertion false might not hold. (testsfunctionalverificationtest_exception.py.vpr@2689.11); [call.precondition:assertion.false] The precondition of method require might not hold. Assertion int___eq__(_checkDefined(c_4; 3432291).Container_value; __prim__int___box__(17)) might not hold. (testsfunctionalverificationtest_exception.py.vpr@2856.3)))
../../src/test/resources/frontend-generated/testsfunctionalverificationtest_forall.py.vpr,5,4813,45,0,4750,4839,4852,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forall lambda15_21$i: Ref :: { (lambda15_21$i in range___sil_seq__(_checkDefined(r_0; 3170162))) } issubtype(typeof(lambda15_21$i); int()) ==> (lambda15_21$i in range___sil_seq__(_checkDefined(r_0; 3170162))) ==> int___gt__(int___unbox__(lambda15_21$i); 4)) might not hold. (testsfunctionalverificationtest_forall.py.vpr@622.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall lambda26_21$i: Ref :: { (lambda26_21$i in _checkDefined(r_2; 3301234).list_acc) } issubtype(typeof(lambda26_21$i); int()) ==> (lambda26_21$i in _checkDefined(r_2; 3301234).list_acc) ==> int___gt__(int___unbox__(lambda26_21$i); 4)) might not hold. (testsfunctionalverificationtest_forall.py.vpr@676.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall lambda37_21$i: Ref :: { (lambda37_21$i in _checkDefined(r_4; 3432306).set_acc) } issubtype(typeof(lambda37_21$i); int()) ==> (lambda37_21$i in _checkDefined(r_4; 3432306).set_acc) ==> int___gt__(int___unbox__(lambda37_21$i); 4)) might not hold. (testsfunctionalverificationtest_forall.py.vpr@730.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall lambda48_21$i: Ref :: { (lambda48_21$i in _checkDefined(r_6; 3563378).dict_acc) } issubtype(typeof(lambda48_21$i); int()) ==> (lambda48_21$i in _checkDefined(r_6; 3563378).dict_acc) ==> int___gt__(int___unbox__(lambda48_21$i); 4)) might not hold. (testsfunctionalverificationtest_forall.py.vpr@782.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall lambda59_23$i: Ref :: { issubtype(typeof(lambda59_23$i); int()) } issubtype(typeof(lambda59_23$i); int()) ==> issubtype(typeof(lambda59_23$i); int()) ==> int___ge__(int___unbox__(lambda59_23$i); 0) && int___lt__(int___unbox__(lambda59_23$i); list___len__(_checkDefined(r_8; 3694450))) ==> int___gt__(int___unbox__(list___getitem__(_checkDefined(r_8; 3694450); lambda59_23$i)); 3)) might not hold. (testsfunctionalverificationtest_forall.py.vpr@836.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall lambda15_21$i: Ref :: { (lambda15_21$i in range___sil_seq__(_checkDefined(r_0; 3170162))) } issubtype(typeof(lambda15_21$i); int()) ==> (lambda15_21$i in range___sil_seq__(_checkDefined(r_0; 3170162))) ==> int___gt__(int___unbox__(lambda15_21$i); 4)) might not hold. (testsfunctionalverificationtest_forall.py.vpr@622.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall lambda26_21$i: Ref :: { (lambda26_21$i in _checkDefined(r_2; 3301234).list_acc) } issubtype(typeof(lambda26_21$i); int()) ==> (lambda26_21$i in _checkDefined(r_2; 3301234).list_acc) ==> int___gt__(int___unbox__(lambda26_21$i); 4)) might not hold. (testsfunctionalverificationtest_forall.py.vpr@676.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall lambda37_21$i: Ref :: { (lambda37_21$i in _checkDefined(r_4; 3432306).set_acc) } issubtype(typeof(lambda37_21$i); int()) ==> (lambda37_21$i in _checkDefined(r_4; 3432306).set_acc) ==> int___gt__(int___unbox__(lambda37_21$i); 4)) might not hold. (testsfunctionalverificationtest_forall.py.vpr@730.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall lambda48_21$i: Ref :: { (lambda48_21$i in _checkDefined(r_6; 3563378).dict_acc) } issubtype(typeof(lambda48_21$i); int()) ==> (lambda48_21$i in _checkDefined(r_6; 3563378).dict_acc) ==> int___gt__(int___unbox__(lambda48_21$i); 4)) might not hold. (testsfunctionalverificationtest_forall.py.vpr@782.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall lambda59_23$i: Ref :: { issubtype(typeof(lambda59_23$i); int()) } issubtype(typeof(lambda59_23$i); int()) ==> issubtype(typeof(lambda59_23$i); int()) ==> int___ge__(int___unbox__(lambda59_23$i); 0) && int___lt__(int___unbox__(lambda59_23$i); list___len__(_checkDefined(r_8; 3694450))) ==> int___gt__(int___unbox__(list___getitem__(_checkDefined(r_8; 3694450); lambda59_23$i)); 3)) might not hold. (testsfunctionalverificationtest_forall.py.vpr@836.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall lambda15_21$i: Ref :: { (lambda15_21$i in range___sil_seq__(_checkDefined(r_0; 3170162))) } issubtype(typeof(lambda15_21$i); int()) ==> (lambda15_21$i in range___sil_seq__(_checkDefined(r_0; 3170162))) ==> int___gt__(int___unbox__(lambda15_21$i); 4)) might not hold. (testsfunctionalverificationtest_forall.py.vpr@622.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall lambda26_21$i: Ref :: { (lambda26_21$i in _checkDefined(r_2; 3301234).list_acc) } issubtype(typeof(lambda26_21$i); int()) ==> (lambda26_21$i in _checkDefined(r_2; 3301234).list_acc) ==> int___gt__(int___unbox__(lambda26_21$i); 4)) might not hold. (testsfunctionalverificationtest_forall.py.vpr@676.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall lambda37_21$i: Ref :: { (lambda37_21$i in _checkDefined(r_4; 3432306).set_acc) } issubtype(typeof(lambda37_21$i); int()) ==> (lambda37_21$i in _checkDefined(r_4; 3432306).set_acc) ==> int___gt__(int___unbox__(lambda37_21$i); 4)) might not hold. (testsfunctionalverificationtest_forall.py.vpr@730.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall lambda48_21$i: Ref :: { (lambda48_21$i in _checkDefined(r_6; 3563378).dict_acc) } issubtype(typeof(lambda48_21$i); int()) ==> (lambda48_21$i in _checkDefined(r_6; 3563378).dict_acc) ==> int___gt__(int___unbox__(lambda48_21$i); 4)) might not hold. (testsfunctionalverificationtest_forall.py.vpr@782.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall lambda59_23$i: Ref :: { issubtype(typeof(lambda59_23$i); int()) } issubtype(typeof(lambda59_23$i); int()) ==> issubtype(typeof(lambda59_23$i); int()) ==> int___ge__(int___unbox__(lambda59_23$i); 0) && int___lt__(int___unbox__(lambda59_23$i); list___len__(_checkDefined(r_8; 3694450))) ==> int___gt__(int___unbox__(list___getitem__(_checkDefined(r_8; 3694450); lambda59_23$i)); 3)) might not hold. (testsfunctionalverificationtest_forall.py.vpr@836.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall lambda15_21$i: Ref :: { (lambda15_21$i in range___sil_seq__(_checkDefined(r_0; 3170162))) } issubtype(typeof(lambda15_21$i); int()) ==> (lambda15_21$i in range___sil_seq__(_checkDefined(r_0; 3170162))) ==> int___gt__(int___unbox__(lambda15_21$i); 4)) might not hold. (testsfunctionalverificationtest_forall.py.vpr@622.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall lambda26_21$i: Ref :: { (lambda26_21$i in _checkDefined(r_2; 3301234).list_acc) } issubtype(typeof(lambda26_21$i); int()) ==> (lambda26_21$i in _checkDefined(r_2; 3301234).list_acc) ==> int___gt__(int___unbox__(lambda26_21$i); 4)) might not hold. (testsfunctionalverificationtest_forall.py.vpr@676.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall lambda37_21$i: Ref :: { (lambda37_21$i in _checkDefined(r_4; 3432306).set_acc) } issubtype(typeof(lambda37_21$i); int()) ==> (lambda37_21$i in _checkDefined(r_4; 3432306).set_acc) ==> int___gt__(int___unbox__(lambda37_21$i); 4)) might not hold. (testsfunctionalverificationtest_forall.py.vpr@730.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall lambda48_21$i: Ref :: { (lambda48_21$i in _checkDefined(r_6; 3563378).dict_acc) } issubtype(typeof(lambda48_21$i); int()) ==> (lambda48_21$i in _checkDefined(r_6; 3563378).dict_acc) ==> int___gt__(int___unbox__(lambda48_21$i); 4)) might not hold. (testsfunctionalverificationtest_forall.py.vpr@782.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall lambda59_23$i: Ref :: { issubtype(typeof(lambda59_23$i); int()) } issubtype(typeof(lambda59_23$i); int()) ==> issubtype(typeof(lambda59_23$i); int()) ==> int___ge__(int___unbox__(lambda59_23$i); 0) && int___lt__(int___unbox__(lambda59_23$i); list___len__(_checkDefined(r_8; 3694450))) ==> int___gt__(int___unbox__(list___getitem__(_checkDefined(r_8; 3694450); lambda59_23$i)); 3)) might not hold. (testsfunctionalverificationtest_forall.py.vpr@836.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall lambda15_21$i: Ref :: { (lambda15_21$i in range___sil_seq__(_checkDefined(r_0; 3170162))) } issubtype(typeof(lambda15_21$i); int()) ==> (lambda15_21$i in range___sil_seq__(_checkDefined(r_0; 3170162))) ==> int___gt__(int___unbox__(lambda15_21$i); 4)) might not hold. (testsfunctionalverificationtest_forall.py.vpr@622.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall lambda26_21$i: Ref :: { (lambda26_21$i in _checkDefined(r_2; 3301234).list_acc) } issubtype(typeof(lambda26_21$i); int()) ==> (lambda26_21$i in _checkDefined(r_2; 3301234).list_acc) ==> int___gt__(int___unbox__(lambda26_21$i); 4)) might not hold. (testsfunctionalverificationtest_forall.py.vpr@676.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall lambda37_21$i: Ref :: { (lambda37_21$i in _checkDefined(r_4; 3432306).set_acc) } issubtype(typeof(lambda37_21$i); int()) ==> (lambda37_21$i in _checkDefined(r_4; 3432306).set_acc) ==> int___gt__(int___unbox__(lambda37_21$i); 4)) might not hold. (testsfunctionalverificationtest_forall.py.vpr@730.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall lambda48_21$i: Ref :: { (lambda48_21$i in _checkDefined(r_6; 3563378).dict_acc) } issubtype(typeof(lambda48_21$i); int()) ==> (lambda48_21$i in _checkDefined(r_6; 3563378).dict_acc) ==> int___gt__(int___unbox__(lambda48_21$i); 4)) might not hold. (testsfunctionalverificationtest_forall.py.vpr@782.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall lambda59_23$i: Ref :: { issubtype(typeof(lambda59_23$i); int()) } issubtype(typeof(lambda59_23$i); int()) ==> issubtype(typeof(lambda59_23$i); int()) ==> int___ge__(int___unbox__(lambda59_23$i); 0) && int___lt__(int___unbox__(lambda59_23$i); list___len__(_checkDefined(r_8; 3694450))) ==> int___gt__(int___unbox__(list___getitem__(_checkDefined(r_8; 3694450); lambda59_23$i)); 3)) might not hold. (testsfunctionalverificationtest_forall.py.vpr@836.3)))
../../src/test/resources/frontend-generated/testsfunctionalverificationtest_funcs_and_methods.py.vpr,5,3988,32,0,3944,4003,4019,Vector(List([postcondition.violated:assertion.false] Postcondition of func1 might not hold. Assertion int___eq__(result; __prim__int___box__(32)) might not hold. (testsfunctionalverificationtest_funcs_and_methods.py.vpr@448.11); [postcondition.violated:assertion.false] Postcondition of func3 might not hold. Assertion bool___eq__(result; __prim__bool___box__(!int___eq__(x_0; y))) might not hold. (testsfunctionalverificationtest_funcs_and_methods.py.vpr@467.11); [postcondition.violated:assertion.false] Postcondition of func_wrong might not hold. Assertion int___le__(int___unbox__(b_2); 2) && int___gt__(int___add__(int___unbox__(b_2); int___unbox__(c_0)); 2) ==> int___eq__(result; __prim__int___box__(int___add__(int___add__(int___unbox__(b_2); int___unbox__(c_0)); 6))) might not hold. (testsfunctionalverificationtest_funcs_and_methods.py.vpr@488.11); [postcondition.violated:assertion.false] Postcondition of func_2_wrong might not hold. Assertion int___le__(int___unbox__(b_4); 2) && int___gt__(int___add__(int___unbox__(b_4); int___unbox__(c_2)); 2) ==> int___eq__(result; __prim__int___box__(int___add__(int___add__(int___unbox__(b_4); int___unbox__(c_2)); 6))) might not hold. (testsfunctionalverificationtest_funcs_and_methods.py.vpr@509.11); [postcondition.violated:assertion.false] Postcondition of method1 might not hold. Assertion int___eq__(_res; __prim__int___box__(32)) might not hold. (testsfunctionalverificationtest_funcs_and_methods.py.vpr@614.11)); List([postcondition.violated:assertion.false] Postcondition of func1 might not hold. Assertion int___eq__(result; __prim__int___box__(32)) might not hold. (testsfunctionalverificationtest_funcs_and_methods.py.vpr@448.11); [postcondition.violated:assertion.false] Postcondition of func3 might not hold. Assertion bool___eq__(result; __prim__bool___box__(!int___eq__(x_0; y))) might not hold. (testsfunctionalverificationtest_funcs_and_methods.py.vpr@467.11); [postcondition.violated:assertion.false] Postcondition of func_wrong might not hold. Assertion int___le__(int___unbox__(b_2); 2) && int___gt__(int___add__(int___unbox__(b_2); int___unbox__(c_0)); 2) ==> int___eq__(result; __prim__int___box__(int___add__(int___add__(int___unbox__(b_2); int___unbox__(c_0)); 6))) might not hold. (testsfunctionalverificationtest_funcs_and_methods.py.vpr@488.11); [postcondition.violated:assertion.false] Postcondition of func_2_wrong might not hold. Assertion int___le__(int___unbox__(b_4); 2) && int___gt__(int___add__(int___unbox__(b_4); int___unbox__(c_2)); 2) ==> int___eq__(result; __prim__int___box__(int___add__(int___add__(int___unbox__(b_4); int___unbox__(c_2)); 6))) might not hold. (testsfunctionalverificationtest_funcs_and_methods.py.vpr@509.11); [postcondition.violated:assertion.false] Postcondition of method1 might not hold. Assertion int___eq__(_res; __prim__int___box__(32)) might not hold. (testsfunctionalverificationtest_funcs_and_methods.py.vpr@614.11)); List([postcondition.violated:assertion.false] Postcondition of func1 might not hold. Assertion int___eq__(result; __prim__int___box__(32)) might not hold. (testsfunctionalverificationtest_funcs_and_methods.py.vpr@448.11); [postcondition.violated:assertion.false] Postcondition of func3 might not hold. Assertion bool___eq__(result; __prim__bool___box__(!int___eq__(x_0; y))) might not hold. (testsfunctionalverificationtest_funcs_and_methods.py.vpr@467.11); [postcondition.violated:assertion.false] Postcondition of func_wrong might not hold. Assertion int___le__(int___unbox__(b_2); 2) && int___gt__(int___add__(int___unbox__(b_2); int___unbox__(c_0)); 2) ==> int___eq__(result; __prim__int___box__(int___add__(int___add__(int___unbox__(b_2); int___unbox__(c_0)); 6))) might not hold. (testsfunctionalverificationtest_funcs_and_methods.py.vpr@488.11); [postcondition.violated:assertion.false] Postcondition of func_2_wrong might not hold. Assertion int___le__(int___unbox__(b_4); 2) && int___gt__(int___add__(int___unbox__(b_4); int___unbox__(c_2)); 2) ==> int___eq__(result; __prim__int___box__(int___add__(int___add__(int___unbox__(b_4); int___unbox__(c_2)); 6))) might not hold. (testsfunctionalverificationtest_funcs_and_methods.py.vpr@509.11); [postcondition.violated:assertion.false] Postcondition of method1 might not hold. Assertion int___eq__(_res; __prim__int___box__(32)) might not hold. (testsfunctionalverificationtest_funcs_and_methods.py.vpr@614.11)); List([postcondition.violated:assertion.false] Postcondition of func1 might not hold. Assertion int___eq__(result; __prim__int___box__(32)) might not hold. (testsfunctionalverificationtest_funcs_and_methods.py.vpr@448.11); [postcondition.violated:assertion.false] Postcondition of func3 might not hold. Assertion bool___eq__(result; __prim__bool___box__(!int___eq__(x_0; y))) might not hold. (testsfunctionalverificationtest_funcs_and_methods.py.vpr@467.11); [postcondition.violated:assertion.false] Postcondition of func_wrong might not hold. Assertion int___le__(int___unbox__(b_2); 2) && int___gt__(int___add__(int___unbox__(b_2); int___unbox__(c_0)); 2) ==> int___eq__(result; __prim__int___box__(int___add__(int___add__(int___unbox__(b_2); int___unbox__(c_0)); 6))) might not hold. (testsfunctionalverificationtest_funcs_and_methods.py.vpr@488.11); [postcondition.violated:assertion.false] Postcondition of func_2_wrong might not hold. Assertion int___le__(int___unbox__(b_4); 2) && int___gt__(int___add__(int___unbox__(b_4); int___unbox__(c_2)); 2) ==> int___eq__(result; __prim__int___box__(int___add__(int___add__(int___unbox__(b_4); int___unbox__(c_2)); 6))) might not hold. (testsfunctionalverificationtest_funcs_and_methods.py.vpr@509.11); [postcondition.violated:assertion.false] Postcondition of method1 might not hold. Assertion int___eq__(_res; __prim__int___box__(32)) might not hold. (testsfunctionalverificationtest_funcs_and_methods.py.vpr@614.11)); List([postcondition.violated:assertion.false] Postcondition of func1 might not hold. Assertion int___eq__(result; __prim__int___box__(32)) might not hold. (testsfunctionalverificationtest_funcs_and_methods.py.vpr@448.11); [postcondition.violated:assertion.false] Postcondition of func3 might not hold. Assertion bool___eq__(result; __prim__bool___box__(!int___eq__(x_0; y))) might not hold. (testsfunctionalverificationtest_funcs_and_methods.py.vpr@467.11); [postcondition.violated:assertion.false] Postcondition of func_wrong might not hold. Assertion int___le__(int___unbox__(b_2); 2) && int___gt__(int___add__(int___unbox__(b_2); int___unbox__(c_0)); 2) ==> int___eq__(result; __prim__int___box__(int___add__(int___add__(int___unbox__(b_2); int___unbox__(c_0)); 6))) might not hold. (testsfunctionalverificationtest_funcs_and_methods.py.vpr@488.11); [postcondition.violated:assertion.false] Postcondition of func_2_wrong might not hold. Assertion int___le__(int___unbox__(b_4); 2) && int___gt__(int___add__(int___unbox__(b_4); int___unbox__(c_2)); 2) ==> int___eq__(result; __prim__int___box__(int___add__(int___add__(int___unbox__(b_4); int___unbox__(c_2)); 6))) might not hold. (testsfunctionalverificationtest_funcs_and_methods.py.vpr@509.11); [postcondition.violated:assertion.false] Postcondition of method1 might not hold. Assertion int___eq__(_res; __prim__int___box__(32)) might not hold. (testsfunctionalverificationtest_funcs_and_methods.py.vpr@614.11)))
../../src/test/resources/frontend-generated/testsfunctionalverificationtest_generic_methods.py.vpr,4,3950,51,1,3900,3930,4022,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_generic_methods.py.vpr@667.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_generic_methods.py.vpr@746.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_generic_methods.py.vpr@825.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_generic_methods.py.vpr@871.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_generic_methods.py.vpr@667.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_generic_methods.py.vpr@746.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_generic_methods.py.vpr@825.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_generic_methods.py.vpr@871.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_generic_methods.py.vpr@667.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_generic_methods.py.vpr@746.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_generic_methods.py.vpr@825.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_generic_methods.py.vpr@871.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_generic_methods.py.vpr@667.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_generic_methods.py.vpr@746.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_generic_methods.py.vpr@825.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_generic_methods.py.vpr@871.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_generic_methods.py.vpr@667.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_generic_methods.py.vpr@746.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_generic_methods.py.vpr@825.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_generic_methods.py.vpr@871.3)))
../../src/test/resources/frontend-generated/testsfunctionalverificationtest_iterator_set.py.vpr,3,9384,92,0,9310,9328,9515,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_iterator_set.py.vpr@753.5); [call.precondition:insufficient.permission] The precondition of method set_add might not hold. There might be insufficient permission to access _checkDefined(a_1; 3235681).set_acc. (testsfunctionalverificationtest_iterator_set.py.vpr@873.5); [invariant.not.preserved:assertion.false] Loop invariant int___eq__(__prim__int___box__(list___len__(_checkDefined(to_fill_0; 892319705469091278708))); __prim__int___box__(PSeq___len__(PSeq___create__(iter_3.__previous; set(int()))))) might not be preserved. Assertion int___eq__(__prim__int___box__(list___len__(_checkDefined(to_fill_0; 892319705469091278708))); __prim__int___box__(PSeq___len__(PSeq___create__(iter_3.__previous; set(int()))))) might not hold. (testsfunctionalverificationtest_iterator_set.py.vpr@1101.15)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_iterator_set.py.vpr@753.5); [call.precondition:insufficient.permission] The precondition of method set_add might not hold. There might be insufficient permission to access _checkDefined(a_1; 3235681).set_acc. (testsfunctionalverificationtest_iterator_set.py.vpr@873.5); [invariant.not.preserved:assertion.false] Loop invariant int___eq__(__prim__int___box__(list___len__(_checkDefined(to_fill_0; 892319705469091278708))); __prim__int___box__(PSeq___len__(PSeq___create__(iter_3.__previous; set(int()))))) might not be preserved. Assertion int___eq__(__prim__int___box__(list___len__(_checkDefined(to_fill_0; 892319705469091278708))); __prim__int___box__(PSeq___len__(PSeq___create__(iter_3.__previous; set(int()))))) might not hold. (testsfunctionalverificationtest_iterator_set.py.vpr@1101.15)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_iterator_set.py.vpr@753.5); [call.precondition:insufficient.permission] The precondition of method set_add might not hold. There might be insufficient permission to access _checkDefined(a_1; 3235681).set_acc. (testsfunctionalverificationtest_iterator_set.py.vpr@873.5); [invariant.not.preserved:assertion.false] Loop invariant int___eq__(__prim__int___box__(list___len__(_checkDefined(to_fill_0; 892319705469091278708))); __prim__int___box__(PSeq___len__(PSeq___create__(iter_3.__previous; set(int()))))) might not be preserved. Assertion int___eq__(__prim__int___box__(list___len__(_checkDefined(to_fill_0; 892319705469091278708))); __prim__int___box__(PSeq___len__(PSeq___create__(iter_3.__previous; set(int()))))) might not hold. (testsfunctionalverificationtest_iterator_set.py.vpr@1101.15)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_iterator_set.py.vpr@753.5); [call.precondition:insufficient.permission] The precondition of method set_add might not hold. There might be insufficient permission to access _checkDefined(a_1; 3235681).set_acc. (testsfunctionalverificationtest_iterator_set.py.vpr@873.5); [invariant.not.preserved:assertion.false] Loop invariant int___eq__(__prim__int___box__(list___len__(_checkDefined(to_fill_0; 892319705469091278708))); __prim__int___box__(PSeq___len__(PSeq___create__(iter_3.__previous; set(int()))))) might not be preserved. Assertion int___eq__(__prim__int___box__(list___len__(_checkDefined(to_fill_0; 892319705469091278708))); __prim__int___box__(PSeq___len__(PSeq___create__(iter_3.__previous; set(int()))))) might not hold. (testsfunctionalverificationtest_iterator_set.py.vpr@1101.15)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testsfunctionalverificationtest_iterator_set.py.vpr@753.5); [call.precondition:insufficient.permission] The precondition of method set_add might not hold. There might be insufficient permission to access _checkDefined(a_1; 3235681).set_acc. (testsfunctionalverificationtest_iterator_set.py.vpr@873.5); [invariant.not.preserved:assertion.false] Loop invariant int___eq__(__prim__int___box__(list___len__(_checkDefined(to_fill_0; 892319705469091278708))); __prim__int___box__(PSeq___len__(PSeq___create__(iter_3.__previous; set(int()))))) might not be preserved. Assertion int___eq__(__prim__int___box__(list___len__(_checkDefined(to_fill_0; 892319705469091278708))); __prim__int___box__(PSeq___len__(PSeq___create__(iter_3.__previous; set(int()))))) might not hold. (testsfunctionalverificationtest_iterator_set.py.vpr@1101.15)))
../../src/test/resources/frontend-generated/testsobligationsverificationchalice2silverchristianobl_loop.py.vpr,5,6345,66,1,6287,6311,6439,Vector(List([invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(x_0; 3170168)); 5) || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(x_0; 3170168)); 5) || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverchristianobl_loop.py.vpr@662.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_4 ==> _loop_termination_flag_4 || (!int___lt__(int___unbox__(_checkDefined(y; 121)); 5) || perm(MustTerminate(_cthread_162)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_4 ==> _loop_termination_flag_4 || (!int___lt__(int___unbox__(_checkDefined(y; 121)); 5) || perm(MustTerminate(_cthread_162)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverchristianobl_loop.py.vpr@923.17); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_6 ==> _loop_termination_flag_6 || (!int___lt__(int___unbox__(_checkDefined(y_0; 3170169)); 5) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_6 ==> _loop_termination_flag_6 || (!int___lt__(int___unbox__(_checkDefined(y_0; 3170169)); 5) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverchristianobl_loop.py.vpr@1016.17); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_12 ==> _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(y_3; 3366777)); 5) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_12 ==> _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(y_3; 3366777)); 5) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverchristianobl_loop.py.vpr@1305.17); [postcondition.violated:insufficient.permission] Postcondition of A_nested4_convert_reject might not hold. There might be insufficient permission to access self_11.A_x.MustReleaseUnbounded. (testsobligationsverificationchalice2silverchristianobl_loop.py.vpr@1446.11)); List([invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(x_0; 3170168)); 5) || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(x_0; 3170168)); 5) || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverchristianobl_loop.py.vpr@662.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_4 ==> _loop_termination_flag_4 || (!int___lt__(int___unbox__(_checkDefined(y; 121)); 5) || perm(MustTerminate(_cthread_162)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_4 ==> _loop_termination_flag_4 || (!int___lt__(int___unbox__(_checkDefined(y; 121)); 5) || perm(MustTerminate(_cthread_162)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverchristianobl_loop.py.vpr@923.17); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_6 ==> _loop_termination_flag_6 || (!int___lt__(int___unbox__(_checkDefined(y_0; 3170169)); 5) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_6 ==> _loop_termination_flag_6 || (!int___lt__(int___unbox__(_checkDefined(y_0; 3170169)); 5) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverchristianobl_loop.py.vpr@1016.17); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_12 ==> _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(y_3; 3366777)); 5) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_12 ==> _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(y_3; 3366777)); 5) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverchristianobl_loop.py.vpr@1305.17); [postcondition.violated:insufficient.permission] Postcondition of A_nested4_convert_reject might not hold. There might be insufficient permission to access self_11.A_x.MustReleaseUnbounded. (testsobligationsverificationchalice2silverchristianobl_loop.py.vpr@1446.11)); List([invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(x_0; 3170168)); 5) || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(x_0; 3170168)); 5) || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverchristianobl_loop.py.vpr@662.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_4 ==> _loop_termination_flag_4 || (!int___lt__(int___unbox__(_checkDefined(y; 121)); 5) || perm(MustTerminate(_cthread_162)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_4 ==> _loop_termination_flag_4 || (!int___lt__(int___unbox__(_checkDefined(y; 121)); 5) || perm(MustTerminate(_cthread_162)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverchristianobl_loop.py.vpr@923.17); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_6 ==> _loop_termination_flag_6 || (!int___lt__(int___unbox__(_checkDefined(y_0; 3170169)); 5) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_6 ==> _loop_termination_flag_6 || (!int___lt__(int___unbox__(_checkDefined(y_0; 3170169)); 5) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverchristianobl_loop.py.vpr@1016.17); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_12 ==> _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(y_3; 3366777)); 5) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_12 ==> _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(y_3; 3366777)); 5) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverchristianobl_loop.py.vpr@1305.17); [postcondition.violated:insufficient.permission] Postcondition of A_nested4_convert_reject might not hold. There might be insufficient permission to access self_11.A_x.MustReleaseUnbounded. (testsobligationsverificationchalice2silverchristianobl_loop.py.vpr@1446.11)); List([invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(x_0; 3170168)); 5) || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(x_0; 3170168)); 5) || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverchristianobl_loop.py.vpr@662.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_4 ==> _loop_termination_flag_4 || (!int___lt__(int___unbox__(_checkDefined(y; 121)); 5) || perm(MustTerminate(_cthread_162)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_4 ==> _loop_termination_flag_4 || (!int___lt__(int___unbox__(_checkDefined(y; 121)); 5) || perm(MustTerminate(_cthread_162)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverchristianobl_loop.py.vpr@923.17); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_6 ==> _loop_termination_flag_6 || (!int___lt__(int___unbox__(_checkDefined(y_0; 3170169)); 5) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_6 ==> _loop_termination_flag_6 || (!int___lt__(int___unbox__(_checkDefined(y_0; 3170169)); 5) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverchristianobl_loop.py.vpr@1016.17); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_12 ==> _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(y_3; 3366777)); 5) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_12 ==> _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(y_3; 3366777)); 5) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverchristianobl_loop.py.vpr@1305.17); [postcondition.violated:insufficient.permission] Postcondition of A_nested4_convert_reject might not hold. There might be insufficient permission to access self_11.A_x.MustReleaseUnbounded. (testsobligationsverificationchalice2silverchristianobl_loop.py.vpr@1446.11)); List([invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(x_0; 3170168)); 5) || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(x_0; 3170168)); 5) || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverchristianobl_loop.py.vpr@662.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_4 ==> _loop_termination_flag_4 || (!int___lt__(int___unbox__(_checkDefined(y; 121)); 5) || perm(MustTerminate(_cthread_162)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_4 ==> _loop_termination_flag_4 || (!int___lt__(int___unbox__(_checkDefined(y; 121)); 5) || perm(MustTerminate(_cthread_162)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverchristianobl_loop.py.vpr@923.17); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_6 ==> _loop_termination_flag_6 || (!int___lt__(int___unbox__(_checkDefined(y_0; 3170169)); 5) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_6 ==> _loop_termination_flag_6 || (!int___lt__(int___unbox__(_checkDefined(y_0; 3170169)); 5) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverchristianobl_loop.py.vpr@1016.17); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_12 ==> _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(y_3; 3366777)); 5) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_12 ==> _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(y_3; 3366777)); 5) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_52: Ref [MustInvokeBounded(_r_52)] :: false) && ((forperm _r_52: Ref [MustInvokeUnbounded(_r_52)] :: false) && ((forperm _r_52: Ref [_r_52.MustReleaseBounded] :: false) && (forperm _r_52: Ref [_r_52.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverchristianobl_loop.py.vpr@1305.17); [postcondition.violated:insufficient.permission] Postcondition of A_nested4_convert_reject might not hold. There might be insufficient permission to access self_11.A_x.MustReleaseUnbounded. (testsobligationsverificationchalice2silverchristianobl_loop.py.vpr@1446.11)))
../../src/test/resources/frontend-generated/testsobligationsverificationchalice2silverissueschalice2silver-83.py.vpr,1,3020,5,0,3015,3017,3028,Vector(List([invariant.not.preserved:insufficient.permission] Loop invariant [acc(l_2.MustReleaseBounded; write); (_loop_check_before ? (perm(l_2.MustReleaseBounded) > none ? acc(l_2.MustReleaseBounded; write) : acc(l_2.MustReleaseUnbounded; write)) : (perm(l_2.MustReleaseBounded) > none && Measure$check(_loop_measures; l_2; 1) ? acc(l_2.MustReleaseBounded; write) : acc(l_2.MustReleaseUnbounded; write)))] might not be preserved. There might be insufficient permission to access l_2.MustReleaseUnbounded. (testsobligationsverificationchalice2silverissueschalice2silver-83.py.vpr@587.15)); List([invariant.not.preserved:insufficient.permission] Loop invariant [acc(l_2.MustReleaseBounded; write); (_loop_check_before ? (perm(l_2.MustReleaseBounded) > none ? acc(l_2.MustReleaseBounded; write) : acc(l_2.MustReleaseUnbounded; write)) : (perm(l_2.MustReleaseBounded) > none && Measure$check(_loop_measures; l_2; 1) ? acc(l_2.MustReleaseBounded; write) : acc(l_2.MustReleaseUnbounded; write)))] might not be preserved. There might be insufficient permission to access l_2.MustReleaseUnbounded. (testsobligationsverificationchalice2silverissueschalice2silver-83.py.vpr@587.15)); List([invariant.not.preserved:insufficient.permission] Loop invariant [acc(l_2.MustReleaseBounded; write); (_loop_check_before ? (perm(l_2.MustReleaseBounded) > none ? acc(l_2.MustReleaseBounded; write) : acc(l_2.MustReleaseUnbounded; write)) : (perm(l_2.MustReleaseBounded) > none && Measure$check(_loop_measures; l_2; 1) ? acc(l_2.MustReleaseBounded; write) : acc(l_2.MustReleaseUnbounded; write)))] might not be preserved. There might be insufficient permission to access l_2.MustReleaseUnbounded. (testsobligationsverificationchalice2silverissueschalice2silver-83.py.vpr@587.15)); List([invariant.not.preserved:insufficient.permission] Loop invariant [acc(l_2.MustReleaseBounded; write); (_loop_check_before ? (perm(l_2.MustReleaseBounded) > none ? acc(l_2.MustReleaseBounded; write) : acc(l_2.MustReleaseUnbounded; write)) : (perm(l_2.MustReleaseBounded) > none && Measure$check(_loop_measures; l_2; 1) ? acc(l_2.MustReleaseBounded; write) : acc(l_2.MustReleaseUnbounded; write)))] might not be preserved. There might be insufficient permission to access l_2.MustReleaseUnbounded. (testsobligationsverificationchalice2silverissueschalice2silver-83.py.vpr@587.15)); List([invariant.not.preserved:insufficient.permission] Loop invariant [acc(l_2.MustReleaseBounded; write); (_loop_check_before ? (perm(l_2.MustReleaseBounded) > none ? acc(l_2.MustReleaseBounded; write) : acc(l_2.MustReleaseUnbounded; write)) : (perm(l_2.MustReleaseBounded) > none && Measure$check(_loop_measures; l_2; 1) ? acc(l_2.MustReleaseBounded; write) : acc(l_2.MustReleaseUnbounded; write)))] might not be preserved. There might be insufficient permission to access l_2.MustReleaseUnbounded. (testsobligationsverificationchalice2silverissueschalice2silver-83.py.vpr@587.15)))
../../src/test/resources/frontend-generated/testsobligationsverificationchalice2silverloopsAndTermination.py.vpr,5,4666,8,0,4655,4668,4675,Vector(List([invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_0 ==> _loop_termination_flag_0 || (!true || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_14: Ref [MustInvokeBounded(_r_14)] :: false) && ((forperm _r_14: Ref [MustInvokeUnbounded(_r_14)] :: false) && ((forperm _r_14: Ref [_r_14.MustReleaseBounded] :: false) && (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_0 ==> _loop_termination_flag_0 || (!true || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_14: Ref [MustInvokeBounded(_r_14)] :: false) && ((forperm _r_14: Ref [MustInvokeUnbounded(_r_14)] :: false) && ((forperm _r_14: Ref [_r_14.MustReleaseBounded] :: false) && (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverloopsAndTermination.py.vpr@643.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_3 ==> _loop_termination_flag_3 || (!int___lt__(int___unbox__(_checkDefined(i_1; 3235689)); int___unbox__(_checkDefined(n_2; 3301230))) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_29: Ref [MustInvokeBounded(_r_29)] :: false) && ((forperm _r_29: Ref [MustInvokeUnbounded(_r_29)] :: false) && ((forperm _r_29: Ref [_r_29.MustReleaseBounded] :: false) && (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_3 ==> _loop_termination_flag_3 || (!int___lt__(int___unbox__(_checkDefined(i_1; 3235689)); int___unbox__(_checkDefined(n_2; 3301230))) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_29: Ref [MustInvokeBounded(_r_29)] :: false) && ((forperm _r_29: Ref [MustInvokeUnbounded(_r_29)] :: false) && ((forperm _r_29: Ref [_r_29.MustReleaseBounded] :: false) && (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverloopsAndTermination.py.vpr@801.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_5 ==> _loop_termination_flag_5 || (!int___lt__(int___unbox__(_checkDefined(j; 106)); int___unbox__(_checkDefined(n_3; 3366766))) || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_34: Ref [MustInvokeBounded(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBounded] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_5 ==> _loop_termination_flag_5 || (!int___lt__(int___unbox__(_checkDefined(j; 106)); int___unbox__(_checkDefined(n_3; 3366766))) || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_34: Ref [MustInvokeBounded(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBounded] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverloopsAndTermination.py.vpr@879.17); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_8 ==> _loop_termination_flag_8 || (!int___lt__(int___unbox__(_checkDefined(i_4; 3432297)); int___unbox__(_checkDefined(n_5; 3497838))) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_50: Ref [MustInvokeBounded(_r_50)] :: false) && ((forperm _r_50: Ref [MustInvokeUnbounded(_r_50)] :: false) && ((forperm _r_50: Ref [_r_50.MustReleaseBounded] :: false) && (forperm _r_50: Ref [_r_50.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_8 ==> _loop_termination_flag_8 || (!int___lt__(int___unbox__(_checkDefined(i_4; 3432297)); int___unbox__(_checkDefined(n_5; 3497838))) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_50: Ref [MustInvokeBounded(_r_50)] :: false) && ((forperm _r_50: Ref [MustInvokeUnbounded(_r_50)] :: false) && ((forperm _r_50: Ref [_r_50.MustReleaseBounded] :: false) && (forperm _r_50: Ref [_r_50.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverloopsAndTermination.py.vpr@1035.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_10 ==> _loop_termination_flag_10 || (!int___lt__(int___unbox__(_checkDefined(i_5; 3497833)); int___unbox__(_checkDefined(n_6; 3563374))) || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_57: Ref [MustInvokeBounded(_r_57)] :: false) && ((forperm _r_57: Ref [MustInvokeUnbounded(_r_57)] :: false) && ((forperm _r_57: Ref [_r_57.MustReleaseBounded] :: false) && (forperm _r_57: Ref [_r_57.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_10 ==> _loop_termination_flag_10 || (!int___lt__(int___unbox__(_checkDefined(i_5; 3497833)); int___unbox__(_checkDefined(n_6; 3563374))) || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_57: Ref [MustInvokeBounded(_r_57)] :: false) && ((forperm _r_57: Ref [MustInvokeUnbounded(_r_57)] :: false) && ((forperm _r_57: Ref [_r_57.MustReleaseBounded] :: false) && (forperm _r_57: Ref [_r_57.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverloopsAndTermination.py.vpr@1123.15)); List([invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_0 ==> _loop_termination_flag_0 || (!true || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_14: Ref [MustInvokeBounded(_r_14)] :: false) && ((forperm _r_14: Ref [MustInvokeUnbounded(_r_14)] :: false) && ((forperm _r_14: Ref [_r_14.MustReleaseBounded] :: false) && (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_0 ==> _loop_termination_flag_0 || (!true || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_14: Ref [MustInvokeBounded(_r_14)] :: false) && ((forperm _r_14: Ref [MustInvokeUnbounded(_r_14)] :: false) && ((forperm _r_14: Ref [_r_14.MustReleaseBounded] :: false) && (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverloopsAndTermination.py.vpr@643.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_3 ==> _loop_termination_flag_3 || (!int___lt__(int___unbox__(_checkDefined(i_1; 3235689)); int___unbox__(_checkDefined(n_2; 3301230))) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_29: Ref [MustInvokeBounded(_r_29)] :: false) && ((forperm _r_29: Ref [MustInvokeUnbounded(_r_29)] :: false) && ((forperm _r_29: Ref [_r_29.MustReleaseBounded] :: false) && (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_3 ==> _loop_termination_flag_3 || (!int___lt__(int___unbox__(_checkDefined(i_1; 3235689)); int___unbox__(_checkDefined(n_2; 3301230))) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_29: Ref [MustInvokeBounded(_r_29)] :: false) && ((forperm _r_29: Ref [MustInvokeUnbounded(_r_29)] :: false) && ((forperm _r_29: Ref [_r_29.MustReleaseBounded] :: false) && (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverloopsAndTermination.py.vpr@801.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_5 ==> _loop_termination_flag_5 || (!int___lt__(int___unbox__(_checkDefined(j; 106)); int___unbox__(_checkDefined(n_3; 3366766))) || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_34: Ref [MustInvokeBounded(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBounded] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_5 ==> _loop_termination_flag_5 || (!int___lt__(int___unbox__(_checkDefined(j; 106)); int___unbox__(_checkDefined(n_3; 3366766))) || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_34: Ref [MustInvokeBounded(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBounded] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverloopsAndTermination.py.vpr@879.17); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_8 ==> _loop_termination_flag_8 || (!int___lt__(int___unbox__(_checkDefined(i_4; 3432297)); int___unbox__(_checkDefined(n_5; 3497838))) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_50: Ref [MustInvokeBounded(_r_50)] :: false) && ((forperm _r_50: Ref [MustInvokeUnbounded(_r_50)] :: false) && ((forperm _r_50: Ref [_r_50.MustReleaseBounded] :: false) && (forperm _r_50: Ref [_r_50.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_8 ==> _loop_termination_flag_8 || (!int___lt__(int___unbox__(_checkDefined(i_4; 3432297)); int___unbox__(_checkDefined(n_5; 3497838))) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_50: Ref [MustInvokeBounded(_r_50)] :: false) && ((forperm _r_50: Ref [MustInvokeUnbounded(_r_50)] :: false) && ((forperm _r_50: Ref [_r_50.MustReleaseBounded] :: false) && (forperm _r_50: Ref [_r_50.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverloopsAndTermination.py.vpr@1035.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_10 ==> _loop_termination_flag_10 || (!int___lt__(int___unbox__(_checkDefined(i_5; 3497833)); int___unbox__(_checkDefined(n_6; 3563374))) || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_57: Ref [MustInvokeBounded(_r_57)] :: false) && ((forperm _r_57: Ref [MustInvokeUnbounded(_r_57)] :: false) && ((forperm _r_57: Ref [_r_57.MustReleaseBounded] :: false) && (forperm _r_57: Ref [_r_57.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_10 ==> _loop_termination_flag_10 || (!int___lt__(int___unbox__(_checkDefined(i_5; 3497833)); int___unbox__(_checkDefined(n_6; 3563374))) || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_57: Ref [MustInvokeBounded(_r_57)] :: false) && ((forperm _r_57: Ref [MustInvokeUnbounded(_r_57)] :: false) && ((forperm _r_57: Ref [_r_57.MustReleaseBounded] :: false) && (forperm _r_57: Ref [_r_57.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverloopsAndTermination.py.vpr@1123.15)); List([invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_0 ==> _loop_termination_flag_0 || (!true || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_14: Ref [MustInvokeBounded(_r_14)] :: false) && ((forperm _r_14: Ref [MustInvokeUnbounded(_r_14)] :: false) && ((forperm _r_14: Ref [_r_14.MustReleaseBounded] :: false) && (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_0 ==> _loop_termination_flag_0 || (!true || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_14: Ref [MustInvokeBounded(_r_14)] :: false) && ((forperm _r_14: Ref [MustInvokeUnbounded(_r_14)] :: false) && ((forperm _r_14: Ref [_r_14.MustReleaseBounded] :: false) && (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverloopsAndTermination.py.vpr@643.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_3 ==> _loop_termination_flag_3 || (!int___lt__(int___unbox__(_checkDefined(i_1; 3235689)); int___unbox__(_checkDefined(n_2; 3301230))) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_29: Ref [MustInvokeBounded(_r_29)] :: false) && ((forperm _r_29: Ref [MustInvokeUnbounded(_r_29)] :: false) && ((forperm _r_29: Ref [_r_29.MustReleaseBounded] :: false) && (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_3 ==> _loop_termination_flag_3 || (!int___lt__(int___unbox__(_checkDefined(i_1; 3235689)); int___unbox__(_checkDefined(n_2; 3301230))) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_29: Ref [MustInvokeBounded(_r_29)] :: false) && ((forperm _r_29: Ref [MustInvokeUnbounded(_r_29)] :: false) && ((forperm _r_29: Ref [_r_29.MustReleaseBounded] :: false) && (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverloopsAndTermination.py.vpr@801.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_5 ==> _loop_termination_flag_5 || (!int___lt__(int___unbox__(_checkDefined(j; 106)); int___unbox__(_checkDefined(n_3; 3366766))) || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_34: Ref [MustInvokeBounded(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBounded] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_5 ==> _loop_termination_flag_5 || (!int___lt__(int___unbox__(_checkDefined(j; 106)); int___unbox__(_checkDefined(n_3; 3366766))) || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_34: Ref [MustInvokeBounded(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBounded] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverloopsAndTermination.py.vpr@879.17); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_8 ==> _loop_termination_flag_8 || (!int___lt__(int___unbox__(_checkDefined(i_4; 3432297)); int___unbox__(_checkDefined(n_5; 3497838))) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_50: Ref [MustInvokeBounded(_r_50)] :: false) && ((forperm _r_50: Ref [MustInvokeUnbounded(_r_50)] :: false) && ((forperm _r_50: Ref [_r_50.MustReleaseBounded] :: false) && (forperm _r_50: Ref [_r_50.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_8 ==> _loop_termination_flag_8 || (!int___lt__(int___unbox__(_checkDefined(i_4; 3432297)); int___unbox__(_checkDefined(n_5; 3497838))) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_50: Ref [MustInvokeBounded(_r_50)] :: false) && ((forperm _r_50: Ref [MustInvokeUnbounded(_r_50)] :: false) && ((forperm _r_50: Ref [_r_50.MustReleaseBounded] :: false) && (forperm _r_50: Ref [_r_50.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverloopsAndTermination.py.vpr@1035.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_10 ==> _loop_termination_flag_10 || (!int___lt__(int___unbox__(_checkDefined(i_5; 3497833)); int___unbox__(_checkDefined(n_6; 3563374))) || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_57: Ref [MustInvokeBounded(_r_57)] :: false) && ((forperm _r_57: Ref [MustInvokeUnbounded(_r_57)] :: false) && ((forperm _r_57: Ref [_r_57.MustReleaseBounded] :: false) && (forperm _r_57: Ref [_r_57.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_10 ==> _loop_termination_flag_10 || (!int___lt__(int___unbox__(_checkDefined(i_5; 3497833)); int___unbox__(_checkDefined(n_6; 3563374))) || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_57: Ref [MustInvokeBounded(_r_57)] :: false) && ((forperm _r_57: Ref [MustInvokeUnbounded(_r_57)] :: false) && ((forperm _r_57: Ref [_r_57.MustReleaseBounded] :: false) && (forperm _r_57: Ref [_r_57.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverloopsAndTermination.py.vpr@1123.15)); List([invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_0 ==> _loop_termination_flag_0 || (!true || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_14: Ref [MustInvokeBounded(_r_14)] :: false) && ((forperm _r_14: Ref [MustInvokeUnbounded(_r_14)] :: false) && ((forperm _r_14: Ref [_r_14.MustReleaseBounded] :: false) && (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_0 ==> _loop_termination_flag_0 || (!true || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_14: Ref [MustInvokeBounded(_r_14)] :: false) && ((forperm _r_14: Ref [MustInvokeUnbounded(_r_14)] :: false) && ((forperm _r_14: Ref [_r_14.MustReleaseBounded] :: false) && (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverloopsAndTermination.py.vpr@643.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_3 ==> _loop_termination_flag_3 || (!int___lt__(int___unbox__(_checkDefined(i_1; 3235689)); int___unbox__(_checkDefined(n_2; 3301230))) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_29: Ref [MustInvokeBounded(_r_29)] :: false) && ((forperm _r_29: Ref [MustInvokeUnbounded(_r_29)] :: false) && ((forperm _r_29: Ref [_r_29.MustReleaseBounded] :: false) && (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_3 ==> _loop_termination_flag_3 || (!int___lt__(int___unbox__(_checkDefined(i_1; 3235689)); int___unbox__(_checkDefined(n_2; 3301230))) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_29: Ref [MustInvokeBounded(_r_29)] :: false) && ((forperm _r_29: Ref [MustInvokeUnbounded(_r_29)] :: false) && ((forperm _r_29: Ref [_r_29.MustReleaseBounded] :: false) && (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverloopsAndTermination.py.vpr@801.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_5 ==> _loop_termination_flag_5 || (!int___lt__(int___unbox__(_checkDefined(j; 106)); int___unbox__(_checkDefined(n_3; 3366766))) || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_34: Ref [MustInvokeBounded(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBounded] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_5 ==> _loop_termination_flag_5 || (!int___lt__(int___unbox__(_checkDefined(j; 106)); int___unbox__(_checkDefined(n_3; 3366766))) || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_34: Ref [MustInvokeBounded(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBounded] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverloopsAndTermination.py.vpr@879.17); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_8 ==> _loop_termination_flag_8 || (!int___lt__(int___unbox__(_checkDefined(i_4; 3432297)); int___unbox__(_checkDefined(n_5; 3497838))) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_50: Ref [MustInvokeBounded(_r_50)] :: false) && ((forperm _r_50: Ref [MustInvokeUnbounded(_r_50)] :: false) && ((forperm _r_50: Ref [_r_50.MustReleaseBounded] :: false) && (forperm _r_50: Ref [_r_50.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_8 ==> _loop_termination_flag_8 || (!int___lt__(int___unbox__(_checkDefined(i_4; 3432297)); int___unbox__(_checkDefined(n_5; 3497838))) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_50: Ref [MustInvokeBounded(_r_50)] :: false) && ((forperm _r_50: Ref [MustInvokeUnbounded(_r_50)] :: false) && ((forperm _r_50: Ref [_r_50.MustReleaseBounded] :: false) && (forperm _r_50: Ref [_r_50.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverloopsAndTermination.py.vpr@1035.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_10 ==> _loop_termination_flag_10 || (!int___lt__(int___unbox__(_checkDefined(i_5; 3497833)); int___unbox__(_checkDefined(n_6; 3563374))) || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_57: Ref [MustInvokeBounded(_r_57)] :: false) && ((forperm _r_57: Ref [MustInvokeUnbounded(_r_57)] :: false) && ((forperm _r_57: Ref [_r_57.MustReleaseBounded] :: false) && (forperm _r_57: Ref [_r_57.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_10 ==> _loop_termination_flag_10 || (!int___lt__(int___unbox__(_checkDefined(i_5; 3497833)); int___unbox__(_checkDefined(n_6; 3563374))) || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_57: Ref [MustInvokeBounded(_r_57)] :: false) && ((forperm _r_57: Ref [MustInvokeUnbounded(_r_57)] :: false) && ((forperm _r_57: Ref [_r_57.MustReleaseBounded] :: false) && (forperm _r_57: Ref [_r_57.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverloopsAndTermination.py.vpr@1123.15)); List([invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_0 ==> _loop_termination_flag_0 || (!true || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_14: Ref [MustInvokeBounded(_r_14)] :: false) && ((forperm _r_14: Ref [MustInvokeUnbounded(_r_14)] :: false) && ((forperm _r_14: Ref [_r_14.MustReleaseBounded] :: false) && (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_0 ==> _loop_termination_flag_0 || (!true || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_14: Ref [MustInvokeBounded(_r_14)] :: false) && ((forperm _r_14: Ref [MustInvokeUnbounded(_r_14)] :: false) && ((forperm _r_14: Ref [_r_14.MustReleaseBounded] :: false) && (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverloopsAndTermination.py.vpr@643.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_3 ==> _loop_termination_flag_3 || (!int___lt__(int___unbox__(_checkDefined(i_1; 3235689)); int___unbox__(_checkDefined(n_2; 3301230))) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_29: Ref [MustInvokeBounded(_r_29)] :: false) && ((forperm _r_29: Ref [MustInvokeUnbounded(_r_29)] :: false) && ((forperm _r_29: Ref [_r_29.MustReleaseBounded] :: false) && (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_3 ==> _loop_termination_flag_3 || (!int___lt__(int___unbox__(_checkDefined(i_1; 3235689)); int___unbox__(_checkDefined(n_2; 3301230))) || perm(MustTerminate(_cthread_163)) == none && ((forperm _r_29: Ref [MustInvokeBounded(_r_29)] :: false) && ((forperm _r_29: Ref [MustInvokeUnbounded(_r_29)] :: false) && ((forperm _r_29: Ref [_r_29.MustReleaseBounded] :: false) && (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverloopsAndTermination.py.vpr@801.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_5 ==> _loop_termination_flag_5 || (!int___lt__(int___unbox__(_checkDefined(j; 106)); int___unbox__(_checkDefined(n_3; 3366766))) || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_34: Ref [MustInvokeBounded(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBounded] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_5 ==> _loop_termination_flag_5 || (!int___lt__(int___unbox__(_checkDefined(j; 106)); int___unbox__(_checkDefined(n_3; 3366766))) || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_34: Ref [MustInvokeBounded(_r_34)] :: false) && ((forperm _r_34: Ref [MustInvokeUnbounded(_r_34)] :: false) && ((forperm _r_34: Ref [_r_34.MustReleaseBounded] :: false) && (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverloopsAndTermination.py.vpr@879.17); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_8 ==> _loop_termination_flag_8 || (!int___lt__(int___unbox__(_checkDefined(i_4; 3432297)); int___unbox__(_checkDefined(n_5; 3497838))) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_50: Ref [MustInvokeBounded(_r_50)] :: false) && ((forperm _r_50: Ref [MustInvokeUnbounded(_r_50)] :: false) && ((forperm _r_50: Ref [_r_50.MustReleaseBounded] :: false) && (forperm _r_50: Ref [_r_50.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_8 ==> _loop_termination_flag_8 || (!int___lt__(int___unbox__(_checkDefined(i_4; 3432297)); int___unbox__(_checkDefined(n_5; 3497838))) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_50: Ref [MustInvokeBounded(_r_50)] :: false) && ((forperm _r_50: Ref [MustInvokeUnbounded(_r_50)] :: false) && ((forperm _r_50: Ref [_r_50.MustReleaseBounded] :: false) && (forperm _r_50: Ref [_r_50.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverloopsAndTermination.py.vpr@1035.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_10 ==> _loop_termination_flag_10 || (!int___lt__(int___unbox__(_checkDefined(i_5; 3497833)); int___unbox__(_checkDefined(n_6; 3563374))) || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_57: Ref [MustInvokeBounded(_r_57)] :: false) && ((forperm _r_57: Ref [MustInvokeUnbounded(_r_57)] :: false) && ((forperm _r_57: Ref [_r_57.MustReleaseBounded] :: false) && (forperm _r_57: Ref [_r_57.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_10 ==> _loop_termination_flag_10 || (!int___lt__(int___unbox__(_checkDefined(i_5; 3497833)); int___unbox__(_checkDefined(n_6; 3563374))) || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_57: Ref [MustInvokeBounded(_r_57)] :: false) && ((forperm _r_57: Ref [MustInvokeUnbounded(_r_57)] :: false) && ((forperm _r_57: Ref [_r_57.MustReleaseBounded] :: false) && (forperm _r_57: Ref [_r_57.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationchalice2silverloopsAndTermination.py.vpr@1123.15)))
../../src/test/resources/frontend-generated/testsobligationsverificationtest_builtin_must_terminate.py.vpr,1,3871,95,2,3752,3878,3985,Vector(List([call.precondition:assertion.false] The precondition of method list___init__ might not hold. Assertion Measure$check(_method_measures_157; _cthread_157; 1) might not hold. (testsobligationsverificationtest_builtin_must_terminate.py.vpr@605.3)); List([call.precondition:assertion.false] The precondition of method list___init__ might not hold. Assertion Measure$check(_method_measures_157; _cthread_157; 1) might not hold. (testsobligationsverificationtest_builtin_must_terminate.py.vpr@605.3)); List([call.precondition:assertion.false] The precondition of method list___init__ might not hold. Assertion Measure$check(_method_measures_157; _cthread_157; 1) might not hold. (testsobligationsverificationtest_builtin_must_terminate.py.vpr@605.3)); List([call.precondition:assertion.false] The precondition of method list___init__ might not hold. Assertion Measure$check(_method_measures_157; _cthread_157; 1) might not hold. (testsobligationsverificationtest_builtin_must_terminate.py.vpr@605.3)); List([call.precondition:assertion.false] The precondition of method list___init__ might not hold. Assertion Measure$check(_method_measures_157; _cthread_157; 1) might not hold. (testsobligationsverificationtest_builtin_must_terminate.py.vpr@605.3)))
../../src/test/resources/frontend-generated/testsobligationsverificationtest_while_must_terminate.py.vpr,14,5939,93,1,5847,5902,6068,Vector(List([call.precondition:assertion.false] The precondition of method non_terminating might not hold. Assertion perm(MustTerminate(_cthread_158)) == none might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@618.3); [call.precondition:assertion.false] The precondition of method non_terminating might not hold. Assertion perm(MustTerminate(_cthread_159)) == none might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@661.5); [call.precondition:assertion.false] The precondition of method non_terminating might not hold. Assertion perm(MustTerminate(_cthread_160)) == none might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@712.5); [call.precondition:assertion.false] The precondition of method non_terminating might not hold. Assertion perm(MustTerminate(_cthread_161)) == none might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@798.5); [call.precondition:assertion.false] The precondition of method non_terminating might not hold. Assertion perm(MustTerminate(_cthread_162)) == none might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@875.7); [invariant.not.established:assertion.false] Loop invariant (true ==> -1 > 0) && [acc(MustTerminate(_cthread_163); write); true] might not hold on entry. Assertion true ==> -1 > 0 might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@924.15); [invariant.not.preserved:assertion.false] Loop invariant (int___gt__(int___unbox__(_checkDefined(i_5; 3497833)); -1) ==> int___unbox__(_checkDefined(i_5; 3497833)) > 0) && [acc(MustTerminate(_cthread_166); write); true] might not be preserved. Assertion int___gt__(int___unbox__(_checkDefined(i_5; 3497833)); -1) ==> int___unbox__(_checkDefined(i_5; 3497833)) > 0 might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1066.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_10 ==> _loop_termination_flag_10 || (!true || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_10 ==> _loop_termination_flag_10 || (!true || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1113.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_12 ==> _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(i_6; 3563369)); 5) || perm(MustTerminate(_cthread_169)) == none && ((forperm _r_65: Ref [MustInvokeBounded(_r_65)] :: false) && ((forperm _r_65: Ref [MustInvokeUnbounded(_r_65)] :: false) && ((forperm _r_65: Ref [_r_65.MustReleaseBounded] :: false) && (forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_12 ==> _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(i_6; 3563369)); 5) || perm(MustTerminate(_cthread_169)) == none && ((forperm _r_65: Ref [MustInvokeBounded(_r_65)] :: false) && ((forperm _r_65: Ref [MustInvokeUnbounded(_r_65)] :: false) && ((forperm _r_65: Ref [_r_65.MustReleaseBounded] :: false) && (forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1205.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_14 ==> _loop_termination_flag_14 || (!int___lt__(int___unbox__(_checkDefined(j_1; 3235690)); 5) || perm(MustTerminate(_cthread_170)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_14 ==> _loop_termination_flag_14 || (!int___lt__(int___unbox__(_checkDefined(j_1; 3235690)); 5) || perm(MustTerminate(_cthread_170)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1280.17); [assert.failed:assertion.false] Assert might fail. Assertion _loop_termination_flag_15 ==> !int___lt__(int___unbox__(_checkDefined(i_8; 3694441)); 5) || Measure$check(_loop_measures_15; _cthread_171; int___sub__(5; int___unbox__(_checkDefined(i_8; 3694441)))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1349.5); [assert.failed:assertion.false] Assert might fail. Assertion _loop_termination_flag_16 ==> !int___lt__(int___unbox__(_checkDefined(i_9; 3759977)); 5) || Measure$check(_loop_measures_16; _cthread_172; int___sub__(5; int___unbox__(_checkDefined(i_9; 3759977)))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1399.5); [assert.failed:assertion.false] Assert might fail. Assertion _loop_termination_flag_18 ==> !int___lt__(int___unbox__(_checkDefined(j_3; 3366762)); 5) || Measure$check(_loop_measures_18; _cthread_173; int___sub__(5; int___unbox__(_checkDefined(j_3; 3366762)))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1474.7); [call.precondition:assertion.false] The precondition of method non_terminating2 might not hold. Assertion false && Measure$check(_method_measures_177; _cthread_177; 0) || perm(MustTerminate(_cthread_177)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false)))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1718.3)); List([call.precondition:assertion.false] The precondition of method non_terminating might not hold. Assertion perm(MustTerminate(_cthread_158)) == none might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@618.3); [call.precondition:assertion.false] The precondition of method non_terminating might not hold. Assertion perm(MustTerminate(_cthread_159)) == none might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@661.5); [call.precondition:assertion.false] The precondition of method non_terminating might not hold. Assertion perm(MustTerminate(_cthread_160)) == none might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@712.5); [call.precondition:assertion.false] The precondition of method non_terminating might not hold. Assertion perm(MustTerminate(_cthread_161)) == none might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@798.5); [call.precondition:assertion.false] The precondition of method non_terminating might not hold. Assertion perm(MustTerminate(_cthread_162)) == none might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@875.7); [invariant.not.established:assertion.false] Loop invariant (true ==> -1 > 0) && [acc(MustTerminate(_cthread_163); write); true] might not hold on entry. Assertion true ==> -1 > 0 might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@924.15); [invariant.not.preserved:assertion.false] Loop invariant (int___gt__(int___unbox__(_checkDefined(i_5; 3497833)); -1) ==> int___unbox__(_checkDefined(i_5; 3497833)) > 0) && [acc(MustTerminate(_cthread_166); write); true] might not be preserved. Assertion int___gt__(int___unbox__(_checkDefined(i_5; 3497833)); -1) ==> int___unbox__(_checkDefined(i_5; 3497833)) > 0 might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1066.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_10 ==> _loop_termination_flag_10 || (!true || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_10 ==> _loop_termination_flag_10 || (!true || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1113.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_12 ==> _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(i_6; 3563369)); 5) || perm(MustTerminate(_cthread_169)) == none && ((forperm _r_65: Ref [MustInvokeBounded(_r_65)] :: false) && ((forperm _r_65: Ref [MustInvokeUnbounded(_r_65)] :: false) && ((forperm _r_65: Ref [_r_65.MustReleaseBounded] :: false) && (forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_12 ==> _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(i_6; 3563369)); 5) || perm(MustTerminate(_cthread_169)) == none && ((forperm _r_65: Ref [MustInvokeBounded(_r_65)] :: false) && ((forperm _r_65: Ref [MustInvokeUnbounded(_r_65)] :: false) && ((forperm _r_65: Ref [_r_65.MustReleaseBounded] :: false) && (forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1205.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_14 ==> _loop_termination_flag_14 || (!int___lt__(int___unbox__(_checkDefined(j_1; 3235690)); 5) || perm(MustTerminate(_cthread_170)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_14 ==> _loop_termination_flag_14 || (!int___lt__(int___unbox__(_checkDefined(j_1; 3235690)); 5) || perm(MustTerminate(_cthread_170)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1280.17); [assert.failed:assertion.false] Assert might fail. Assertion _loop_termination_flag_15 ==> !int___lt__(int___unbox__(_checkDefined(i_8; 3694441)); 5) || Measure$check(_loop_measures_15; _cthread_171; int___sub__(5; int___unbox__(_checkDefined(i_8; 3694441)))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1349.5); [assert.failed:assertion.false] Assert might fail. Assertion _loop_termination_flag_16 ==> !int___lt__(int___unbox__(_checkDefined(i_9; 3759977)); 5) || Measure$check(_loop_measures_16; _cthread_172; int___sub__(5; int___unbox__(_checkDefined(i_9; 3759977)))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1399.5); [assert.failed:assertion.false] Assert might fail. Assertion _loop_termination_flag_18 ==> !int___lt__(int___unbox__(_checkDefined(j_3; 3366762)); 5) || Measure$check(_loop_measures_18; _cthread_173; int___sub__(5; int___unbox__(_checkDefined(j_3; 3366762)))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1474.7); [call.precondition:assertion.false] The precondition of method non_terminating2 might not hold. Assertion false && Measure$check(_method_measures_177; _cthread_177; 0) || perm(MustTerminate(_cthread_177)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false)))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1718.3)); List([call.precondition:assertion.false] The precondition of method non_terminating might not hold. Assertion perm(MustTerminate(_cthread_158)) == none might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@618.3); [call.precondition:assertion.false] The precondition of method non_terminating might not hold. Assertion perm(MustTerminate(_cthread_159)) == none might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@661.5); [call.precondition:assertion.false] The precondition of method non_terminating might not hold. Assertion perm(MustTerminate(_cthread_160)) == none might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@712.5); [call.precondition:assertion.false] The precondition of method non_terminating might not hold. Assertion perm(MustTerminate(_cthread_161)) == none might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@798.5); [call.precondition:assertion.false] The precondition of method non_terminating might not hold. Assertion perm(MustTerminate(_cthread_162)) == none might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@875.7); [invariant.not.established:assertion.false] Loop invariant (true ==> -1 > 0) && [acc(MustTerminate(_cthread_163); write); true] might not hold on entry. Assertion true ==> -1 > 0 might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@924.15); [invariant.not.preserved:assertion.false] Loop invariant (int___gt__(int___unbox__(_checkDefined(i_5; 3497833)); -1) ==> int___unbox__(_checkDefined(i_5; 3497833)) > 0) && [acc(MustTerminate(_cthread_166); write); true] might not be preserved. Assertion int___gt__(int___unbox__(_checkDefined(i_5; 3497833)); -1) ==> int___unbox__(_checkDefined(i_5; 3497833)) > 0 might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1066.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_10 ==> _loop_termination_flag_10 || (!true || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_10 ==> _loop_termination_flag_10 || (!true || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1113.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_12 ==> _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(i_6; 3563369)); 5) || perm(MustTerminate(_cthread_169)) == none && ((forperm _r_65: Ref [MustInvokeBounded(_r_65)] :: false) && ((forperm _r_65: Ref [MustInvokeUnbounded(_r_65)] :: false) && ((forperm _r_65: Ref [_r_65.MustReleaseBounded] :: false) && (forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_12 ==> _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(i_6; 3563369)); 5) || perm(MustTerminate(_cthread_169)) == none && ((forperm _r_65: Ref [MustInvokeBounded(_r_65)] :: false) && ((forperm _r_65: Ref [MustInvokeUnbounded(_r_65)] :: false) && ((forperm _r_65: Ref [_r_65.MustReleaseBounded] :: false) && (forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1205.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_14 ==> _loop_termination_flag_14 || (!int___lt__(int___unbox__(_checkDefined(j_1; 3235690)); 5) || perm(MustTerminate(_cthread_170)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_14 ==> _loop_termination_flag_14 || (!int___lt__(int___unbox__(_checkDefined(j_1; 3235690)); 5) || perm(MustTerminate(_cthread_170)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1280.17); [assert.failed:assertion.false] Assert might fail. Assertion _loop_termination_flag_15 ==> !int___lt__(int___unbox__(_checkDefined(i_8; 3694441)); 5) || Measure$check(_loop_measures_15; _cthread_171; int___sub__(5; int___unbox__(_checkDefined(i_8; 3694441)))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1349.5); [assert.failed:assertion.false] Assert might fail. Assertion _loop_termination_flag_16 ==> !int___lt__(int___unbox__(_checkDefined(i_9; 3759977)); 5) || Measure$check(_loop_measures_16; _cthread_172; int___sub__(5; int___unbox__(_checkDefined(i_9; 3759977)))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1399.5); [assert.failed:assertion.false] Assert might fail. Assertion _loop_termination_flag_18 ==> !int___lt__(int___unbox__(_checkDefined(j_3; 3366762)); 5) || Measure$check(_loop_measures_18; _cthread_173; int___sub__(5; int___unbox__(_checkDefined(j_3; 3366762)))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1474.7); [call.precondition:assertion.false] The precondition of method non_terminating2 might not hold. Assertion false && Measure$check(_method_measures_177; _cthread_177; 0) || perm(MustTerminate(_cthread_177)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false)))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1718.3)); List([call.precondition:assertion.false] The precondition of method non_terminating might not hold. Assertion perm(MustTerminate(_cthread_158)) == none might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@618.3); [call.precondition:assertion.false] The precondition of method non_terminating might not hold. Assertion perm(MustTerminate(_cthread_159)) == none might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@661.5); [call.precondition:assertion.false] The precondition of method non_terminating might not hold. Assertion perm(MustTerminate(_cthread_160)) == none might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@712.5); [call.precondition:assertion.false] The precondition of method non_terminating might not hold. Assertion perm(MustTerminate(_cthread_161)) == none might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@798.5); [call.precondition:assertion.false] The precondition of method non_terminating might not hold. Assertion perm(MustTerminate(_cthread_162)) == none might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@875.7); [invariant.not.established:assertion.false] Loop invariant (true ==> -1 > 0) && [acc(MustTerminate(_cthread_163); write); true] might not hold on entry. Assertion true ==> -1 > 0 might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@924.15); [invariant.not.preserved:assertion.false] Loop invariant (int___gt__(int___unbox__(_checkDefined(i_5; 3497833)); -1) ==> int___unbox__(_checkDefined(i_5; 3497833)) > 0) && [acc(MustTerminate(_cthread_166); write); true] might not be preserved. Assertion int___gt__(int___unbox__(_checkDefined(i_5; 3497833)); -1) ==> int___unbox__(_checkDefined(i_5; 3497833)) > 0 might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1066.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_10 ==> _loop_termination_flag_10 || (!true || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_10 ==> _loop_termination_flag_10 || (!true || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1113.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_12 ==> _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(i_6; 3563369)); 5) || perm(MustTerminate(_cthread_169)) == none && ((forperm _r_65: Ref [MustInvokeBounded(_r_65)] :: false) && ((forperm _r_65: Ref [MustInvokeUnbounded(_r_65)] :: false) && ((forperm _r_65: Ref [_r_65.MustReleaseBounded] :: false) && (forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_12 ==> _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(i_6; 3563369)); 5) || perm(MustTerminate(_cthread_169)) == none && ((forperm _r_65: Ref [MustInvokeBounded(_r_65)] :: false) && ((forperm _r_65: Ref [MustInvokeUnbounded(_r_65)] :: false) && ((forperm _r_65: Ref [_r_65.MustReleaseBounded] :: false) && (forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1205.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_14 ==> _loop_termination_flag_14 || (!int___lt__(int___unbox__(_checkDefined(j_1; 3235690)); 5) || perm(MustTerminate(_cthread_170)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_14 ==> _loop_termination_flag_14 || (!int___lt__(int___unbox__(_checkDefined(j_1; 3235690)); 5) || perm(MustTerminate(_cthread_170)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1280.17); [assert.failed:assertion.false] Assert might fail. Assertion _loop_termination_flag_15 ==> !int___lt__(int___unbox__(_checkDefined(i_8; 3694441)); 5) || Measure$check(_loop_measures_15; _cthread_171; int___sub__(5; int___unbox__(_checkDefined(i_8; 3694441)))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1349.5); [assert.failed:assertion.false] Assert might fail. Assertion _loop_termination_flag_16 ==> !int___lt__(int___unbox__(_checkDefined(i_9; 3759977)); 5) || Measure$check(_loop_measures_16; _cthread_172; int___sub__(5; int___unbox__(_checkDefined(i_9; 3759977)))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1399.5); [assert.failed:assertion.false] Assert might fail. Assertion _loop_termination_flag_18 ==> !int___lt__(int___unbox__(_checkDefined(j_3; 3366762)); 5) || Measure$check(_loop_measures_18; _cthread_173; int___sub__(5; int___unbox__(_checkDefined(j_3; 3366762)))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1474.7); [call.precondition:assertion.false] The precondition of method non_terminating2 might not hold. Assertion false && Measure$check(_method_measures_177; _cthread_177; 0) || perm(MustTerminate(_cthread_177)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false)))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1718.3)); List([call.precondition:assertion.false] The precondition of method non_terminating might not hold. Assertion perm(MustTerminate(_cthread_158)) == none might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@618.3); [call.precondition:assertion.false] The precondition of method non_terminating might not hold. Assertion perm(MustTerminate(_cthread_159)) == none might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@661.5); [call.precondition:assertion.false] The precondition of method non_terminating might not hold. Assertion perm(MustTerminate(_cthread_160)) == none might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@712.5); [call.precondition:assertion.false] The precondition of method non_terminating might not hold. Assertion perm(MustTerminate(_cthread_161)) == none might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@798.5); [call.precondition:assertion.false] The precondition of method non_terminating might not hold. Assertion perm(MustTerminate(_cthread_162)) == none might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@875.7); [invariant.not.established:assertion.false] Loop invariant (true ==> -1 > 0) && [acc(MustTerminate(_cthread_163); write); true] might not hold on entry. Assertion true ==> -1 > 0 might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@924.15); [invariant.not.preserved:assertion.false] Loop invariant (int___gt__(int___unbox__(_checkDefined(i_5; 3497833)); -1) ==> int___unbox__(_checkDefined(i_5; 3497833)) > 0) && [acc(MustTerminate(_cthread_166); write); true] might not be preserved. Assertion int___gt__(int___unbox__(_checkDefined(i_5; 3497833)); -1) ==> int___unbox__(_checkDefined(i_5; 3497833)) > 0 might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1066.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_10 ==> _loop_termination_flag_10 || (!true || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_10 ==> _loop_termination_flag_10 || (!true || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1113.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_12 ==> _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(i_6; 3563369)); 5) || perm(MustTerminate(_cthread_169)) == none && ((forperm _r_65: Ref [MustInvokeBounded(_r_65)] :: false) && ((forperm _r_65: Ref [MustInvokeUnbounded(_r_65)] :: false) && ((forperm _r_65: Ref [_r_65.MustReleaseBounded] :: false) && (forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_12 ==> _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(i_6; 3563369)); 5) || perm(MustTerminate(_cthread_169)) == none && ((forperm _r_65: Ref [MustInvokeBounded(_r_65)] :: false) && ((forperm _r_65: Ref [MustInvokeUnbounded(_r_65)] :: false) && ((forperm _r_65: Ref [_r_65.MustReleaseBounded] :: false) && (forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1205.15); [invariant.not.established:assertion.false] Loop invariant [true; _loop_check_before_14 ==> _loop_termination_flag_14 || (!int___lt__(int___unbox__(_checkDefined(j_1; 3235690)); 5) || perm(MustTerminate(_cthread_170)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false)))))] might not hold on entry. Assertion _loop_check_before_14 ==> _loop_termination_flag_14 || (!int___lt__(int___unbox__(_checkDefined(j_1; 3235690)); 5) || perm(MustTerminate(_cthread_170)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false))))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1280.17); [assert.failed:assertion.false] Assert might fail. Assertion _loop_termination_flag_15 ==> !int___lt__(int___unbox__(_checkDefined(i_8; 3694441)); 5) || Measure$check(_loop_measures_15; _cthread_171; int___sub__(5; int___unbox__(_checkDefined(i_8; 3694441)))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1349.5); [assert.failed:assertion.false] Assert might fail. Assertion _loop_termination_flag_16 ==> !int___lt__(int___unbox__(_checkDefined(i_9; 3759977)); 5) || Measure$check(_loop_measures_16; _cthread_172; int___sub__(5; int___unbox__(_checkDefined(i_9; 3759977)))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1399.5); [assert.failed:assertion.false] Assert might fail. Assertion _loop_termination_flag_18 ==> !int___lt__(int___unbox__(_checkDefined(j_3; 3366762)); 5) || Measure$check(_loop_measures_18; _cthread_173; int___sub__(5; int___unbox__(_checkDefined(j_3; 3366762)))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1474.7); [call.precondition:assertion.false] The precondition of method non_terminating2 might not hold. Assertion false && Measure$check(_method_measures_177; _cthread_177; 0) || perm(MustTerminate(_cthread_177)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false)))) might not hold. (testsobligationsverificationtest_while_must_terminate.py.vpr@1718.3)))
../../src/test/resources/frontend-generated/testsresourcesallocationERC721_alloc.vy.vpr,0,46191,663,1,45333,46293,46949,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/testsresourcesallocationsafe_remote_purchase_alloc.vy.vpr,0,41270,481,1,40654,41330,41828,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/testsresourcesexamplesEtherKing.vy.vpr,0,7474,224,2,7163,7575,7686,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/testsresourcesexamplesNoterEth.vy.vpr,0,8049,56,0,7978,8053,8117,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/testsresourcesexamplesserenuscoin.vy.vpr,1,1965,47,2,1931,1932,2033,Vector(List(Parse error: Expected found ": $Struct)\n  self :="; expected invalid identifier (could be a keyword) | "." ~ idnuse | "[" ~ Pass ~ ".." ~/ exp ~ "]" | "[" ~ exp ~ ".." ~ Pass ~ "]" | "[" ~ exp ~ ".." ~ exp ~ "]" | "[" ~ exp ~ "]" | "[" ~ exp ~ ":=" ~ exp ~ "]" | StringIn("++"; "+"; "-") | "union" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "intersection" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "setminus" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "subset" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | StringIn("*"; "/"; "\\"; "%") | ")" at index 77747  67; 111; 105; 110)): $Struct)                     ^ (testsresourcesexamplesserenuscoin.vy.vpr@921.94)); List(Parse error: Expected found ": $Struct)\n  self :="; expected invalid identifier (could be a keyword) | "." ~ idnuse | "[" ~ Pass ~ ".." ~/ exp ~ "]" | "[" ~ exp ~ ".." ~ Pass ~ "]" | "[" ~ exp ~ ".." ~ exp ~ "]" | "[" ~ exp ~ "]" | "[" ~ exp ~ ":=" ~ exp ~ "]" | StringIn("++"; "+"; "-") | "union" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "intersection" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "setminus" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "subset" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | StringIn("*"; "/"; "\\"; "%") | ")" at index 77747  67; 111; 105; 110)): $Struct)                     ^ (testsresourcesexamplesserenuscoin.vy.vpr@921.94)); List(Parse error: Expected found ": $Struct)\n  self :="; expected invalid identifier (could be a keyword) | "." ~ idnuse | "[" ~ Pass ~ ".." ~/ exp ~ "]" | "[" ~ exp ~ ".." ~ Pass ~ "]" | "[" ~ exp ~ ".." ~ exp ~ "]" | "[" ~ exp ~ "]" | "[" ~ exp ~ ":=" ~ exp ~ "]" | StringIn("++"; "+"; "-") | "union" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "intersection" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "setminus" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "subset" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | StringIn("*"; "/"; "\\"; "%") | ")" at index 77747  67; 111; 105; 110)): $Struct)                     ^ (testsresourcesexamplesserenuscoin.vy.vpr@921.94)); List(Parse error: Expected found ": $Struct)\n  self :="; expected invalid identifier (could be a keyword) | "." ~ idnuse | "[" ~ Pass ~ ".." ~/ exp ~ "]" | "[" ~ exp ~ ".." ~ Pass ~ "]" | "[" ~ exp ~ ".." ~ exp ~ "]" | "[" ~ exp ~ "]" | "[" ~ exp ~ ":=" ~ exp ~ "]" | StringIn("++"; "+"; "-") | "union" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "intersection" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "setminus" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "subset" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | StringIn("*"; "/"; "\\"; "%") | ")" at index 77747  67; 111; 105; 110)): $Struct)                     ^ (testsresourcesexamplesserenuscoin.vy.vpr@921.94)); List(Parse error: Expected found ": $Struct)\n  self :="; expected invalid identifier (could be a keyword) | "." ~ idnuse | "[" ~ Pass ~ ".." ~/ exp ~ "]" | "[" ~ exp ~ ".." ~ Pass ~ "]" | "[" ~ exp ~ ".." ~ exp ~ "]" | "[" ~ exp ~ "]" | "[" ~ exp ~ ":=" ~ exp ~ "]" | StringIn("++"; "+"; "-") | "union" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "intersection" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "setminus" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "subset" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | StringIn("*"; "/"; "\\"; "%") | ")" at index 77747  67; 111; 105; 110)): $Struct)                     ^ (testsresourcesexamplesserenuscoin.vy.vpr@921.94)))
../../src/test/resources/frontend-generated/testsresourcesexamplesstock.vy.vpr,0,9231,127,1,9106,9182,9406,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/testsresourcesexamplesuniswap.vy.vpr,1,1920,10,0,1907,1922,1933,Vector(List(Parse error: Expected found ": $Struct)\n  self :="; expected invalid identifier (could be a keyword) | "." ~ idnuse | "[" ~ Pass ~ ".." ~/ exp ~ "]" | "[" ~ exp ~ ".." ~ Pass ~ "]" | "[" ~ exp ~ ".." ~ exp ~ "]" | "[" ~ exp ~ "]" | "[" ~ exp ~ ":=" ~ exp ~ "]" | StringIn("++"; "+"; "-") | "union" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "intersection" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "setminus" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "subset" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | StringIn("*"; "/"; "\\"; "%") | ")" at index 82267 ; 0; 0; 0; 0; 0; 0)): $Struct)                     ^ (testsresourcesexamplesuniswap.vy.vpr@1038.148)); List(Parse error: Expected found ": $Struct)\n  self :="; expected invalid identifier (could be a keyword) | "." ~ idnuse | "[" ~ Pass ~ ".." ~/ exp ~ "]" | "[" ~ exp ~ ".." ~ Pass ~ "]" | "[" ~ exp ~ ".." ~ exp ~ "]" | "[" ~ exp ~ "]" | "[" ~ exp ~ ":=" ~ exp ~ "]" | StringIn("++"; "+"; "-") | "union" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "intersection" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "setminus" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "subset" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | StringIn("*"; "/"; "\\"; "%") | ")" at index 82267 ; 0; 0; 0; 0; 0; 0)): $Struct)                     ^ (testsresourcesexamplesuniswap.vy.vpr@1038.148)); List(Parse error: Expected found ": $Struct)\n  self :="; expected invalid identifier (could be a keyword) | "." ~ idnuse | "[" ~ Pass ~ ".." ~/ exp ~ "]" | "[" ~ exp ~ ".." ~ Pass ~ "]" | "[" ~ exp ~ ".." ~ exp ~ "]" | "[" ~ exp ~ "]" | "[" ~ exp ~ ":=" ~ exp ~ "]" | StringIn("++"; "+"; "-") | "union" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "intersection" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "setminus" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "subset" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | StringIn("*"; "/"; "\\"; "%") | ")" at index 82267 ; 0; 0; 0; 0; 0; 0)): $Struct)                     ^ (testsresourcesexamplesuniswap.vy.vpr@1038.148)); List(Parse error: Expected found ": $Struct)\n  self :="; expected invalid identifier (could be a keyword) | "." ~ idnuse | "[" ~ Pass ~ ".." ~/ exp ~ "]" | "[" ~ exp ~ ".." ~ Pass ~ "]" | "[" ~ exp ~ ".." ~ exp ~ "]" | "[" ~ exp ~ "]" | "[" ~ exp ~ ":=" ~ exp ~ "]" | StringIn("++"; "+"; "-") | "union" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "intersection" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "setminus" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "subset" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | StringIn("*"; "/"; "\\"; "%") | ")" at index 82267 ; 0; 0; 0; 0; 0; 0)): $Struct)                     ^ (testsresourcesexamplesuniswap.vy.vpr@1038.148)); List(Parse error: Expected found ": $Struct)\n  self :="; expected invalid identifier (could be a keyword) | "." ~ idnuse | "[" ~ Pass ~ ".." ~/ exp ~ "]" | "[" ~ exp ~ ".." ~ Pass ~ "]" | "[" ~ exp ~ ".." ~ exp ~ "]" | "[" ~ exp ~ "]" | "[" ~ exp ~ ":=" ~ exp ~ "]" | StringIn("++"; "+"; "-") | "union" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "intersection" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "setminus" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | "subset" ~ !(CharIn("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$_")) | StringIn("*"; "/"; "\\"; "%") | ")" at index 82267 ; 0; 0; 0; 0; 0; 0)): $Struct)                     ^ (testsresourcesexamplesuniswap.vy.vpr@1038.148)))
../../src/test/resources/frontend-generated/testsresourcesissuesissue020c.vy.vpr,0,3887,24,0,3857,3887,3917,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/testsresourcesissuesissue028a.vy.vpr,0,1015,10,0,1003,1014,1029,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/testsresourceslanguageaccessible_heuristics_argument.vy.vpr,0,5331,54,1,5261,5340,5393,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/testsresourceslanguageaddress.vy.vpr,1,6098,72,1,6031,6066,6199,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion $unwrap(l$a) == ($struct_get($struct_loc(($map_get($contracts; 1): $Struct); 0)): Int) might not hold. (testsresourceslanguageaddress.vy.vpr@1508.3)); List([assert.failed:assertion.false] Assert might fail. Assertion $unwrap(l$a) == ($struct_get($struct_loc(($map_get($contracts; 1): $Struct); 0)): Int) might not hold. (testsresourceslanguageaddress.vy.vpr@1508.3)); List([assert.failed:assertion.false] Assert might fail. Assertion $unwrap(l$a) == ($struct_get($struct_loc(($map_get($contracts; 1): $Struct); 0)): Int) might not hold. (testsresourceslanguageaddress.vy.vpr@1508.3)); List([assert.failed:assertion.false] Assert might fail. Assertion $unwrap(l$a) == ($struct_get($struct_loc(($map_get($contracts; 1): $Struct); 0)): Int) might not hold. (testsresourceslanguageaddress.vy.vpr@1508.3)); List([assert.failed:assertion.false] Assert might fail. Assertion $unwrap(l$a) == ($struct_get($struct_loc(($map_get($contracts; 1): $Struct); 0)): Int) might not hold. (testsresourceslanguageaddress.vy.vpr@1508.3)))
../../src/test/resources/frontend-generated/testsresourceslanguagearray.vy.vpr,7,15471,52,0,15433,15435,15546,Vector(List([exhale.failed:assertion.false] Exhale might fail. Assertion $res == 101 might not hold. (testsresourceslanguagearray.vy.vpr@1538.3); [exhale.failed:assertion.false] Exhale might fail. Assertion $res == 0 might not hold. (testsresourceslanguagearray.vy.vpr@1839.3); [exhale.failed:assertion.false] Exhale might fail. Assertion $res == 0 might not hold. (testsresourceslanguagearray.vy.vpr@1941.3); [assert.failed:assertion.false] Assert might fail. Assertion ($struct_get($struct_loc(self; 3)): Seq[Int]) == ($struct_get($struct_loc($old_self; 3)): Seq[Int]) might not hold. (testsresourceslanguagearray.vy.vpr@2046.3); [exhale.failed:seq.index.negative] Exhale might fail. Index $unwrap(l$n) into l$a might be negative. (testsresourceslanguagearray.vy.vpr@2329.3); [exhale.failed:seq.index.length] Exhale might fail. Index $unwrap(l$n) into l$a might exceed sequence length. (testsresourceslanguagearray.vy.vpr@2425.3); [exhale.failed:assertion.false] Exhale might fail. Assertion l$a == Seq(1; 2; 3) && $unwrap(l$element) == 4 ==> $res might not hold. (testsresourceslanguagearray.vy.vpr@2630.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion $res == 101 might not hold. (testsresourceslanguagearray.vy.vpr@1538.3); [exhale.failed:assertion.false] Exhale might fail. Assertion $res == 0 might not hold. (testsresourceslanguagearray.vy.vpr@1839.3); [exhale.failed:assertion.false] Exhale might fail. Assertion $res == 0 might not hold. (testsresourceslanguagearray.vy.vpr@1941.3); [assert.failed:assertion.false] Assert might fail. Assertion ($struct_get($struct_loc(self; 3)): Seq[Int]) == ($struct_get($struct_loc($old_self; 3)): Seq[Int]) might not hold. (testsresourceslanguagearray.vy.vpr@2046.3); [exhale.failed:seq.index.negative] Exhale might fail. Index $unwrap(l$n) into l$a might be negative. (testsresourceslanguagearray.vy.vpr@2329.3); [exhale.failed:seq.index.length] Exhale might fail. Index $unwrap(l$n) into l$a might exceed sequence length. (testsresourceslanguagearray.vy.vpr@2425.3); [exhale.failed:assertion.false] Exhale might fail. Assertion l$a == Seq(1; 2; 3) && $unwrap(l$element) == 4 ==> $res might not hold. (testsresourceslanguagearray.vy.vpr@2630.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion $res == 101 might not hold. (testsresourceslanguagearray.vy.vpr@1538.3); [exhale.failed:assertion.false] Exhale might fail. Assertion $res == 0 might not hold. (testsresourceslanguagearray.vy.vpr@1839.3); [exhale.failed:assertion.false] Exhale might fail. Assertion $res == 0 might not hold. (testsresourceslanguagearray.vy.vpr@1941.3); [assert.failed:assertion.false] Assert might fail. Assertion ($struct_get($struct_loc(self; 3)): Seq[Int]) == ($struct_get($struct_loc($old_self; 3)): Seq[Int]) might not hold. (testsresourceslanguagearray.vy.vpr@2046.3); [exhale.failed:seq.index.negative] Exhale might fail. Index $unwrap(l$n) into l$a might be negative. (testsresourceslanguagearray.vy.vpr@2329.3); [exhale.failed:seq.index.length] Exhale might fail. Index $unwrap(l$n) into l$a might exceed sequence length. (testsresourceslanguagearray.vy.vpr@2425.3); [exhale.failed:assertion.false] Exhale might fail. Assertion l$a == Seq(1; 2; 3) && $unwrap(l$element) == 4 ==> $res might not hold. (testsresourceslanguagearray.vy.vpr@2630.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion $res == 101 might not hold. (testsresourceslanguagearray.vy.vpr@1538.3); [exhale.failed:assertion.false] Exhale might fail. Assertion $res == 0 might not hold. (testsresourceslanguagearray.vy.vpr@1839.3); [exhale.failed:assertion.false] Exhale might fail. Assertion $res == 0 might not hold. (testsresourceslanguagearray.vy.vpr@1941.3); [assert.failed:assertion.false] Assert might fail. Assertion ($struct_get($struct_loc(self; 3)): Seq[Int]) == ($struct_get($struct_loc($old_self; 3)): Seq[Int]) might not hold. (testsresourceslanguagearray.vy.vpr@2046.3); [exhale.failed:seq.index.negative] Exhale might fail. Index $unwrap(l$n) into l$a might be negative. (testsresourceslanguagearray.vy.vpr@2329.3); [exhale.failed:seq.index.length] Exhale might fail. Index $unwrap(l$n) into l$a might exceed sequence length. (testsresourceslanguagearray.vy.vpr@2425.3); [exhale.failed:assertion.false] Exhale might fail. Assertion l$a == Seq(1; 2; 3) && $unwrap(l$element) == 4 ==> $res might not hold. (testsresourceslanguagearray.vy.vpr@2630.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion $res == 101 might not hold. (testsresourceslanguagearray.vy.vpr@1538.3); [exhale.failed:assertion.false] Exhale might fail. Assertion $res == 0 might not hold. (testsresourceslanguagearray.vy.vpr@1839.3); [exhale.failed:assertion.false] Exhale might fail. Assertion $res == 0 might not hold. (testsresourceslanguagearray.vy.vpr@1941.3); [assert.failed:assertion.false] Assert might fail. Assertion ($struct_get($struct_loc(self; 3)): Seq[Int]) == ($struct_get($struct_loc($old_self; 3)): Seq[Int]) might not hold. (testsresourceslanguagearray.vy.vpr@2046.3); [exhale.failed:seq.index.negative] Exhale might fail. Index $unwrap(l$n) into l$a might be negative. (testsresourceslanguagearray.vy.vpr@2329.3); [exhale.failed:seq.index.length] Exhale might fail. Index $unwrap(l$n) into l$a might exceed sequence length. (testsresourceslanguagearray.vy.vpr@2425.3); [exhale.failed:assertion.false] Exhale might fail. Assertion l$a == Seq(1; 2; 3) && $unwrap(l$element) == 4 ==> $res might not hold. (testsresourceslanguagearray.vy.vpr@2630.3)))
../../src/test/resources/frontend-generated/testsresourceslanguagebalance.vy.vpr,0,3862,26,0,3842,3846,3900,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/testsresourceslanguagebytes32.vy.vpr,0,4032,60,1,3985,3993,4118,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/testsresourceslanguageconfig.vy.vpr,0,3655,66,1,3568,3669,3730,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/testsresourceslanguageconstants.vy.vpr,0,5163,43,0,5108,5170,5213,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/testsresourceslanguagecontract.vy.vpr,2,9989,38,0,9938,10000,10030,Vector(List([exhale.failed:assertion.false] Exhale might fail. Assertion ($struct_get($struct_loc(self; 2)): Int) == ($struct_get($struct_loc($pre_self; 2)): Int) might not hold. (testsresourceslanguagecontract.vy.vpr@1455.3); [assert.failed:assertion.false] Assert might fail. Assertion ($struct_get($struct_loc(self; 1)): Int) == ($struct_get($struct_loc($old_self; 1)): Int) might not hold. (testsresourceslanguagecontract.vy.vpr@1733.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion ($struct_get($struct_loc(self; 2)): Int) == ($struct_get($struct_loc($pre_self; 2)): Int) might not hold. (testsresourceslanguagecontract.vy.vpr@1455.3); [assert.failed:assertion.false] Assert might fail. Assertion ($struct_get($struct_loc(self; 1)): Int) == ($struct_get($struct_loc($old_self; 1)): Int) might not hold. (testsresourceslanguagecontract.vy.vpr@1733.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion ($struct_get($struct_loc(self; 2)): Int) == ($struct_get($struct_loc($pre_self; 2)): Int) might not hold. (testsresourceslanguagecontract.vy.vpr@1455.3); [assert.failed:assertion.false] Assert might fail. Assertion ($struct_get($struct_loc(self; 1)): Int) == ($struct_get($struct_loc($old_self; 1)): Int) might not hold. (testsresourceslanguagecontract.vy.vpr@1733.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion ($struct_get($struct_loc(self; 2)): Int) == ($struct_get($struct_loc($pre_self; 2)): Int) might not hold. (testsresourceslanguagecontract.vy.vpr@1455.3); [assert.failed:assertion.false] Assert might fail. Assertion ($struct_get($struct_loc(self; 1)): Int) == ($struct_get($struct_loc($old_self; 1)): Int) might not hold. (testsresourceslanguagecontract.vy.vpr@1733.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion ($struct_get($struct_loc(self; 2)): Int) == ($struct_get($struct_loc($pre_self; 2)): Int) might not hold. (testsresourceslanguagecontract.vy.vpr@1455.3); [assert.failed:assertion.false] Assert might fail. Assertion ($struct_get($struct_loc(self; 1)): Int) == ($struct_get($struct_loc($old_self; 1)): Int) might not hold. (testsresourceslanguagecontract.vy.vpr@1733.3)))
../../src/test/resources/frontend-generated/testssifverificationexamplesexample-decl.py.vpr,1,7232,86,1,7124,7237,7335,Vector(List([postcondition.violated:assertion.false] Postcondition of check might not hold. Assertion p1 && p2 ==> _res == _res_0 might not hold. (testssifverificationexamplesexample-decl.py.vpr@623.11)); List([postcondition.violated:assertion.false] Postcondition of check might not hold. Assertion p1 && p2 ==> _res == _res_0 might not hold. (testssifverificationexamplesexample-decl.py.vpr@623.11)); List([postcondition.violated:assertion.false] Postcondition of check might not hold. Assertion p1 && p2 ==> _res == _res_0 might not hold. (testssifverificationexamplesexample-decl.py.vpr@623.11)); List([postcondition.violated:assertion.false] Postcondition of check might not hold. Assertion p1 && p2 ==> _res == _res_0 might not hold. (testssifverificationexamplesexample-decl.py.vpr@623.11)); List([postcondition.violated:assertion.false] Postcondition of check might not hold. Assertion p1 && p2 ==> _res == _res_0 might not hold. (testssifverificationexamplesexample-decl.py.vpr@623.11)))
../../src/test/resources/frontend-generated/testssifverificationexamplesjoana-fig3-br.py.vpr,1,6369,17,0,6355,6359,6393,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion p1_1 && p2_1 ==> !int___eq__(_checkDefined(x_0; 3170168); __prim__int___box__(0)) == !int___eq__(x_0_0; __prim__int___box__(0)) might not hold. (testssifverificationexamplesjoana-fig3-br.py.vpr@718.3)); List([assert.failed:assertion.false] Assert might fail. Assertion p1_1 && p2_1 ==> !int___eq__(_checkDefined(x_0; 3170168); __prim__int___box__(0)) == !int___eq__(x_0_0; __prim__int___box__(0)) might not hold. (testssifverificationexamplesjoana-fig3-br.py.vpr@718.3)); List([assert.failed:assertion.false] Assert might fail. Assertion p1_1 && p2_1 ==> !int___eq__(_checkDefined(x_0; 3170168); __prim__int___box__(0)) == !int___eq__(x_0_0; __prim__int___box__(0)) might not hold. (testssifverificationexamplesjoana-fig3-br.py.vpr@718.3)); List([assert.failed:assertion.false] Assert might fail. Assertion p1_1 && p2_1 ==> !int___eq__(_checkDefined(x_0; 3170168); __prim__int___box__(0)) == !int___eq__(x_0_0; __prim__int___box__(0)) might not hold. (testssifverificationexamplesjoana-fig3-br.py.vpr@718.3)); List([assert.failed:assertion.false] Assert might fail. Assertion p1_1 && p2_1 ==> !int___eq__(_checkDefined(x_0; 3170168); __prim__int___box__(0)) == !int___eq__(x_0_0; __prim__int___box__(0)) might not hold. (testssifverificationexamplesjoana-fig3-br.py.vpr@718.3)))
../../src/test/resources/frontend-generated/testssifverificationexamplesterauchi-fig4.py.vpr,0,3696,63,1,3626,3685,3779,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/testssifverificationtest_exception_loop.py.vpr,3,14279,130,0,14180,14194,14464,Vector(List([postcondition.violated:assertion.false] Postcondition of break_out_exception_2 might not hold. Assertion int___eq__(c_0_0.Container_valuep; __prim__int___box__(9)) might not hold. (testssifverificationtest_exception_loop.py.vpr@903.11); [postcondition.violated:assertion.false] Postcondition of break_out_exception_3 might not hold. Assertion int___eq__(c_1.Container_value; __prim__int___box__(9)) might not hold. (testssifverificationtest_exception_loop.py.vpr@1263.11); [postcondition.violated:assertion.false] Postcondition of break_out_2 might not hold. Assertion p1_17 ==> int___eq__(c_3.Container_value; __prim__int___box__(9)) might not hold. (testssifverificationtest_exception_loop.py.vpr@1851.11)); List([postcondition.violated:assertion.false] Postcondition of break_out_exception_2 might not hold. Assertion int___eq__(c_0_0.Container_valuep; __prim__int___box__(9)) might not hold. (testssifverificationtest_exception_loop.py.vpr@903.11); [postcondition.violated:assertion.false] Postcondition of break_out_exception_3 might not hold. Assertion int___eq__(c_1.Container_value; __prim__int___box__(9)) might not hold. (testssifverificationtest_exception_loop.py.vpr@1263.11); [postcondition.violated:assertion.false] Postcondition of break_out_2 might not hold. Assertion p1_17 ==> int___eq__(c_3.Container_value; __prim__int___box__(9)) might not hold. (testssifverificationtest_exception_loop.py.vpr@1851.11)); List([postcondition.violated:assertion.false] Postcondition of break_out_exception_2 might not hold. Assertion int___eq__(c_0_0.Container_valuep; __prim__int___box__(9)) might not hold. (testssifverificationtest_exception_loop.py.vpr@903.11); [postcondition.violated:assertion.false] Postcondition of break_out_exception_3 might not hold. Assertion int___eq__(c_1.Container_value; __prim__int___box__(9)) might not hold. (testssifverificationtest_exception_loop.py.vpr@1263.11); [postcondition.violated:assertion.false] Postcondition of break_out_2 might not hold. Assertion p1_17 ==> int___eq__(c_3.Container_value; __prim__int___box__(9)) might not hold. (testssifverificationtest_exception_loop.py.vpr@1851.11)); List([postcondition.violated:assertion.false] Postcondition of break_out_exception_2 might not hold. Assertion int___eq__(c_0_0.Container_valuep; __prim__int___box__(9)) might not hold. (testssifverificationtest_exception_loop.py.vpr@903.11); [postcondition.violated:assertion.false] Postcondition of break_out_exception_3 might not hold. Assertion int___eq__(c_1.Container_value; __prim__int___box__(9)) might not hold. (testssifverificationtest_exception_loop.py.vpr@1263.11); [postcondition.violated:assertion.false] Postcondition of break_out_2 might not hold. Assertion p1_17 ==> int___eq__(c_3.Container_value; __prim__int___box__(9)) might not hold. (testssifverificationtest_exception_loop.py.vpr@1851.11)); List([postcondition.violated:assertion.false] Postcondition of break_out_exception_2 might not hold. Assertion int___eq__(c_0_0.Container_valuep; __prim__int___box__(9)) might not hold. (testssifverificationtest_exception_loop.py.vpr@903.11); [postcondition.violated:assertion.false] Postcondition of break_out_exception_3 might not hold. Assertion int___eq__(c_1.Container_value; __prim__int___box__(9)) might not hold. (testssifverificationtest_exception_loop.py.vpr@1263.11); [postcondition.violated:assertion.false] Postcondition of break_out_2 might not hold. Assertion p1_17 ==> int___eq__(c_3.Container_value; __prim__int___box__(9)) might not hold. (testssifverificationtest_exception_loop.py.vpr@1851.11)))
../../src/test/resources/frontend-generated/testssifverificationtest_fields_assign.py.vpr,0,3925,19,0,3898,3935,3942,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/testssifverificationtest_lowval.py.vpr,7,9980,44,0,9940,9958,10043,Vector(List([postcondition.violated:assertion.false] Postcondition of example_low might not hold. Assertion p1 && p2 ==> _res == _res_0 might not hold. (testssifverificationtest_lowval.py.vpr@603.11); [postcondition.violated:assertion.false] Postcondition of example_lowval might not hold. Assertion p1_1 && p2_1 ==> _res == _res_1 might not hold. (testssifverificationtest_lowval.py.vpr@792.11); [postcondition.violated:assertion.false] Postcondition of example_tuple_low might not hold. Assertion p1_3 && p2_3 ==> tuple___create2__(_res.Example_f; _res.Example_g; int(); int(); 0) == tuple___create2__(_res_2.Example_fp; _res_2.Example_gp; int(); int(); 0) might not hold. (testssifverificationtest_lowval.py.vpr@981.11); [postcondition.violated:assertion.false] Postcondition of example_tuple_lowval might not hold. Assertion p1_5 && p2_5 ==> tuple___eq__(tuple___create2__(_res.Example_f; _res.Example_g; int(); int(); 1); tuple___create2__(_res_3.Example_fp; _res_3.Example_gp; int(); int(); 1)) might not hold. (testssifverificationtest_lowval.py.vpr@1170.11); [postcondition.violated:assertion.false] Postcondition of int_unchanged_low might not hold. Assertion (p1_11 && p2_11 ==> x_0 == x_0_0) ==> p1_11 && p2_11 ==> _res == _res_6 might not hold. (testssifverificationtest_lowval.py.vpr@1610.11); [postcondition.violated:assertion.false] Postcondition of bool_int might not hold. Assertion p1_15 && p2_15 ==> _res == _res_8 might not hold. (testssifverificationtest_lowval.py.vpr@1743.11); [postcondition.violated:assertion.false] Postcondition of string_container_low might not hold. Assertion (p1_19 && p2_19 ==> x_2 == x_2_0) ==> p1_19 && p2_19 ==> _res == _res_10 might not hold. (testssifverificationtest_lowval.py.vpr@1868.11)); List([postcondition.violated:assertion.false] Postcondition of example_low might not hold. Assertion p1 && p2 ==> _res == _res_0 might not hold. (testssifverificationtest_lowval.py.vpr@603.11); [postcondition.violated:assertion.false] Postcondition of example_lowval might not hold. Assertion p1_1 && p2_1 ==> _res == _res_1 might not hold. (testssifverificationtest_lowval.py.vpr@792.11); [postcondition.violated:assertion.false] Postcondition of example_tuple_low might not hold. Assertion p1_3 && p2_3 ==> tuple___create2__(_res.Example_f; _res.Example_g; int(); int(); 0) == tuple___create2__(_res_2.Example_fp; _res_2.Example_gp; int(); int(); 0) might not hold. (testssifverificationtest_lowval.py.vpr@981.11); [postcondition.violated:assertion.false] Postcondition of example_tuple_lowval might not hold. Assertion p1_5 && p2_5 ==> tuple___eq__(tuple___create2__(_res.Example_f; _res.Example_g; int(); int(); 1); tuple___create2__(_res_3.Example_fp; _res_3.Example_gp; int(); int(); 1)) might not hold. (testssifverificationtest_lowval.py.vpr@1170.11); [postcondition.violated:assertion.false] Postcondition of int_unchanged_low might not hold. Assertion (p1_11 && p2_11 ==> x_0 == x_0_0) ==> p1_11 && p2_11 ==> _res == _res_6 might not hold. (testssifverificationtest_lowval.py.vpr@1610.11); [postcondition.violated:assertion.false] Postcondition of bool_int might not hold. Assertion p1_15 && p2_15 ==> _res == _res_8 might not hold. (testssifverificationtest_lowval.py.vpr@1743.11); [postcondition.violated:assertion.false] Postcondition of string_container_low might not hold. Assertion (p1_19 && p2_19 ==> x_2 == x_2_0) ==> p1_19 && p2_19 ==> _res == _res_10 might not hold. (testssifverificationtest_lowval.py.vpr@1868.11)); List([postcondition.violated:assertion.false] Postcondition of example_low might not hold. Assertion p1 && p2 ==> _res == _res_0 might not hold. (testssifverificationtest_lowval.py.vpr@603.11); [postcondition.violated:assertion.false] Postcondition of example_lowval might not hold. Assertion p1_1 && p2_1 ==> _res == _res_1 might not hold. (testssifverificationtest_lowval.py.vpr@792.11); [postcondition.violated:assertion.false] Postcondition of example_tuple_low might not hold. Assertion p1_3 && p2_3 ==> tuple___create2__(_res.Example_f; _res.Example_g; int(); int(); 0) == tuple___create2__(_res_2.Example_fp; _res_2.Example_gp; int(); int(); 0) might not hold. (testssifverificationtest_lowval.py.vpr@981.11); [postcondition.violated:assertion.false] Postcondition of example_tuple_lowval might not hold. Assertion p1_5 && p2_5 ==> tuple___eq__(tuple___create2__(_res.Example_f; _res.Example_g; int(); int(); 1); tuple___create2__(_res_3.Example_fp; _res_3.Example_gp; int(); int(); 1)) might not hold. (testssifverificationtest_lowval.py.vpr@1170.11); [postcondition.violated:assertion.false] Postcondition of int_unchanged_low might not hold. Assertion (p1_11 && p2_11 ==> x_0 == x_0_0) ==> p1_11 && p2_11 ==> _res == _res_6 might not hold. (testssifverificationtest_lowval.py.vpr@1610.11); [postcondition.violated:assertion.false] Postcondition of bool_int might not hold. Assertion p1_15 && p2_15 ==> _res == _res_8 might not hold. (testssifverificationtest_lowval.py.vpr@1743.11); [postcondition.violated:assertion.false] Postcondition of string_container_low might not hold. Assertion (p1_19 && p2_19 ==> x_2 == x_2_0) ==> p1_19 && p2_19 ==> _res == _res_10 might not hold. (testssifverificationtest_lowval.py.vpr@1868.11)); List([postcondition.violated:assertion.false] Postcondition of example_low might not hold. Assertion p1 && p2 ==> _res == _res_0 might not hold. (testssifverificationtest_lowval.py.vpr@603.11); [postcondition.violated:assertion.false] Postcondition of example_lowval might not hold. Assertion p1_1 && p2_1 ==> _res == _res_1 might not hold. (testssifverificationtest_lowval.py.vpr@792.11); [postcondition.violated:assertion.false] Postcondition of example_tuple_low might not hold. Assertion p1_3 && p2_3 ==> tuple___create2__(_res.Example_f; _res.Example_g; int(); int(); 0) == tuple___create2__(_res_2.Example_fp; _res_2.Example_gp; int(); int(); 0) might not hold. (testssifverificationtest_lowval.py.vpr@981.11); [postcondition.violated:assertion.false] Postcondition of example_tuple_lowval might not hold. Assertion p1_5 && p2_5 ==> tuple___eq__(tuple___create2__(_res.Example_f; _res.Example_g; int(); int(); 1); tuple___create2__(_res_3.Example_fp; _res_3.Example_gp; int(); int(); 1)) might not hold. (testssifverificationtest_lowval.py.vpr@1170.11); [postcondition.violated:assertion.false] Postcondition of int_unchanged_low might not hold. Assertion (p1_11 && p2_11 ==> x_0 == x_0_0) ==> p1_11 && p2_11 ==> _res == _res_6 might not hold. (testssifverificationtest_lowval.py.vpr@1610.11); [postcondition.violated:assertion.false] Postcondition of bool_int might not hold. Assertion p1_15 && p2_15 ==> _res == _res_8 might not hold. (testssifverificationtest_lowval.py.vpr@1743.11); [postcondition.violated:assertion.false] Postcondition of string_container_low might not hold. Assertion (p1_19 && p2_19 ==> x_2 == x_2_0) ==> p1_19 && p2_19 ==> _res == _res_10 might not hold. (testssifverificationtest_lowval.py.vpr@1868.11)); List([postcondition.violated:assertion.false] Postcondition of example_low might not hold. Assertion p1 && p2 ==> _res == _res_0 might not hold. (testssifverificationtest_lowval.py.vpr@603.11); [postcondition.violated:assertion.false] Postcondition of example_lowval might not hold. Assertion p1_1 && p2_1 ==> _res == _res_1 might not hold. (testssifverificationtest_lowval.py.vpr@792.11); [postcondition.violated:assertion.false] Postcondition of example_tuple_low might not hold. Assertion p1_3 && p2_3 ==> tuple___create2__(_res.Example_f; _res.Example_g; int(); int(); 0) == tuple___create2__(_res_2.Example_fp; _res_2.Example_gp; int(); int(); 0) might not hold. (testssifverificationtest_lowval.py.vpr@981.11); [postcondition.violated:assertion.false] Postcondition of example_tuple_lowval might not hold. Assertion p1_5 && p2_5 ==> tuple___eq__(tuple___create2__(_res.Example_f; _res.Example_g; int(); int(); 1); tuple___create2__(_res_3.Example_fp; _res_3.Example_gp; int(); int(); 1)) might not hold. (testssifverificationtest_lowval.py.vpr@1170.11); [postcondition.violated:assertion.false] Postcondition of int_unchanged_low might not hold. Assertion (p1_11 && p2_11 ==> x_0 == x_0_0) ==> p1_11 && p2_11 ==> _res == _res_6 might not hold. (testssifverificationtest_lowval.py.vpr@1610.11); [postcondition.violated:assertion.false] Postcondition of bool_int might not hold. Assertion p1_15 && p2_15 ==> _res == _res_8 might not hold. (testssifverificationtest_lowval.py.vpr@1743.11); [postcondition.violated:assertion.false] Postcondition of string_container_low might not hold. Assertion (p1_19 && p2_19 ==> x_2 == x_2_0) ==> p1_19 && p2_19 ==> _res == _res_10 might not hold. (testssifverificationtest_lowval.py.vpr@1868.11)))
../../src/test/resources/frontend-generated/testssifverificationtest_threads.py.vpr,4,13493,32,0,13465,13475,13539,Vector(List([exhale.failed:assertion.false] Exhale might fail. Assertion p1_9 && p2_9 ==> thread_arg == thread_arg_9 might not hold. (testssifverificationtest_threads.py.vpr@1613.3); [exhale.failed:assertion.false] Exhale might fail. Assertion p1_13 == p2_13 might not hold. (testssifverificationtest_threads.py.vpr@1777.3); [assert.failed:assertion.false] Assert might fail. Assertion p1_15 && p2_15 ==> _checkDefined(c_1; 3235683).Cell_val == c_1_0.Cell_valp might not hold. (testssifverificationtest_threads.py.vpr@2083.3); [assert.failed:assertion.false] Assert might fail. Assertion p1_21 ==> _joinable(_checkDefined(t_2; 3301236)) might not hold. (testssifverificationtest_threads.py.vpr@2234.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion p1_9 && p2_9 ==> thread_arg == thread_arg_9 might not hold. (testssifverificationtest_threads.py.vpr@1613.3); [exhale.failed:assertion.false] Exhale might fail. Assertion p1_13 == p2_13 might not hold. (testssifverificationtest_threads.py.vpr@1777.3); [assert.failed:assertion.false] Assert might fail. Assertion p1_15 && p2_15 ==> _checkDefined(c_1; 3235683).Cell_val == c_1_0.Cell_valp might not hold. (testssifverificationtest_threads.py.vpr@2083.3); [assert.failed:assertion.false] Assert might fail. Assertion p1_21 ==> _joinable(_checkDefined(t_2; 3301236)) might not hold. (testssifverificationtest_threads.py.vpr@2234.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion p1_9 && p2_9 ==> thread_arg == thread_arg_9 might not hold. (testssifverificationtest_threads.py.vpr@1613.3); [exhale.failed:assertion.false] Exhale might fail. Assertion p1_13 == p2_13 might not hold. (testssifverificationtest_threads.py.vpr@1777.3); [assert.failed:assertion.false] Assert might fail. Assertion p1_15 && p2_15 ==> _checkDefined(c_1; 3235683).Cell_val == c_1_0.Cell_valp might not hold. (testssifverificationtest_threads.py.vpr@2083.3); [assert.failed:assertion.false] Assert might fail. Assertion p1_21 ==> _joinable(_checkDefined(t_2; 3301236)) might not hold. (testssifverificationtest_threads.py.vpr@2234.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion p1_9 && p2_9 ==> thread_arg == thread_arg_9 might not hold. (testssifverificationtest_threads.py.vpr@1613.3); [exhale.failed:assertion.false] Exhale might fail. Assertion p1_13 == p2_13 might not hold. (testssifverificationtest_threads.py.vpr@1777.3); [assert.failed:assertion.false] Assert might fail. Assertion p1_15 && p2_15 ==> _checkDefined(c_1; 3235683).Cell_val == c_1_0.Cell_valp might not hold. (testssifverificationtest_threads.py.vpr@2083.3); [assert.failed:assertion.false] Assert might fail. Assertion p1_21 ==> _joinable(_checkDefined(t_2; 3301236)) might not hold. (testssifverificationtest_threads.py.vpr@2234.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion p1_9 && p2_9 ==> thread_arg == thread_arg_9 might not hold. (testssifverificationtest_threads.py.vpr@1613.3); [exhale.failed:assertion.false] Exhale might fail. Assertion p1_13 == p2_13 might not hold. (testssifverificationtest_threads.py.vpr@1777.3); [assert.failed:assertion.false] Assert might fail. Assertion p1_15 && p2_15 ==> _checkDefined(c_1; 3235683).Cell_val == c_1_0.Cell_valp might not hold. (testssifverificationtest_threads.py.vpr@2083.3); [assert.failed:assertion.false] Assert might fail. Assertion p1_21 ==> _joinable(_checkDefined(t_2; 3301236)) might not hold. (testssifverificationtest_threads.py.vpr@2234.3)))
../../src/test/resources/frontend-generated/testssifverificationtest_try_catch.py.vpr,1,16631,133,0,16481,16606,16806,Vector(List([postcondition.violated:assertion.false] Postcondition of m2 might not hold. Assertion p1_3 ==> bool___unbox__(b_0) ==> int___eq__(_res; __prim__int___box__(-2)) might not hold. (testssifverificationtest_try_catch.py.vpr@779.11)); List([postcondition.violated:assertion.false] Postcondition of m2 might not hold. Assertion p1_3 ==> bool___unbox__(b_0) ==> int___eq__(_res; __prim__int___box__(-2)) might not hold. (testssifverificationtest_try_catch.py.vpr@779.11)); List([postcondition.violated:assertion.false] Postcondition of m2 might not hold. Assertion p1_3 ==> bool___unbox__(b_0) ==> int___eq__(_res; __prim__int___box__(-2)) might not hold. (testssifverificationtest_try_catch.py.vpr@779.11)); List([postcondition.violated:assertion.false] Postcondition of m2 might not hold. Assertion p1_3 ==> bool___unbox__(b_0) ==> int___eq__(_res; __prim__int___box__(-2)) might not hold. (testssifverificationtest_try_catch.py.vpr@779.11)); List([postcondition.violated:assertion.false] Postcondition of m2 might not hold. Assertion p1_3 ==> bool___unbox__(b_0) ==> int___eq__(_res; __prim__int___box__(-2)) might not hold. (testssifverificationtest_try_catch.py.vpr@779.11)))
../../src/test/resources/frontend-generated/trigger-simple3.gobra.vpr,0,1046,33,3,1018,1028,1094,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/with-spec-list.rs.vpr,0,11504,405,3,10933,11740,11839,Vector(List(); List(); List(); List(); List())
