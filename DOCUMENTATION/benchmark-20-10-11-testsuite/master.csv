File,Outputs,Mean [ms],StdDev [ms],RelStdDev [%],Best [ms],Median [ms],Worst [ms], Verification results
../../src/test/resources/frontend-generated/all/assume/assume.vpr,2,1898,87,4,1779,1932,1984,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion x == y ==> none <= q && q <= p might not hold. (assume.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion b2 ==> false might not hold. (assume.vpr@36.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x == y ==> none <= q && q <= p might not hold. (assume.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion b2 ==> false might not hold. (assume.vpr@36.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x == y ==> none <= q && q <= p might not hold. (assume.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion b2 ==> false might not hold. (assume.vpr@36.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x == y ==> none <= q && q <= p might not hold. (assume.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion b2 ==> false might not hold. (assume.vpr@36.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x == y ==> none <= q && q <= p might not hold. (assume.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion b2 ==> false might not hold. (assume.vpr@36.3)))
../../src/test/resources/frontend-generated/all/assume/assume10.vpr,0,1790,48,2,1733,1787,1852,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/assume/assume10QP.vpr,0,2319,95,4,2188,2354,2415,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/assume/assume10QPpred-mod1.vpr,0,1618,32,1,1583,1609,1662,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/assume/assume10QPpred-mod2.vpr,0,1505,41,2,1452,1511,1554,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/assume/assume10QPpred-mod3.vpr,0,1545,139,8,1367,1561,1707,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/assume/assume10QPpred.vpr,0,2867,81,2,2759,2886,2957,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/assume/assume10QPwand.vpr,1,3937,29,0,3916,3918,3979,Vector(List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (assume10QPwand.vpr@34.3)); List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (assume10QPwand.vpr@34.3)); List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (assume10QPwand.vpr@34.3)); List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (assume10QPwand.vpr@34.3)); List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (assume10QPwand.vpr@34.3)))
../../src/test/resources/frontend-generated/all/basic/abstract_funcs_and_preds.vpr,5,1624,41,2,1593,1597,1684,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion fun01(x) == 0 might not hold. (abstract_funcs_and_preds.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) == fun01(y) might not hold. (abstract_funcs_and_preds.vpr@21.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(x) might not hold. (abstract_funcs_and_preds.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion !fun03(x) might not hold. (abstract_funcs_and_preds.vpr@51.3); [call.precondition:insufficient.permission] The precondition of method file_close might not hold. There might be insufficient permission to access file(id). (abstract_funcs_and_preds.vpr@69.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun01(x) == 0 might not hold. (abstract_funcs_and_preds.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) == fun01(y) might not hold. (abstract_funcs_and_preds.vpr@21.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(x) might not hold. (abstract_funcs_and_preds.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion !fun03(x) might not hold. (abstract_funcs_and_preds.vpr@51.3); [call.precondition:insufficient.permission] The precondition of method file_close might not hold. There might be insufficient permission to access file(id). (abstract_funcs_and_preds.vpr@69.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun01(x) == 0 might not hold. (abstract_funcs_and_preds.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) == fun01(y) might not hold. (abstract_funcs_and_preds.vpr@21.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(x) might not hold. (abstract_funcs_and_preds.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion !fun03(x) might not hold. (abstract_funcs_and_preds.vpr@51.3); [call.precondition:insufficient.permission] The precondition of method file_close might not hold. There might be insufficient permission to access file(id). (abstract_funcs_and_preds.vpr@69.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun01(x) == 0 might not hold. (abstract_funcs_and_preds.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) == fun01(y) might not hold. (abstract_funcs_and_preds.vpr@21.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(x) might not hold. (abstract_funcs_and_preds.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion !fun03(x) might not hold. (abstract_funcs_and_preds.vpr@51.3); [call.precondition:insufficient.permission] The precondition of method file_close might not hold. There might be insufficient permission to access file(id). (abstract_funcs_and_preds.vpr@69.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun01(x) == 0 might not hold. (abstract_funcs_and_preds.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) == fun01(y) might not hold. (abstract_funcs_and_preds.vpr@21.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(x) might not hold. (abstract_funcs_and_preds.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion !fun03(x) might not hold. (abstract_funcs_and_preds.vpr@51.3); [call.precondition:insufficient.permission] The precondition of method file_close might not hold. There might be insufficient permission to access file(id). (abstract_funcs_and_preds.vpr@69.3)))
../../src/test/resources/frontend-generated/all/basic/abstract_funcs_and_preds_consistency.vpr,5,4,0,0,4,5,5,Vector(List(abstract predicates cannot be folded (abstract_funcs_and_preds_consistency.vpr@10.12); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@12.14); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@17.24); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@24.17); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@30.20)); List(abstract predicates cannot be folded (abstract_funcs_and_preds_consistency.vpr@10.12); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@12.14); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@17.24); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@24.17); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@30.20)); List(abstract predicates cannot be folded (abstract_funcs_and_preds_consistency.vpr@10.12); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@12.14); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@17.24); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@24.17); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@30.20)); List(abstract predicates cannot be folded (abstract_funcs_and_preds_consistency.vpr@10.12); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@12.14); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@17.24); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@24.17); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@30.20)); List(abstract predicates cannot be folded (abstract_funcs_and_preds_consistency.vpr@10.12); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@12.14); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@17.24); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@24.17); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@30.20)))
../../src/test/resources/frontend-generated/all/basic/arithmetic.vpr,5,1379,16,1,1357,1387,1394,Vector(List([assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@19.5); [assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@26.5); [assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@33.5); [assert.failed:assertion.false] Assert might fail. Assertion 2 / 3 == none might not hold. (arithmetic.vpr@39.5); [assert.failed:assertion.false] Assert might fail. Assertion 2 / 3 == 3 / 4 might not hold. (arithmetic.vpr@46.5)); List([assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@19.5); [assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@26.5); [assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@33.5); [assert.failed:assertion.false] Assert might fail. Assertion 2 / 3 == none might not hold. (arithmetic.vpr@39.5); [assert.failed:assertion.false] Assert might fail. Assertion 2 / 3 == 3 / 4 might not hold. (arithmetic.vpr@46.5)); List([assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@19.5); [assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@26.5); [assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@33.5); [assert.failed:assertion.false] Assert might fail. Assertion 2 / 3 == none might not hold. (arithmetic.vpr@39.5); [assert.failed:assertion.false] Assert might fail. Assertion 2 / 3 == 3 / 4 might not hold. (arithmetic.vpr@46.5)); List([assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@19.5); [assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@26.5); [assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@33.5); [assert.failed:assertion.false] Assert might fail. Assertion 2 / 3 == none might not hold. (arithmetic.vpr@39.5); [assert.failed:assertion.false] Assert might fail. Assertion 2 / 3 == 3 / 4 might not hold. (arithmetic.vpr@46.5)); List([assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@19.5); [assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@26.5); [assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@33.5); [assert.failed:assertion.false] Assert might fail. Assertion 2 / 3 == none might not hold. (arithmetic.vpr@39.5); [assert.failed:assertion.false] Assert might fail. Assertion 2 / 3 == 3 / 4 might not hold. (arithmetic.vpr@46.5)))
../../src/test/resources/frontend-generated/all/basic/assert.vpr,0,1405,12,0,1394,1398,1423,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/basic/consistency1.vpr,2,15,2,13,13,16,18,Vector(List(Consistency error: acc(r.next.f; write) && acc(r.next.next; write) is non pure and appears where only pure expressions are allowed. (consistency1.vpr@11.81); Consistency error: acc(r.next.f; write) && acc(r.next.next; write) is non pure and appears where only pure expressions are allowed. (consistency1.vpr@22.72)); List(Consistency error: acc(r.next.f; write) && acc(r.next.next; write) is non pure and appears where only pure expressions are allowed. (consistency1.vpr@11.81); Consistency error: acc(r.next.f; write) && acc(r.next.next; write) is non pure and appears where only pure expressions are allowed. (consistency1.vpr@22.72)); List(Consistency error: acc(r.next.f; write) && acc(r.next.next; write) is non pure and appears where only pure expressions are allowed. (consistency1.vpr@11.81); Consistency error: acc(r.next.f; write) && acc(r.next.next; write) is non pure and appears where only pure expressions are allowed. (consistency1.vpr@22.72)); List(Consistency error: acc(r.next.f; write) && acc(r.next.next; write) is non pure and appears where only pure expressions are allowed. (consistency1.vpr@11.81); Consistency error: acc(r.next.f; write) && acc(r.next.next; write) is non pure and appears where only pure expressions are allowed. (consistency1.vpr@22.72)); List(Consistency error: acc(r.next.f; write) && acc(r.next.next; write) is non pure and appears where only pure expressions are allowed. (consistency1.vpr@11.81); Consistency error: acc(r.next.f; write) && acc(r.next.next; write) is non pure and appears where only pure expressions are allowed. (consistency1.vpr@22.72)))
../../src/test/resources/frontend-generated/all/basic/disjunction_fast_20.vpr,0,3121,242,7,2910,2994,3461,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/basic/disjunction_slow_20.vpr,0,2970,12,0,2954,2971,2985,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/basic/elsif.vpr,0,1319,19,1,1298,1316,1345,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/basic/fold.vpr,3,1540,56,3,1466,1553,1603,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (fold.vpr@18.5); [fold.failed:assertion.false] Folding valid(r) might fail. Assertion r.f == 0 might not hold. (fold.vpr@26.5); [unfold.failed:insufficient.permission] Unfolding valid(r) might fail. There might be insufficient permission to access valid(r). (fold.vpr@34.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (fold.vpr@18.5); [fold.failed:assertion.false] Folding valid(r) might fail. Assertion r.f == 0 might not hold. (fold.vpr@26.5); [unfold.failed:insufficient.permission] Unfolding valid(r) might fail. There might be insufficient permission to access valid(r). (fold.vpr@34.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (fold.vpr@18.5); [fold.failed:assertion.false] Folding valid(r) might fail. Assertion r.f == 0 might not hold. (fold.vpr@26.5); [unfold.failed:insufficient.permission] Unfolding valid(r) might fail. There might be insufficient permission to access valid(r). (fold.vpr@34.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (fold.vpr@18.5); [fold.failed:assertion.false] Folding valid(r) might fail. Assertion r.f == 0 might not hold. (fold.vpr@26.5); [unfold.failed:insufficient.permission] Unfolding valid(r) might fail. There might be insufficient permission to access valid(r). (fold.vpr@34.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (fold.vpr@18.5); [fold.failed:assertion.false] Folding valid(r) might fail. Assertion r.f == 0 might not hold. (fold.vpr@26.5); [unfold.failed:insufficient.permission] Unfolding valid(r) might fail. There might be insufficient permission to access valid(r). (fold.vpr@34.5)))
../../src/test/resources/frontend-generated/all/basic/func.vpr,0,1479,72,4,1425,1431,1581,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/basic/func2.vpr,5,1634,16,0,1614,1637,1653,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@12.13); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@18.13); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@27.1); [application.precondition:insufficient.permission] Precondition of function f4 might not hold. There might be insufficient permission to access r.f. (func2.vpr@35.3); [application.precondition:assertion.false] Precondition of function f4 might not hold. Assertion r.f == 2 might not hold. (func2.vpr@46.10)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@12.13); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@18.13); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@27.1); [application.precondition:insufficient.permission] Precondition of function f4 might not hold. There might be insufficient permission to access r.f. (func2.vpr@35.3); [application.precondition:assertion.false] Precondition of function f4 might not hold. Assertion r.f == 2 might not hold. (func2.vpr@46.10)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@12.13); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@18.13); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@27.1); [application.precondition:insufficient.permission] Precondition of function f4 might not hold. There might be insufficient permission to access r.f. (func2.vpr@35.3); [application.precondition:assertion.false] Precondition of function f4 might not hold. Assertion r.f == 2 might not hold. (func2.vpr@46.10)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@12.13); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@18.13); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@27.1); [application.precondition:insufficient.permission] Precondition of function f4 might not hold. There might be insufficient permission to access r.f. (func2.vpr@35.3); [application.precondition:assertion.false] Precondition of function f4 might not hold. Assertion r.f == 2 might not hold. (func2.vpr@46.10)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@12.13); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@18.13); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@27.1); [application.precondition:insufficient.permission] Precondition of function f4 might not hold. There might be insufficient permission to access r.f. (func2.vpr@35.3); [application.precondition:assertion.false] Precondition of function f4 might not hold. Assertion r.f == 2 might not hold. (func2.vpr@46.10)))
../../src/test/resources/frontend-generated/all/basic/func3.vpr,2,1589,89,5,1474,1603,1691,Vector(List([postcondition.violated:assertion.false] Postcondition of f2 might not hold. Assertion result == 2 might not hold. (func3.vpr@18.13); [assert.failed:assertion.false] Assert might fail. Assertion f3(r) == 1 might not hold. (func3.vpr@41.5)); List([postcondition.violated:assertion.false] Postcondition of f2 might not hold. Assertion result == 2 might not hold. (func3.vpr@18.13); [assert.failed:assertion.false] Assert might fail. Assertion f3(r) == 1 might not hold. (func3.vpr@41.5)); List([postcondition.violated:assertion.false] Postcondition of f2 might not hold. Assertion result == 2 might not hold. (func3.vpr@18.13); [assert.failed:assertion.false] Assert might fail. Assertion f3(r) == 1 might not hold. (func3.vpr@41.5)); List([postcondition.violated:assertion.false] Postcondition of f2 might not hold. Assertion result == 2 might not hold. (func3.vpr@18.13); [assert.failed:assertion.false] Assert might fail. Assertion f3(r) == 1 might not hold. (func3.vpr@41.5)); List([postcondition.violated:assertion.false] Postcondition of f2 might not hold. Assertion result == 2 might not hold. (func3.vpr@18.13); [assert.failed:assertion.false] Assert might fail. Assertion f3(r) == 1 might not hold. (func3.vpr@41.5)))
../../src/test/resources/frontend-generated/all/basic/funcpred.vpr,0,1605,13,0,1591,1600,1624,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/basic/goto.vpr,1,1369,69,5,1309,1333,1467,Vector(List([postcondition.violated:assertion.false] Postcondition of t1 might not hold. Assertion r > 0 might not hold. (goto.vpr@8.13)); List([postcondition.violated:assertion.false] Postcondition of t1 might not hold. Assertion r > 0 might not hold. (goto.vpr@8.13)); List([postcondition.violated:assertion.false] Postcondition of t1 might not hold. Assertion r > 0 might not hold. (goto.vpr@8.13)); List([postcondition.violated:assertion.false] Postcondition of t1 might not hold. Assertion r > 0 might not hold. (goto.vpr@8.13)); List([postcondition.violated:assertion.false] Postcondition of t1 might not hold. Assertion r > 0 might not hold. (goto.vpr@8.13)))
../../src/test/resources/frontend-generated/all/basic/heap.vpr,2,1427,40,2,1370,1454,1458,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (heap.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion a.f != c might not hold. (heap.vpr@32.5)); List([assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (heap.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion a.f != c might not hold. (heap.vpr@32.5)); List([assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (heap.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion a.f != c might not hold. (heap.vpr@32.5)); List([assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (heap.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion a.f != c might not hold. (heap.vpr@32.5)); List([assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (heap.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion a.f != c might not hold. (heap.vpr@32.5)))
../../src/test/resources/frontend-generated/all/basic/inex.vpr,2,1534,89,5,1409,1579,1615,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.f. (inex.vpr@17.5); [postcondition.violated:assertion.false] Postcondition of t4 might not hold. Assertion r.f == 3 might not hold. (inex.vpr@30.13)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.f. (inex.vpr@17.5); [postcondition.violated:assertion.false] Postcondition of t4 might not hold. Assertion r.f == 3 might not hold. (inex.vpr@30.13)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.f. (inex.vpr@17.5); [postcondition.violated:assertion.false] Postcondition of t4 might not hold. Assertion r.f == 3 might not hold. (inex.vpr@30.13)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.f. (inex.vpr@17.5); [postcondition.violated:assertion.false] Postcondition of t4 might not hold. Assertion r.f == 3 might not hold. (inex.vpr@30.13)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.f. (inex.vpr@17.5); [postcondition.violated:assertion.false] Postcondition of t4 might not hold. Assertion r.f == 3 might not hold. (inex.vpr@30.13)))
../../src/test/resources/frontend-generated/all/basic/learning-from-unfolding.vpr,0,1474,67,4,1387,1483,1552,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/basic/let.vpr,0,1502,72,4,1399,1548,1559,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/basic/let_consistency_resolver.vpr,6,3,0,0,3,4,4,Vector(List(identifier y not defined. (let_consistency_resolver.vpr@7.10); identifier y not defined. (let_consistency_resolver.vpr@12.36); Duplicate identifier `test03' at let_consistency_resolver.vpr@16.8 and at let_consistency_resolver.vpr@20.8 (let_consistency_resolver.vpr@16.8); Duplicate identifier `y' at let_consistency_resolver.vpr@16.15 and at let_consistency_resolver.vpr@17.14 (let_consistency_resolver.vpr@16.15); Duplicate identifier `y' at let_consistency_resolver.vpr@22.14 and at let_consistency_resolver.vpr@22.30 (let_consistency_resolver.vpr@22.14); identifier y not defined. (let_consistency_resolver.vpr@27.20)); List(identifier y not defined. (let_consistency_resolver.vpr@7.10); identifier y not defined. (let_consistency_resolver.vpr@12.36); Duplicate identifier `test03' at let_consistency_resolver.vpr@16.8 and at let_consistency_resolver.vpr@20.8 (let_consistency_resolver.vpr@16.8); Duplicate identifier `y' at let_consistency_resolver.vpr@16.15 and at let_consistency_resolver.vpr@17.14 (let_consistency_resolver.vpr@16.15); Duplicate identifier `y' at let_consistency_resolver.vpr@22.14 and at let_consistency_resolver.vpr@22.30 (let_consistency_resolver.vpr@22.14); identifier y not defined. (let_consistency_resolver.vpr@27.20)); List(identifier y not defined. (let_consistency_resolver.vpr@7.10); identifier y not defined. (let_consistency_resolver.vpr@12.36); Duplicate identifier `test03' at let_consistency_resolver.vpr@16.8 and at let_consistency_resolver.vpr@20.8 (let_consistency_resolver.vpr@16.8); Duplicate identifier `y' at let_consistency_resolver.vpr@16.15 and at let_consistency_resolver.vpr@17.14 (let_consistency_resolver.vpr@16.15); Duplicate identifier `y' at let_consistency_resolver.vpr@22.14 and at let_consistency_resolver.vpr@22.30 (let_consistency_resolver.vpr@22.14); identifier y not defined. (let_consistency_resolver.vpr@27.20)); List(identifier y not defined. (let_consistency_resolver.vpr@7.10); identifier y not defined. (let_consistency_resolver.vpr@12.36); Duplicate identifier `test03' at let_consistency_resolver.vpr@16.8 and at let_consistency_resolver.vpr@20.8 (let_consistency_resolver.vpr@16.8); Duplicate identifier `y' at let_consistency_resolver.vpr@16.15 and at let_consistency_resolver.vpr@17.14 (let_consistency_resolver.vpr@16.15); Duplicate identifier `y' at let_consistency_resolver.vpr@22.14 and at let_consistency_resolver.vpr@22.30 (let_consistency_resolver.vpr@22.14); identifier y not defined. (let_consistency_resolver.vpr@27.20)); List(identifier y not defined. (let_consistency_resolver.vpr@7.10); identifier y not defined. (let_consistency_resolver.vpr@12.36); Duplicate identifier `test03' at let_consistency_resolver.vpr@16.8 and at let_consistency_resolver.vpr@20.8 (let_consistency_resolver.vpr@16.8); Duplicate identifier `y' at let_consistency_resolver.vpr@16.15 and at let_consistency_resolver.vpr@17.14 (let_consistency_resolver.vpr@16.15); Duplicate identifier `y' at let_consistency_resolver.vpr@22.14 and at let_consistency_resolver.vpr@22.30 (let_consistency_resolver.vpr@22.14); identifier y not defined. (let_consistency_resolver.vpr@27.20)))
../../src/test/resources/frontend-generated/all/basic/let_consistency_typechecker.vpr,1,1,0,0,1,1,1,Vector(List(Type error in the expression at let_consistency_typechecker.vpr@[6.26-6.28] (let_consistency_typechecker.vpr@6.26)); List(Type error in the expression at let_consistency_typechecker.vpr@[6.26-6.28] (let_consistency_typechecker.vpr@6.26)); List(Type error in the expression at let_consistency_typechecker.vpr@[6.26-6.28] (let_consistency_typechecker.vpr@6.26)); List(Type error in the expression at let_consistency_typechecker.vpr@[6.26-6.28] (let_consistency_typechecker.vpr@6.26)); List(Type error in the expression at let_consistency_typechecker.vpr@[6.26-6.28] (let_consistency_typechecker.vpr@6.26)))
../../src/test/resources/frontend-generated/all/basic/many_conjuncts.vpr,2,1992,20,1,1964,2002,2011,Vector(List([postcondition.violated:assertion.false] Postcondition of read_erroneous might not hold. Assertion false might not hold. (many_conjuncts.vpr@40.11); [postcondition.violated:assertion.false] Postcondition of read2_erroneous might not hold. Assertion false might not hold. (many_conjuncts.vpr@96.5)); List([postcondition.violated:assertion.false] Postcondition of read_erroneous might not hold. Assertion false might not hold. (many_conjuncts.vpr@40.11); [postcondition.violated:assertion.false] Postcondition of read2_erroneous might not hold. Assertion false might not hold. (many_conjuncts.vpr@96.5)); List([postcondition.violated:assertion.false] Postcondition of read_erroneous might not hold. Assertion false might not hold. (many_conjuncts.vpr@40.11); [postcondition.violated:assertion.false] Postcondition of read2_erroneous might not hold. Assertion false might not hold. (many_conjuncts.vpr@96.5)); List([postcondition.violated:assertion.false] Postcondition of read_erroneous might not hold. Assertion false might not hold. (many_conjuncts.vpr@40.11); [postcondition.violated:assertion.false] Postcondition of read2_erroneous might not hold. Assertion false might not hold. (many_conjuncts.vpr@96.5)); List([postcondition.violated:assertion.false] Postcondition of read_erroneous might not hold. Assertion false might not hold. (many_conjuncts.vpr@40.11); [postcondition.violated:assertion.false] Postcondition of read2_erroneous might not hold. Assertion false might not hold. (many_conjuncts.vpr@96.5)))
../../src/test/resources/frontend-generated/all/basic/methods.vpr,11,1516,55,3,1440,1537,1571,Vector(List([call.precondition:assertion.false] The precondition of method t3 might not hold. Assertion -1 > 0 might not hold. (methods.vpr@10.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (methods.vpr@18.5); [assert.failed:assertion.false] Assert might fail. Assertion a != b might not hold. (methods.vpr@38.5); [assert.failed:assertion.false] Assert might fail. Assertion a != c might not hold. (methods.vpr@49.5); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@58.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@65.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@71.13); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@79.13); [assert.failed:assertion.false] Assert might fail. Assertion r.f == 2 might not hold. (methods.vpr@100.5); [assert.failed:assertion.false] Assert might fail. Assertion r.f == 2 might not hold. (methods.vpr@110.5); [assert.failed:assertion.false] Assert might fail. Assertion o.f == 2 might not hold. (methods.vpr@123.5)); List([call.precondition:assertion.false] The precondition of method t3 might not hold. Assertion -1 > 0 might not hold. (methods.vpr@10.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (methods.vpr@18.5); [assert.failed:assertion.false] Assert might fail. Assertion a != b might not hold. (methods.vpr@38.5); [assert.failed:assertion.false] Assert might fail. Assertion a != c might not hold. (methods.vpr@49.5); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@58.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@65.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@71.13); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@79.13); [assert.failed:assertion.false] Assert might fail. Assertion r.f == 2 might not hold. (methods.vpr@100.5); [assert.failed:assertion.false] Assert might fail. Assertion r.f == 2 might not hold. (methods.vpr@110.5); [assert.failed:assertion.false] Assert might fail. Assertion o.f == 2 might not hold. (methods.vpr@123.5)); List([call.precondition:assertion.false] The precondition of method t3 might not hold. Assertion -1 > 0 might not hold. (methods.vpr@10.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (methods.vpr@18.5); [assert.failed:assertion.false] Assert might fail. Assertion a != b might not hold. (methods.vpr@38.5); [assert.failed:assertion.false] Assert might fail. Assertion a != c might not hold. (methods.vpr@49.5); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@58.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@65.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@71.13); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@79.13); [assert.failed:assertion.false] Assert might fail. Assertion r.f == 2 might not hold. (methods.vpr@100.5); [assert.failed:assertion.false] Assert might fail. Assertion r.f == 2 might not hold. (methods.vpr@110.5); [assert.failed:assertion.false] Assert might fail. Assertion o.f == 2 might not hold. (methods.vpr@123.5)); List([call.precondition:assertion.false] The precondition of method t3 might not hold. Assertion -1 > 0 might not hold. (methods.vpr@10.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (methods.vpr@18.5); [assert.failed:assertion.false] Assert might fail. Assertion a != b might not hold. (methods.vpr@38.5); [assert.failed:assertion.false] Assert might fail. Assertion a != c might not hold. (methods.vpr@49.5); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@58.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@65.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@71.13); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@79.13); [assert.failed:assertion.false] Assert might fail. Assertion r.f == 2 might not hold. (methods.vpr@100.5); [assert.failed:assertion.false] Assert might fail. Assertion r.f == 2 might not hold. (methods.vpr@110.5); [assert.failed:assertion.false] Assert might fail. Assertion o.f == 2 might not hold. (methods.vpr@123.5)); List([call.precondition:assertion.false] The precondition of method t3 might not hold. Assertion -1 > 0 might not hold. (methods.vpr@10.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (methods.vpr@18.5); [assert.failed:assertion.false] Assert might fail. Assertion a != b might not hold. (methods.vpr@38.5); [assert.failed:assertion.false] Assert might fail. Assertion a != c might not hold. (methods.vpr@49.5); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@58.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@65.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@71.13); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@79.13); [assert.failed:assertion.false] Assert might fail. Assertion r.f == 2 might not hold. (methods.vpr@100.5); [assert.failed:assertion.false] Assert might fail. Assertion r.f == 2 might not hold. (methods.vpr@110.5); [assert.failed:assertion.false] Assert might fail. Assertion o.f == 2 might not hold. (methods.vpr@123.5)))
../../src/test/resources/frontend-generated/all/basic/names.vpr,0,1414,66,4,1335,1410,1498,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/basic/new.vpr,3,1700,83,4,1614,1674,1814,Vector(List([exhale.failed:assertion.false] Exhale might fail. Assertion a != b might not hold. (new.vpr@42.5); [exhale.failed:assertion.false] Exhale might fail. Assertion a != b might not hold. (new.vpr@53.9); [assert.failed:assertion.false] Assert might fail. Assertion m != n.Node_n might not hold. (new.vpr@90.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion a != b might not hold. (new.vpr@42.5); [exhale.failed:assertion.false] Exhale might fail. Assertion a != b might not hold. (new.vpr@53.9); [assert.failed:assertion.false] Assert might fail. Assertion m != n.Node_n might not hold. (new.vpr@90.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion a != b might not hold. (new.vpr@42.5); [exhale.failed:assertion.false] Exhale might fail. Assertion a != b might not hold. (new.vpr@53.9); [assert.failed:assertion.false] Assert might fail. Assertion m != n.Node_n might not hold. (new.vpr@90.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion a != b might not hold. (new.vpr@42.5); [exhale.failed:assertion.false] Exhale might fail. Assertion a != b might not hold. (new.vpr@53.9); [assert.failed:assertion.false] Assert might fail. Assertion m != n.Node_n might not hold. (new.vpr@90.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion a != b might not hold. (new.vpr@42.5); [exhale.failed:assertion.false] Exhale might fail. Assertion a != b might not hold. (new.vpr@53.9); [assert.failed:assertion.false] Assert might fail. Assertion m != n.Node_n might not hold. (new.vpr@90.3)))
../../src/test/resources/frontend-generated/all/basic/quantifiers.vpr,8,1992,82,4,1920,1949,2108,Vector(List([application.precondition:insufficient.permission] Precondition of function Cell_get might not hold. There might be insufficient permission to access c.Cell_x. (quantifiers.vpr@30.43); [postcondition.violated:assertion.false] Postcondition of fail20ForallCellGet10 might not hold. Assertion (forall i2: Int :: 0 <= i2 && i2 < Cell_get(c) ==> Cell_get(c) <= i2) might not hold. (quantifiers.vpr@41.10); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.Cell_x. (quantifiers.vpr@46.12); [application.precondition:insufficient.permission] Precondition of function Cell_get might not hold. There might be insufficient permission to access r.Cell_x. (quantifiers.vpr@51.52); [application.precondition:assertion.false] Precondition of function reqIGt0 might not hold. Assertion i >= 0 might not hold. (quantifiers.vpr@64.51); [application.precondition:assertion.false] Precondition of function reqIGt0 might not hold. Assertion i >= 0 might not hold. (quantifiers.vpr@74.56); [assert.failed:assertion.false] Assert might fail. Assertion (forall v2: Int :: { f2(v2) } 0 <= v2 && (v2 < 3 && f2(v2)) ==> (exists j2: Int :: 0 <= j2 && (j2 < 3 && j2 == v2))) might not hold. (quantifiers.vpr@121.2); [assert.failed:assertion.false] Assert might fail. Assertion f2(0) ==> (exists j2: Int :: 0 <= j2 && (j2 < 3 && j2 > 0)) might not hold. (quantifiers.vpr@155.2)); List([application.precondition:insufficient.permission] Precondition of function Cell_get might not hold. There might be insufficient permission to access c.Cell_x. (quantifiers.vpr@30.43); [postcondition.violated:assertion.false] Postcondition of fail20ForallCellGet10 might not hold. Assertion (forall i2: Int :: 0 <= i2 && i2 < Cell_get(c) ==> Cell_get(c) <= i2) might not hold. (quantifiers.vpr@41.10); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.Cell_x. (quantifiers.vpr@46.12); [application.precondition:insufficient.permission] Precondition of function Cell_get might not hold. There might be insufficient permission to access r.Cell_x. (quantifiers.vpr@51.52); [application.precondition:assertion.false] Precondition of function reqIGt0 might not hold. Assertion i >= 0 might not hold. (quantifiers.vpr@64.51); [application.precondition:assertion.false] Precondition of function reqIGt0 might not hold. Assertion i >= 0 might not hold. (quantifiers.vpr@74.56); [assert.failed:assertion.false] Assert might fail. Assertion (forall v2: Int :: { f2(v2) } 0 <= v2 && (v2 < 3 && f2(v2)) ==> (exists j2: Int :: 0 <= j2 && (j2 < 3 && j2 == v2))) might not hold. (quantifiers.vpr@121.2); [assert.failed:assertion.false] Assert might fail. Assertion f2(0) ==> (exists j2: Int :: 0 <= j2 && (j2 < 3 && j2 > 0)) might not hold. (quantifiers.vpr@155.2)); List([application.precondition:insufficient.permission] Precondition of function Cell_get might not hold. There might be insufficient permission to access c.Cell_x. (quantifiers.vpr@30.43); [postcondition.violated:assertion.false] Postcondition of fail20ForallCellGet10 might not hold. Assertion (forall i2: Int :: 0 <= i2 && i2 < Cell_get(c) ==> Cell_get(c) <= i2) might not hold. (quantifiers.vpr@41.10); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.Cell_x. (quantifiers.vpr@46.12); [application.precondition:insufficient.permission] Precondition of function Cell_get might not hold. There might be insufficient permission to access r.Cell_x. (quantifiers.vpr@51.52); [application.precondition:assertion.false] Precondition of function reqIGt0 might not hold. Assertion i >= 0 might not hold. (quantifiers.vpr@64.51); [application.precondition:assertion.false] Precondition of function reqIGt0 might not hold. Assertion i >= 0 might not hold. (quantifiers.vpr@74.56); [assert.failed:assertion.false] Assert might fail. Assertion (forall v2: Int :: { f2(v2) } 0 <= v2 && (v2 < 3 && f2(v2)) ==> (exists j2: Int :: 0 <= j2 && (j2 < 3 && j2 == v2))) might not hold. (quantifiers.vpr@121.2); [assert.failed:assertion.false] Assert might fail. Assertion f2(0) ==> (exists j2: Int :: 0 <= j2 && (j2 < 3 && j2 > 0)) might not hold. (quantifiers.vpr@155.2)); List([application.precondition:insufficient.permission] Precondition of function Cell_get might not hold. There might be insufficient permission to access c.Cell_x. (quantifiers.vpr@30.43); [postcondition.violated:assertion.false] Postcondition of fail20ForallCellGet10 might not hold. Assertion (forall i2: Int :: 0 <= i2 && i2 < Cell_get(c) ==> Cell_get(c) <= i2) might not hold. (quantifiers.vpr@41.10); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.Cell_x. (quantifiers.vpr@46.12); [application.precondition:insufficient.permission] Precondition of function Cell_get might not hold. There might be insufficient permission to access r.Cell_x. (quantifiers.vpr@51.52); [application.precondition:assertion.false] Precondition of function reqIGt0 might not hold. Assertion i >= 0 might not hold. (quantifiers.vpr@64.51); [application.precondition:assertion.false] Precondition of function reqIGt0 might not hold. Assertion i >= 0 might not hold. (quantifiers.vpr@74.56); [assert.failed:assertion.false] Assert might fail. Assertion (forall v2: Int :: { f2(v2) } 0 <= v2 && (v2 < 3 && f2(v2)) ==> (exists j2: Int :: 0 <= j2 && (j2 < 3 && j2 == v2))) might not hold. (quantifiers.vpr@121.2); [assert.failed:assertion.false] Assert might fail. Assertion f2(0) ==> (exists j2: Int :: 0 <= j2 && (j2 < 3 && j2 > 0)) might not hold. (quantifiers.vpr@155.2)); List([application.precondition:insufficient.permission] Precondition of function Cell_get might not hold. There might be insufficient permission to access c.Cell_x. (quantifiers.vpr@30.43); [postcondition.violated:assertion.false] Postcondition of fail20ForallCellGet10 might not hold. Assertion (forall i2: Int :: 0 <= i2 && i2 < Cell_get(c) ==> Cell_get(c) <= i2) might not hold. (quantifiers.vpr@41.10); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.Cell_x. (quantifiers.vpr@46.12); [application.precondition:insufficient.permission] Precondition of function Cell_get might not hold. There might be insufficient permission to access r.Cell_x. (quantifiers.vpr@51.52); [application.precondition:assertion.false] Precondition of function reqIGt0 might not hold. Assertion i >= 0 might not hold. (quantifiers.vpr@64.51); [application.precondition:assertion.false] Precondition of function reqIGt0 might not hold. Assertion i >= 0 might not hold. (quantifiers.vpr@74.56); [assert.failed:assertion.false] Assert might fail. Assertion (forall v2: Int :: { f2(v2) } 0 <= v2 && (v2 < 3 && f2(v2)) ==> (exists j2: Int :: 0 <= j2 && (j2 < 3 && j2 == v2))) might not hold. (quantifiers.vpr@121.2); [assert.failed:assertion.false] Assert might fail. Assertion f2(0) ==> (exists j2: Int :: 0 <= j2 && (j2 < 3 && j2 > 0)) might not hold. (quantifiers.vpr@155.2)))
../../src/test/resources/frontend-generated/all/basic/regression1.vpr,1,1509,25,1,1475,1518,1535,Vector(List([postcondition.violated:assertion.false] Postcondition of Simple_test2 might not hold. Assertion vresult == x * x might not hold. (regression1.vpr@53.11)); List([postcondition.violated:assertion.false] Postcondition of Simple_test2 might not hold. Assertion vresult == x * x might not hold. (regression1.vpr@53.11)); List([postcondition.violated:assertion.false] Postcondition of Simple_test2 might not hold. Assertion vresult == x * x might not hold. (regression1.vpr@53.11)); List([postcondition.violated:assertion.false] Postcondition of Simple_test2 might not hold. Assertion vresult == x * x might not hold. (regression1.vpr@53.11)); List([postcondition.violated:assertion.false] Postcondition of Simple_test2 might not hold. Assertion vresult == x * x might not hold. (regression1.vpr@53.11)))
../../src/test/resources/frontend-generated/all/basic/syntax.vpr,1,4,0,0,4,4,4,Vector(List(Duplicate identifier `this' at syntax.vpr@40.12 and at syntax.vpr@40.32 (syntax.vpr@40.12)); List(Duplicate identifier `this' at syntax.vpr@40.12 and at syntax.vpr@40.32 (syntax.vpr@40.12)); List(Duplicate identifier `this' at syntax.vpr@40.12 and at syntax.vpr@40.32 (syntax.vpr@40.12)); List(Duplicate identifier `this' at syntax.vpr@40.12 and at syntax.vpr@40.32 (syntax.vpr@40.12)); List(Duplicate identifier `this' at syntax.vpr@40.12 and at syntax.vpr@40.32 (syntax.vpr@40.12)))
../../src/test/resources/frontend-generated/all/basic/syntax2.vpr,0,1536,62,4,1451,1561,1598,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/basic/trigger-projection.vpr,1,1631,55,3,1574,1613,1706,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion f4(5) might not hold. (trigger-projection.vpr@54.3)); List([assert.failed:assertion.false] Assert might fail. Assertion f4(5) might not hold. (trigger-projection.vpr@54.3)); List([assert.failed:assertion.false] Assert might fail. Assertion f4(5) might not hold. (trigger-projection.vpr@54.3)); List([assert.failed:assertion.false] Assert might fail. Assertion f4(5) might not hold. (trigger-projection.vpr@54.3)); List([assert.failed:assertion.false] Assert might fail. Assertion f4(5) might not hold. (trigger-projection.vpr@54.3)))
../../src/test/resources/frontend-generated/all/basic/unfolding.vpr,6,2013,50,2,1963,1993,2083,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access valid(r). (unfolding.vpr@21.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access valid(r). (unfolding.vpr@28.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.next.f. (unfolding.vpr@44.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.next.next. (unfolding.vpr@57.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@76.4); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(strange(r); write) in false) might not hold. (unfolding.vpr@83.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access valid(r). (unfolding.vpr@21.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access valid(r). (unfolding.vpr@28.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.next.f. (unfolding.vpr@44.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.next.next. (unfolding.vpr@57.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@76.4); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(strange(r); write) in false) might not hold. (unfolding.vpr@83.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access valid(r). (unfolding.vpr@21.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access valid(r). (unfolding.vpr@28.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.next.f. (unfolding.vpr@44.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.next.next. (unfolding.vpr@57.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@76.4); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(strange(r); write) in false) might not hold. (unfolding.vpr@83.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access valid(r). (unfolding.vpr@21.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access valid(r). (unfolding.vpr@28.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.next.f. (unfolding.vpr@44.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.next.next. (unfolding.vpr@57.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@76.4); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(strange(r); write) in false) might not hold. (unfolding.vpr@83.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access valid(r). (unfolding.vpr@21.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access valid(r). (unfolding.vpr@28.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.next.f. (unfolding.vpr@44.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.next.next. (unfolding.vpr@57.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@76.4); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(strange(r); write) in false) might not hold. (unfolding.vpr@83.3)))
../../src/test/resources/frontend-generated/all/basic/unique.vpr,1,1417,43,3,1376,1399,1478,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion c() != u1() might not hold. (unique.vpr@15.5)); List([assert.failed:assertion.false] Assert might fail. Assertion c() != u1() might not hold. (unique.vpr@15.5)); List([assert.failed:assertion.false] Assert might fail. Assertion c() != u1() might not hold. (unique.vpr@15.5)); List([assert.failed:assertion.false] Assert might fail. Assertion c() != u1() might not hold. (unique.vpr@15.5)); List([assert.failed:assertion.false] Assert might fail. Assertion c() != u1() might not hold. (unique.vpr@15.5)))
../../src/test/resources/frontend-generated/all/basic/welldef.vpr,6,1517,49,3,1447,1552,1554,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@14.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@21.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@27.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@34.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@40.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@47.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@14.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@21.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@27.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@34.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@40.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@47.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@14.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@21.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@27.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@34.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@40.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@47.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@14.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@21.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@27.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@34.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@40.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@47.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@14.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@21.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@27.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@34.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@40.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@47.5)))
../../src/test/resources/frontend-generated/all/basic/while.vpr,7,1579,44,2,1522,1588,1629,Vector(List([invariant.not.preserved:assertion.false] Loop invariant i < n might not be preserved. Assertion i < n might not hold. (while.vpr@26.19); [invariant.not.established:assertion.false] Loop invariant i <= n might not hold on entry. Assertion i <= n might not hold. (while.vpr@39.19); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access r.f. (while.vpr@52.12); [assert.failed:assertion.false] Assert might fail. Assertion j == 2 might not hold. (while.vpr@87.9); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while.vpr@103.5); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access r.f. (while.vpr@124.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (while.vpr@140.19)); List([invariant.not.preserved:assertion.false] Loop invariant i < n might not be preserved. Assertion i < n might not hold. (while.vpr@26.19); [invariant.not.established:assertion.false] Loop invariant i <= n might not hold on entry. Assertion i <= n might not hold. (while.vpr@39.19); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access r.f. (while.vpr@52.12); [assert.failed:assertion.false] Assert might fail. Assertion j == 2 might not hold. (while.vpr@87.9); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while.vpr@103.5); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access r.f. (while.vpr@124.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (while.vpr@140.19)); List([invariant.not.preserved:assertion.false] Loop invariant i < n might not be preserved. Assertion i < n might not hold. (while.vpr@26.19); [invariant.not.established:assertion.false] Loop invariant i <= n might not hold on entry. Assertion i <= n might not hold. (while.vpr@39.19); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access r.f. (while.vpr@52.12); [assert.failed:assertion.false] Assert might fail. Assertion j == 2 might not hold. (while.vpr@87.9); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while.vpr@103.5); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access r.f. (while.vpr@124.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (while.vpr@140.19)); List([invariant.not.preserved:assertion.false] Loop invariant i < n might not be preserved. Assertion i < n might not hold. (while.vpr@26.19); [invariant.not.established:assertion.false] Loop invariant i <= n might not hold on entry. Assertion i <= n might not hold. (while.vpr@39.19); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access r.f. (while.vpr@52.12); [assert.failed:assertion.false] Assert might fail. Assertion j == 2 might not hold. (while.vpr@87.9); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while.vpr@103.5); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access r.f. (while.vpr@124.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (while.vpr@140.19)); List([invariant.not.preserved:assertion.false] Loop invariant i < n might not be preserved. Assertion i < n might not hold. (while.vpr@26.19); [invariant.not.established:assertion.false] Loop invariant i <= n might not hold on entry. Assertion i <= n might not hold. (while.vpr@39.19); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access r.f. (while.vpr@52.12); [assert.failed:assertion.false] Assert might fail. Assertion j == 2 might not hold. (while.vpr@87.9); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while.vpr@103.5); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access r.f. (while.vpr@124.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (while.vpr@140.19)))
../../src/test/resources/frontend-generated/all/chalice/AVLTree.iterative.vpr,0,6021,112,1,5942,5942,6180,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/chalice/FoldUnfoldExperiments.vpr,0,1603,53,3,1528,1629,1652,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/chalice/RingBufferRd.vpr,0,2791,102,3,2659,2807,2909,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/chalice/cyclic-list.vpr,2,1605,71,4,1506,1636,1674,Vector(List([fold.failed:insufficient.permission] Folding valid(x) might fail. There might be insufficient permission to access valid(this.next). (cyclic-list.vpr@32.3); [application.precondition:insufficient.permission] Precondition of function length might not hold. There might be insufficient permission to access valid(x). (cyclic-list.vpr@44.12)); List([fold.failed:insufficient.permission] Folding valid(x) might fail. There might be insufficient permission to access valid(this.next). (cyclic-list.vpr@32.3); [application.precondition:insufficient.permission] Precondition of function length might not hold. There might be insufficient permission to access valid(x). (cyclic-list.vpr@44.12)); List([fold.failed:insufficient.permission] Folding valid(x) might fail. There might be insufficient permission to access valid(this.next). (cyclic-list.vpr@32.3); [application.precondition:insufficient.permission] Precondition of function length might not hold. There might be insufficient permission to access valid(x). (cyclic-list.vpr@44.12)); List([fold.failed:insufficient.permission] Folding valid(x) might fail. There might be insufficient permission to access valid(this.next). (cyclic-list.vpr@32.3); [application.precondition:insufficient.permission] Precondition of function length might not hold. There might be insufficient permission to access valid(x). (cyclic-list.vpr@44.12)); List([fold.failed:insufficient.permission] Folding valid(x) might fail. There might be insufficient permission to access valid(this.next). (cyclic-list.vpr@32.3); [application.precondition:insufficient.permission] Precondition of function length might not hold. There might be insufficient permission to access valid(x). (cyclic-list.vpr@44.12)))
../../src/test/resources/frontend-generated/all/chalice/framing-fields.vpr,1,1799,36,2,1751,1808,1839,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(valid(y); write) in j == y.value) might not hold. (framing-fields.vpr@20.5)); List([assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(valid(y); write) in j == y.value) might not hold. (framing-fields.vpr@20.5)); List([assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(valid(y); write) in j == y.value) might not hold. (framing-fields.vpr@20.5)); List([assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(valid(y); write) in j == y.value) might not hold. (framing-fields.vpr@20.5)); List([assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(valid(y); write) in j == y.value) might not hold. (framing-fields.vpr@20.5)))
../../src/test/resources/frontend-generated/all/chalice/framing-functions.vpr,1,1634,77,4,1534,1648,1722,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion j == itemAt(y; 0) might not hold. (framing-functions.vpr@23.5)); List([assert.failed:assertion.false] Assert might fail. Assertion j == itemAt(y; 0) might not hold. (framing-functions.vpr@23.5)); List([assert.failed:assertion.false] Assert might fail. Assertion j == itemAt(y; 0) might not hold. (framing-functions.vpr@23.5)); List([assert.failed:assertion.false] Assert might fail. Assertion j == itemAt(y; 0) might not hold. (framing-functions.vpr@23.5)); List([assert.failed:assertion.false] Assert might fail. Assertion j == itemAt(y; 0) might not hold. (framing-functions.vpr@23.5)))
../../src/test/resources/frontend-generated/all/chalice/internal-bug-1.vpr,0,1577,86,5,1458,1614,1661,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/chalice/internal-bug-2.vpr,1,1422,18,1,1399,1426,1443,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.x. (internal-bug-2.vpr@12.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.x. (internal-bug-2.vpr@12.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.x. (internal-bug-2.vpr@12.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.x. (internal-bug-2.vpr@12.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.x. (internal-bug-2.vpr@12.3)))
../../src/test/resources/frontend-generated/all/chalice/internal-bug-6.vpr,0,1349,52,3,1298,1329,1421,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/chalice/internal-bug-7.vpr,0,1497,82,5,1386,1522,1584,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/chalice/setset.vpr,1,1642,98,5,1503,1702,1721,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion get(x) == 3 might not hold. (setset.vpr@52.5)); List([assert.failed:assertion.false] Assert might fail. Assertion get(x) == 3 might not hold. (setset.vpr@52.5)); List([assert.failed:assertion.false] Assert might fail. Assertion get(x) == 3 might not hold. (setset.vpr@52.5)); List([assert.failed:assertion.false] Assert might fail. Assertion get(x) == 3 might not hold. (setset.vpr@52.5)); List([assert.failed:assertion.false] Assert might fail. Assertion get(x) == 3 might not hold. (setset.vpr@52.5)))
../../src/test/resources/frontend-generated/all/chalice/swap.vpr,0,1472,94,6,1373,1444,1599,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/chalice/test1.vpr,0,1787,111,6,1663,1764,1934,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/chalice/test10.vpr,0,1637,96,5,1520,1636,1756,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/chalice/test2.vpr,0,1856,75,4,1751,1892,1926,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/chalice/test3.vpr,0,1539,65,4,1456,1547,1616,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/chalice/test7.vpr,7,1648,91,5,1521,1690,1733,Vector(List([call.precondition:insufficient.permission] The precondition of method set might not hold. There might be insufficient permission to access inv(this). (test7.vpr@27.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.value. (test7.vpr@67.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access inv(this). (test7.vpr@89.5); [application.precondition:insufficient.permission] Precondition of function get might not hold. There might be insufficient permission to access inv(this). (test7.vpr@94.16); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.value. (test7.vpr@100.15); [application.precondition:insufficient.permission] Precondition of function get might not hold. There might be insufficient permission to access inv(this). (test7.vpr@106.42); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.value. (test7.vpr@112.14)); List([call.precondition:insufficient.permission] The precondition of method set might not hold. There might be insufficient permission to access inv(this). (test7.vpr@27.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.value. (test7.vpr@67.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access inv(this). (test7.vpr@89.5); [application.precondition:insufficient.permission] Precondition of function get might not hold. There might be insufficient permission to access inv(this). (test7.vpr@94.16); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.value. (test7.vpr@100.15); [application.precondition:insufficient.permission] Precondition of function get might not hold. There might be insufficient permission to access inv(this). (test7.vpr@106.42); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.value. (test7.vpr@112.14)); List([call.precondition:insufficient.permission] The precondition of method set might not hold. There might be insufficient permission to access inv(this). (test7.vpr@27.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.value. (test7.vpr@67.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access inv(this). (test7.vpr@89.5); [application.precondition:insufficient.permission] Precondition of function get might not hold. There might be insufficient permission to access inv(this). (test7.vpr@94.16); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.value. (test7.vpr@100.15); [application.precondition:insufficient.permission] Precondition of function get might not hold. There might be insufficient permission to access inv(this). (test7.vpr@106.42); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.value. (test7.vpr@112.14)); List([call.precondition:insufficient.permission] The precondition of method set might not hold. There might be insufficient permission to access inv(this). (test7.vpr@27.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.value. (test7.vpr@67.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access inv(this). (test7.vpr@89.5); [application.precondition:insufficient.permission] Precondition of function get might not hold. There might be insufficient permission to access inv(this). (test7.vpr@94.16); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.value. (test7.vpr@100.15); [application.precondition:insufficient.permission] Precondition of function get might not hold. There might be insufficient permission to access inv(this). (test7.vpr@106.42); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.value. (test7.vpr@112.14)); List([call.precondition:insufficient.permission] The precondition of method set might not hold. There might be insufficient permission to access inv(this). (test7.vpr@27.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.value. (test7.vpr@67.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access inv(this). (test7.vpr@89.5); [application.precondition:insufficient.permission] Precondition of function get might not hold. There might be insufficient permission to access inv(this). (test7.vpr@94.16); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.value. (test7.vpr@100.15); [application.precondition:insufficient.permission] Precondition of function get might not hold. There might be insufficient permission to access inv(this). (test7.vpr@106.42); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.value. (test7.vpr@112.14)))
../../src/test/resources/frontend-generated/all/chalice/test8.vpr,0,1705,33,1,1659,1720,1736,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/domains/domains.vpr,3,2088,68,3,2034,2045,2185,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (Pair_second((Pair_pair(a; b): Pair[Int; Bool])): Bool) == b2 might not hold. (domains.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion (Triple_second((Triple_triple(a; b; c): Triple[Int; Bool; Ref])): Bool) == b2 might not hold. (domains.vpr@83.3); [assert.failed:assertion.false] Assert might fail. Assertion (Triple_isPrefix(p; t2): Bool) might not hold. (domains.vpr@93.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (Pair_second((Pair_pair(a; b): Pair[Int; Bool])): Bool) == b2 might not hold. (domains.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion (Triple_second((Triple_triple(a; b; c): Triple[Int; Bool; Ref])): Bool) == b2 might not hold. (domains.vpr@83.3); [assert.failed:assertion.false] Assert might fail. Assertion (Triple_isPrefix(p; t2): Bool) might not hold. (domains.vpr@93.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (Pair_second((Pair_pair(a; b): Pair[Int; Bool])): Bool) == b2 might not hold. (domains.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion (Triple_second((Triple_triple(a; b; c): Triple[Int; Bool; Ref])): Bool) == b2 might not hold. (domains.vpr@83.3); [assert.failed:assertion.false] Assert might fail. Assertion (Triple_isPrefix(p; t2): Bool) might not hold. (domains.vpr@93.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (Pair_second((Pair_pair(a; b): Pair[Int; Bool])): Bool) == b2 might not hold. (domains.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion (Triple_second((Triple_triple(a; b; c): Triple[Int; Bool; Ref])): Bool) == b2 might not hold. (domains.vpr@83.3); [assert.failed:assertion.false] Assert might fail. Assertion (Triple_isPrefix(p; t2): Bool) might not hold. (domains.vpr@93.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (Pair_second((Pair_pair(a; b): Pair[Int; Bool])): Bool) == b2 might not hold. (domains.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion (Triple_second((Triple_triple(a; b; c): Triple[Int; Bool; Ref])): Bool) == b2 might not hold. (domains.vpr@83.3); [assert.failed:assertion.false] Assert might fail. Assertion (Triple_isPrefix(p; t2): Bool) might not hold. (domains.vpr@93.3)))
../../src/test/resources/frontend-generated/all/domains/domains2.vpr,0,9153,111,1,9025,9138,9296,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/domains/domains_threshold.vpr,0,1733,12,0,1716,1739,1744,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/domains/domains_underspecified.vpr,0,1594,52,3,1520,1624,1638,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/functions/applying.vpr,1,1690,51,3,1620,1708,1742,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion v == g(x) might not hold. (applying.vpr@22.2)); List([assert.failed:assertion.false] Assert might fail. Assertion v == g(x) might not hold. (applying.vpr@22.2)); List([assert.failed:assertion.false] Assert might fail. Assertion v == g(x) might not hold. (applying.vpr@22.2)); List([assert.failed:assertion.false] Assert might fail. Assertion v == g(x) might not hold. (applying.vpr@22.2)); List([assert.failed:assertion.false] Assert might fail. Assertion v == g(x) might not hold. (applying.vpr@22.2)))
../../src/test/resources/frontend-generated/all/functions/basic.vpr,3,1565,54,3,1499,1563,1633,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion add(x) == add(y) might not hold. (basic.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion add3(x; 1) == add(x) might not hold. (basic.vpr@36.3); [assert.failed:assertion.false] Assert might fail. Assertion tern(x; !b2) > 1 might not hold. (basic.vpr@54.3)); List([assert.failed:assertion.false] Assert might fail. Assertion add(x) == add(y) might not hold. (basic.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion add3(x; 1) == add(x) might not hold. (basic.vpr@36.3); [assert.failed:assertion.false] Assert might fail. Assertion tern(x; !b2) > 1 might not hold. (basic.vpr@54.3)); List([assert.failed:assertion.false] Assert might fail. Assertion add(x) == add(y) might not hold. (basic.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion add3(x; 1) == add(x) might not hold. (basic.vpr@36.3); [assert.failed:assertion.false] Assert might fail. Assertion tern(x; !b2) > 1 might not hold. (basic.vpr@54.3)); List([assert.failed:assertion.false] Assert might fail. Assertion add(x) == add(y) might not hold. (basic.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion add3(x; 1) == add(x) might not hold. (basic.vpr@36.3); [assert.failed:assertion.false] Assert might fail. Assertion tern(x; !b2) > 1 might not hold. (basic.vpr@54.3)); List([assert.failed:assertion.false] Assert might fail. Assertion add(x) == add(y) might not hold. (basic.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion add3(x; 1) == add(x) might not hold. (basic.vpr@36.3); [assert.failed:assertion.false] Assert might fail. Assertion tern(x; !b2) > 1 might not hold. (basic.vpr@54.3)))
../../src/test/resources/frontend-generated/all/functions/basic2.vpr,1,1402,60,4,1350,1369,1487,Vector(List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (basic2.vpr@6.11)); List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (basic2.vpr@6.11)); List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (basic2.vpr@6.11)); List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (basic2.vpr@6.11)); List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (basic2.vpr@6.11)))
../../src/test/resources/frontend-generated/all/functions/conditional-permissions.vpr,0,1578,19,1,1553,1583,1599,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/functions/framing_abstract_functions.vpr,1,1546,77,4,1449,1551,1639,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion fun01(x; false) == -1 might not hold. (framing_abstract_functions.vpr@29.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun01(x; false) == -1 might not hold. (framing_abstract_functions.vpr@29.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun01(x; false) == -1 might not hold. (framing_abstract_functions.vpr@29.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun01(x; false) == -1 might not hold. (framing_abstract_functions.vpr@29.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun01(x; false) == -1 might not hold. (framing_abstract_functions.vpr@29.3)))
../../src/test/resources/frontend-generated/all/functions/functions.vpr,3,1869,52,2,1795,1906,1908,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.h. (functions.vpr@46.12); [application.precondition:insufficient.permission] Precondition of function err1 might not hold. There might be insufficient permission to access x.h. (functions.vpr@52.12); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access y.f. (functions.vpr@56.1)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.h. (functions.vpr@46.12); [application.precondition:insufficient.permission] Precondition of function err1 might not hold. There might be insufficient permission to access x.h. (functions.vpr@52.12); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access y.f. (functions.vpr@56.1)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.h. (functions.vpr@46.12); [application.precondition:insufficient.permission] Precondition of function err1 might not hold. There might be insufficient permission to access x.h. (functions.vpr@52.12); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access y.f. (functions.vpr@56.1)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.h. (functions.vpr@46.12); [application.precondition:insufficient.permission] Precondition of function err1 might not hold. There might be insufficient permission to access x.h. (functions.vpr@52.12); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access y.f. (functions.vpr@56.1)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.h. (functions.vpr@46.12); [application.precondition:insufficient.permission] Precondition of function err1 might not hold. There might be insufficient permission to access x.h. (functions.vpr@52.12); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access y.f. (functions.vpr@56.1)))
../../src/test/resources/frontend-generated/all/functions/heap_dependent_triggers.vpr,2,1618,57,3,1539,1640,1676,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion bar01(5) > 0 might not hold. (heap_dependent_triggers.vpr@21.3); [assert.failed:assertion.false] Assert might fail. Assertion bar01(5) > 0 might not hold. (heap_dependent_triggers.vpr@79.3)); List([assert.failed:assertion.false] Assert might fail. Assertion bar01(5) > 0 might not hold. (heap_dependent_triggers.vpr@21.3); [assert.failed:assertion.false] Assert might fail. Assertion bar01(5) > 0 might not hold. (heap_dependent_triggers.vpr@79.3)); List([assert.failed:assertion.false] Assert might fail. Assertion bar01(5) > 0 might not hold. (heap_dependent_triggers.vpr@21.3); [assert.failed:assertion.false] Assert might fail. Assertion bar01(5) > 0 might not hold. (heap_dependent_triggers.vpr@79.3)); List([assert.failed:assertion.false] Assert might fail. Assertion bar01(5) > 0 might not hold. (heap_dependent_triggers.vpr@21.3); [assert.failed:assertion.false] Assert might fail. Assertion bar01(5) > 0 might not hold. (heap_dependent_triggers.vpr@79.3)); List([assert.failed:assertion.false] Assert might fail. Assertion bar01(5) > 0 might not hold. (heap_dependent_triggers.vpr@21.3); [assert.failed:assertion.false] Assert might fail. Assertion bar01(5) > 0 might not hold. (heap_dependent_triggers.vpr@79.3)))
../../src/test/resources/frontend-generated/all/functions/linkedlists.vpr,0,3966,125,3,3864,3891,4143,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/functions/nested.vpr,2,1672,79,4,1560,1726,1732,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (nested.vpr@57.3); [application.precondition:insufficient.permission] Precondition of function fun3 might not hold. There might be insufficient permission to access x.g. (nested.vpr@63.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (nested.vpr@57.3); [application.precondition:insufficient.permission] Precondition of function fun3 might not hold. There might be insufficient permission to access x.g. (nested.vpr@63.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (nested.vpr@57.3); [application.precondition:insufficient.permission] Precondition of function fun3 might not hold. There might be insufficient permission to access x.g. (nested.vpr@63.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (nested.vpr@57.3); [application.precondition:insufficient.permission] Precondition of function fun3 might not hold. There might be insufficient permission to access x.g. (nested.vpr@63.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (nested.vpr@57.3); [application.precondition:insufficient.permission] Precondition of function fun3 might not hold. There might be insufficient permission to access x.g. (nested.vpr@63.3)))
../../src/test/resources/frontend-generated/all/functions/recursion.vpr,1,1488,77,5,1404,1469,1591,Vector(List([postcondition.violated:assertion.false] Postcondition of err1 might not hold. Assertion result >= 0 might not hold. (recursion.vpr@26.11)); List([postcondition.violated:assertion.false] Postcondition of err1 might not hold. Assertion result >= 0 might not hold. (recursion.vpr@26.11)); List([postcondition.violated:assertion.false] Postcondition of err1 might not hold. Assertion result >= 0 might not hold. (recursion.vpr@26.11)); List([postcondition.violated:assertion.false] Postcondition of err1 might not hold. Assertion result >= 0 might not hold. (recursion.vpr@26.11)); List([postcondition.violated:assertion.false] Postcondition of err1 might not hold. Assertion result >= 0 might not hold. (recursion.vpr@26.11)))
../../src/test/resources/frontend-generated/all/functions/recursive_unrolling.vpr,0,1600,65,4,1518,1605,1679,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/functions/unfolding.vpr,2,1995,20,1,1972,1991,2022,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion sum(x) == sum(y) might not hold. (unfolding.vpr@65.3); [assert.failed:assertion.false] Assert might fail. Assertion add(x; y) < 0 might not hold. (unfolding.vpr@101.3)); List([assert.failed:assertion.false] Assert might fail. Assertion sum(x) == sum(y) might not hold. (unfolding.vpr@65.3); [assert.failed:assertion.false] Assert might fail. Assertion add(x; y) < 0 might not hold. (unfolding.vpr@101.3)); List([assert.failed:assertion.false] Assert might fail. Assertion sum(x) == sum(y) might not hold. (unfolding.vpr@65.3); [assert.failed:assertion.false] Assert might fail. Assertion add(x; y) < 0 might not hold. (unfolding.vpr@101.3)); List([assert.failed:assertion.false] Assert might fail. Assertion sum(x) == sum(y) might not hold. (unfolding.vpr@65.3); [assert.failed:assertion.false] Assert might fail. Assertion add(x; y) < 0 might not hold. (unfolding.vpr@101.3)); List([assert.failed:assertion.false] Assert might fail. Assertion sum(x) == sum(y) might not hold. (unfolding.vpr@65.3); [assert.failed:assertion.false] Assert might fail. Assertion add(x; y) < 0 might not hold. (unfolding.vpr@101.3)))
../../src/test/resources/frontend-generated/all/functions/unfolding_nonnull.vpr,2,1663,95,5,1530,1711,1748,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (unfolding_nonnull.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (unfolding_nonnull.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (unfolding_nonnull.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (unfolding_nonnull.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (unfolding_nonnull.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (unfolding_nonnull.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (unfolding_nonnull.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (unfolding_nonnull.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (unfolding_nonnull.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (unfolding_nonnull.vpr@35.3)))
../../src/test/resources/frontend-generated/all/functions/wildcards.vpr,0,1476,91,6,1396,1429,1604,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/heap-dependent_triggers/HeapTriggersForperm.vpr,0,1516,59,3,1454,1498,1596,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/heap-dependent_triggers/heapTriggersInhaleExhale.vpr,0,1781,54,3,1718,1776,1850,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/heap-dependent_triggers/heapTriggersNested.vpr,0,1590,59,3,1524,1577,1669,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/heap-dependent_triggers/testNonQuant.vpr,0,1756,106,6,1606,1821,1843,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/heap-dependent_triggers/triggerFoldPackage.vpr,0,1862,104,5,1726,1880,1981,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/heap-dependent_triggers/triggerNotInBody.vpr,0,1717,20,1,1689,1728,1735,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/heap-dependent_triggers/triggerPred.vpr,0,1424,27,1,1389,1428,1456,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/heap-dependent_triggers/triggerWand.vpr,0,1574,106,6,1489,1510,1725,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/demo/account.vpr,0,1500,71,4,1400,1548,1554,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/demo/demo.vpr,0,1601,105,6,1453,1662,1690,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/demo/list.vpr,0,1555,99,6,1415,1623,1629,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/init_past/liba.vpr,0,1394,17,1,1369,1406,1408,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/init_past/libb.vpr,0,1471,51,3,1434,1436,1544,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/init_past/main.vpr,0,1462,29,1,1435,1450,1503,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/issue203/sub/libA.vpr,0,1492,57,3,1414,1515,1548,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/issue203/sub/libB.vpr,0,1440,26,1,1403,1456,1463,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/issue203/main.vpr,0,1399,74,5,1339,1355,1505,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/loop/main.vpr,1,1472,48,3,1404,1504,1508,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion main() might not hold. (main.vpr@12.2)); List([assert.failed:assertion.false] Assert might fail. Assertion main() might not hold. (main.vpr@12.2)); List([assert.failed:assertion.false] Assert might fail. Assertion main() might not hold. (main.vpr@12.2)); List([assert.failed:assertion.false] Assert might fail. Assertion main() might not hold. (main.vpr@12.2)); List([assert.failed:assertion.false] Assert might fail. Assertion main() might not hold. (main.vpr@12.2)))
../../src/test/resources/frontend-generated/all/import/standard_import/basic.vpr,0,1398,41,2,1356,1384,1455,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/standard_import/failing.vpr,1,1,0,0,1,1,1,Vector(List(Parse error: file <cpubquzspu/xvjpwyonmf/pmndfkmmqb.vpr> does not exist (failing.vpr@5.8)); List(Parse error: file <cpubquzspu/xvjpwyonmf/pmndfkmmqb.vpr> does not exist (failing.vpr@5.8)); List(Parse error: file <cpubquzspu/xvjpwyonmf/pmndfkmmqb.vpr> does not exist (failing.vpr@5.8)); List(Parse error: file <cpubquzspu/xvjpwyonmf/pmndfkmmqb.vpr> does not exist (failing.vpr@5.8)); List(Parse error: file <cpubquzspu/xvjpwyonmf/pmndfkmmqb.vpr> does not exist (failing.vpr@5.8)))
../../src/test/resources/frontend-generated/all/import/standard_import/local_and_standard.vpr,0,1515,58,3,1432,1557,1557,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/standard_import/local_then_standard.vpr,0,1433,37,2,1381,1459,1461,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/standard_import/loop_both.vpr,0,1491,56,3,1414,1512,1547,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/standard_import/loop_local.vpr,0,1483,94,6,1415,1419,1617,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/standard_import/loop_standard.vpr,0,1473,46,3,1411,1486,1522,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/inhale_exhale/basic.vpr,5,1426,68,4,1360,1397,1521,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@36.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (basic.vpr@64.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@79.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@36.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (basic.vpr@64.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@79.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@36.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (basic.vpr@64.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@79.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@36.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (basic.vpr@64.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@79.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@36.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (basic.vpr@64.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@79.3)))
../../src/test/resources/frontend-generated/all/inhale_exhale/disjunction.vpr,0,1464,42,2,1406,1481,1505,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/inhale_exhale/loops.vpr,3,1479,53,3,1407,1498,1534,Vector(List([invariant.not.established:assertion.false] Loop invariant [true; false] might not hold on entry. Assertion false might not hold. (loops.vpr@34.15); [invariant.not.established:assertion.false] Loop invariant false might not hold on entry. Assertion false might not hold. (loops.vpr@46.15); [invariant.not.preserved:insufficient.permission] Loop invariant [true; acc(this.x; write)] might not be preserved. There might be insufficient permission to access this.x. (loops.vpr@59.15)); List([invariant.not.established:assertion.false] Loop invariant [true; false] might not hold on entry. Assertion false might not hold. (loops.vpr@34.15); [invariant.not.established:assertion.false] Loop invariant false might not hold on entry. Assertion false might not hold. (loops.vpr@46.15); [invariant.not.preserved:insufficient.permission] Loop invariant [true; acc(this.x; write)] might not be preserved. There might be insufficient permission to access this.x. (loops.vpr@59.15)); List([invariant.not.established:assertion.false] Loop invariant [true; false] might not hold on entry. Assertion false might not hold. (loops.vpr@34.15); [invariant.not.established:assertion.false] Loop invariant false might not hold on entry. Assertion false might not hold. (loops.vpr@46.15); [invariant.not.preserved:insufficient.permission] Loop invariant [true; acc(this.x; write)] might not be preserved. There might be insufficient permission to access this.x. (loops.vpr@59.15)); List([invariant.not.established:assertion.false] Loop invariant [true; false] might not hold on entry. Assertion false might not hold. (loops.vpr@34.15); [invariant.not.established:assertion.false] Loop invariant false might not hold on entry. Assertion false might not hold. (loops.vpr@46.15); [invariant.not.preserved:insufficient.permission] Loop invariant [true; acc(this.x; write)] might not be preserved. There might be insufficient permission to access this.x. (loops.vpr@59.15)); List([invariant.not.established:assertion.false] Loop invariant [true; false] might not hold on entry. Assertion false might not hold. (loops.vpr@34.15); [invariant.not.established:assertion.false] Loop invariant false might not hold on entry. Assertion false might not hold. (loops.vpr@46.15); [invariant.not.preserved:insufficient.permission] Loop invariant [true; acc(this.x; write)] might not be preserved. There might be insufficient permission to access this.x. (loops.vpr@59.15)))
../../src/test/resources/frontend-generated/all/inhale_exhale/permissions.vpr,1,1532,65,4,1442,1558,1596,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.x. (permissions.vpr@15.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.x. (permissions.vpr@15.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.x. (permissions.vpr@15.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.x. (permissions.vpr@15.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.x. (permissions.vpr@15.3)))
../../src/test/resources/frontend-generated/all/inhale_exhale/pure_expressions.vpr,5,1427,32,2,1391,1423,1469,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (pure_expressions.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@48.3); [exhale.failed:assertion.false] Exhale might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (pure_expressions.vpr@106.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (pure_expressions.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@48.3); [exhale.failed:assertion.false] Exhale might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (pure_expressions.vpr@106.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (pure_expressions.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@48.3); [exhale.failed:assertion.false] Exhale might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (pure_expressions.vpr@106.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (pure_expressions.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@48.3); [exhale.failed:assertion.false] Exhale might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (pure_expressions.vpr@106.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (pure_expressions.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@48.3); [exhale.failed:assertion.false] Exhale might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (pure_expressions.vpr@106.3)))
../../src/test/resources/frontend-generated/all/inhale_exhale/wellformedness.vpr,14,1505,51,3,1432,1539,1544,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@20.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@26.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@33.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@39.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@54.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@60.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@67.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@73.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@118.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@124.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@131.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@137.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@169.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@197.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@20.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@26.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@33.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@39.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@54.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@60.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@67.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@73.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@118.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@124.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@131.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@137.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@169.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@197.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@20.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@26.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@33.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@39.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@54.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@60.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@67.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@73.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@118.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@124.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@131.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@137.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@169.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@197.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@20.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@26.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@33.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@39.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@54.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@60.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@67.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@73.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@118.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@124.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@131.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@137.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@169.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@197.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@20.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@26.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@33.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@39.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@54.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@60.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@67.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@73.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@118.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@124.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@131.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@137.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@169.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@197.11)))
../../src/test/resources/frontend-generated/all/invariants/loops1.vpr,0,1543,61,3,1457,1579,1595,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/invariants/loops2.vpr,0,1457,39,2,1411,1452,1508,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/invariants/while1.vpr,3,1620,38,2,1569,1632,1661,Vector(List([invariant.not.established:insufficient.permission] Loop invariant acc(x.f; 1 / 2) might not hold on entry. There might be insufficient permission to access x.f. (while1.vpr@20.15); [invariant.not.preserved:insufficient.permission] Loop invariant acc(x.f; 1 / 2) might not be preserved. There might be insufficient permission to access x.f. (while1.vpr@31.15); [assert.failed:assertion.false] Assert might fail. Assertion perm(y.f) == none might not hold. (while1.vpr@59.5)); List([invariant.not.established:insufficient.permission] Loop invariant acc(x.f; 1 / 2) might not hold on entry. There might be insufficient permission to access x.f. (while1.vpr@20.15); [invariant.not.preserved:insufficient.permission] Loop invariant acc(x.f; 1 / 2) might not be preserved. There might be insufficient permission to access x.f. (while1.vpr@31.15); [assert.failed:assertion.false] Assert might fail. Assertion perm(y.f) == none might not hold. (while1.vpr@59.5)); List([invariant.not.established:insufficient.permission] Loop invariant acc(x.f; 1 / 2) might not hold on entry. There might be insufficient permission to access x.f. (while1.vpr@20.15); [invariant.not.preserved:insufficient.permission] Loop invariant acc(x.f; 1 / 2) might not be preserved. There might be insufficient permission to access x.f. (while1.vpr@31.15); [assert.failed:assertion.false] Assert might fail. Assertion perm(y.f) == none might not hold. (while1.vpr@59.5)); List([invariant.not.established:insufficient.permission] Loop invariant acc(x.f; 1 / 2) might not hold on entry. There might be insufficient permission to access x.f. (while1.vpr@20.15); [invariant.not.preserved:insufficient.permission] Loop invariant acc(x.f; 1 / 2) might not be preserved. There might be insufficient permission to access x.f. (while1.vpr@31.15); [assert.failed:assertion.false] Assert might fail. Assertion perm(y.f) == none might not hold. (while1.vpr@59.5)); List([invariant.not.established:insufficient.permission] Loop invariant acc(x.f; 1 / 2) might not hold on entry. There might be insufficient permission to access x.f. (while1.vpr@20.15); [invariant.not.preserved:insufficient.permission] Loop invariant acc(x.f; 1 / 2) might not be preserved. There might be insufficient permission to access x.f. (while1.vpr@31.15); [assert.failed:assertion.false] Assert might fail. Assertion perm(y.f) == none might not hold. (while1.vpr@59.5)))
../../src/test/resources/frontend-generated/all/invariants/while2.vpr,4,1543,88,5,1419,1606,1606,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while2.vpr@16.3); [postcondition.violated:insufficient.permission] Postcondition of test03 might not hold. There might be insufficient permission to access x.f. (while2.vpr@22.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (while2.vpr@38.15); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access x.f. (while2.vpr@51.10)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while2.vpr@16.3); [postcondition.violated:insufficient.permission] Postcondition of test03 might not hold. There might be insufficient permission to access x.f. (while2.vpr@22.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (while2.vpr@38.15); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access x.f. (while2.vpr@51.10)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while2.vpr@16.3); [postcondition.violated:insufficient.permission] Postcondition of test03 might not hold. There might be insufficient permission to access x.f. (while2.vpr@22.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (while2.vpr@38.15); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access x.f. (while2.vpr@51.10)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while2.vpr@16.3); [postcondition.violated:insufficient.permission] Postcondition of test03 might not hold. There might be insufficient permission to access x.f. (while2.vpr@22.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (while2.vpr@38.15); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access x.f. (while2.vpr@51.10)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while2.vpr@16.3); [postcondition.violated:insufficient.permission] Postcondition of test03 might not hold. There might be insufficient permission to access x.f. (while2.vpr@22.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (while2.vpr@38.15); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access x.f. (while2.vpr@51.10)))
../../src/test/resources/frontend-generated/all/invariants/while3.vpr,3,1434,71,4,1381,1387,1535,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while3.vpr@22.3); [postcondition.violated:assertion.false] Postcondition of test02a might not hold. Assertion false might not hold. (while3.vpr@27.11); [postcondition.violated:assertion.false] Postcondition of test02b might not hold. Assertion false might not hold. (while3.vpr@41.11)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while3.vpr@22.3); [postcondition.violated:assertion.false] Postcondition of test02a might not hold. Assertion false might not hold. (while3.vpr@27.11); [postcondition.violated:assertion.false] Postcondition of test02b might not hold. Assertion false might not hold. (while3.vpr@41.11)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while3.vpr@22.3); [postcondition.violated:assertion.false] Postcondition of test02a might not hold. Assertion false might not hold. (while3.vpr@27.11); [postcondition.violated:assertion.false] Postcondition of test02b might not hold. Assertion false might not hold. (while3.vpr@41.11)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while3.vpr@22.3); [postcondition.violated:assertion.false] Postcondition of test02a might not hold. Assertion false might not hold. (while3.vpr@27.11); [postcondition.violated:assertion.false] Postcondition of test02b might not hold. Assertion false might not hold. (while3.vpr@41.11)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while3.vpr@22.3); [postcondition.violated:assertion.false] Postcondition of test02a might not hold. Assertion false might not hold. (while3.vpr@27.11); [postcondition.violated:assertion.false] Postcondition of test02b might not hold. Assertion false might not hold. (while3.vpr@41.11)))
../../src/test/resources/frontend-generated/all/issues/carbon/0002.vpr,0,1698,71,4,1606,1708,1780,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0004.vpr,0,1438,98,6,1356,1381,1577,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0005.vpr,0,1428,91,6,1352,1377,1557,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0006.vpr,0,1446,4,0,1441,1445,1452,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0008.vpr,0,1682,102,6,1538,1749,1760,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0030.vpr,1,1523,19,1,1506,1513,1550,Vector(List([predicate.not.wellformed:insufficient.permission] Predicate might not be well-formed. There might be insufficient permission to access this.x. (0030.vpr@8.1)); List([predicate.not.wellformed:insufficient.permission] Predicate might not be well-formed. There might be insufficient permission to access this.x. (0030.vpr@8.1)); List([predicate.not.wellformed:insufficient.permission] Predicate might not be well-formed. There might be insufficient permission to access this.x. (0030.vpr@8.1)); List([predicate.not.wellformed:insufficient.permission] Predicate might not be well-formed. There might be insufficient permission to access this.x. (0030.vpr@8.1)); List([predicate.not.wellformed:insufficient.permission] Predicate might not be well-formed. There might be insufficient permission to access this.x. (0030.vpr@8.1)))
../../src/test/resources/frontend-generated/all/issues/carbon/0042.vpr,3,1528,31,2,1484,1550,1551,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion unknown(x) >= none might not hold. (0042.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) >= none might not hold. (0042.vpr@23.3); [fold.failed:insufficient.permission] Folding token(diz) might fail. There might be insufficient permission to access diz.unknown_y. (0042.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion unknown(x) >= none might not hold. (0042.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) >= none might not hold. (0042.vpr@23.3); [fold.failed:insufficient.permission] Folding token(diz) might fail. There might be insufficient permission to access diz.unknown_y. (0042.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion unknown(x) >= none might not hold. (0042.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) >= none might not hold. (0042.vpr@23.3); [fold.failed:insufficient.permission] Folding token(diz) might fail. There might be insufficient permission to access diz.unknown_y. (0042.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion unknown(x) >= none might not hold. (0042.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) >= none might not hold. (0042.vpr@23.3); [fold.failed:insufficient.permission] Folding token(diz) might fail. There might be insufficient permission to access diz.unknown_y. (0042.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion unknown(x) >= none might not hold. (0042.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) >= none might not hold. (0042.vpr@23.3); [fold.failed:insufficient.permission] Folding token(diz) might fail. There might be insufficient permission to access diz.unknown_y. (0042.vpr@37.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0045.vpr,0,1566,31,1,1523,1582,1595,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0049.vpr,1,1616,41,2,1559,1635,1655,Vector(List([fold.failed:insufficient.permission] Folding Cellwrite1$(this) might fail. There might be insufficient permission to access this$_1.Cellx$. (0049.vpr@38.3)); List([fold.failed:insufficient.permission] Folding Cellwrite1$(this) might fail. There might be insufficient permission to access this$_1.Cellx$. (0049.vpr@38.3)); List([fold.failed:insufficient.permission] Folding Cellwrite1$(this) might fail. There might be insufficient permission to access this$_1.Cellx$. (0049.vpr@38.3)); List([fold.failed:insufficient.permission] Folding Cellwrite1$(this) might fail. There might be insufficient permission to access this$_1.Cellx$. (0049.vpr@38.3)); List([fold.failed:insufficient.permission] Folding Cellwrite1$(this) might fail. There might be insufficient permission to access this$_1.Cellx$. (0049.vpr@38.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0052.vpr,1,1471,77,5,1362,1518,1535,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0052.vpr@9.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0052.vpr@9.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0052.vpr@9.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0052.vpr@9.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0052.vpr@9.11)))
../../src/test/resources/frontend-generated/all/issues/carbon/0053.vpr,1,1453,55,3,1385,1454,1520,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.Testx$. (0053.vpr@18.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.Testx$. (0053.vpr@18.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.Testx$. (0053.vpr@18.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.Testx$. (0053.vpr@18.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.Testx$. (0053.vpr@18.12)))
../../src/test/resources/frontend-generated/all/issues/carbon/0054.vpr,1,1543,89,5,1420,1583,1628,Vector(List([postcondition.violated:insufficient.permission] Postcondition of Test02test04$ might not hold. There might be insufficient permission to access this.f. (0054.vpr@16.11)); List([postcondition.violated:insufficient.permission] Postcondition of Test02test04$ might not hold. There might be insufficient permission to access this.f. (0054.vpr@16.11)); List([postcondition.violated:insufficient.permission] Postcondition of Test02test04$ might not hold. There might be insufficient permission to access this.f. (0054.vpr@16.11)); List([postcondition.violated:insufficient.permission] Postcondition of Test02test04$ might not hold. There might be insufficient permission to access this.f. (0054.vpr@16.11)); List([postcondition.violated:insufficient.permission] Postcondition of Test02test04$ might not hold. There might be insufficient permission to access this.f. (0054.vpr@16.11)))
../../src/test/resources/frontend-generated/all/issues/carbon/0055.vpr,0,1743,20,1,1715,1753,1761,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0056.vpr,0,2140,57,2,2076,2130,2215,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0059-1.vpr,0,1422,15,1,1400,1432,1435,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0059-2.vpr,1,1477,73,4,1401,1456,1576,Vector(List([exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0059-2.vpr@17.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0059-2.vpr@17.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0059-2.vpr@17.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0059-2.vpr@17.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0059-2.vpr@17.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0059-3.vpr,1,1524,81,5,1411,1566,1596,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (0059-3.vpr@13.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (0059-3.vpr@13.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (0059-3.vpr@13.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (0059-3.vpr@13.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (0059-3.vpr@13.11)))
../../src/test/resources/frontend-generated/all/issues/carbon/0059.vpr,0,1904,80,4,1815,1887,2011,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0060.vpr,0,1547,96,6,1429,1548,1665,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0061.vpr,0,1786,11,0,1772,1789,1799,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0063-1.vpr,7,1588,109,6,1434,1663,1669,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (0063-1.vpr@35.11); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (0063-1.vpr@43.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (0063-1.vpr@50.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(P(this); write) in false) might not hold. (0063-1.vpr@57.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0063-1.vpr@64.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(V(this); write) in this.y == 2) might not hold. (0063-1.vpr@76.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(V(this); write) in this.y) == 2 might not hold. (0063-1.vpr@83.3)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (0063-1.vpr@35.11); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (0063-1.vpr@43.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (0063-1.vpr@50.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(P(this); write) in false) might not hold. (0063-1.vpr@57.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0063-1.vpr@64.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(V(this); write) in this.y == 2) might not hold. (0063-1.vpr@76.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(V(this); write) in this.y) == 2 might not hold. (0063-1.vpr@83.3)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (0063-1.vpr@35.11); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (0063-1.vpr@43.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (0063-1.vpr@50.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(P(this); write) in false) might not hold. (0063-1.vpr@57.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0063-1.vpr@64.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(V(this); write) in this.y == 2) might not hold. (0063-1.vpr@76.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(V(this); write) in this.y) == 2 might not hold. (0063-1.vpr@83.3)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (0063-1.vpr@35.11); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (0063-1.vpr@43.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (0063-1.vpr@50.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(P(this); write) in false) might not hold. (0063-1.vpr@57.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0063-1.vpr@64.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(V(this); write) in this.y == 2) might not hold. (0063-1.vpr@76.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(V(this); write) in this.y) == 2 might not hold. (0063-1.vpr@83.3)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (0063-1.vpr@35.11); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (0063-1.vpr@43.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (0063-1.vpr@50.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(P(this); write) in false) might not hold. (0063-1.vpr@57.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0063-1.vpr@64.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(V(this); write) in this.y == 2) might not hold. (0063-1.vpr@76.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(V(this); write) in this.y) == 2 might not hold. (0063-1.vpr@83.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0063.vpr,1,1441,56,3,1401,1403,1521,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access LinkedListvalid(this). (0063.vpr@12.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access LinkedListvalid(this). (0063.vpr@12.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access LinkedListvalid(this). (0063.vpr@12.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access LinkedListvalid(this). (0063.vpr@12.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access LinkedListvalid(this). (0063.vpr@12.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0064.vpr,0,1507,73,4,1408,1532,1583,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0065.vpr,0,1385,64,4,1326,1355,1476,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0066.vpr,0,1441,57,3,1393,1410,1522,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0067.vpr,0,1502,76,5,1396,1537,1573,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0069.vpr,3,1434,52,3,1392,1402,1509,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0069.vpr@12.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0069.vpr@22.11); [postcondition.violated:assertion.false] Postcondition of postFunction2 might not hold. Assertion this.x == 0 might not hold. (0069.vpr@29.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0069.vpr@12.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0069.vpr@22.11); [postcondition.violated:assertion.false] Postcondition of postFunction2 might not hold. Assertion this.x == 0 might not hold. (0069.vpr@29.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0069.vpr@12.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0069.vpr@22.11); [postcondition.violated:assertion.false] Postcondition of postFunction2 might not hold. Assertion this.x == 0 might not hold. (0069.vpr@29.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0069.vpr@12.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0069.vpr@22.11); [postcondition.violated:assertion.false] Postcondition of postFunction2 might not hold. Assertion this.x == 0 might not hold. (0069.vpr@29.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0069.vpr@12.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0069.vpr@22.11); [postcondition.violated:assertion.false] Postcondition of postFunction2 might not hold. Assertion this.x == 0 might not hold. (0069.vpr@29.11)))
../../src/test/resources/frontend-generated/all/issues/carbon/0070.vpr,1,1486,93,6,1354,1548,1556,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (0070.vpr@14.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (0070.vpr@14.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (0070.vpr@14.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (0070.vpr@14.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (0070.vpr@14.15)))
../../src/test/resources/frontend-generated/all/issues/carbon/0072.vpr,1,1440,48,3,1374,1458,1490,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.frac. (0072.vpr@10.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.frac. (0072.vpr@10.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.frac. (0072.vpr@10.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.frac. (0072.vpr@10.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.frac. (0072.vpr@10.11)))
../../src/test/resources/frontend-generated/all/issues/carbon/0073.vpr,0,1483,120,8,1316,1536,1597,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0074.vpr,0,1373,15,1,1352,1381,1387,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0076.vpr,0,1949,12,0,1935,1946,1966,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0080.vpr,1,1500,47,3,1459,1476,1567,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access a.f. (0080.vpr@52.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access a.f. (0080.vpr@52.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access a.f. (0080.vpr@52.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access a.f. (0080.vpr@52.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access a.f. (0080.vpr@52.5)))
../../src/test/resources/frontend-generated/all/issues/carbon/0081.vpr,0,1558,29,1,1518,1573,1585,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0082.vpr,0,1529,84,5,1412,1568,1607,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0092.vpr,1,1395,7,0,1385,1398,1403,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.x. (0092.vpr@21.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.x. (0092.vpr@21.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.x. (0092.vpr@21.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.x. (0092.vpr@21.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.x. (0092.vpr@21.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0095.vpr,0,1450,55,3,1372,1483,1495,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0097.vpr,1,1480,15,1,1458,1489,1493,Vector(List([postcondition.violated:assertion.false] Postcondition of func3 might not hold. Assertion result == (x != y) might not hold. (0097.vpr@35.11)); List([postcondition.violated:assertion.false] Postcondition of func3 might not hold. Assertion result == (x != y) might not hold. (0097.vpr@35.11)); List([postcondition.violated:assertion.false] Postcondition of func3 might not hold. Assertion result == (x != y) might not hold. (0097.vpr@35.11)); List([postcondition.violated:assertion.false] Postcondition of func3 might not hold. Assertion result == (x != y) might not hold. (0097.vpr@35.11)); List([postcondition.violated:assertion.false] Postcondition of func3 might not hold. Assertion result == (x != y) might not hold. (0097.vpr@35.11)))
../../src/test/resources/frontend-generated/all/issues/carbon/0100.vpr,0,1687,20,1,1658,1702,1703,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0112.vpr,4,1562,61,3,1481,1576,1629,Vector(List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (0112.vpr@27.11); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (0112.vpr@32.11); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0112.vpr@69.12); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0112.vpr@74.12)); List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (0112.vpr@27.11); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (0112.vpr@32.11); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0112.vpr@69.12); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0112.vpr@74.12)); List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (0112.vpr@27.11); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (0112.vpr@32.11); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0112.vpr@69.12); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0112.vpr@74.12)); List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (0112.vpr@27.11); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (0112.vpr@32.11); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0112.vpr@69.12); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0112.vpr@74.12)); List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (0112.vpr@27.11); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (0112.vpr@32.11); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0112.vpr@69.12); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0112.vpr@74.12)))
../../src/test/resources/frontend-generated/all/issues/carbon/0118.vpr,3,1589,127,7,1493,1506,1770,Vector(List([exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@11.52]  might not be injective. (0118.vpr@11.3); [exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@19.52]  might not be injective. (0118.vpr@19.3); [exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@28.52]  might not be injective. (0118.vpr@28.3)); List([exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@11.52]  might not be injective. (0118.vpr@11.3); [exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@19.52]  might not be injective. (0118.vpr@19.3); [exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@28.52]  might not be injective. (0118.vpr@28.3)); List([exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@11.52]  might not be injective. (0118.vpr@11.3); [exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@19.52]  might not be injective. (0118.vpr@19.3); [exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@28.52]  might not be injective. (0118.vpr@28.3)); List([exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@11.52]  might not be injective. (0118.vpr@11.3); [exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@19.52]  might not be injective. (0118.vpr@19.3); [exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@28.52]  might not be injective. (0118.vpr@28.3)); List([exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@11.52]  might not be injective. (0118.vpr@11.3); [exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@19.52]  might not be injective. (0118.vpr@19.3); [exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@28.52]  might not be injective. (0118.vpr@28.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0122.vpr,1,1578,87,5,1454,1639,1641,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion v1 == v2 might not hold. (0122.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion v1 == v2 might not hold. (0122.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion v1 == v2 might not hold. (0122.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion v1 == v2 might not hold. (0122.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion v1 == v2 might not hold. (0122.vpr@24.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0125.vpr,2,1467,73,4,1363,1514,1525,Vector(List([unfold.failed:negative.permission] Unfolding P(x) might fail. Fraction -(1 / 2) might be negative. (0125.vpr@11.3); [unfold.failed:negative.permission] Unfolding P(x) might fail. Fraction p might be negative. (0125.vpr@20.3)); List([unfold.failed:negative.permission] Unfolding P(x) might fail. Fraction -(1 / 2) might be negative. (0125.vpr@11.3); [unfold.failed:negative.permission] Unfolding P(x) might fail. Fraction p might be negative. (0125.vpr@20.3)); List([unfold.failed:negative.permission] Unfolding P(x) might fail. Fraction -(1 / 2) might be negative. (0125.vpr@11.3); [unfold.failed:negative.permission] Unfolding P(x) might fail. Fraction p might be negative. (0125.vpr@20.3)); List([unfold.failed:negative.permission] Unfolding P(x) might fail. Fraction -(1 / 2) might be negative. (0125.vpr@11.3); [unfold.failed:negative.permission] Unfolding P(x) might fail. Fraction p might be negative. (0125.vpr@20.3)); List([unfold.failed:negative.permission] Unfolding P(x) might fail. Fraction -(1 / 2) might be negative. (0125.vpr@11.3); [unfold.failed:negative.permission] Unfolding P(x) might fail. Fraction p might be negative. (0125.vpr@20.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0137.vpr,0,1760,103,5,1614,1831,1835,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0149.vpr,0,1450,41,2,1394,1462,1494,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0150.vpr,1,1567,11,0,1552,1572,1578,Vector(List([call.precondition:insufficient.permission] The precondition of method callee might not hold. There might be insufficient permission to access Tree_valid(self). (0150.vpr@21.5)); List([call.precondition:insufficient.permission] The precondition of method callee might not hold. There might be insufficient permission to access Tree_valid(self). (0150.vpr@21.5)); List([call.precondition:insufficient.permission] The precondition of method callee might not hold. There might be insufficient permission to access Tree_valid(self). (0150.vpr@21.5)); List([call.precondition:insufficient.permission] The precondition of method callee might not hold. There might be insufficient permission to access Tree_valid(self). (0150.vpr@21.5)); List([call.precondition:insufficient.permission] The precondition of method callee might not hold. There might be insufficient permission to access Tree_valid(self). (0150.vpr@21.5)))
../../src/test/resources/frontend-generated/all/issues/carbon/0151.vpr,1,1528,30,1,1499,1517,1570,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion perm(MustTerminate(_cthread)) == 2 * write might not hold. (0151.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion perm(MustTerminate(_cthread)) == 2 * write might not hold. (0151.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion perm(MustTerminate(_cthread)) == 2 * write might not hold. (0151.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion perm(MustTerminate(_cthread)) == 2 * write might not hold. (0151.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion perm(MustTerminate(_cthread)) == 2 * write might not hold. (0151.vpr@24.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0157.vpr,0,1512,71,4,1419,1526,1592,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0160.vpr,1,1526,66,4,1435,1555,1590,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access loc(arr2; t).val. (0160.vpr@14.9)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access loc(arr2; t).val. (0160.vpr@14.9)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access loc(arr2; t).val. (0160.vpr@14.9)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access loc(arr2; t).val. (0160.vpr@14.9)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access loc(arr2; t).val. (0160.vpr@14.9)))
../../src/test/resources/frontend-generated/all/issues/carbon/0165.vpr,0,1482,96,6,1357,1497,1592,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0170.vpr,0,1414,63,4,1347,1397,1499,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0172.vpr,1,1438,22,1,1414,1433,1469,Vector(List([application.precondition:assertion.false] Precondition of function t might not hold. Assertion 0 > 0 might not hold. (0172.vpr@14.13)); List([application.precondition:assertion.false] Precondition of function t might not hold. Assertion 0 > 0 might not hold. (0172.vpr@14.13)); List([application.precondition:assertion.false] Precondition of function t might not hold. Assertion 0 > 0 might not hold. (0172.vpr@14.13)); List([application.precondition:assertion.false] Precondition of function t might not hold. Assertion 0 > 0 might not hold. (0172.vpr@14.13)); List([application.precondition:assertion.false] Precondition of function t might not hold. Assertion 0 > 0 might not hold. (0172.vpr@14.13)))
../../src/test/resources/frontend-generated/all/issues/carbon/0173.vpr,1,1430,65,4,1383,1386,1523,Vector(List([application.precondition:assertion.false] Precondition of function t might not hold. Assertion 0 > 0 might not hold. (0173.vpr@16.13)); List([application.precondition:assertion.false] Precondition of function t might not hold. Assertion 0 > 0 might not hold. (0173.vpr@16.13)); List([application.precondition:assertion.false] Precondition of function t might not hold. Assertion 0 > 0 might not hold. (0173.vpr@16.13)); List([application.precondition:assertion.false] Precondition of function t might not hold. Assertion 0 > 0 might not hold. (0173.vpr@16.13)); List([application.precondition:assertion.false] Precondition of function t might not hold. Assertion 0 > 0 might not hold. (0173.vpr@16.13)))
../../src/test/resources/frontend-generated/all/issues/carbon/0177.vpr,0,1445,79,5,1360,1426,1551,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0178.vpr,0,1510,136,9,1329,1545,1658,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0179.vpr,0,1412,118,8,1320,1337,1580,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0181.vpr,0,1536,62,4,1448,1575,1585,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0188.vpr,1,1398,16,1,1375,1410,1410,Vector(List([application.precondition:assertion.false] Precondition of function g might not hold. Assertion a > i ==> f(a; i) might not hold. (0188.vpr@13.41)); List([application.precondition:assertion.false] Precondition of function g might not hold. Assertion a > i ==> f(a; i) might not hold. (0188.vpr@13.41)); List([application.precondition:assertion.false] Precondition of function g might not hold. Assertion a > i ==> f(a; i) might not hold. (0188.vpr@13.41)); List([application.precondition:assertion.false] Precondition of function g might not hold. Assertion a > i ==> f(a; i) might not hold. (0188.vpr@13.41)); List([application.precondition:assertion.false] Precondition of function g might not hold. Assertion a > i ==> f(a; i) might not hold. (0188.vpr@13.41)))
../../src/test/resources/frontend-generated/all/issues/carbon/0192.vpr,0,1641,78,4,1572,1602,1751,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0195.vpr,0,1498,22,1,1470,1498,1526,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0196.vpr,8,1993,21,1,1977,1979,2024,Vector(List([application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@37.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@48.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@59.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@70.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@81.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@92.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@103.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@114.21)); List([application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@37.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@48.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@59.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@70.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@81.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@92.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@103.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@114.21)); List([application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@37.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@48.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@59.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@70.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@81.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@92.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@103.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@114.21)); List([application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@37.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@48.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@59.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@70.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@81.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@92.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@103.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@114.21)); List([application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@37.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@48.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@59.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@70.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@81.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@92.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@103.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@114.21)))
../../src/test/resources/frontend-generated/all/issues/carbon/0200.vpr,0,1454,78,5,1347,1482,1534,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0202.vpr,0,1619,98,6,1490,1640,1729,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0203.vpr,1,1417,31,2,1384,1409,1460,Vector(List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access n.val. (0203.vpr@11.5)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access n.val. (0203.vpr@11.5)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access n.val. (0203.vpr@11.5)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access n.val. (0203.vpr@11.5)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access n.val. (0203.vpr@11.5)))
../../src/test/resources/frontend-generated/all/issues/carbon/0204.vpr,0,1973,5,0,1969,1971,1981,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0206.vpr,1,2096,21,1,2074,2090,2125,Vector(List([postcondition.violated:assertion.false] Postcondition of swap might not hold. Assertion elements(a) == old(elements(a)) might not hold. (0206.vpr@36.13)); List([postcondition.violated:assertion.false] Postcondition of swap might not hold. Assertion elements(a) == old(elements(a)) might not hold. (0206.vpr@36.13)); List([postcondition.violated:assertion.false] Postcondition of swap might not hold. Assertion elements(a) == old(elements(a)) might not hold. (0206.vpr@36.13)); List([postcondition.violated:assertion.false] Postcondition of swap might not hold. Assertion elements(a) == old(elements(a)) might not hold. (0206.vpr@36.13)); List([postcondition.violated:assertion.false] Postcondition of swap might not hold. Assertion elements(a) == old(elements(a)) might not hold. (0206.vpr@36.13)))
../../src/test/resources/frontend-generated/all/issues/carbon/0207.vpr,2,2382,77,3,2273,2424,2449,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion elements(a) == old(elements(a)) might not hold. (0207.vpr@27.4); [assert.failed:assertion.false] Assert might fail. Assertion elements(a) == old[pre](elements(a)) might not hold. (0207.vpr@50.3)); List([assert.failed:assertion.false] Assert might fail. Assertion elements(a) == old(elements(a)) might not hold. (0207.vpr@27.4); [assert.failed:assertion.false] Assert might fail. Assertion elements(a) == old[pre](elements(a)) might not hold. (0207.vpr@50.3)); List([assert.failed:assertion.false] Assert might fail. Assertion elements(a) == old(elements(a)) might not hold. (0207.vpr@27.4); [assert.failed:assertion.false] Assert might fail. Assertion elements(a) == old[pre](elements(a)) might not hold. (0207.vpr@50.3)); List([assert.failed:assertion.false] Assert might fail. Assertion elements(a) == old(elements(a)) might not hold. (0207.vpr@27.4); [assert.failed:assertion.false] Assert might fail. Assertion elements(a) == old[pre](elements(a)) might not hold. (0207.vpr@50.3)); List([assert.failed:assertion.false] Assert might fail. Assertion elements(a) == old(elements(a)) might not hold. (0207.vpr@27.4); [assert.failed:assertion.false] Assert might fail. Assertion elements(a) == old[pre](elements(a)) might not hold. (0207.vpr@50.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0209.vpr,0,1925,24,1,1898,1921,1958,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0211.vpr,1,1480,13,0,1462,1488,1491,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion x > 3 might not hold. (0211.vpr@9.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x > 3 might not hold. (0211.vpr@9.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x > 3 might not hold. (0211.vpr@9.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x > 3 might not hold. (0211.vpr@9.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x > 3 might not hold. (0211.vpr@9.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0213.vpr,0,1422,21,1,1392,1436,1439,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0219.vpr,0,1525,38,2,1484,1515,1577,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0222.vpr,1,1501,53,3,1429,1517,1557,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion foo(x) == 42 might not hold. (0222.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion foo(x) == 42 might not hold. (0222.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion foo(x) == 42 might not hold. (0222.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion foo(x) == 42 might not hold. (0222.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion foo(x) == 42 might not hold. (0222.vpr@21.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0223.vpr,1,1974,27,1,1939,1977,2007,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion get(x) == 4 might not hold. (0223.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion get(x) == 4 might not hold. (0223.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion get(x) == 4 might not hold. (0223.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion get(x) == 4 might not hold. (0223.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion get(x) == 4 might not hold. (0223.vpr@32.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0236.vpr,0,1651,109,6,1500,1699,1754,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0237.vpr,0,1451,91,6,1383,1391,1581,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0238.vpr,1,1559,24,1,1530,1560,1589,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion get(y) == 3 might not hold. (0238.vpr@27.6)); List([assert.failed:assertion.false] Assert might fail. Assertion get(y) == 3 might not hold. (0238.vpr@27.6)); List([assert.failed:assertion.false] Assert might fail. Assertion get(y) == 3 might not hold. (0238.vpr@27.6)); List([assert.failed:assertion.false] Assert might fail. Assertion get(y) == 3 might not hold. (0238.vpr@27.6)); List([assert.failed:assertion.false] Assert might fail. Assertion get(y) == 3 might not hold. (0238.vpr@27.6)))
../../src/test/resources/frontend-generated/all/issues/carbon/0239.vpr,1,1502,64,4,1421,1508,1578,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0239.vpr@16.6)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0239.vpr@16.6)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0239.vpr@16.6)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0239.vpr@16.6)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0239.vpr@16.6)))
../../src/test/resources/frontend-generated/all/issues/carbon/0240.vpr,0,1402,20,1,1380,1398,1429,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0241.vpr,0,1596,57,3,1515,1626,1647,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0251.vpr,0,1537,21,1,1511,1537,1564,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0259.vpr,0,1609,62,3,1531,1612,1684,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0262.vpr,1,1408,58,4,1344,1397,1485,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion exists_path(y; y) ==> __learn_trigger__(foo(y; y)) might not hold. (0262.vpr@17.5)); List([assert.failed:assertion.false] Assert might fail. Assertion exists_path(y; y) ==> __learn_trigger__(foo(y; y)) might not hold. (0262.vpr@17.5)); List([assert.failed:assertion.false] Assert might fail. Assertion exists_path(y; y) ==> __learn_trigger__(foo(y; y)) might not hold. (0262.vpr@17.5)); List([assert.failed:assertion.false] Assert might fail. Assertion exists_path(y; y) ==> __learn_trigger__(foo(y; y)) might not hold. (0262.vpr@17.5)); List([assert.failed:assertion.false] Assert might fail. Assertion exists_path(y; y) ==> __learn_trigger__(foo(y; y)) might not hold. (0262.vpr@17.5)))
../../src/test/resources/frontend-generated/all/issues/carbon/0264.vpr,0,1583,84,5,1463,1640,1646,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0265.vpr,1,1414,28,1,1376,1421,1446,Vector(List([inhale.failed:division.by.zero] Inhale might fail. Divisor 0 might be zero. (0265.vpr@6.10)); List([inhale.failed:division.by.zero] Inhale might fail. Divisor 0 might be zero. (0265.vpr@6.10)); List([inhale.failed:division.by.zero] Inhale might fail. Divisor 0 might be zero. (0265.vpr@6.10)); List([inhale.failed:division.by.zero] Inhale might fail. Divisor 0 might be zero. (0265.vpr@6.10)); List([inhale.failed:division.by.zero] Inhale might fail. Divisor 0 might be zero. (0265.vpr@6.10)))
../../src/test/resources/frontend-generated/all/issues/carbon/0271.vpr,1,2009,43,2,1967,1992,2069,Vector(List([function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access someList(l1; i). (0271.vpr@48.1)); List([function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access someList(l1; i). (0271.vpr@48.1)); List([function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access someList(l1; i). (0271.vpr@48.1)); List([function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access someList(l1; i). (0271.vpr@48.1)); List([function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access someList(l1; i). (0271.vpr@48.1)))
../../src/test/resources/frontend-generated/all/issues/carbon/0274.vpr,1,1621,75,4,1556,1581,1727,Vector(List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access access_fields(nn). (0274.vpr@18.5)); List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access access_fields(nn). (0274.vpr@18.5)); List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access access_fields(nn). (0274.vpr@18.5)); List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access access_fields(nn). (0274.vpr@18.5)); List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access access_fields(nn). (0274.vpr@18.5)))
../../src/test/resources/frontend-generated/all/issues/carbon/0282.vpr,1,1456,34,2,1414,1458,1498,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { foo(j; j) } foo(j; j)) might not hold. (0282.vpr@17.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { foo(j; j) } foo(j; j)) might not hold. (0282.vpr@17.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { foo(j; j) } foo(j; j)) might not hold. (0282.vpr@17.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { foo(j; j) } foo(j; j)) might not hold. (0282.vpr@17.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { foo(j; j) } foo(j; j)) might not hold. (0282.vpr@17.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0349.vpr,0,1607,89,5,1514,1580,1727,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0005a.vpr,0,1570,52,3,1496,1605,1610,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0005b.vpr,3,2978,16,0,2956,2981,2997,Vector(List([postcondition.violated:assertion.false] Postcondition of Triggerstriggers_two$ might not hold. Assertion (forall w: Int :: { Triggersg$(this$_7; w) } true ==> Triggersg$(this$_7; w)) might not hold. (0005b.vpr@110.12); [postcondition.violated:assertion.false] Postcondition of Triggerstriggers_three$ might not hold. Assertion (forall x: Int; y: Int; z: Int :: { Triggersf$(this$_8; x; y; z) } true ==> Triggersf$(this$_8; x; y; z)) might not hold. (0005b.vpr@127.12); [postcondition.violated:assertion.false] Postcondition of Triggerstriggers_four$ might not hold. Assertion (forall x: Int; y: Int; z: Int :: { Triggersf$(this$_9; x; y; z) } true ==> Triggersf$(this$_9; x; y; z)) might not hold. (0005b.vpr@143.12)); List([postcondition.violated:assertion.false] Postcondition of Triggerstriggers_two$ might not hold. Assertion (forall w: Int :: { Triggersg$(this$_7; w) } true ==> Triggersg$(this$_7; w)) might not hold. (0005b.vpr@110.12); [postcondition.violated:assertion.false] Postcondition of Triggerstriggers_three$ might not hold. Assertion (forall x: Int; y: Int; z: Int :: { Triggersf$(this$_8; x; y; z) } true ==> Triggersf$(this$_8; x; y; z)) might not hold. (0005b.vpr@127.12); [postcondition.violated:assertion.false] Postcondition of Triggerstriggers_four$ might not hold. Assertion (forall x: Int; y: Int; z: Int :: { Triggersf$(this$_9; x; y; z) } true ==> Triggersf$(this$_9; x; y; z)) might not hold. (0005b.vpr@143.12)); List([postcondition.violated:assertion.false] Postcondition of Triggerstriggers_two$ might not hold. Assertion (forall w: Int :: { Triggersg$(this$_7; w) } true ==> Triggersg$(this$_7; w)) might not hold. (0005b.vpr@110.12); [postcondition.violated:assertion.false] Postcondition of Triggerstriggers_three$ might not hold. Assertion (forall x: Int; y: Int; z: Int :: { Triggersf$(this$_8; x; y; z) } true ==> Triggersf$(this$_8; x; y; z)) might not hold. (0005b.vpr@127.12); [postcondition.violated:assertion.false] Postcondition of Triggerstriggers_four$ might not hold. Assertion (forall x: Int; y: Int; z: Int :: { Triggersf$(this$_9; x; y; z) } true ==> Triggersf$(this$_9; x; y; z)) might not hold. (0005b.vpr@143.12)); List([postcondition.violated:assertion.false] Postcondition of Triggerstriggers_two$ might not hold. Assertion (forall w: Int :: { Triggersg$(this$_7; w) } true ==> Triggersg$(this$_7; w)) might not hold. (0005b.vpr@110.12); [postcondition.violated:assertion.false] Postcondition of Triggerstriggers_three$ might not hold. Assertion (forall x: Int; y: Int; z: Int :: { Triggersf$(this$_8; x; y; z) } true ==> Triggersf$(this$_8; x; y; z)) might not hold. (0005b.vpr@127.12); [postcondition.violated:assertion.false] Postcondition of Triggerstriggers_four$ might not hold. Assertion (forall x: Int; y: Int; z: Int :: { Triggersf$(this$_9; x; y; z) } true ==> Triggersf$(this$_9; x; y; z)) might not hold. (0005b.vpr@143.12)); List([postcondition.violated:assertion.false] Postcondition of Triggerstriggers_two$ might not hold. Assertion (forall w: Int :: { Triggersg$(this$_7; w) } true ==> Triggersg$(this$_7; w)) might not hold. (0005b.vpr@110.12); [postcondition.violated:assertion.false] Postcondition of Triggerstriggers_three$ might not hold. Assertion (forall x: Int; y: Int; z: Int :: { Triggersf$(this$_8; x; y; z) } true ==> Triggersf$(this$_8; x; y; z)) might not hold. (0005b.vpr@127.12); [postcondition.violated:assertion.false] Postcondition of Triggerstriggers_four$ might not hold. Assertion (forall x: Int; y: Int; z: Int :: { Triggersf$(this$_9; x; y; z) } true ==> Triggersf$(this$_9; x; y; z)) might not hold. (0005b.vpr@143.12)))
../../src/test/resources/frontend-generated/all/issues/silicon/0006.vpr,1,1520,89,5,1395,1570,1597,Vector(List([application.precondition:insufficient.permission] Precondition of function bar might not hold. There might be insufficient permission to access x.f. (0006.vpr@9.11)); List([application.precondition:insufficient.permission] Precondition of function bar might not hold. There might be insufficient permission to access x.f. (0006.vpr@9.11)); List([application.precondition:insufficient.permission] Precondition of function bar might not hold. There might be insufficient permission to access x.f. (0006.vpr@9.11)); List([application.precondition:insufficient.permission] Precondition of function bar might not hold. There might be insufficient permission to access x.f. (0006.vpr@9.11)); List([application.precondition:insufficient.permission] Precondition of function bar might not hold. There might be insufficient permission to access x.f. (0006.vpr@9.11)))
../../src/test/resources/frontend-generated/all/issues/silicon/0008.vpr,0,1408,17,1,1390,1404,1431,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0011.vpr,3,1975,9,0,1964,1974,1987,Vector(List([postcondition.violated:insufficient.permission] Postcondition of fails0 might not hold. There might be insufficient permission to access x.f. (0011.vpr@43.11); [postcondition.violated:insufficient.permission] Postcondition of fails1 might not hold. There might be insufficient permission to access x.c.f. (0011.vpr@56.11); [postcondition.violated:assertion.false] Postcondition of fails2 might not hold. Assertion x.b == (x.c.f == x.d.f) might not hold. (0011.vpr@75.11)); List([postcondition.violated:insufficient.permission] Postcondition of fails0 might not hold. There might be insufficient permission to access x.f. (0011.vpr@43.11); [postcondition.violated:insufficient.permission] Postcondition of fails1 might not hold. There might be insufficient permission to access x.c.f. (0011.vpr@56.11); [postcondition.violated:assertion.false] Postcondition of fails2 might not hold. Assertion x.b == (x.c.f == x.d.f) might not hold. (0011.vpr@75.11)); List([postcondition.violated:insufficient.permission] Postcondition of fails0 might not hold. There might be insufficient permission to access x.f. (0011.vpr@43.11); [postcondition.violated:insufficient.permission] Postcondition of fails1 might not hold. There might be insufficient permission to access x.c.f. (0011.vpr@56.11); [postcondition.violated:assertion.false] Postcondition of fails2 might not hold. Assertion x.b == (x.c.f == x.d.f) might not hold. (0011.vpr@75.11)); List([postcondition.violated:insufficient.permission] Postcondition of fails0 might not hold. There might be insufficient permission to access x.f. (0011.vpr@43.11); [postcondition.violated:insufficient.permission] Postcondition of fails1 might not hold. There might be insufficient permission to access x.c.f. (0011.vpr@56.11); [postcondition.violated:assertion.false] Postcondition of fails2 might not hold. Assertion x.b == (x.c.f == x.d.f) might not hold. (0011.vpr@75.11)); List([postcondition.violated:insufficient.permission] Postcondition of fails0 might not hold. There might be insufficient permission to access x.f. (0011.vpr@43.11); [postcondition.violated:insufficient.permission] Postcondition of fails1 might not hold. There might be insufficient permission to access x.c.f. (0011.vpr@56.11); [postcondition.violated:assertion.false] Postcondition of fails2 might not hold. Assertion x.b == (x.c.f == x.d.f) might not hold. (0011.vpr@75.11)))
../../src/test/resources/frontend-generated/all/issues/silicon/0030.vpr,2,1481,44,2,1419,1510,1515,Vector(List([application.precondition:insufficient.permission] Precondition of function C__g might not hold. There might be insufficient permission to access C__P(diz). (0030.vpr@16.13); [application.precondition:insufficient.permission] Precondition of function C__g might not hold. There might be insufficient permission to access C__P(diz). (0030.vpr@35.13)); List([application.precondition:insufficient.permission] Precondition of function C__g might not hold. There might be insufficient permission to access C__P(diz). (0030.vpr@16.13); [application.precondition:insufficient.permission] Precondition of function C__g might not hold. There might be insufficient permission to access C__P(diz). (0030.vpr@35.13)); List([application.precondition:insufficient.permission] Precondition of function C__g might not hold. There might be insufficient permission to access C__P(diz). (0030.vpr@16.13); [application.precondition:insufficient.permission] Precondition of function C__g might not hold. There might be insufficient permission to access C__P(diz). (0030.vpr@35.13)); List([application.precondition:insufficient.permission] Precondition of function C__g might not hold. There might be insufficient permission to access C__P(diz). (0030.vpr@16.13); [application.precondition:insufficient.permission] Precondition of function C__g might not hold. There might be insufficient permission to access C__P(diz). (0030.vpr@35.13)); List([application.precondition:insufficient.permission] Precondition of function C__g might not hold. There might be insufficient permission to access C__P(diz). (0030.vpr@16.13); [application.precondition:insufficient.permission] Precondition of function C__g might not hold. There might be insufficient permission to access C__P(diz). (0030.vpr@35.13)))
../../src/test/resources/frontend-generated/all/issues/silicon/0033.vpr,1,1680,80,4,1576,1693,1772,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion this.next != null might not hold. (0033.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion this.next != null might not hold. (0033.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion this.next != null might not hold. (0033.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion this.next != null might not hold. (0033.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion this.next != null might not hold. (0033.vpr@27.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0034.vpr,1,1426,51,3,1362,1429,1487,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion x > 0 might not hold. (0034.vpr@6.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x > 0 might not hold. (0034.vpr@6.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x > 0 might not hold. (0034.vpr@6.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x > 0 might not hold. (0034.vpr@6.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x > 0 might not hold. (0034.vpr@6.5)))
../../src/test/resources/frontend-generated/all/issues/silicon/0037.vpr,0,1626,134,8,1437,1712,1730,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0039a.vpr,0,1490,25,1,1458,1494,1519,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0039b.vpr,1,1833,43,2,1781,1832,1888,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion List_size(this) == 1 might not hold. (0039b.vpr@26.3)); List([assert.failed:assertion.false] Assert might fail. Assertion List_size(this) == 1 might not hold. (0039b.vpr@26.3)); List([assert.failed:assertion.false] Assert might fail. Assertion List_size(this) == 1 might not hold. (0039b.vpr@26.3)); List([assert.failed:assertion.false] Assert might fail. Assertion List_size(this) == 1 might not hold. (0039b.vpr@26.3)); List([assert.failed:assertion.false] Assert might fail. Assertion List_size(this) == 1 might not hold. (0039b.vpr@26.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0041.vpr,0,1578,80,5,1470,1602,1662,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0042.vpr,2,1455,15,1,1437,1455,1474,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion list != null might not hold. (0042.vpr@20.2); [assert.failed:assertion.false] Assert might fail. Assertion list != null might not hold. (0042.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion list != null might not hold. (0042.vpr@20.2); [assert.failed:assertion.false] Assert might fail. Assertion list != null might not hold. (0042.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion list != null might not hold. (0042.vpr@20.2); [assert.failed:assertion.false] Assert might fail. Assertion list != null might not hold. (0042.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion list != null might not hold. (0042.vpr@20.2); [assert.failed:assertion.false] Assert might fail. Assertion list != null might not hold. (0042.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion list != null might not hold. (0042.vpr@20.2); [assert.failed:assertion.false] Assert might fail. Assertion list != null might not hold. (0042.vpr@27.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0043.vpr,0,1471,35,2,1421,1494,1499,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0045.vpr,0,2098,48,2,2032,2114,2148,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0046.vpr,0,1458,3,0,1453,1459,1462,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0047.vpr,2,1482,63,4,1392,1527,1528,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion z == y might not hold. (0047.vpr@8.3); [assert.failed:assertion.false] Assert might fail. Assertion z == x might not hold. (0047.vpr@15.3)); List([assert.failed:assertion.false] Assert might fail. Assertion z == y might not hold. (0047.vpr@8.3); [assert.failed:assertion.false] Assert might fail. Assertion z == x might not hold. (0047.vpr@15.3)); List([assert.failed:assertion.false] Assert might fail. Assertion z == y might not hold. (0047.vpr@8.3); [assert.failed:assertion.false] Assert might fail. Assertion z == x might not hold. (0047.vpr@15.3)); List([assert.failed:assertion.false] Assert might fail. Assertion z == y might not hold. (0047.vpr@8.3); [assert.failed:assertion.false] Assert might fail. Assertion z == x might not hold. (0047.vpr@15.3)); List([assert.failed:assertion.false] Assert might fail. Assertion z == y might not hold. (0047.vpr@8.3); [assert.failed:assertion.false] Assert might fail. Assertion z == x might not hold. (0047.vpr@15.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0053.vpr,0,1463,22,1,1431,1479,1480,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0054.vpr,1,1486,48,3,1418,1511,1529,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0054.vpr@9.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0054.vpr@9.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0054.vpr@9.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0054.vpr@9.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0054.vpr@9.5)))
../../src/test/resources/frontend-generated/all/issues/silicon/0057.vpr,1,1483,58,3,1428,1459,1564,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion o.f == old(o.f) might not hold. (0057.vpr@17.3)); List([assert.failed:assertion.false] Assert might fail. Assertion o.f == old(o.f) might not hold. (0057.vpr@17.3)); List([assert.failed:assertion.false] Assert might fail. Assertion o.f == old(o.f) might not hold. (0057.vpr@17.3)); List([assert.failed:assertion.false] Assert might fail. Assertion o.f == old(o.f) might not hold. (0057.vpr@17.3)); List([assert.failed:assertion.false] Assert might fail. Assertion o.f == old(o.f) might not hold. (0057.vpr@17.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0072.vpr,3,1971,33,1,1944,1952,2018,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access s[i].f. (0072.vpr@14.11); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access s[i].f. (0072.vpr@24.3); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access s[i].f. (0072.vpr@36.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access s[i].f. (0072.vpr@14.11); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access s[i].f. (0072.vpr@24.3); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access s[i].f. (0072.vpr@36.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access s[i].f. (0072.vpr@14.11); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access s[i].f. (0072.vpr@24.3); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access s[i].f. (0072.vpr@36.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access s[i].f. (0072.vpr@14.11); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access s[i].f. (0072.vpr@24.3); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access s[i].f. (0072.vpr@36.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access s[i].f. (0072.vpr@14.11); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access s[i].f. (0072.vpr@24.3); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access s[i].f. (0072.vpr@36.12)))
../../src/test/resources/frontend-generated/all/issues/silicon/0075_AVLTree.nokeys.vpr,0,22704,180,0,22527,22634,22953,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0083.vpr,4,2003,20,0,1979,2001,2029,Vector(List([not.wellformed:seq.index.negative] Contract might not be well-formed. Index -1 into xs might be negative. (0083.vpr@8.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index 1 into xs might exceed sequence length. (0083.vpr@12.11); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (0083.vpr@17.12); [assignment.failed:seq.index.negative] Assignment might fail. Index i into xs might be negative. (0083.vpr@38.3)); List([not.wellformed:seq.index.negative] Contract might not be well-formed. Index -1 into xs might be negative. (0083.vpr@8.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index 1 into xs might exceed sequence length. (0083.vpr@12.11); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (0083.vpr@17.12); [assignment.failed:seq.index.negative] Assignment might fail. Index i into xs might be negative. (0083.vpr@38.3)); List([not.wellformed:seq.index.negative] Contract might not be well-formed. Index -1 into xs might be negative. (0083.vpr@8.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index 1 into xs might exceed sequence length. (0083.vpr@12.11); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (0083.vpr@17.12); [assignment.failed:seq.index.negative] Assignment might fail. Index i into xs might be negative. (0083.vpr@38.3)); List([not.wellformed:seq.index.negative] Contract might not be well-formed. Index -1 into xs might be negative. (0083.vpr@8.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index 1 into xs might exceed sequence length. (0083.vpr@12.11); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (0083.vpr@17.12); [assignment.failed:seq.index.negative] Assignment might fail. Index i into xs might be negative. (0083.vpr@38.3)); List([not.wellformed:seq.index.negative] Contract might not be well-formed. Index -1 into xs might be negative. (0083.vpr@8.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index 1 into xs might exceed sequence length. (0083.vpr@12.11); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (0083.vpr@17.12); [assignment.failed:seq.index.negative] Assignment might fail. Index i into xs might be negative. (0083.vpr@38.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0084.vpr,0,1745,18,1,1726,1740,1770,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0087.vpr,0,1464,43,2,1423,1444,1525,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0088.vpr,1,1532,22,1,1507,1527,1562,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forall n: Int :: { fib(n) } n >= 1 ==> fib(n) >= fib(n + 1)) might not hold. (0088.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall n: Int :: { fib(n) } n >= 1 ==> fib(n) >= fib(n + 1)) might not hold. (0088.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall n: Int :: { fib(n) } n >= 1 ==> fib(n) >= fib(n + 1)) might not hold. (0088.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall n: Int :: { fib(n) } n >= 1 ==> fib(n) >= fib(n + 1)) might not hold. (0088.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall n: Int :: { fib(n) } n >= 1 ==> fib(n) >= fib(n + 1)) might not hold. (0088.vpr@14.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0091.vpr,1,3119,20,0,3095,3118,3145,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0091.vpr@20.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0091.vpr@20.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0091.vpr@20.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0091.vpr@20.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0091.vpr@20.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0092.vpr,0,2633,145,5,2428,2734,2739,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0094.vpr,0,1492,68,4,1428,1462,1588,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0097.vpr,0,2070,61,2,1997,2065,2148,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0110.vpr,1,3,0,0,3,3,3,Vector(List(Consistency error: "wildcard" can only be used in accessibility predicates (0110.vpr@11.8)); List(Consistency error: "wildcard" can only be used in accessibility predicates (0110.vpr@11.8)); List(Consistency error: "wildcard" can only be used in accessibility predicates (0110.vpr@11.8)); List(Consistency error: "wildcard" can only be used in accessibility predicates (0110.vpr@11.8)); List(Consistency error: "wildcard" can only be used in accessibility predicates (0110.vpr@11.8)))
../../src/test/resources/frontend-generated/all/issues/silicon/0112.vpr,1,1744,67,3,1653,1764,1816,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0112.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0112.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0112.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0112.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0112.vpr@21.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0113.vpr,0,1884,16,0,1861,1892,1899,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0114.vpr,3,1613,47,2,1564,1597,1678,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { fun1(j) } (unfolding acc(P(x; b); write) in fun1(j) > 0)) might not hold. (0114.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion fun3(5) might not hold. (0114.vpr@46.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { fun1(j) } (unfolding acc(P(x; c); write) in fun1(j) > 0)) might not hold. (0114.vpr@61.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { fun1(j) } (unfolding acc(P(x; b); write) in fun1(j) > 0)) might not hold. (0114.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion fun3(5) might not hold. (0114.vpr@46.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { fun1(j) } (unfolding acc(P(x; c); write) in fun1(j) > 0)) might not hold. (0114.vpr@61.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { fun1(j) } (unfolding acc(P(x; b); write) in fun1(j) > 0)) might not hold. (0114.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion fun3(5) might not hold. (0114.vpr@46.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { fun1(j) } (unfolding acc(P(x; c); write) in fun1(j) > 0)) might not hold. (0114.vpr@61.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { fun1(j) } (unfolding acc(P(x; b); write) in fun1(j) > 0)) might not hold. (0114.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion fun3(5) might not hold. (0114.vpr@46.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { fun1(j) } (unfolding acc(P(x; c); write) in fun1(j) > 0)) might not hold. (0114.vpr@61.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { fun1(j) } (unfolding acc(P(x; b); write) in fun1(j) > 0)) might not hold. (0114.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion fun3(5) might not hold. (0114.vpr@46.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { fun1(j) } (unfolding acc(P(x; c); write) in fun1(j) > 0)) might not hold. (0114.vpr@61.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0117.vpr,0,1535,62,4,1476,1508,1621,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0118-reduced.vpr,0,1541,63,4,1457,1556,1610,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0118.vpr,0,1830,110,6,1677,1880,1933,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0119.vpr,0,1567,35,2,1526,1565,1612,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0120a.vpr,1,180107,7,0,180100,180104,180117,Vector(List(Timeout occurred after 180 second(s) (<no position>)); List(Timeout occurred after 180 second(s) (<no position>)); List(Timeout occurred after 180 second(s) (<no position>)); List(Timeout occurred after 180 second(s) (<no position>)); List(Timeout occurred after 180 second(s) (<no position>)))
../../src/test/resources/frontend-generated/all/issues/silicon/0120b.vpr,0,1810,83,4,1716,1795,1920,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0127.vpr,0,1451,37,2,1410,1445,1500,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0134.vpr,5,1498,82,5,1436,1445,1615,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0134.vpr@15.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0134.vpr@30.5); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@56.3); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@71.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0134.vpr@15.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0134.vpr@30.5); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@56.3); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@71.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0134.vpr@15.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0134.vpr@30.5); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@56.3); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@71.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0134.vpr@15.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0134.vpr@30.5); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@56.3); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@71.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0134.vpr@15.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0134.vpr@30.5); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@56.3); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@71.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0135.vpr,3,1638,63,3,1569,1624,1723,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion unknown(x) >= none might not hold. (0135.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) >= none might not hold. (0135.vpr@23.3); [fold.failed:insufficient.permission] Folding token(diz) might fail. There might be insufficient permission to access diz.unknown_y. (0135.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion unknown(x) >= none might not hold. (0135.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) >= none might not hold. (0135.vpr@23.3); [fold.failed:insufficient.permission] Folding token(diz) might fail. There might be insufficient permission to access diz.unknown_y. (0135.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion unknown(x) >= none might not hold. (0135.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) >= none might not hold. (0135.vpr@23.3); [fold.failed:insufficient.permission] Folding token(diz) might fail. There might be insufficient permission to access diz.unknown_y. (0135.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion unknown(x) >= none might not hold. (0135.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) >= none might not hold. (0135.vpr@23.3); [fold.failed:insufficient.permission] Folding token(diz) might fail. There might be insufficient permission to access diz.unknown_y. (0135.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion unknown(x) >= none might not hold. (0135.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) >= none might not hold. (0135.vpr@23.3); [fold.failed:insufficient.permission] Folding token(diz) might fail. There might be insufficient permission to access diz.unknown_y. (0135.vpr@37.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0138.vpr,2,1621,78,4,1511,1677,1677,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0138.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0138.vpr@48.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0138.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0138.vpr@48.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0138.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0138.vpr@48.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0138.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0138.vpr@48.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0138.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0138.vpr@48.5)))
../../src/test/resources/frontend-generated/all/issues/silicon/0144.vpr,3,1449,61,4,1382,1437,1530,Vector(List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0144.vpr@7.11); [call.failed:division.by.zero] Method call might fail. Divisor 1 / x might be zero. (0144.vpr@17.3); [call.failed:division.by.zero] Method call might fail. Divisor x might be zero. (0144.vpr@23.3)); List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0144.vpr@7.11); [call.failed:division.by.zero] Method call might fail. Divisor 1 / x might be zero. (0144.vpr@17.3); [call.failed:division.by.zero] Method call might fail. Divisor x might be zero. (0144.vpr@23.3)); List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0144.vpr@7.11); [call.failed:division.by.zero] Method call might fail. Divisor 1 / x might be zero. (0144.vpr@17.3); [call.failed:division.by.zero] Method call might fail. Divisor x might be zero. (0144.vpr@23.3)); List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0144.vpr@7.11); [call.failed:division.by.zero] Method call might fail. Divisor 1 / x might be zero. (0144.vpr@17.3); [call.failed:division.by.zero] Method call might fail. Divisor x might be zero. (0144.vpr@23.3)); List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0144.vpr@7.11); [call.failed:division.by.zero] Method call might fail. Divisor 1 / x might be zero. (0144.vpr@17.3); [call.failed:division.by.zero] Method call might fail. Divisor x might be zero. (0144.vpr@23.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0146.vpr,0,1685,94,5,1579,1667,1809,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0152.vpr,2,1511,28,1,1488,1496,1551,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0152.vpr@10.11); [call.failed:insufficient.permission] Method call might fail. There might be insufficient permission to access this.x. (0152.vpr@20.3)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0152.vpr@10.11); [call.failed:insufficient.permission] Method call might fail. There might be insufficient permission to access this.x. (0152.vpr@20.3)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0152.vpr@10.11); [call.failed:insufficient.permission] Method call might fail. There might be insufficient permission to access this.x. (0152.vpr@20.3)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0152.vpr@10.11); [call.failed:insufficient.permission] Method call might fail. There might be insufficient permission to access this.x. (0152.vpr@20.3)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0152.vpr@10.11); [call.failed:insufficient.permission] Method call might fail. There might be insufficient permission to access this.x. (0152.vpr@20.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0153.vpr,2,1555,68,4,1459,1594,1612,Vector(List([application.precondition:assertion.false] Precondition of function fun might not hold. Assertion this.f != null might not hold. (0153.vpr@20.12); [application.precondition:assertion.false] Precondition of function fun might not hold. Assertion this.f != null might not hold. (0153.vpr@30.12)); List([application.precondition:assertion.false] Precondition of function fun might not hold. Assertion this.f != null might not hold. (0153.vpr@20.12); [application.precondition:assertion.false] Precondition of function fun might not hold. Assertion this.f != null might not hold. (0153.vpr@30.12)); List([application.precondition:assertion.false] Precondition of function fun might not hold. Assertion this.f != null might not hold. (0153.vpr@20.12); [application.precondition:assertion.false] Precondition of function fun might not hold. Assertion this.f != null might not hold. (0153.vpr@30.12)); List([application.precondition:assertion.false] Precondition of function fun might not hold. Assertion this.f != null might not hold. (0153.vpr@20.12); [application.precondition:assertion.false] Precondition of function fun might not hold. Assertion this.f != null might not hold. (0153.vpr@30.12)); List([application.precondition:assertion.false] Precondition of function fun might not hold. Assertion this.f != null might not hold. (0153.vpr@20.12); [application.precondition:assertion.false] Precondition of function fun might not hold. Assertion this.f != null might not hold. (0153.vpr@30.12)))
../../src/test/resources/frontend-generated/all/issues/silicon/0154-1.vpr,9,2048,105,5,1949,2002,2195,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@34.3); [assert.failed:assertion.false] Assert might fail. Assertion this.Nodenext$ != this.Nodenext$.Nodenext$ might not hold. (0154-1.vpr@48.3); [assert.failed:assertion.false] Assert might fail. Assertion this != (unfolding acc(Nodevalid$(this); write) in this.Nodenext$) might not hold. (0154-1.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@72.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@88.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@104.3); [assert.failed:assertion.false] Assert might fail. Assertion this != (unfolding acc(Nodep$(this); write) in this.Nodenext$) might not hold. (0154-1.vpr@116.3); [assert.failed:assertion.false] Assert might fail. Assertion this != x might not hold. (0154-1.vpr@130.3); [postcondition.violated:assertion.false] Postcondition of NodetestNestingUnfoldingPostcondition$ might not hold. Assertion this != NodegetNext$(this) might not hold. (0154-1.vpr@137.11)); List([assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@34.3); [assert.failed:assertion.false] Assert might fail. Assertion this.Nodenext$ != this.Nodenext$.Nodenext$ might not hold. (0154-1.vpr@48.3); [assert.failed:assertion.false] Assert might fail. Assertion this != (unfolding acc(Nodevalid$(this); write) in this.Nodenext$) might not hold. (0154-1.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@72.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@88.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@104.3); [assert.failed:assertion.false] Assert might fail. Assertion this != (unfolding acc(Nodep$(this); write) in this.Nodenext$) might not hold. (0154-1.vpr@116.3); [assert.failed:assertion.false] Assert might fail. Assertion this != x might not hold. (0154-1.vpr@130.3); [postcondition.violated:assertion.false] Postcondition of NodetestNestingUnfoldingPostcondition$ might not hold. Assertion this != NodegetNext$(this) might not hold. (0154-1.vpr@137.11)); List([assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@34.3); [assert.failed:assertion.false] Assert might fail. Assertion this.Nodenext$ != this.Nodenext$.Nodenext$ might not hold. (0154-1.vpr@48.3); [assert.failed:assertion.false] Assert might fail. Assertion this != (unfolding acc(Nodevalid$(this); write) in this.Nodenext$) might not hold. (0154-1.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@72.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@88.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@104.3); [assert.failed:assertion.false] Assert might fail. Assertion this != (unfolding acc(Nodep$(this); write) in this.Nodenext$) might not hold. (0154-1.vpr@116.3); [assert.failed:assertion.false] Assert might fail. Assertion this != x might not hold. (0154-1.vpr@130.3); [postcondition.violated:assertion.false] Postcondition of NodetestNestingUnfoldingPostcondition$ might not hold. Assertion this != NodegetNext$(this) might not hold. (0154-1.vpr@137.11)); List([assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@34.3); [assert.failed:assertion.false] Assert might fail. Assertion this.Nodenext$ != this.Nodenext$.Nodenext$ might not hold. (0154-1.vpr@48.3); [assert.failed:assertion.false] Assert might fail. Assertion this != (unfolding acc(Nodevalid$(this); write) in this.Nodenext$) might not hold. (0154-1.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@72.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@88.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@104.3); [assert.failed:assertion.false] Assert might fail. Assertion this != (unfolding acc(Nodep$(this); write) in this.Nodenext$) might not hold. (0154-1.vpr@116.3); [assert.failed:assertion.false] Assert might fail. Assertion this != x might not hold. (0154-1.vpr@130.3); [postcondition.violated:assertion.false] Postcondition of NodetestNestingUnfoldingPostcondition$ might not hold. Assertion this != NodegetNext$(this) might not hold. (0154-1.vpr@137.11)); List([assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@34.3); [assert.failed:assertion.false] Assert might fail. Assertion this.Nodenext$ != this.Nodenext$.Nodenext$ might not hold. (0154-1.vpr@48.3); [assert.failed:assertion.false] Assert might fail. Assertion this != (unfolding acc(Nodevalid$(this); write) in this.Nodenext$) might not hold. (0154-1.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@72.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@88.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@104.3); [assert.failed:assertion.false] Assert might fail. Assertion this != (unfolding acc(Nodep$(this); write) in this.Nodenext$) might not hold. (0154-1.vpr@116.3); [assert.failed:assertion.false] Assert might fail. Assertion this != x might not hold. (0154-1.vpr@130.3); [postcondition.violated:assertion.false] Postcondition of NodetestNestingUnfoldingPostcondition$ might not hold. Assertion this != NodegetNext$(this) might not hold. (0154-1.vpr@137.11)))
../../src/test/resources/frontend-generated/all/issues/silicon/0154.vpr,1,1653,57,3,1584,1651,1724,Vector(List([application.precondition:insufficient.permission] Precondition of function Nodet$ might not hold. There might be insufficient permission to access Nodevalid$(this). (0154.vpr@21.45)); List([application.precondition:insufficient.permission] Precondition of function Nodet$ might not hold. There might be insufficient permission to access Nodevalid$(this). (0154.vpr@21.45)); List([application.precondition:insufficient.permission] Precondition of function Nodet$ might not hold. There might be insufficient permission to access Nodevalid$(this). (0154.vpr@21.45)); List([application.precondition:insufficient.permission] Precondition of function Nodet$ might not hold. There might be insufficient permission to access Nodevalid$(this). (0154.vpr@21.45)); List([application.precondition:insufficient.permission] Precondition of function Nodet$ might not hold. There might be insufficient permission to access Nodevalid$(this). (0154.vpr@21.45)))
../../src/test/resources/frontend-generated/all/issues/silicon/0155.vpr,0,1499,24,1,1468,1501,1528,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0157-1.vpr,3,1930,12,0,1916,1929,1947,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157-1.vpr@45.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157-1.vpr@53.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access this.Testtk$.par$Testfoo$this$_2. (0157-1.vpr@65.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157-1.vpr@45.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157-1.vpr@53.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access this.Testtk$.par$Testfoo$this$_2. (0157-1.vpr@65.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157-1.vpr@45.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157-1.vpr@53.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access this.Testtk$.par$Testfoo$this$_2. (0157-1.vpr@65.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157-1.vpr@45.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157-1.vpr@53.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access this.Testtk$.par$Testfoo$this$_2. (0157-1.vpr@65.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157-1.vpr@45.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157-1.vpr@53.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access this.Testtk$.par$Testfoo$this$_2. (0157-1.vpr@65.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0157.vpr,8,1666,80,4,1561,1680,1757,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@62.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@70.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@62.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@70.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@62.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@70.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@62.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@70.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@62.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@70.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0159.vpr,2,1410,41,2,1359,1412,1460,Vector(List([exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0159.vpr@10.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0159.vpr@18.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0159.vpr@10.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0159.vpr@18.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0159.vpr@10.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0159.vpr@18.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0159.vpr@10.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0159.vpr@18.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0159.vpr@10.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0159.vpr@18.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0161.vpr,10,1574,40,2,1522,1580,1621,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@8.12); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@14.1); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@26.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@33.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@38.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@46.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@53.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@61.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@66.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@71.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@8.12); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@14.1); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@26.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@33.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@38.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@46.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@53.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@61.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@66.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@71.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@8.12); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@14.1); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@26.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@33.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@38.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@46.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@53.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@61.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@66.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@71.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@8.12); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@14.1); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@26.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@33.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@38.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@46.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@53.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@61.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@66.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@71.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@8.12); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@14.1); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@26.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@33.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@38.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@46.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@53.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@61.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@66.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@71.11)))
../../src/test/resources/frontend-generated/all/issues/silicon/0162.vpr,2,1450,20,1,1422,1457,1471,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0162.vpr@12.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0162.vpr@23.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0162.vpr@12.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0162.vpr@23.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0162.vpr@12.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0162.vpr@23.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0162.vpr@12.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0162.vpr@23.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0162.vpr@12.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0162.vpr@23.11)))
../../src/test/resources/frontend-generated/all/issues/silicon/0163.vpr,2,1541,44,2,1481,1556,1586,Vector(List([postcondition.violated:assertion.false] Postcondition of onlyWorksWithInhale2 might not hold. Assertion result > 17 might not hold. (0163.vpr@27.13); [application.precondition:assertion.false] Precondition of function onlyWorksWithInhale2 might not hold. Assertion i2 > 17 might not hold. (0163.vpr@35.5)); List([postcondition.violated:assertion.false] Postcondition of onlyWorksWithInhale2 might not hold. Assertion result > 17 might not hold. (0163.vpr@27.13); [application.precondition:assertion.false] Precondition of function onlyWorksWithInhale2 might not hold. Assertion i2 > 17 might not hold. (0163.vpr@35.5)); List([postcondition.violated:assertion.false] Postcondition of onlyWorksWithInhale2 might not hold. Assertion result > 17 might not hold. (0163.vpr@27.13); [application.precondition:assertion.false] Precondition of function onlyWorksWithInhale2 might not hold. Assertion i2 > 17 might not hold. (0163.vpr@35.5)); List([postcondition.violated:assertion.false] Postcondition of onlyWorksWithInhale2 might not hold. Assertion result > 17 might not hold. (0163.vpr@27.13); [application.precondition:assertion.false] Precondition of function onlyWorksWithInhale2 might not hold. Assertion i2 > 17 might not hold. (0163.vpr@35.5)); List([postcondition.violated:assertion.false] Postcondition of onlyWorksWithInhale2 might not hold. Assertion result > 17 might not hold. (0163.vpr@27.13); [application.precondition:assertion.false] Precondition of function onlyWorksWithInhale2 might not hold. Assertion i2 > 17 might not hold. (0163.vpr@35.5)))
../../src/test/resources/frontend-generated/all/issues/silicon/0164.vpr,2,1475,27,1,1446,1469,1512,Vector(List([invariant.not.established:assertion.false] Loop invariant [true; false] might not hold on entry. Assertion false might not hold. (0164.vpr@10.15); [invariant.not.established:assertion.false] Loop invariant false might not hold on entry. Assertion false might not hold. (0164.vpr@22.15)); List([invariant.not.established:assertion.false] Loop invariant [true; false] might not hold on entry. Assertion false might not hold. (0164.vpr@10.15); [invariant.not.established:assertion.false] Loop invariant false might not hold on entry. Assertion false might not hold. (0164.vpr@22.15)); List([invariant.not.established:assertion.false] Loop invariant [true; false] might not hold on entry. Assertion false might not hold. (0164.vpr@10.15); [invariant.not.established:assertion.false] Loop invariant false might not hold on entry. Assertion false might not hold. (0164.vpr@22.15)); List([invariant.not.established:assertion.false] Loop invariant [true; false] might not hold on entry. Assertion false might not hold. (0164.vpr@10.15); [invariant.not.established:assertion.false] Loop invariant false might not hold on entry. Assertion false might not hold. (0164.vpr@22.15)); List([invariant.not.established:assertion.false] Loop invariant [true; false] might not hold on entry. Assertion false might not hold. (0164.vpr@10.15); [invariant.not.established:assertion.false] Loop invariant false might not hold on entry. Assertion false might not hold. (0164.vpr@22.15)))
../../src/test/resources/frontend-generated/all/issues/silicon/0165.vpr,1,1499,81,5,1390,1524,1585,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (0165.vpr@14.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (0165.vpr@14.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (0165.vpr@14.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (0165.vpr@14.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (0165.vpr@14.15)))
../../src/test/resources/frontend-generated/all/issues/silicon/0166.vpr,0,1595,50,3,1556,1563,1666,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0167.vpr,0,1482,66,4,1397,1489,1560,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0171.vpr,0,1565,90,5,1472,1536,1687,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0172.vpr,1,2908,22,0,2881,2907,2936,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0172.vpr@40.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0172.vpr@40.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0172.vpr@40.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0172.vpr@40.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0172.vpr@40.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0183.vpr,4,1644,104,6,1526,1625,1781,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access self.v. (0183.vpr@20.12); [assert.failed:assertion.false] Assert might fail. Assertion none < rd * rd might not hold. (0183.vpr@28.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access self.v. (0183.vpr@38.3); [assert.failed:assertion.false] Assert might fail. Assertion none < rd * rd might not hold. (0183.vpr@46.3)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access self.v. (0183.vpr@20.12); [assert.failed:assertion.false] Assert might fail. Assertion none < rd * rd might not hold. (0183.vpr@28.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access self.v. (0183.vpr@38.3); [assert.failed:assertion.false] Assert might fail. Assertion none < rd * rd might not hold. (0183.vpr@46.3)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access self.v. (0183.vpr@20.12); [assert.failed:assertion.false] Assert might fail. Assertion none < rd * rd might not hold. (0183.vpr@28.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access self.v. (0183.vpr@38.3); [assert.failed:assertion.false] Assert might fail. Assertion none < rd * rd might not hold. (0183.vpr@46.3)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access self.v. (0183.vpr@20.12); [assert.failed:assertion.false] Assert might fail. Assertion none < rd * rd might not hold. (0183.vpr@28.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access self.v. (0183.vpr@38.3); [assert.failed:assertion.false] Assert might fail. Assertion none < rd * rd might not hold. (0183.vpr@46.3)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access self.v. (0183.vpr@20.12); [assert.failed:assertion.false] Assert might fail. Assertion none < rd * rd might not hold. (0183.vpr@28.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access self.v. (0183.vpr@38.3); [assert.failed:assertion.false] Assert might fail. Assertion none < rd * rd might not hold. (0183.vpr@46.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0186.vpr,1,1623,92,5,1506,1632,1732,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access l.next.next. (0186.vpr@21.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access l.next.next. (0186.vpr@21.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access l.next.next. (0186.vpr@21.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access l.next.next. (0186.vpr@21.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access l.next.next. (0186.vpr@21.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0195.vpr,0,1562,27,1,1532,1557,1598,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0197.vpr,0,1689,76,4,1599,1683,1786,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0199.vpr,0,1898,126,6,1720,1981,1994,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0200.vpr,1,1420,54,3,1346,1440,1474,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0200.vpr@15.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0200.vpr@15.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0200.vpr@15.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0200.vpr@15.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0200.vpr@15.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0203.vpr,0,1512,92,6,1382,1576,1580,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0207.vpr,0,1680,139,8,1483,1778,1780,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0209.vpr,0,1446,100,6,1338,1420,1581,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0210.vpr,1,1856,96,5,1720,1913,1936,Vector(List([postcondition.violated:insufficient.permission] Postcondition of length_iter might not hold. There might be insufficient permission to access valid__List(list$1). (0210.vpr@17.11)); List([postcondition.violated:insufficient.permission] Postcondition of length_iter might not hold. There might be insufficient permission to access valid__List(list$1). (0210.vpr@17.11)); List([postcondition.violated:insufficient.permission] Postcondition of length_iter might not hold. There might be insufficient permission to access valid__List(list$1). (0210.vpr@17.11)); List([postcondition.violated:insufficient.permission] Postcondition of length_iter might not hold. There might be insufficient permission to access valid__List(list$1). (0210.vpr@17.11)); List([postcondition.violated:insufficient.permission] Postcondition of length_iter might not hold. There might be insufficient permission to access valid__List(list$1). (0210.vpr@17.11)))
../../src/test/resources/frontend-generated/all/issues/silicon/0213.vpr,0,1994,23,1,1961,2011,2011,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0215.vpr,1,1,0,0,1,1,1,Vector(List(identifier temp$1 not defined. (0215.vpr@9.19)); List(identifier temp$1 not defined. (0215.vpr@9.19)); List(identifier temp$1 not defined. (0215.vpr@9.19)); List(identifier temp$1 not defined. (0215.vpr@9.19)); List(identifier temp$1 not defined. (0215.vpr@9.19)))
../../src/test/resources/frontend-generated/all/issues/silicon/0216.vpr,0,1662,49,2,1625,1629,1733,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0217.vpr,0,1483,73,4,1388,1496,1567,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0219.vpr,1,1573,88,5,1496,1527,1697,Vector(List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (0219.vpr@14.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (0219.vpr@14.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (0219.vpr@14.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (0219.vpr@14.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (0219.vpr@14.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0221.vpr,2,1643,66,4,1551,1672,1706,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access P(x). (0221.vpr@29.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access P(y). (0221.vpr@39.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access P(x). (0221.vpr@29.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access P(y). (0221.vpr@39.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access P(x). (0221.vpr@29.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access P(y). (0221.vpr@39.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access P(x). (0221.vpr@29.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access P(y). (0221.vpr@39.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access P(x). (0221.vpr@29.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access P(y). (0221.vpr@39.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0222.vpr,0,1485,70,4,1389,1515,1553,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0224.vpr,0,2058,11,0,2045,2057,2074,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0225.vpr,0,1718,67,3,1623,1765,1767,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0227.vpr,1,1467,54,3,1395,1479,1527,Vector(List([exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r$_4: Ref [mustSendBounded$(r$_4)] :: false) might not hold. (0227.vpr@31.5)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r$_4: Ref [mustSendBounded$(r$_4)] :: false) might not hold. (0227.vpr@31.5)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r$_4: Ref [mustSendBounded$(r$_4)] :: false) might not hold. (0227.vpr@31.5)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r$_4: Ref [mustSendBounded$(r$_4)] :: false) might not hold. (0227.vpr@31.5)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r$_4: Ref [mustSendBounded$(r$_4)] :: false) might not hold. (0227.vpr@31.5)))
../../src/test/resources/frontend-generated/all/issues/silicon/0228a.vpr,2,1677,71,4,1584,1689,1758,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access loc((unfolding acc(valid__Array(self$1); rd$1 / 2) in self$1.Array__ptr); j).pval. (0228a.vpr@9.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access loc((unfolding acc(valid__Array(self$1); rd$1 / 2) in self$1.Array__ptr); j).pval. (0228a.vpr@17.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access loc((unfolding acc(valid__Array(self$1); rd$1 / 2) in self$1.Array__ptr); j).pval. (0228a.vpr@9.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access loc((unfolding acc(valid__Array(self$1); rd$1 / 2) in self$1.Array__ptr); j).pval. (0228a.vpr@17.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access loc((unfolding acc(valid__Array(self$1); rd$1 / 2) in self$1.Array__ptr); j).pval. (0228a.vpr@9.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access loc((unfolding acc(valid__Array(self$1); rd$1 / 2) in self$1.Array__ptr); j).pval. (0228a.vpr@17.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access loc((unfolding acc(valid__Array(self$1); rd$1 / 2) in self$1.Array__ptr); j).pval. (0228a.vpr@9.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access loc((unfolding acc(valid__Array(self$1); rd$1 / 2) in self$1.Array__ptr); j).pval. (0228a.vpr@17.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access loc((unfolding acc(valid__Array(self$1); rd$1 / 2) in self$1.Array__ptr); j).pval. (0228a.vpr@9.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access loc((unfolding acc(valid__Array(self$1); rd$1 / 2) in self$1.Array__ptr); j).pval. (0228a.vpr@17.12)))
../../src/test/resources/frontend-generated/all/issues/silicon/0228b.vpr,0,1752,92,5,1622,1806,1829,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0228c.vpr,0,1639,120,7,1478,1670,1769,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0229.vpr,0,1949,33,1,1916,1936,1996,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0231.vpr,2,1531,32,2,1487,1543,1565,Vector(List([exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r: Ref [P(r)] :: false) might not hold. (0231.vpr@18.3); [exhale.failed:assertion.false] Exhale might fail. Assertion perm(P(this)) >= write might not hold. (0231.vpr@36.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r: Ref [P(r)] :: false) might not hold. (0231.vpr@18.3); [exhale.failed:assertion.false] Exhale might fail. Assertion perm(P(this)) >= write might not hold. (0231.vpr@36.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r: Ref [P(r)] :: false) might not hold. (0231.vpr@18.3); [exhale.failed:assertion.false] Exhale might fail. Assertion perm(P(this)) >= write might not hold. (0231.vpr@36.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r: Ref [P(r)] :: false) might not hold. (0231.vpr@18.3); [exhale.failed:assertion.false] Exhale might fail. Assertion perm(P(this)) >= write might not hold. (0231.vpr@36.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r: Ref [P(r)] :: false) might not hold. (0231.vpr@18.3); [exhale.failed:assertion.false] Exhale might fail. Assertion perm(P(this)) >= write might not hold. (0231.vpr@36.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0232.vpr,1,1605,63,3,1522,1617,1676,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(e). (0232.vpr@15.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(e). (0232.vpr@15.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(e). (0232.vpr@15.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(e). (0232.vpr@15.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(e). (0232.vpr@15.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0236.vpr,0,1754,26,1,1725,1749,1789,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0237.vpr,2,1618,24,1,1592,1613,1651,Vector(List([postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion (forall p: Int :: { loc(arr; p) } true ==> loc(arr; p) != null) might not hold. (0237.vpr@20.11); [assert.failed:assertion.false] Assert might fail. Assertion arr != null might not hold. (0237.vpr@35.2)); List([postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion (forall p: Int :: { loc(arr; p) } true ==> loc(arr; p) != null) might not hold. (0237.vpr@20.11); [assert.failed:assertion.false] Assert might fail. Assertion arr != null might not hold. (0237.vpr@35.2)); List([postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion (forall p: Int :: { loc(arr; p) } true ==> loc(arr; p) != null) might not hold. (0237.vpr@20.11); [assert.failed:assertion.false] Assert might fail. Assertion arr != null might not hold. (0237.vpr@35.2)); List([postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion (forall p: Int :: { loc(arr; p) } true ==> loc(arr; p) != null) might not hold. (0237.vpr@20.11); [assert.failed:assertion.false] Assert might fail. Assertion arr != null might not hold. (0237.vpr@35.2)); List([postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion (forall p: Int :: { loc(arr; p) } true ==> loc(arr; p) != null) might not hold. (0237.vpr@20.11); [assert.failed:assertion.false] Assert might fail. Assertion arr != null might not hold. (0237.vpr@35.2)))
../../src/test/resources/frontend-generated/all/issues/silicon/0240.vpr,2,1952,18,0,1935,1944,1978,Vector(List([application.precondition:insufficient.permission] Precondition of function foo might not hold. There might be insufficient permission to access list(this). (0240.vpr@58.43); [application.precondition:insufficient.permission] Precondition of function foo_qp might not hold. There might be insufficient permission to access x.data. (0240.vpr@102.44)); List([application.precondition:insufficient.permission] Precondition of function foo might not hold. There might be insufficient permission to access list(this). (0240.vpr@58.43); [application.precondition:insufficient.permission] Precondition of function foo_qp might not hold. There might be insufficient permission to access x.data. (0240.vpr@102.44)); List([application.precondition:insufficient.permission] Precondition of function foo might not hold. There might be insufficient permission to access list(this). (0240.vpr@58.43); [application.precondition:insufficient.permission] Precondition of function foo_qp might not hold. There might be insufficient permission to access x.data. (0240.vpr@102.44)); List([application.precondition:insufficient.permission] Precondition of function foo might not hold. There might be insufficient permission to access list(this). (0240.vpr@58.43); [application.precondition:insufficient.permission] Precondition of function foo_qp might not hold. There might be insufficient permission to access x.data. (0240.vpr@102.44)); List([application.precondition:insufficient.permission] Precondition of function foo might not hold. There might be insufficient permission to access list(this). (0240.vpr@58.43); [application.precondition:insufficient.permission] Precondition of function foo_qp might not hold. There might be insufficient permission to access x.data. (0240.vpr@102.44)))
../../src/test/resources/frontend-generated/all/issues/silicon/0241.vpr,0,1443,81,5,1385,1386,1558,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0242a.vpr,1,1595,76,4,1487,1648,1650,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0242a.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0242a.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0242a.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0242a.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0242a.vpr@21.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0242b.vpr,1,1828,97,5,1693,1873,1919,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0242b.vpr@50.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0242b.vpr@50.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0242b.vpr@50.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0242b.vpr@50.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0242b.vpr@50.5)))
../../src/test/resources/frontend-generated/all/issues/silicon/0249.vpr,0,1458,64,4,1380,1457,1537,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0252.vpr,2,1612,70,4,1513,1658,1665,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access loc(arr2; 0).val. (0252.vpr@9.3); [unfold.failed:insufficient.permission] Unfolding P(loc(arr2; 0)) might fail. There might be insufficient permission to access P(loc(arr2; 0)). (0252.vpr@19.4)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access loc(arr2; 0).val. (0252.vpr@9.3); [unfold.failed:insufficient.permission] Unfolding P(loc(arr2; 0)) might fail. There might be insufficient permission to access P(loc(arr2; 0)). (0252.vpr@19.4)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access loc(arr2; 0).val. (0252.vpr@9.3); [unfold.failed:insufficient.permission] Unfolding P(loc(arr2; 0)) might fail. There might be insufficient permission to access P(loc(arr2; 0)). (0252.vpr@19.4)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access loc(arr2; 0).val. (0252.vpr@9.3); [unfold.failed:insufficient.permission] Unfolding P(loc(arr2; 0)) might fail. There might be insufficient permission to access P(loc(arr2; 0)). (0252.vpr@19.4)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access loc(arr2; 0).val. (0252.vpr@9.3); [unfold.failed:insufficient.permission] Unfolding P(loc(arr2; 0)) might fail. There might be insufficient permission to access P(loc(arr2; 0)). (0252.vpr@19.4)))
../../src/test/resources/frontend-generated/all/issues/silicon/0263.vpr,0,1428,57,3,1349,1454,1482,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0264.vpr,0,1508,37,2,1456,1528,1542,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0267a.vpr,2,1515,32,2,1473,1521,1552,Vector(List([postcondition.violated:assertion.false] Postcondition of ANOTHER_GLOBAL_VAR might not hold. Assertion issubtype(typeof(result); bool()) might not hold. (0267a.vpr@15.11); [postcondition.violated:assertion.false] Postcondition of SO_MANY_GLOBAL_VARS might not hold. Assertion issubtype(typeof(result); int()) might not hold. (0267a.vpr@23.11)); List([postcondition.violated:assertion.false] Postcondition of ANOTHER_GLOBAL_VAR might not hold. Assertion issubtype(typeof(result); bool()) might not hold. (0267a.vpr@15.11); [postcondition.violated:assertion.false] Postcondition of SO_MANY_GLOBAL_VARS might not hold. Assertion issubtype(typeof(result); int()) might not hold. (0267a.vpr@23.11)); List([postcondition.violated:assertion.false] Postcondition of ANOTHER_GLOBAL_VAR might not hold. Assertion issubtype(typeof(result); bool()) might not hold. (0267a.vpr@15.11); [postcondition.violated:assertion.false] Postcondition of SO_MANY_GLOBAL_VARS might not hold. Assertion issubtype(typeof(result); int()) might not hold. (0267a.vpr@23.11)); List([postcondition.violated:assertion.false] Postcondition of ANOTHER_GLOBAL_VAR might not hold. Assertion issubtype(typeof(result); bool()) might not hold. (0267a.vpr@15.11); [postcondition.violated:assertion.false] Postcondition of SO_MANY_GLOBAL_VARS might not hold. Assertion issubtype(typeof(result); int()) might not hold. (0267a.vpr@23.11)); List([postcondition.violated:assertion.false] Postcondition of ANOTHER_GLOBAL_VAR might not hold. Assertion issubtype(typeof(result); bool()) might not hold. (0267a.vpr@15.11); [postcondition.violated:assertion.false] Postcondition of SO_MANY_GLOBAL_VARS might not hold. Assertion issubtype(typeof(result); int()) might not hold. (0267a.vpr@23.11)))
../../src/test/resources/frontend-generated/all/issues/silicon/0267b.vpr,0,1693,84,4,1577,1726,1777,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0269.vpr,2,1509,81,5,1439,1464,1624,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access out.Container_value. (0269.vpr@39.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (0269.vpr@94.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access out.Container_value. (0269.vpr@39.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (0269.vpr@94.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access out.Container_value. (0269.vpr@39.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (0269.vpr@94.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access out.Container_value. (0269.vpr@39.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (0269.vpr@94.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access out.Container_value. (0269.vpr@39.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (0269.vpr@94.5)))
../../src/test/resources/frontend-generated/all/issues/silicon/0270.vpr,0,1525,37,2,1473,1541,1562,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0276.vpr,1,1487,57,3,1425,1474,1563,Vector(List([application.precondition:assertion.false] Precondition of function m might not hold. Assertion (forall b: Int :: f((3 > 2 ? 3 : 2); b)) might not hold. (0276.vpr@12.17)); List([application.precondition:assertion.false] Precondition of function m might not hold. Assertion (forall b: Int :: f((3 > 2 ? 3 : 2); b)) might not hold. (0276.vpr@12.17)); List([application.precondition:assertion.false] Precondition of function m might not hold. Assertion (forall b: Int :: f((3 > 2 ? 3 : 2); b)) might not hold. (0276.vpr@12.17)); List([application.precondition:assertion.false] Precondition of function m might not hold. Assertion (forall b: Int :: f((3 > 2 ? 3 : 2); b)) might not hold. (0276.vpr@12.17)); List([application.precondition:assertion.false] Precondition of function m might not hold. Assertion (forall b: Int :: f((3 > 2 ? 3 : 2); b)) might not hold. (0276.vpr@12.17)))
../../src/test/resources/frontend-generated/all/issues/silicon/0277.vpr,0,1418,85,5,1322,1404,1529,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0279.vpr,0,1568,11,0,1554,1568,1582,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0281.vpr,0,1755,57,3,1695,1737,1833,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0282.vpr,2,1907,14,0,1887,1918,1918,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access at2(i; xs).f. (0282.vpr@34.3); [assert.failed:assertion.false] Assert might fail. Assertion at1(xs; k) != null might not hold. (0282.vpr@56.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access at2(i; xs).f. (0282.vpr@34.3); [assert.failed:assertion.false] Assert might fail. Assertion at1(xs; k) != null might not hold. (0282.vpr@56.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access at2(i; xs).f. (0282.vpr@34.3); [assert.failed:assertion.false] Assert might fail. Assertion at1(xs; k) != null might not hold. (0282.vpr@56.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access at2(i; xs).f. (0282.vpr@34.3); [assert.failed:assertion.false] Assert might fail. Assertion at1(xs; k) != null might not hold. (0282.vpr@56.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access at2(i; xs).f. (0282.vpr@34.3); [assert.failed:assertion.false] Assert might fail. Assertion at1(xs; k) != null might not hold. (0282.vpr@56.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0283.vpr,1,1592,75,4,1494,1603,1679,Vector(List([not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (0283.vpr@6.12)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (0283.vpr@6.12)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (0283.vpr@6.12)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (0283.vpr@6.12)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (0283.vpr@6.12)))
../../src/test/resources/frontend-generated/all/issues/silicon/0285.vpr,0,1994,32,1,1967,1975,2040,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0286.vpr,1,1976,20,1,1954,1970,2004,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion lsegelems(l1; old(l2.next)) == old(lsegelems(l1; l2)) ++ Seq(old(l2.val)) might not hold. (0286.vpr@58.1)); List([assert.failed:assertion.false] Assert might fail. Assertion lsegelems(l1; old(l2.next)) == old(lsegelems(l1; l2)) ++ Seq(old(l2.val)) might not hold. (0286.vpr@58.1)); List([assert.failed:assertion.false] Assert might fail. Assertion lsegelems(l1; old(l2.next)) == old(lsegelems(l1; l2)) ++ Seq(old(l2.val)) might not hold. (0286.vpr@58.1)); List([assert.failed:assertion.false] Assert might fail. Assertion lsegelems(l1; old(l2.next)) == old(lsegelems(l1; l2)) ++ Seq(old(l2.val)) might not hold. (0286.vpr@58.1)); List([assert.failed:assertion.false] Assert might fail. Assertion lsegelems(l1; old(l2.next)) == old(lsegelems(l1; l2)) ++ Seq(old(l2.val)) might not hold. (0286.vpr@58.1)))
../../src/test/resources/frontend-generated/all/issues/silicon/0287.vpr,0,1479,13,0,1469,1472,1498,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0288.vpr,0,1615,102,6,1473,1663,1711,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0290.vpr,2,1805,74,4,1728,1781,1906,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0290.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0290.vpr@53.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0290.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0290.vpr@53.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0290.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0290.vpr@53.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0290.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0290.vpr@53.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0290.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0290.vpr@53.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0291.vpr,3,2,0,0,2,2,2,Vector(List(Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@9.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@9.25); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@11.11)); List(Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@9.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@9.25); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@11.11)); List(Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@9.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@9.25); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@11.11)); List(Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@9.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@9.25); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@11.11)); List(Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@9.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@9.25); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@11.11)))
../../src/test/resources/frontend-generated/all/issues/silicon/0292.vpr,0,1860,75,4,1768,1860,1954,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0293.vpr,0,1501,78,5,1411,1491,1602,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0294.vpr,0,1556,80,5,1456,1560,1652,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0297.vpr,0,1464,49,3,1421,1437,1534,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0299.vpr,1,1972,24,1,1947,1964,2006,Vector(List([postcondition.violated:assertion.false] Postcondition of quicksort_rec might not hold. Assertion (forall i: Int; j: Int :: { loc(a; i).val;loc(a; j).val } lo <= i && (i <= j && j <= hi) ==> loc(a; i).val <= loc(a; j).val) might not hold. (0299.vpr@34.11)); List([postcondition.violated:assertion.false] Postcondition of quicksort_rec might not hold. Assertion (forall i: Int; j: Int :: { loc(a; i).val;loc(a; j).val } lo <= i && (i <= j && j <= hi) ==> loc(a; i).val <= loc(a; j).val) might not hold. (0299.vpr@34.11)); List([postcondition.violated:assertion.false] Postcondition of quicksort_rec might not hold. Assertion (forall i: Int; j: Int :: { loc(a; i).val;loc(a; j).val } lo <= i && (i <= j && j <= hi) ==> loc(a; i).val <= loc(a; j).val) might not hold. (0299.vpr@34.11)); List([postcondition.violated:assertion.false] Postcondition of quicksort_rec might not hold. Assertion (forall i: Int; j: Int :: { loc(a; i).val;loc(a; j).val } lo <= i && (i <= j && j <= hi) ==> loc(a; i).val <= loc(a; j).val) might not hold. (0299.vpr@34.11)); List([postcondition.violated:assertion.false] Postcondition of quicksort_rec might not hold. Assertion (forall i: Int; j: Int :: { loc(a; i).val;loc(a; j).val } lo <= i && (i <= j && j <= hi) ==> loc(a; i).val <= loc(a; j).val) might not hold. (0299.vpr@34.11)))
../../src/test/resources/frontend-generated/all/issues/silicon/0302.vpr,2,2841,90,3,2729,2843,2951,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access loc(arr; j).val. (0302.vpr@33.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access loc(arr; j).val. (0302.vpr@49.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access loc(arr; j).val. (0302.vpr@33.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access loc(arr; j).val. (0302.vpr@49.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access loc(arr; j).val. (0302.vpr@33.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access loc(arr; j).val. (0302.vpr@49.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access loc(arr; j).val. (0302.vpr@33.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access loc(arr; j).val. (0302.vpr@49.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access loc(arr; j).val. (0302.vpr@33.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access loc(arr; j).val. (0302.vpr@49.5)))
../../src/test/resources/frontend-generated/all/issues/silicon/0307.vpr,2,1672,122,7,1542,1639,1837,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0307.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0307.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0307.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0307.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0307.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0307.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0307.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0307.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0307.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0307.vpr@37.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0310a.vpr,2,1937,47,2,1871,1960,1980,Vector(List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310a.vpr@20.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310a.vpr@49.3)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310a.vpr@20.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310a.vpr@49.3)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310a.vpr@20.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310a.vpr@49.3)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310a.vpr@20.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310a.vpr@49.3)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310a.vpr@20.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310a.vpr@49.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0310b.vpr,1,1964,16,0,1941,1973,1978,Vector(List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310b.vpr@52.5)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310b.vpr@52.5)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310b.vpr@52.5)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310b.vpr@52.5)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310b.vpr@52.5)))
../../src/test/resources/frontend-generated/all/issues/silicon/0312.vpr,0,1611,57,3,1560,1583,1692,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0313a.vpr,0,1546,18,1,1521,1551,1566,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0313b.vpr,0,1879,21,1,1848,1894,1895,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0314.vpr,0,1688,73,4,1612,1664,1788,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0314a.vpr,1,1623,66,4,1538,1632,1700,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion bar(num(z2)) might not hold. (0314a.vpr@51.3)); List([assert.failed:assertion.false] Assert might fail. Assertion bar(num(z2)) might not hold. (0314a.vpr@51.3)); List([assert.failed:assertion.false] Assert might fail. Assertion bar(num(z2)) might not hold. (0314a.vpr@51.3)); List([assert.failed:assertion.false] Assert might fail. Assertion bar(num(z2)) might not hold. (0314a.vpr@51.3)); List([assert.failed:assertion.false] Assert might fail. Assertion bar(num(z2)) might not hold. (0314a.vpr@51.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0314b.vpr,0,1664,94,5,1532,1712,1748,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0314d.vpr,0,1884,5,0,1877,1887,1890,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0324.vpr,1,1525,67,4,1432,1553,1590,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion x.val == 4 might not hold. (0324.vpr@11.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.val == 4 might not hold. (0324.vpr@11.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.val == 4 might not hold. (0324.vpr@11.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.val == 4 might not hold. (0324.vpr@11.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.val == 4 might not hold. (0324.vpr@11.5)))
../../src/test/resources/frontend-generated/all/issues/silicon/0326.vpr,1,1437,1,0,1436,1437,1439,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0326.vpr@11.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0326.vpr@11.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0326.vpr@11.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0326.vpr@11.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0326.vpr@11.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0328a.vpr,0,1538,67,4,1443,1584,1589,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0328b.vpr,0,1613,98,6,1478,1652,1710,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0331.vpr,0,1500,54,3,1427,1516,1559,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0333.vpr,1,1628,139,8,1431,1722,1731,Vector(List([postcondition.violated:assertion.false] Postcondition of fail might not hold. Assertion false might not hold. (0333.vpr@25.11)); List([postcondition.violated:assertion.false] Postcondition of fail might not hold. Assertion false might not hold. (0333.vpr@25.11)); List([postcondition.violated:assertion.false] Postcondition of fail might not hold. Assertion false might not hold. (0333.vpr@25.11)); List([postcondition.violated:assertion.false] Postcondition of fail might not hold. Assertion false might not hold. (0333.vpr@25.11)); List([postcondition.violated:assertion.false] Postcondition of fail might not hold. Assertion false might not hold. (0333.vpr@25.11)))
../../src/test/resources/frontend-generated/all/issues/silicon/0334.vpr,0,1971,26,1,1934,1989,1992,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0335.vpr,0,4036,50,1,3967,4057,4085,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0336a.vpr,1,1612,74,4,1530,1598,1710,Vector(List([postcondition.violated:assertion.false] Postcondition of bad might not hold. Assertion false might not hold. (0336a.vpr@17.11)); List([postcondition.violated:assertion.false] Postcondition of bad might not hold. Assertion false might not hold. (0336a.vpr@17.11)); List([postcondition.violated:assertion.false] Postcondition of bad might not hold. Assertion false might not hold. (0336a.vpr@17.11)); List([postcondition.violated:assertion.false] Postcondition of bad might not hold. Assertion false might not hold. (0336a.vpr@17.11)); List([postcondition.violated:assertion.false] Postcondition of bad might not hold. Assertion false might not hold. (0336a.vpr@17.11)))
../../src/test/resources/frontend-generated/all/issues/silicon/0336b.vpr,1,2078,60,2,2023,2049,2163,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (let n == ((unfolding acc(uf_bank(b); write) in l.rank)) in n > n) might not hold. (0336b.vpr@23.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (let n == ((unfolding acc(uf_bank(b); write) in l.rank)) in n > n) might not hold. (0336b.vpr@23.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (let n == ((unfolding acc(uf_bank(b); write) in l.rank)) in n > n) might not hold. (0336b.vpr@23.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (let n == ((unfolding acc(uf_bank(b); write) in l.rank)) in n > n) might not hold. (0336b.vpr@23.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (let n == ((unfolding acc(uf_bank(b); write) in l.rank)) in n > n) might not hold. (0336b.vpr@23.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0340.vpr,0,1559,50,3,1489,1587,1602,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0345.vpr,2,1494,41,2,1447,1489,1548,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (0345.vpr@13.5); [assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (0345.vpr@23.5)); List([assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (0345.vpr@13.5); [assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (0345.vpr@23.5)); List([assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (0345.vpr@13.5); [assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (0345.vpr@23.5)); List([assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (0345.vpr@13.5); [assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (0345.vpr@23.5)); List([assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (0345.vpr@13.5); [assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (0345.vpr@23.5)))
../../src/test/resources/frontend-generated/all/issues/silicon/0346.vpr,0,1425,9,0,1412,1428,1436,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0348.vpr,4,1652,92,5,1532,1667,1757,Vector(List([application.precondition:assertion.false] Precondition of function bar might not hold. Assertion 0 < foo(x) might not hold. (0348.vpr@11.10); [application.precondition:assertion.false] Precondition of function outer might not hold. Assertion (unfolding acc(P(x); write) in inner(x) == 0) might not hold. (0348.vpr@28.12); [application.precondition:assertion.false] Precondition of function outer might not hold. Assertion (unfolding acc(P(x); write) in inner(x) == 0) might not hold. (0348.vpr@33.10); [call.precondition:assertion.false] The precondition of method callee might not hold. Assertion 0 < inner(x) might not hold. (0348.vpr@61.3)); List([application.precondition:assertion.false] Precondition of function bar might not hold. Assertion 0 < foo(x) might not hold. (0348.vpr@11.10); [application.precondition:assertion.false] Precondition of function outer might not hold. Assertion (unfolding acc(P(x); write) in inner(x) == 0) might not hold. (0348.vpr@28.12); [application.precondition:assertion.false] Precondition of function outer might not hold. Assertion (unfolding acc(P(x); write) in inner(x) == 0) might not hold. (0348.vpr@33.10); [call.precondition:assertion.false] The precondition of method callee might not hold. Assertion 0 < inner(x) might not hold. (0348.vpr@61.3)); List([application.precondition:assertion.false] Precondition of function bar might not hold. Assertion 0 < foo(x) might not hold. (0348.vpr@11.10); [application.precondition:assertion.false] Precondition of function outer might not hold. Assertion (unfolding acc(P(x); write) in inner(x) == 0) might not hold. (0348.vpr@28.12); [application.precondition:assertion.false] Precondition of function outer might not hold. Assertion (unfolding acc(P(x); write) in inner(x) == 0) might not hold. (0348.vpr@33.10); [call.precondition:assertion.false] The precondition of method callee might not hold. Assertion 0 < inner(x) might not hold. (0348.vpr@61.3)); List([application.precondition:assertion.false] Precondition of function bar might not hold. Assertion 0 < foo(x) might not hold. (0348.vpr@11.10); [application.precondition:assertion.false] Precondition of function outer might not hold. Assertion (unfolding acc(P(x); write) in inner(x) == 0) might not hold. (0348.vpr@28.12); [application.precondition:assertion.false] Precondition of function outer might not hold. Assertion (unfolding acc(P(x); write) in inner(x) == 0) might not hold. (0348.vpr@33.10); [call.precondition:assertion.false] The precondition of method callee might not hold. Assertion 0 < inner(x) might not hold. (0348.vpr@61.3)); List([application.precondition:assertion.false] Precondition of function bar might not hold. Assertion 0 < foo(x) might not hold. (0348.vpr@11.10); [application.precondition:assertion.false] Precondition of function outer might not hold. Assertion (unfolding acc(P(x); write) in inner(x) == 0) might not hold. (0348.vpr@28.12); [application.precondition:assertion.false] Precondition of function outer might not hold. Assertion (unfolding acc(P(x); write) in inner(x) == 0) might not hold. (0348.vpr@33.10); [call.precondition:assertion.false] The precondition of method callee might not hold. Assertion 0 < inner(x) might not hold. (0348.vpr@61.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0351.vpr,0,1539,80,5,1439,1544,1635,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0352.vpr,0,1424,45,3,1360,1451,1462,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0362.vpr,0,2051,23,1,2021,2054,2078,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0365.vpr,0,1907,55,2,1831,1928,1963,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0368.vpr,1,1502,64,4,1411,1543,1553,Vector(List([inhale.failed:division.by.zero] Inhale might fail. Divisor 0 might be zero. (0368.vpr@6.10)); List([inhale.failed:division.by.zero] Inhale might fail. Divisor 0 might be zero. (0368.vpr@6.10)); List([inhale.failed:division.by.zero] Inhale might fail. Divisor 0 might be zero. (0368.vpr@6.10)); List([inhale.failed:division.by.zero] Inhale might fail. Divisor 0 might be zero. (0368.vpr@6.10)); List([inhale.failed:division.by.zero] Inhale might fail. Divisor 0 might be zero. (0368.vpr@6.10)))
../../src/test/resources/frontend-generated/all/issues/silicon/0370.vpr,1,1868,5,0,1863,1865,1876,Vector(List([exhale.failed:assertion.false] Exhale might fail. Assertion (forall tid: Int; j: Int :: 0 <= tid && (tid < |getVCTOption1(output)| && (0 <= j && j < |getVCTOption1(output)|)) ==> getVCTOption1(output)[j].Integer__item == tid) might not hold. (0370.vpr@36.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forall tid: Int; j: Int :: 0 <= tid && (tid < |getVCTOption1(output)| && (0 <= j && j < |getVCTOption1(output)|)) ==> getVCTOption1(output)[j].Integer__item == tid) might not hold. (0370.vpr@36.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forall tid: Int; j: Int :: 0 <= tid && (tid < |getVCTOption1(output)| && (0 <= j && j < |getVCTOption1(output)|)) ==> getVCTOption1(output)[j].Integer__item == tid) might not hold. (0370.vpr@36.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forall tid: Int; j: Int :: 0 <= tid && (tid < |getVCTOption1(output)| && (0 <= j && j < |getVCTOption1(output)|)) ==> getVCTOption1(output)[j].Integer__item == tid) might not hold. (0370.vpr@36.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forall tid: Int; j: Int :: 0 <= tid && (tid < |getVCTOption1(output)| && (0 <= j && j < |getVCTOption1(output)|)) ==> getVCTOption1(output)[j].Integer__item == tid) might not hold. (0370.vpr@36.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0378a.vpr,0,1683,35,2,1634,1700,1717,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0378b.vpr,0,1631,21,1,1604,1634,1657,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0379a.vpr,0,1613,137,8,1509,1523,1808,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0379b.vpr,0,1590,80,5,1497,1580,1694,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0381.vpr,0,1503,33,2,1456,1527,1528,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0383a.vpr,1,1749,51,2,1681,1764,1804,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forall nn: Ref :: { (nn in all_nodes) } (nn in all_nodes) ==> (unfolding acc(Node(nn); write) in nn.visited)) might not hold. (0383a.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall nn: Ref :: { (nn in all_nodes) } (nn in all_nodes) ==> (unfolding acc(Node(nn); write) in nn.visited)) might not hold. (0383a.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall nn: Ref :: { (nn in all_nodes) } (nn in all_nodes) ==> (unfolding acc(Node(nn); write) in nn.visited)) might not hold. (0383a.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall nn: Ref :: { (nn in all_nodes) } (nn in all_nodes) ==> (unfolding acc(Node(nn); write) in nn.visited)) might not hold. (0383a.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall nn: Ref :: { (nn in all_nodes) } (nn in all_nodes) ==> (unfolding acc(Node(nn); write) in nn.visited)) might not hold. (0383a.vpr@21.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0383b.vpr,1,1552,27,1,1522,1547,1589,Vector(List([postcondition.violated:assertion.false] Postcondition of test might not hold. Assertion false might not hold. (0383b.vpr@19.11)); List([postcondition.violated:assertion.false] Postcondition of test might not hold. Assertion false might not hold. (0383b.vpr@19.11)); List([postcondition.violated:assertion.false] Postcondition of test might not hold. Assertion false might not hold. (0383b.vpr@19.11)); List([postcondition.violated:assertion.false] Postcondition of test might not hold. Assertion false might not hold. (0383b.vpr@19.11)); List([postcondition.violated:assertion.false] Postcondition of test might not hold. Assertion false might not hold. (0383b.vpr@19.11)))
../../src/test/resources/frontend-generated/all/issues/silicon/0383c.vpr,6,2051,91,4,1970,2004,2179,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@18.2); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(P(xs[1]); write) in xs[1].f == 0) might not hold. (0383c.vpr@30.2); [assert.failed:assertion.false] Assert might fail. Assertion xs[1].f == 0 might not hold. (0383c.vpr@49.2); [assert.failed:assertion.false] Assert might fail. Assertion xs[i].f == 0 might not hold. (0383c.vpr@63.2); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@74.2); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@83.2)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@18.2); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(P(xs[1]); write) in xs[1].f == 0) might not hold. (0383c.vpr@30.2); [assert.failed:assertion.false] Assert might fail. Assertion xs[1].f == 0 might not hold. (0383c.vpr@49.2); [assert.failed:assertion.false] Assert might fail. Assertion xs[i].f == 0 might not hold. (0383c.vpr@63.2); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@74.2); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@83.2)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@18.2); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(P(xs[1]); write) in xs[1].f == 0) might not hold. (0383c.vpr@30.2); [assert.failed:assertion.false] Assert might fail. Assertion xs[1].f == 0 might not hold. (0383c.vpr@49.2); [assert.failed:assertion.false] Assert might fail. Assertion xs[i].f == 0 might not hold. (0383c.vpr@63.2); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@74.2); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@83.2)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@18.2); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(P(xs[1]); write) in xs[1].f == 0) might not hold. (0383c.vpr@30.2); [assert.failed:assertion.false] Assert might fail. Assertion xs[1].f == 0 might not hold. (0383c.vpr@49.2); [assert.failed:assertion.false] Assert might fail. Assertion xs[i].f == 0 might not hold. (0383c.vpr@63.2); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@74.2); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@83.2)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@18.2); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(P(xs[1]); write) in xs[1].f == 0) might not hold. (0383c.vpr@30.2); [assert.failed:assertion.false] Assert might fail. Assertion xs[1].f == 0 might not hold. (0383c.vpr@49.2); [assert.failed:assertion.false] Assert might fail. Assertion xs[i].f == 0 might not hold. (0383c.vpr@63.2); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@74.2); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@83.2)))
../../src/test/resources/frontend-generated/all/issues/silicon/0384.sil,1,1528,75,4,1438,1523,1623,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion x.f == 1 might not hold. (0384.sil@12.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == 1 might not hold. (0384.sil@12.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == 1 might not hold. (0384.sil@12.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == 1 might not hold. (0384.sil@12.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == 1 might not hold. (0384.sil@12.5)))
../../src/test/resources/frontend-generated/all/issues/silicon/0384.vpr,1,1473,72,4,1419,1424,1576,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion x.f == 1 might not hold. (0384.vpr@13.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == 1 might not hold. (0384.vpr@13.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == 1 might not hold. (0384.vpr@13.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == 1 might not hold. (0384.vpr@13.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == 1 might not hold. (0384.vpr@13.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0385.vpr,1,1781,110,6,1626,1858,1861,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion foo_1_1(s; r) || (foo_1_2(s; r) || (foo_2_1(s; r) || foo_2_2(s; r))) might not hold. (0385.vpr@56.3)); List([assert.failed:assertion.false] Assert might fail. Assertion foo_1_1(s; r) || (foo_1_2(s; r) || (foo_2_1(s; r) || foo_2_2(s; r))) might not hold. (0385.vpr@56.3)); List([assert.failed:assertion.false] Assert might fail. Assertion foo_1_1(s; r) || (foo_1_2(s; r) || (foo_2_1(s; r) || foo_2_2(s; r))) might not hold. (0385.vpr@56.3)); List([assert.failed:assertion.false] Assert might fail. Assertion foo_1_1(s; r) || (foo_1_2(s; r) || (foo_2_1(s; r) || foo_2_2(s; r))) might not hold. (0385.vpr@56.3)); List([assert.failed:assertion.false] Assert might fail. Assertion foo_1_1(s; r) || (foo_1_2(s; r) || (foo_2_1(s; r) || foo_2_2(s; r))) might not hold. (0385.vpr@56.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0388.vpr,0,1508,79,5,1431,1477,1617,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0393a.vpr,0,2043,53,2,1978,2042,2110,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0393b.vpr,0,1549,24,1,1519,1550,1579,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0394.vpr,1,1567,81,5,1499,1521,1681,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion bar(a; b) might not hold. (0394.vpr@16.3)); List([assert.failed:assertion.false] Assert might fail. Assertion bar(a; b) might not hold. (0394.vpr@16.3)); List([assert.failed:assertion.false] Assert might fail. Assertion bar(a; b) might not hold. (0394.vpr@16.3)); List([assert.failed:assertion.false] Assert might fail. Assertion bar(a; b) might not hold. (0394.vpr@16.3)); List([assert.failed:assertion.false] Assert might fail. Assertion bar(a; b) might not hold. (0394.vpr@16.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0395a.vpr,0,1494,65,4,1439,1457,1586,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0395b.vpr,0,1433,119,8,1338,1360,1601,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0400.vpr,2,1867,34,1,1822,1874,1906,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0400.vpr@83.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0400.vpr@142.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0400.vpr@83.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0400.vpr@142.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0400.vpr@83.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0400.vpr@142.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0400.vpr@83.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0400.vpr@142.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0400.vpr@83.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0400.vpr@142.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0409.vpr,0,1458,21,1,1441,1446,1488,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0483a.vpr,0,3359,91,2,3287,3304,3488,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0483b.vpr,0,1706,62,3,1628,1711,1781,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0484.vpr,0,1579,87,5,1478,1569,1692,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0491.vpr,1,1707,61,3,1621,1745,1757,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion foo(l2; k) might not hold. (0491.vpr@39.3)); List([assert.failed:assertion.false] Assert might fail. Assertion foo(l2; k) might not hold. (0491.vpr@39.3)); List([assert.failed:assertion.false] Assert might fail. Assertion foo(l2; k) might not hold. (0491.vpr@39.3)); List([assert.failed:assertion.false] Assert might fail. Assertion foo(l2; k) might not hold. (0491.vpr@39.3)); List([assert.failed:assertion.false] Assert might fail. Assertion foo(l2; k) might not hold. (0491.vpr@39.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0493a.vpr,0,1596,33,2,1566,1580,1643,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0493b.vpr,0,2048,40,1,1992,2076,2078,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0493c.vpr,5,3500,89,2,3373,3557,3570,Vector(List([exhale.failed:assertion.false] Exhale might fail. Assertion foo_wand_vals(as) == 0 might not hold. (0493c.vpr@50.5); [exhale.failed:assertion.false] Exhale might fail. Assertion foo_wand_vals(as) == 0 might not hold. (0493c.vpr@69.3); [exhale.failed:assertion.false] Exhale might fail. Assertion foo_wand_twos(as; is) == 0 might not hold. (0493c.vpr@75.3); [exhale.failed:assertion.false] Exhale might fail. Assertion foo_wand_twos(as; is) == 0 might not hold. (0493c.vpr@89.3); [exhale.failed:assertion.false] Exhale might fail. Assertion foo_wand_twos(as; is) == 0 might not hold. (0493c.vpr@113.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion foo_wand_vals(as) == 0 might not hold. (0493c.vpr@50.5); [exhale.failed:assertion.false] Exhale might fail. Assertion foo_wand_vals(as) == 0 might not hold. (0493c.vpr@69.3); [exhale.failed:assertion.false] Exhale might fail. Assertion foo_wand_twos(as; is) == 0 might not hold. (0493c.vpr@75.3); [exhale.failed:assertion.false] Exhale might fail. Assertion foo_wand_twos(as; is) == 0 might not hold. (0493c.vpr@89.3); [exhale.failed:assertion.false] Exhale might fail. Assertion foo_wand_twos(as; is) == 0 might not hold. (0493c.vpr@113.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion foo_wand_vals(as) == 0 might not hold. (0493c.vpr@50.5); [exhale.failed:assertion.false] Exhale might fail. Assertion foo_wand_vals(as) == 0 might not hold. (0493c.vpr@69.3); [exhale.failed:assertion.false] Exhale might fail. Assertion foo_wand_twos(as; is) == 0 might not hold. (0493c.vpr@75.3); [exhale.failed:assertion.false] Exhale might fail. Assertion foo_wand_twos(as; is) == 0 might not hold. (0493c.vpr@89.3); [exhale.failed:assertion.false] Exhale might fail. Assertion foo_wand_twos(as; is) == 0 might not hold. (0493c.vpr@113.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion foo_wand_vals(as) == 0 might not hold. (0493c.vpr@50.5); [exhale.failed:assertion.false] Exhale might fail. Assertion foo_wand_vals(as) == 0 might not hold. (0493c.vpr@69.3); [exhale.failed:assertion.false] Exhale might fail. Assertion foo_wand_twos(as; is) == 0 might not hold. (0493c.vpr@75.3); [exhale.failed:assertion.false] Exhale might fail. Assertion foo_wand_twos(as; is) == 0 might not hold. (0493c.vpr@89.3); [exhale.failed:assertion.false] Exhale might fail. Assertion foo_wand_twos(as; is) == 0 might not hold. (0493c.vpr@113.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion foo_wand_vals(as) == 0 might not hold. (0493c.vpr@50.5); [exhale.failed:assertion.false] Exhale might fail. Assertion foo_wand_vals(as) == 0 might not hold. (0493c.vpr@69.3); [exhale.failed:assertion.false] Exhale might fail. Assertion foo_wand_twos(as; is) == 0 might not hold. (0493c.vpr@75.3); [exhale.failed:assertion.false] Exhale might fail. Assertion foo_wand_twos(as; is) == 0 might not hold. (0493c.vpr@89.3); [exhale.failed:assertion.false] Exhale might fail. Assertion foo_wand_twos(as; is) == 0 might not hold. (0493c.vpr@113.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0496.vpr,2,1683,90,5,1558,1726,1767,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion reqA(a) == 0 might not hold. (0496.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion reqB(a) == 0 might not hold. (0496.vpr@52.3)); List([assert.failed:assertion.false] Assert might fail. Assertion reqA(a) == 0 might not hold. (0496.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion reqB(a) == 0 might not hold. (0496.vpr@52.3)); List([assert.failed:assertion.false] Assert might fail. Assertion reqA(a) == 0 might not hold. (0496.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion reqB(a) == 0 might not hold. (0496.vpr@52.3)); List([assert.failed:assertion.false] Assert might fail. Assertion reqA(a) == 0 might not hold. (0496.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion reqB(a) == 0 might not hold. (0496.vpr@52.3)); List([assert.failed:assertion.false] Assert might fail. Assertion reqA(a) == 0 might not hold. (0496.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion reqB(a) == 0 might not hold. (0496.vpr@52.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0502.vpr,0,1622,64,3,1544,1620,1702,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0505.vpr,0,1541,94,6,1460,1489,1674,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0508a.vpr,1,1924,65,3,1836,1947,1991,Vector(List([assert.failed:receiver.not.injective] Assert might fail. Receiver of (id(s): Ref).item.bool_prop [0508a.vpr@29.54]  might not be injective. (0508a.vpr@29.3)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of (id(s): Ref).item.bool_prop [0508a.vpr@29.54]  might not be injective. (0508a.vpr@29.3)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of (id(s): Ref).item.bool_prop [0508a.vpr@29.54]  might not be injective. (0508a.vpr@29.3)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of (id(s): Ref).item.bool_prop [0508a.vpr@29.54]  might not be injective. (0508a.vpr@29.3)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of (id(s): Ref).item.bool_prop [0508a.vpr@29.54]  might not be injective. (0508a.vpr@29.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0508b.vpr,0,1618,108,6,1467,1671,1718,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0509.vpr,1,1751,67,3,1693,1716,1846,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int; j: Int :: { lookup(arr; i);lookup(arr; j) } right_index <= i && (i < j && j < until) ==> lookup(arr; i) <= lookup(arr; j)) might not hold. (0509.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int; j: Int :: { lookup(arr; i);lookup(arr; j) } right_index <= i && (i < j && j < until) ==> lookup(arr; i) <= lookup(arr; j)) might not hold. (0509.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int; j: Int :: { lookup(arr; i);lookup(arr; j) } right_index <= i && (i < j && j < until) ==> lookup(arr; i) <= lookup(arr; j)) might not hold. (0509.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int; j: Int :: { lookup(arr; i);lookup(arr; j) } right_index <= i && (i < j && j < until) ==> lookup(arr; i) <= lookup(arr; j)) might not hold. (0509.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int; j: Int :: { lookup(arr; i);lookup(arr; j) } right_index <= i && (i < j && j < until) ==> lookup(arr; i) <= lookup(arr; j)) might not hold. (0509.vpr@44.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0512.vpr,0,2249,63,2,2168,2257,2322,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/unofficial001.vpr,0,1498,70,4,1444,1453,1597,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/unofficial002.vpr,0,1922,13,0,1908,1919,1940,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/unofficial003.vpr,3,1985,13,0,1971,1980,2004,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unofficial003.vpr@27.3); [assert.failed:assertion.false] Assert might fail. Assertion !fun02(x; b) might not hold. (unofficial003.vpr@51.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(x; b) might not hold. (unofficial003.vpr@61.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unofficial003.vpr@27.3); [assert.failed:assertion.false] Assert might fail. Assertion !fun02(x; b) might not hold. (unofficial003.vpr@51.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(x; b) might not hold. (unofficial003.vpr@61.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unofficial003.vpr@27.3); [assert.failed:assertion.false] Assert might fail. Assertion !fun02(x; b) might not hold. (unofficial003.vpr@51.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(x; b) might not hold. (unofficial003.vpr@61.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unofficial003.vpr@27.3); [assert.failed:assertion.false] Assert might fail. Assertion !fun02(x; b) might not hold. (unofficial003.vpr@51.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(x; b) might not hold. (unofficial003.vpr@61.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unofficial003.vpr@27.3); [assert.failed:assertion.false] Assert might fail. Assertion !fun02(x; b) might not hold. (unofficial003.vpr@51.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(x; b) might not hold. (unofficial003.vpr@61.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/unofficial004.vpr,0,1708,108,6,1622,1642,1862,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/unofficial005.vpr,0,1665,57,3,1586,1686,1723,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/unofficial006.vpr,0,1428,12,0,1410,1437,1438,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/unofficial007.vpr,0,1836,46,2,1791,1817,1900,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/unofficial008.vpr,0,1717,26,1,1693,1706,1754,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0003.vpr,3,1453,48,3,1385,1481,1493,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (0003.vpr@15.19); [invariant.not.preserved:insufficient.permission] Loop invariant acc(r.f; write) might not be preserved. There might be insufficient permission to access r.f. (0003.vpr@27.15); [invariant.not.established:insufficient.permission] Loop invariant acc(r.f; write) might not hold on entry. There might be insufficient permission to access r.f. (0003.vpr@39.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (0003.vpr@15.19); [invariant.not.preserved:insufficient.permission] Loop invariant acc(r.f; write) might not be preserved. There might be insufficient permission to access r.f. (0003.vpr@27.15); [invariant.not.established:insufficient.permission] Loop invariant acc(r.f; write) might not hold on entry. There might be insufficient permission to access r.f. (0003.vpr@39.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (0003.vpr@15.19); [invariant.not.preserved:insufficient.permission] Loop invariant acc(r.f; write) might not be preserved. There might be insufficient permission to access r.f. (0003.vpr@27.15); [invariant.not.established:insufficient.permission] Loop invariant acc(r.f; write) might not hold on entry. There might be insufficient permission to access r.f. (0003.vpr@39.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (0003.vpr@15.19); [invariant.not.preserved:insufficient.permission] Loop invariant acc(r.f; write) might not be preserved. There might be insufficient permission to access r.f. (0003.vpr@27.15); [invariant.not.established:insufficient.permission] Loop invariant acc(r.f; write) might not hold on entry. There might be insufficient permission to access r.f. (0003.vpr@39.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (0003.vpr@15.19); [invariant.not.preserved:insufficient.permission] Loop invariant acc(r.f; write) might not be preserved. There might be insufficient permission to access r.f. (0003.vpr@27.15); [invariant.not.established:insufficient.permission] Loop invariant acc(r.f; write) might not hold on entry. There might be insufficient permission to access r.f. (0003.vpr@39.15)))
../../src/test/resources/frontend-generated/all/issues/silver/0004.vpr,1,1488,84,5,1401,1462,1603,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (0004.vpr@10.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (0004.vpr@10.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (0004.vpr@10.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (0004.vpr@10.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (0004.vpr@10.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0007.vpr,5,2,0,0,2,3,3,Vector(List(expected local variable (0007.vpr@11.33); expected field (0007.vpr@11.38); expected local variable (0007.vpr@16.16); Type error in the expression at 0007.vpr@[16.16-16.26] (0007.vpr@16.16); expected identifier; but got PFunction(PIdnDef(fun);ArrayBuffer();Int;ArrayBuffer();ArrayBuffer();Some(PIntLit(0))) (0007.vpr@23.16)); List(expected local variable (0007.vpr@11.33); expected field (0007.vpr@11.38); expected local variable (0007.vpr@16.16); Type error in the expression at 0007.vpr@[16.16-16.26] (0007.vpr@16.16); expected identifier; but got PFunction(PIdnDef(fun);ArrayBuffer();Int;ArrayBuffer();ArrayBuffer();Some(PIntLit(0))) (0007.vpr@23.16)); List(expected local variable (0007.vpr@11.33); expected field (0007.vpr@11.38); expected local variable (0007.vpr@16.16); Type error in the expression at 0007.vpr@[16.16-16.26] (0007.vpr@16.16); expected identifier; but got PFunction(PIdnDef(fun);ArrayBuffer();Int;ArrayBuffer();ArrayBuffer();Some(PIntLit(0))) (0007.vpr@23.16)); List(expected local variable (0007.vpr@11.33); expected field (0007.vpr@11.38); expected local variable (0007.vpr@16.16); Type error in the expression at 0007.vpr@[16.16-16.26] (0007.vpr@16.16); expected identifier; but got PFunction(PIdnDef(fun);ArrayBuffer();Int;ArrayBuffer();ArrayBuffer();Some(PIntLit(0))) (0007.vpr@23.16)); List(expected local variable (0007.vpr@11.33); expected field (0007.vpr@11.38); expected local variable (0007.vpr@16.16); Type error in the expression at 0007.vpr@[16.16-16.26] (0007.vpr@16.16); expected identifier; but got PFunction(PIdnDef(fun);ArrayBuffer();Int;ArrayBuffer();ArrayBuffer();Some(PIntLit(0))) (0007.vpr@23.16)))
../../src/test/resources/frontend-generated/all/issues/silver/0008.vpr,0,1889,61,3,1829,1866,1973,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0009.vpr,0,1490,31,2,1465,1471,1534,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0010.vpr,0,1597,80,5,1501,1592,1698,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0011.vpr,3,5,0,0,5,6,6,Vector(List(found undeclared type X (0011.vpr@6.25); Type error in the expression at 0011.vpr@[43.26-43.37] (0011.vpr@43.26); Type error in the expression at 0011.vpr@[43.42-43.62] (0011.vpr@43.42)); List(found undeclared type X (0011.vpr@6.25); Type error in the expression at 0011.vpr@[43.26-43.37] (0011.vpr@43.26); Type error in the expression at 0011.vpr@[43.42-43.62] (0011.vpr@43.42)); List(found undeclared type X (0011.vpr@6.25); Type error in the expression at 0011.vpr@[43.26-43.37] (0011.vpr@43.26); Type error in the expression at 0011.vpr@[43.42-43.62] (0011.vpr@43.42)); List(found undeclared type X (0011.vpr@6.25); Type error in the expression at 0011.vpr@[43.26-43.37] (0011.vpr@43.26); Type error in the expression at 0011.vpr@[43.42-43.62] (0011.vpr@43.42)); List(found undeclared type X (0011.vpr@6.25); Type error in the expression at 0011.vpr@[43.26-43.37] (0011.vpr@43.26); Type error in the expression at 0011.vpr@[43.42-43.62] (0011.vpr@43.42)))
../../src/test/resources/frontend-generated/all/issues/silver/0012.vpr,0,1430,17,1,1410,1429,1452,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0013.vpr,0,1471,71,4,1414,1428,1572,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0014.vpr,0,1412,60,4,1348,1395,1494,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0015.vpr,0,1556,82,5,1447,1575,1647,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0017.vpr,1,0,0,0,0,1,1,Vector(List(expected field (0017.vpr@6.12)); List(expected field (0017.vpr@6.12)); List(expected field (0017.vpr@6.12)); List(expected field (0017.vpr@6.12)); List(expected field (0017.vpr@6.12)))
../../src/test/resources/frontend-generated/all/issues/silver/0018.vpr,2,6,0,0,6,6,7,Vector(List(Expected type Seq[Int]; but found Seq[Ref] at the expression at 0018.vpr@[17.22-17.32] (0018.vpr@17.22); Expected type Multiset[Bool]; but found Set[Bool] at the expression at 0018.vpr@[20.28-20.39] (0018.vpr@20.28)); List(Expected type Seq[Int]; but found Seq[Ref] at the expression at 0018.vpr@[17.22-17.32] (0018.vpr@17.22); Expected type Multiset[Bool]; but found Set[Bool] at the expression at 0018.vpr@[20.28-20.39] (0018.vpr@20.28)); List(Expected type Seq[Int]; but found Seq[Ref] at the expression at 0018.vpr@[17.22-17.32] (0018.vpr@17.22); Expected type Multiset[Bool]; but found Set[Bool] at the expression at 0018.vpr@[20.28-20.39] (0018.vpr@20.28)); List(Expected type Seq[Int]; but found Seq[Ref] at the expression at 0018.vpr@[17.22-17.32] (0018.vpr@17.22); Expected type Multiset[Bool]; but found Set[Bool] at the expression at 0018.vpr@[20.28-20.39] (0018.vpr@20.28)); List(Expected type Seq[Int]; but found Seq[Ref] at the expression at 0018.vpr@[17.22-17.32] (0018.vpr@17.22); Expected type Multiset[Bool]; but found Set[Bool] at the expression at 0018.vpr@[20.28-20.39] (0018.vpr@20.28)))
../../src/test/resources/frontend-generated/all/issues/silver/0019.vpr,0,1414,32,2,1378,1408,1456,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0021.vpr,0,1588,105,6,1439,1661,1665,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0022.vpr,0,1767,26,1,1729,1784,1788,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0024.vpr,2,2,0,0,2,2,2,Vector(List(expected expression but found field f (0024.vpr@8.12); expected expression but found field f (0024.vpr@13.27)); List(expected expression but found field f (0024.vpr@8.12); expected expression but found field f (0024.vpr@13.27)); List(expected expression but found field f (0024.vpr@8.12); expected expression but found field f (0024.vpr@13.27)); List(expected expression but found field f (0024.vpr@8.12); expected expression but found field f (0024.vpr@13.27)); List(expected expression but found field f (0024.vpr@8.12); expected expression but found field f (0024.vpr@13.27)))
../../src/test/resources/frontend-generated/all/issues/silver/0025.vpr,0,1492,99,6,1352,1557,1569,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0026.vpr,0,1450,33,2,1408,1453,1489,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0027.vpr,1,1,0,0,1,2,2,Vector(List(Duplicate identifier `f' at 0027.vpr@5.7 and at 0027.vpr@7.10 (0027.vpr@5.7)); List(Duplicate identifier `f' at 0027.vpr@5.7 and at 0027.vpr@7.10 (0027.vpr@5.7)); List(Duplicate identifier `f' at 0027.vpr@5.7 and at 0027.vpr@7.10 (0027.vpr@5.7)); List(Duplicate identifier `f' at 0027.vpr@5.7 and at 0027.vpr@7.10 (0027.vpr@5.7)); List(Duplicate identifier `f' at 0027.vpr@5.7 and at 0027.vpr@7.10 (0027.vpr@5.7)))
../../src/test/resources/frontend-generated/all/issues/silver/0029.vpr,1,1,0,0,1,2,2,Vector(List(Type error in the expression at 0029.vpr@[7.8-7.14] (0029.vpr@7.8)); List(Type error in the expression at 0029.vpr@[7.8-7.14] (0029.vpr@7.8)); List(Type error in the expression at 0029.vpr@[7.8-7.14] (0029.vpr@7.8)); List(Type error in the expression at 0029.vpr@[7.8-7.14] (0029.vpr@7.8)); List(Type error in the expression at 0029.vpr@[7.8-7.14] (0029.vpr@7.8)))
../../src/test/resources/frontend-generated/all/issues/silver/0030.vpr,0,1582,26,1,1555,1573,1618,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0031.vpr,0,1396,23,1,1376,1383,1429,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0033.vpr,0,1434,31,2,1390,1449,1463,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0035.vpr,4,2,0,0,2,2,2,Vector(List(predicate arity doesn't match (0035.vpr@13.16); predicate arity doesn't match (0035.vpr@15.16); predicate arity doesn't match (0035.vpr@17.16); Type error in the expression at 0035.vpr@[19.16-19.23] (0035.vpr@19.16)); List(predicate arity doesn't match (0035.vpr@13.16); predicate arity doesn't match (0035.vpr@15.16); predicate arity doesn't match (0035.vpr@17.16); Type error in the expression at 0035.vpr@[19.16-19.23] (0035.vpr@19.16)); List(predicate arity doesn't match (0035.vpr@13.16); predicate arity doesn't match (0035.vpr@15.16); predicate arity doesn't match (0035.vpr@17.16); Type error in the expression at 0035.vpr@[19.16-19.23] (0035.vpr@19.16)); List(predicate arity doesn't match (0035.vpr@13.16); predicate arity doesn't match (0035.vpr@15.16); predicate arity doesn't match (0035.vpr@17.16); Type error in the expression at 0035.vpr@[19.16-19.23] (0035.vpr@19.16)); List(predicate arity doesn't match (0035.vpr@13.16); predicate arity doesn't match (0035.vpr@15.16); predicate arity doesn't match (0035.vpr@17.16); Type error in the expression at 0035.vpr@[19.16-19.23] (0035.vpr@19.16)))
../../src/test/resources/frontend-generated/all/issues/silver/0036.vpr,1,0,0,0,0,0,1,Vector(List(found undeclared type P (0036.vpr@7.16)); List(found undeclared type P (0036.vpr@7.16)); List(found undeclared type P (0036.vpr@7.16)); List(found undeclared type P (0036.vpr@7.16)); List(found undeclared type P (0036.vpr@7.16)))
../../src/test/resources/frontend-generated/all/issues/silver/0037.vpr,0,1511,60,3,1426,1546,1562,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0038-1.vpr,2,1,0,0,1,1,1,Vector(List(found undeclared type Edge (0038-1.vpr@5.15); Expected type Bool; but found Edge at the expression at 0038-1.vpr@[10.12-10.15] (0038-1.vpr@10.12)); List(found undeclared type Edge (0038-1.vpr@5.15); Expected type Bool; but found Edge at the expression at 0038-1.vpr@[10.12-10.15] (0038-1.vpr@10.12)); List(found undeclared type Edge (0038-1.vpr@5.15); Expected type Bool; but found Edge at the expression at 0038-1.vpr@[10.12-10.15] (0038-1.vpr@10.12)); List(found undeclared type Edge (0038-1.vpr@5.15); Expected type Bool; but found Edge at the expression at 0038-1.vpr@[10.12-10.15] (0038-1.vpr@10.12)); List(found undeclared type Edge (0038-1.vpr@5.15); Expected type Bool; but found Edge at the expression at 0038-1.vpr@[10.12-10.15] (0038-1.vpr@10.12)))
../../src/test/resources/frontend-generated/all/issues/silver/0038.vpr,12,4,0,0,4,4,5,Vector(List(found undeclared type bool (0038.vpr@5.10); found undeclared type Fool (0038.vpr@7.10); found undeclared type int (0038.vpr@9.10); found undeclared type int (0038.vpr@12.17); found undeclared type int (0038.vpr@16.10); found undeclared type bool (0038.vpr@19.10); Expected type bool; but found Bool at the expression at 0038.vpr@[19.18-19.22] (0038.vpr@19.18); found undeclared type error (0038.vpr@23.16); found undeclared type boo (0038.vpr@26.18); found undeclared type int (0038.vpr@29.18); Expected type int; but found Int at the expression at 0038.vpr@[29.24-29.25] (0038.vpr@29.24); found undeclared type B (0038.vpr@34.19)); List(found undeclared type bool (0038.vpr@5.10); found undeclared type Fool (0038.vpr@7.10); found undeclared type int (0038.vpr@9.10); found undeclared type int (0038.vpr@12.17); found undeclared type int (0038.vpr@16.10); found undeclared type bool (0038.vpr@19.10); Expected type bool; but found Bool at the expression at 0038.vpr@[19.18-19.22] (0038.vpr@19.18); found undeclared type error (0038.vpr@23.16); found undeclared type boo (0038.vpr@26.18); found undeclared type int (0038.vpr@29.18); Expected type int; but found Int at the expression at 0038.vpr@[29.24-29.25] (0038.vpr@29.24); found undeclared type B (0038.vpr@34.19)); List(found undeclared type bool (0038.vpr@5.10); found undeclared type Fool (0038.vpr@7.10); found undeclared type int (0038.vpr@9.10); found undeclared type int (0038.vpr@12.17); found undeclared type int (0038.vpr@16.10); found undeclared type bool (0038.vpr@19.10); Expected type bool; but found Bool at the expression at 0038.vpr@[19.18-19.22] (0038.vpr@19.18); found undeclared type error (0038.vpr@23.16); found undeclared type boo (0038.vpr@26.18); found undeclared type int (0038.vpr@29.18); Expected type int; but found Int at the expression at 0038.vpr@[29.24-29.25] (0038.vpr@29.24); found undeclared type B (0038.vpr@34.19)); List(found undeclared type bool (0038.vpr@5.10); found undeclared type Fool (0038.vpr@7.10); found undeclared type int (0038.vpr@9.10); found undeclared type int (0038.vpr@12.17); found undeclared type int (0038.vpr@16.10); found undeclared type bool (0038.vpr@19.10); Expected type bool; but found Bool at the expression at 0038.vpr@[19.18-19.22] (0038.vpr@19.18); found undeclared type error (0038.vpr@23.16); found undeclared type boo (0038.vpr@26.18); found undeclared type int (0038.vpr@29.18); Expected type int; but found Int at the expression at 0038.vpr@[29.24-29.25] (0038.vpr@29.24); found undeclared type B (0038.vpr@34.19)); List(found undeclared type bool (0038.vpr@5.10); found undeclared type Fool (0038.vpr@7.10); found undeclared type int (0038.vpr@9.10); found undeclared type int (0038.vpr@12.17); found undeclared type int (0038.vpr@16.10); found undeclared type bool (0038.vpr@19.10); Expected type bool; but found Bool at the expression at 0038.vpr@[19.18-19.22] (0038.vpr@19.18); found undeclared type error (0038.vpr@23.16); found undeclared type boo (0038.vpr@26.18); found undeclared type int (0038.vpr@29.18); Expected type int; but found Int at the expression at 0038.vpr@[29.24-29.25] (0038.vpr@29.24); found undeclared type B (0038.vpr@34.19)))
../../src/test/resources/frontend-generated/all/issues/silver/0039.vpr,4,10,0,0,10,11,11,Vector(List(Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@24.16); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@29.18); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@31.15); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@33.12)); List(Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@24.16); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@29.18); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@31.15); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@33.12)); List(Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@24.16); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@29.18); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@31.15); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@33.12)); List(Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@24.16); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@29.18); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@31.15); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@33.12)); List(Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@24.16); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@29.18); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@31.15); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@33.12)))
../../src/test/resources/frontend-generated/all/issues/silver/0040.vpr,1,1,0,0,1,1,1,Vector(List(expected field (0040.vpr@11.24)); List(expected field (0040.vpr@11.24)); List(expected field (0040.vpr@11.24)); List(expected field (0040.vpr@11.24)); List(expected field (0040.vpr@11.24)))
../../src/test/resources/frontend-generated/all/issues/silver/0046a.vpr,0,1460,100,6,1378,1401,1601,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0046b.vpr,0,1515,16,1,1494,1520,1533,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0047.vpr,2,1,0,0,1,1,1,Vector(List(wrong number of arguments (0047.vpr@8.3); wrong number of arguments (0047.vpr@10.3)); List(wrong number of arguments (0047.vpr@8.3); wrong number of arguments (0047.vpr@10.3)); List(wrong number of arguments (0047.vpr@8.3); wrong number of arguments (0047.vpr@10.3)); List(wrong number of arguments (0047.vpr@8.3); wrong number of arguments (0047.vpr@10.3)); List(wrong number of arguments (0047.vpr@8.3); wrong number of arguments (0047.vpr@10.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0047b.vpr,0,1473,87,5,1392,1434,1595,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0048.vpr,1,1,0,0,1,1,1,Vector(List(Duplicate identifier `Bug' at 0048.vpr@5.8 and at 0048.vpr@6.8 (0048.vpr@5.8)); List(Duplicate identifier `Bug' at 0048.vpr@5.8 and at 0048.vpr@6.8 (0048.vpr@5.8)); List(Duplicate identifier `Bug' at 0048.vpr@5.8 and at 0048.vpr@6.8 (0048.vpr@5.8)); List(Duplicate identifier `Bug' at 0048.vpr@5.8 and at 0048.vpr@6.8 (0048.vpr@5.8)); List(Duplicate identifier `Bug' at 0048.vpr@5.8 and at 0048.vpr@6.8 (0048.vpr@5.8)))
../../src/test/resources/frontend-generated/all/issues/silver/0050.vpr,2,1,0,0,1,1,1,Vector(List(Identifier shadowing `x' at 0050.vpr@6.7 and at 0050.vpr@8.14 (0050.vpr@6.1); Identifier shadowing `x' at 0050.vpr@6.7 and at 0050.vpr@12.14 (0050.vpr@6.1)); List(Identifier shadowing `x' at 0050.vpr@6.7 and at 0050.vpr@8.14 (0050.vpr@6.1); Identifier shadowing `x' at 0050.vpr@6.7 and at 0050.vpr@12.14 (0050.vpr@6.1)); List(Identifier shadowing `x' at 0050.vpr@6.7 and at 0050.vpr@8.14 (0050.vpr@6.1); Identifier shadowing `x' at 0050.vpr@6.7 and at 0050.vpr@12.14 (0050.vpr@6.1)); List(Identifier shadowing `x' at 0050.vpr@6.7 and at 0050.vpr@8.14 (0050.vpr@6.1); Identifier shadowing `x' at 0050.vpr@6.7 and at 0050.vpr@12.14 (0050.vpr@6.1)); List(Identifier shadowing `x' at 0050.vpr@6.7 and at 0050.vpr@8.14 (0050.vpr@6.1); Identifier shadowing `x' at 0050.vpr@6.7 and at 0050.vpr@12.14 (0050.vpr@6.1)))
../../src/test/resources/frontend-generated/all/issues/silver/0051.vpr,0,1664,62,3,1583,1674,1736,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0054.vpr,3,5,0,0,5,5,5,Vector(List(Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@8.10); Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@11.12); Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@18.10)); List(Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@8.10); Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@11.12); Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@18.10)); List(Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@8.10); Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@11.12); Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@18.10)); List(Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@8.10); Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@11.12); Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@18.10)); List(Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@8.10); Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@11.12); Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@18.10)))
../../src/test/resources/frontend-generated/all/issues/silver/0056.vpr,2,1,0,0,1,1,1,Vector(List(identifier x not defined. (0056.vpr@6.14); identifier y not defined. (0056.vpr@14.13)); List(identifier x not defined. (0056.vpr@6.14); identifier y not defined. (0056.vpr@14.13)); List(identifier x not defined. (0056.vpr@6.14); identifier y not defined. (0056.vpr@14.13)); List(identifier x not defined. (0056.vpr@6.14); identifier y not defined. (0056.vpr@14.13)); List(identifier x not defined. (0056.vpr@6.14); identifier y not defined. (0056.vpr@14.13)))
../../src/test/resources/frontend-generated/all/issues/silver/0059.vpr,0,1731,60,3,1647,1764,1783,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0062.vpr,2,2,0,0,2,2,3,Vector(List(Consistency error: Variable x is not mentioned in one or more triggers. (0062.vpr@7.12); Consistency error: Variable x is not mentioned in one or more triggers. (0062.vpr@13.19)); List(Consistency error: Variable x is not mentioned in one or more triggers. (0062.vpr@7.12); Consistency error: Variable x is not mentioned in one or more triggers. (0062.vpr@13.19)); List(Consistency error: Variable x is not mentioned in one or more triggers. (0062.vpr@7.12); Consistency error: Variable x is not mentioned in one or more triggers. (0062.vpr@13.19)); List(Consistency error: Variable x is not mentioned in one or more triggers. (0062.vpr@7.12); Consistency error: Variable x is not mentioned in one or more triggers. (0062.vpr@13.19)); List(Consistency error: Variable x is not mentioned in one or more triggers. (0062.vpr@7.12); Consistency error: Variable x is not mentioned in one or more triggers. (0062.vpr@13.19)))
../../src/test/resources/frontend-generated/all/issues/silver/0063.vpr,4,1491,48,3,1443,1473,1557,Vector(List([assignment.failed:division.by.zero] Assignment might fail. Divisor i might be zero. (0063.vpr@18.3); [assignment.failed:division.by.zero] Assignment might fail. Divisor i might be zero. (0063.vpr@23.3); [assert.failed:assertion.false] Assert might fail. Assertion q > none might not hold. (0063.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion q > none might not hold. (0063.vpr@41.3)); List([assignment.failed:division.by.zero] Assignment might fail. Divisor i might be zero. (0063.vpr@18.3); [assignment.failed:division.by.zero] Assignment might fail. Divisor i might be zero. (0063.vpr@23.3); [assert.failed:assertion.false] Assert might fail. Assertion q > none might not hold. (0063.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion q > none might not hold. (0063.vpr@41.3)); List([assignment.failed:division.by.zero] Assignment might fail. Divisor i might be zero. (0063.vpr@18.3); [assignment.failed:division.by.zero] Assignment might fail. Divisor i might be zero. (0063.vpr@23.3); [assert.failed:assertion.false] Assert might fail. Assertion q > none might not hold. (0063.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion q > none might not hold. (0063.vpr@41.3)); List([assignment.failed:division.by.zero] Assignment might fail. Divisor i might be zero. (0063.vpr@18.3); [assignment.failed:division.by.zero] Assignment might fail. Divisor i might be zero. (0063.vpr@23.3); [assert.failed:assertion.false] Assert might fail. Assertion q > none might not hold. (0063.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion q > none might not hold. (0063.vpr@41.3)); List([assignment.failed:division.by.zero] Assignment might fail. Divisor i might be zero. (0063.vpr@18.3); [assignment.failed:division.by.zero] Assignment might fail. Divisor i might be zero. (0063.vpr@23.3); [assert.failed:assertion.false] Assert might fail. Assertion q > none might not hold. (0063.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion q > none might not hold. (0063.vpr@41.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0065.vpr,3,4,0,0,4,4,5,Vector(List(Expected type Perm; but found Int at the expression at 0065.vpr@[20.19-20.24] (0065.vpr@20.19); Type error in the expression at 0065.vpr@[23.19-23.24] (0065.vpr@23.19); Type error in the expression at 0065.vpr@[26.19-26.24] (0065.vpr@26.19)); List(Expected type Perm; but found Int at the expression at 0065.vpr@[20.19-20.24] (0065.vpr@20.19); Type error in the expression at 0065.vpr@[23.19-23.24] (0065.vpr@23.19); Type error in the expression at 0065.vpr@[26.19-26.24] (0065.vpr@26.19)); List(Expected type Perm; but found Int at the expression at 0065.vpr@[20.19-20.24] (0065.vpr@20.19); Type error in the expression at 0065.vpr@[23.19-23.24] (0065.vpr@23.19); Type error in the expression at 0065.vpr@[26.19-26.24] (0065.vpr@26.19)); List(Expected type Perm; but found Int at the expression at 0065.vpr@[20.19-20.24] (0065.vpr@20.19); Type error in the expression at 0065.vpr@[23.19-23.24] (0065.vpr@23.19); Type error in the expression at 0065.vpr@[26.19-26.24] (0065.vpr@26.19)); List(Expected type Perm; but found Int at the expression at 0065.vpr@[20.19-20.24] (0065.vpr@20.19); Type error in the expression at 0065.vpr@[23.19-23.24] (0065.vpr@23.19); Type error in the expression at 0065.vpr@[26.19-26.24] (0065.vpr@26.19)))
../../src/test/resources/frontend-generated/all/issues/silver/0067.vpr,2,1556,69,4,1506,1509,1654,Vector(List([postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (0067.vpr@31.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (0067.vpr@38.12)); List([postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (0067.vpr@31.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (0067.vpr@38.12)); List([postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (0067.vpr@31.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (0067.vpr@38.12)); List([postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (0067.vpr@31.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (0067.vpr@38.12)); List([postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (0067.vpr@31.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (0067.vpr@38.12)))
../../src/test/resources/frontend-generated/all/issues/silver/0068.vpr,0,1505,56,3,1426,1542,1548,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0069.vpr,3,10,0,0,10,10,10,Vector(List(Consistency error: Function post-conditions must not contain permissions. (0069.vpr@10.11); Consistency error: Function post-conditions must not contain permissions. (0069.vpr@24.11); Consistency error: Function post-conditions must not contain permissions. (0069.vpr@35.11)); List(Consistency error: Function post-conditions must not contain permissions. (0069.vpr@10.11); Consistency error: Function post-conditions must not contain permissions. (0069.vpr@24.11); Consistency error: Function post-conditions must not contain permissions. (0069.vpr@35.11)); List(Consistency error: Function post-conditions must not contain permissions. (0069.vpr@10.11); Consistency error: Function post-conditions must not contain permissions. (0069.vpr@24.11); Consistency error: Function post-conditions must not contain permissions. (0069.vpr@35.11)); List(Consistency error: Function post-conditions must not contain permissions. (0069.vpr@10.11); Consistency error: Function post-conditions must not contain permissions. (0069.vpr@24.11); Consistency error: Function post-conditions must not contain permissions. (0069.vpr@35.11)); List(Consistency error: Function post-conditions must not contain permissions. (0069.vpr@10.11); Consistency error: Function post-conditions must not contain permissions. (0069.vpr@24.11); Consistency error: Function post-conditions must not contain permissions. (0069.vpr@35.11)))
../../src/test/resources/frontend-generated/all/issues/silver/0072.vpr,2,1540,61,3,1482,1513,1625,Vector(List([fold.failed:negative.permission] Folding token(x) might fail. Fraction -1 / 1 might be negative. (0072.vpr@20.5); [fold.failed:negative.permission] Folding token(x) might fail. Fraction -(1 / 1) might be negative. (0072.vpr@27.5)); List([fold.failed:negative.permission] Folding token(x) might fail. Fraction -1 / 1 might be negative. (0072.vpr@20.5); [fold.failed:negative.permission] Folding token(x) might fail. Fraction -(1 / 1) might be negative. (0072.vpr@27.5)); List([fold.failed:negative.permission] Folding token(x) might fail. Fraction -1 / 1 might be negative. (0072.vpr@20.5); [fold.failed:negative.permission] Folding token(x) might fail. Fraction -(1 / 1) might be negative. (0072.vpr@27.5)); List([fold.failed:negative.permission] Folding token(x) might fail. Fraction -1 / 1 might be negative. (0072.vpr@20.5); [fold.failed:negative.permission] Folding token(x) might fail. Fraction -(1 / 1) might be negative. (0072.vpr@27.5)); List([fold.failed:negative.permission] Folding token(x) might fail. Fraction -1 / 1 might be negative. (0072.vpr@20.5); [fold.failed:negative.permission] Folding token(x) might fail. Fraction -(1 / 1) might be negative. (0072.vpr@27.5)))
../../src/test/resources/frontend-generated/all/issues/silver/0073-1.vpr,1,2,0,0,2,2,2,Vector(List({ 3 } is not a valid Trigger (0073-1.vpr@8.27)); List({ 3 } is not a valid Trigger (0073-1.vpr@8.27)); List({ 3 } is not a valid Trigger (0073-1.vpr@8.27)); List({ 3 } is not a valid Trigger (0073-1.vpr@8.27)); List({ 3 } is not a valid Trigger (0073-1.vpr@8.27)))
../../src/test/resources/frontend-generated/all/issues/silver/0073.vpr,2,1,0,0,1,1,1,Vector(List({ f } is not a valid Trigger (0073.vpr@8.27); expected expression but found field f (0073.vpr@8.28)); List({ f } is not a valid Trigger (0073.vpr@8.27); expected expression but found field f (0073.vpr@8.28)); List({ f } is not a valid Trigger (0073.vpr@8.27); expected expression but found field f (0073.vpr@8.28)); List({ f } is not a valid Trigger (0073.vpr@8.27); expected expression but found field f (0073.vpr@8.28)); List({ f } is not a valid Trigger (0073.vpr@8.27); expected expression but found field f (0073.vpr@8.28)))
../../src/test/resources/frontend-generated/all/issues/silver/0077.vpr,1,1,0,0,1,2,2,Vector(List(Consistency error: Return variable ret cannot be accessed in precondition. (0077.vpr@6.14)); List(Consistency error: Return variable ret cannot be accessed in precondition. (0077.vpr@6.14)); List(Consistency error: Return variable ret cannot be accessed in precondition. (0077.vpr@6.14)); List(Consistency error: Return variable ret cannot be accessed in precondition. (0077.vpr@6.14)); List(Consistency error: Return variable ret cannot be accessed in precondition. (0077.vpr@6.14)))
../../src/test/resources/frontend-generated/all/issues/silver/0078.vpr,1,1503,56,3,1426,1523,1561,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (0078.vpr@12.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (0078.vpr@12.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (0078.vpr@12.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (0078.vpr@12.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (0078.vpr@12.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0081.vpr,3,5,0,0,5,5,5,Vector(List(Consistency error: Variable p is not mentioned in one or more triggers. (0081.vpr@20.13); Consistency error: Variable q is not mentioned in one or more triggers. (0081.vpr@20.25); Consistency error: Variable k is not mentioned in one or more triggers. (0081.vpr@25.29)); List(Consistency error: Variable p is not mentioned in one or more triggers. (0081.vpr@20.13); Consistency error: Variable q is not mentioned in one or more triggers. (0081.vpr@20.25); Consistency error: Variable k is not mentioned in one or more triggers. (0081.vpr@25.29)); List(Consistency error: Variable p is not mentioned in one or more triggers. (0081.vpr@20.13); Consistency error: Variable q is not mentioned in one or more triggers. (0081.vpr@20.25); Consistency error: Variable k is not mentioned in one or more triggers. (0081.vpr@25.29)); List(Consistency error: Variable p is not mentioned in one or more triggers. (0081.vpr@20.13); Consistency error: Variable q is not mentioned in one or more triggers. (0081.vpr@20.25); Consistency error: Variable k is not mentioned in one or more triggers. (0081.vpr@25.29)); List(Consistency error: Variable p is not mentioned in one or more triggers. (0081.vpr@20.13); Consistency error: Variable q is not mentioned in one or more triggers. (0081.vpr@20.25); Consistency error: Variable k is not mentioned in one or more triggers. (0081.vpr@25.29)))
../../src/test/resources/frontend-generated/all/issues/silver/0084.vpr,1,2,0,0,2,2,2,Vector(List(Consistency error: Predicates must not contain old expressions. (0084.vpr@9.4)); List(Consistency error: Predicates must not contain old expressions. (0084.vpr@9.4)); List(Consistency error: Predicates must not contain old expressions. (0084.vpr@9.4)); List(Consistency error: Predicates must not contain old expressions. (0084.vpr@9.4)); List(Consistency error: Predicates must not contain old expressions. (0084.vpr@9.4)))
../../src/test/resources/frontend-generated/all/issues/silver/0085.vpr,0,1634,83,5,1573,1577,1753,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0086.vpr,6,3,0,0,3,3,3,Vector(List(identifier i not defined. (0086.vpr@11.9); identifier i not defined. (0086.vpr@14.5); identifier k not defined. (0086.vpr@30.13); identifier j not defined. (0086.vpr@34.9); identifier i not defined. (0086.vpr@37.5); identifier y not defined. (0086.vpr@49.13)); List(identifier i not defined. (0086.vpr@11.9); identifier i not defined. (0086.vpr@14.5); identifier k not defined. (0086.vpr@30.13); identifier j not defined. (0086.vpr@34.9); identifier i not defined. (0086.vpr@37.5); identifier y not defined. (0086.vpr@49.13)); List(identifier i not defined. (0086.vpr@11.9); identifier i not defined. (0086.vpr@14.5); identifier k not defined. (0086.vpr@30.13); identifier j not defined. (0086.vpr@34.9); identifier i not defined. (0086.vpr@37.5); identifier y not defined. (0086.vpr@49.13)); List(identifier i not defined. (0086.vpr@11.9); identifier i not defined. (0086.vpr@14.5); identifier k not defined. (0086.vpr@30.13); identifier j not defined. (0086.vpr@34.9); identifier i not defined. (0086.vpr@37.5); identifier y not defined. (0086.vpr@49.13)); List(identifier i not defined. (0086.vpr@11.9); identifier i not defined. (0086.vpr@14.5); identifier k not defined. (0086.vpr@30.13); identifier j not defined. (0086.vpr@34.9); identifier i not defined. (0086.vpr@37.5); identifier y not defined. (0086.vpr@49.13)))
../../src/test/resources/frontend-generated/all/issues/silver/0088-1.vpr,0,1541,8,0,1535,1537,1553,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0088.vpr,2,1424,60,4,1365,1401,1507,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0088.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0088.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0088.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0088.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0088.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0088.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0088.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0088.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0088.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0088.vpr@32.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0090.vpr,2,1,0,0,1,2,2,Vector(List(Consistency error: b := foo(0) is a reassignment of formal argument b. (0090.vpr@6.5); Consistency error: r := new() is a reassignment of formal argument r. (0090.vpr@12.5)); List(Consistency error: b := foo(0) is a reassignment of formal argument b. (0090.vpr@6.5); Consistency error: r := new() is a reassignment of formal argument r. (0090.vpr@12.5)); List(Consistency error: b := foo(0) is a reassignment of formal argument b. (0090.vpr@6.5); Consistency error: r := new() is a reassignment of formal argument r. (0090.vpr@12.5)); List(Consistency error: b := foo(0) is a reassignment of formal argument b. (0090.vpr@6.5); Consistency error: r := new() is a reassignment of formal argument r. (0090.vpr@12.5)); List(Consistency error: b := foo(0) is a reassignment of formal argument b. (0090.vpr@6.5); Consistency error: r := new() is a reassignment of formal argument r. (0090.vpr@12.5)))
../../src/test/resources/frontend-generated/all/issues/silver/0091.vpr,2,1603,60,3,1524,1615,1672,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (y in B1) == yc + 1 might not hold. (0091.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion (y in B1) == yc - 2 might not hold. (0091.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (y in B1) == yc + 1 might not hold. (0091.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion (y in B1) == yc - 2 might not hold. (0091.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (y in B1) == yc + 1 might not hold. (0091.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion (y in B1) == yc - 2 might not hold. (0091.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (y in B1) == yc + 1 might not hold. (0091.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion (y in B1) == yc - 2 might not hold. (0091.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (y in B1) == yc + 1 might not hold. (0091.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion (y in B1) == yc - 2 might not hold. (0091.vpr@32.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0092.vpr,1,1541,75,4,1434,1591,1598,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0092.vpr@11.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0092.vpr@11.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0092.vpr@11.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0092.vpr@11.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0092.vpr@11.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0093.vpr,2,2,0,0,2,2,2,Vector(List(Type error in the expression at 0093.vpr@[10.10-10.38] (0093.vpr@10.10); Type error in the expression at 0093.vpr@[16.12-16.40] (0093.vpr@16.12)); List(Type error in the expression at 0093.vpr@[10.10-10.38] (0093.vpr@10.10); Type error in the expression at 0093.vpr@[16.12-16.40] (0093.vpr@16.12)); List(Type error in the expression at 0093.vpr@[10.10-10.38] (0093.vpr@10.10); Type error in the expression at 0093.vpr@[16.12-16.40] (0093.vpr@16.12)); List(Type error in the expression at 0093.vpr@[10.10-10.38] (0093.vpr@10.10); Type error in the expression at 0093.vpr@[16.12-16.40] (0093.vpr@16.12)); List(Type error in the expression at 0093.vpr@[10.10-10.38] (0093.vpr@10.10); Type error in the expression at 0093.vpr@[16.12-16.40] (0093.vpr@16.12)))
../../src/test/resources/frontend-generated/all/issues/silver/0102.vpr,2,1,0,0,1,2,2,Vector(List(Type error in the expression at 0102.vpr@[6.10-6.40] (0102.vpr@6.10); Type error in the expression at 0102.vpr@[11.10-11.42] (0102.vpr@11.10)); List(Type error in the expression at 0102.vpr@[6.10-6.40] (0102.vpr@6.10); Type error in the expression at 0102.vpr@[11.10-11.42] (0102.vpr@11.10)); List(Type error in the expression at 0102.vpr@[6.10-6.40] (0102.vpr@6.10); Type error in the expression at 0102.vpr@[11.10-11.42] (0102.vpr@11.10)); List(Type error in the expression at 0102.vpr@[6.10-6.40] (0102.vpr@6.10); Type error in the expression at 0102.vpr@[11.10-11.42] (0102.vpr@11.10)); List(Type error in the expression at 0102.vpr@[6.10-6.40] (0102.vpr@6.10); Type error in the expression at 0102.vpr@[11.10-11.42] (0102.vpr@11.10)))
../../src/test/resources/frontend-generated/all/issues/silver/0105-1.vpr,1,2,0,0,2,3,3,Vector(List(Parse error: Expected found "axiom ping_axiom_2_p"; expected invalid identifier (could be a keyword) | domainFunctionDecl | axiomDecl | "}" at index 308   axiom ping_axiom_2_p   ^ (0105-1.vpr@11.3)); List(Parse error: Expected found "axiom ping_axiom_2_p"; expected invalid identifier (could be a keyword) | domainFunctionDecl | axiomDecl | "}" at index 308   axiom ping_axiom_2_p   ^ (0105-1.vpr@11.3)); List(Parse error: Expected found "axiom ping_axiom_2_p"; expected invalid identifier (could be a keyword) | domainFunctionDecl | axiomDecl | "}" at index 308   axiom ping_axiom_2_p   ^ (0105-1.vpr@11.3)); List(Parse error: Expected found "axiom ping_axiom_2_p"; expected invalid identifier (could be a keyword) | domainFunctionDecl | axiomDecl | "}" at index 308   axiom ping_axiom_2_p   ^ (0105-1.vpr@11.3)); List(Parse error: Expected found "axiom ping_axiom_2_p"; expected invalid identifier (could be a keyword) | domainFunctionDecl | axiomDecl | "}" at index 308   axiom ping_axiom_2_p   ^ (0105-1.vpr@11.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0105.vpr,1,1,0,0,1,2,2,Vector(List(Parse error: Expected found "axiom ping_axiom_2_p"; expected invalid identifier (could be a keyword) | domainFunctionDecl | axiomDecl | "}" at index 310    axiom ping_axiom_2_p    ^ (0105.vpr@11.4)); List(Parse error: Expected found "axiom ping_axiom_2_p"; expected invalid identifier (could be a keyword) | domainFunctionDecl | axiomDecl | "}" at index 310    axiom ping_axiom_2_p    ^ (0105.vpr@11.4)); List(Parse error: Expected found "axiom ping_axiom_2_p"; expected invalid identifier (could be a keyword) | domainFunctionDecl | axiomDecl | "}" at index 310    axiom ping_axiom_2_p    ^ (0105.vpr@11.4)); List(Parse error: Expected found "axiom ping_axiom_2_p"; expected invalid identifier (could be a keyword) | domainFunctionDecl | axiomDecl | "}" at index 310    axiom ping_axiom_2_p    ^ (0105.vpr@11.4)); List(Parse error: Expected found "axiom ping_axiom_2_p"; expected invalid identifier (could be a keyword) | domainFunctionDecl | axiomDecl | "}" at index 310    axiom ping_axiom_2_p    ^ (0105.vpr@11.4)))
../../src/test/resources/frontend-generated/all/issues/silver/0106-1.vpr,5,11,0,0,11,12,12,Vector(List(Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@16.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@9.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@9.25); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@23.15); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@23.28)); List(Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@16.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@9.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@9.25); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@23.15); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@23.28)); List(Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@16.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@9.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@9.25); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@23.15); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@23.28)); List(Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@16.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@9.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@9.25); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@23.15); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@23.28)); List(Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@16.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@9.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@9.25); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@23.15); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@23.28)))
../../src/test/resources/frontend-generated/all/issues/silver/0106.vpr,6,6,0,0,6,6,7,Vector(List(Consistency error: Function bodies are not allowed to contain perm expressions (0106.vpr@30.2); Consistency error: Function bodies are not allowed to contain forperm expressions (0106.vpr@36.2); Consistency error: Function bodies are not allowed to contain perm expressions (0106.vpr@42.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@10.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@16.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@22.2)); List(Consistency error: Function bodies are not allowed to contain perm expressions (0106.vpr@30.2); Consistency error: Function bodies are not allowed to contain forperm expressions (0106.vpr@36.2); Consistency error: Function bodies are not allowed to contain perm expressions (0106.vpr@42.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@10.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@16.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@22.2)); List(Consistency error: Function bodies are not allowed to contain perm expressions (0106.vpr@30.2); Consistency error: Function bodies are not allowed to contain forperm expressions (0106.vpr@36.2); Consistency error: Function bodies are not allowed to contain perm expressions (0106.vpr@42.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@10.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@16.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@22.2)); List(Consistency error: Function bodies are not allowed to contain perm expressions (0106.vpr@30.2); Consistency error: Function bodies are not allowed to contain forperm expressions (0106.vpr@36.2); Consistency error: Function bodies are not allowed to contain perm expressions (0106.vpr@42.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@10.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@16.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@22.2)); List(Consistency error: Function bodies are not allowed to contain perm expressions (0106.vpr@30.2); Consistency error: Function bodies are not allowed to contain forperm expressions (0106.vpr@36.2); Consistency error: Function bodies are not allowed to contain perm expressions (0106.vpr@42.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@10.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@16.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@22.2)))
../../src/test/resources/frontend-generated/all/issues/silver/0108.vpr,0,1433,98,6,1295,1490,1514,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0114-1.vpr,1,1,0,0,1,1,1,Vector(List(Parse error: Number of macro arguments does not match (0114-1.vpr@9.12)); List(Parse error: Number of macro arguments does not match (0114-1.vpr@9.12)); List(Parse error: Number of macro arguments does not match (0114-1.vpr@9.12)); List(Parse error: Number of macro arguments does not match (0114-1.vpr@9.12)); List(Parse error: Number of macro arguments does not match (0114-1.vpr@9.12)))
../../src/test/resources/frontend-generated/all/issues/silver/0114.vpr,1,0,0,0,0,1,1,Vector(List(Parse error: Number of macro arguments does not match (0114.vpr@8.14)); List(Parse error: Number of macro arguments does not match (0114.vpr@8.14)); List(Parse error: Number of macro arguments does not match (0114.vpr@8.14)); List(Parse error: Number of macro arguments does not match (0114.vpr@8.14)); List(Parse error: Number of macro arguments does not match (0114.vpr@8.14)))
../../src/test/resources/frontend-generated/all/issues/silver/0116.vpr,2,1,0,0,1,1,2,Vector(List(local variable a cannot be accessed before it is declared. (0116.vpr@7.2); identifier x not defined. (0116.vpr@20.15)); List(local variable a cannot be accessed before it is declared. (0116.vpr@7.2); identifier x not defined. (0116.vpr@20.15)); List(local variable a cannot be accessed before it is declared. (0116.vpr@7.2); identifier x not defined. (0116.vpr@20.15)); List(local variable a cannot be accessed before it is declared. (0116.vpr@7.2); identifier x not defined. (0116.vpr@20.15)); List(local variable a cannot be accessed before it is declared. (0116.vpr@7.2); identifier x not defined. (0116.vpr@20.15)))
../../src/test/resources/frontend-generated/all/issues/silver/0117.vpr,0,1442,71,4,1349,1457,1522,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0118.vpr,1,1686,119,7,1521,1736,1801,Vector(List([postcondition.violated:assertion.false] Postcondition of test02 might not hold. Assertion Seq(x; y) == zip(xs; ys) might not hold. (0118.vpr@16.12)); List([postcondition.violated:assertion.false] Postcondition of test02 might not hold. Assertion Seq(x; y) == zip(xs; ys) might not hold. (0118.vpr@16.12)); List([postcondition.violated:assertion.false] Postcondition of test02 might not hold. Assertion Seq(x; y) == zip(xs; ys) might not hold. (0118.vpr@16.12)); List([postcondition.violated:assertion.false] Postcondition of test02 might not hold. Assertion Seq(x; y) == zip(xs; ys) might not hold. (0118.vpr@16.12)); List([postcondition.violated:assertion.false] Postcondition of test02 might not hold. Assertion Seq(x; y) == zip(xs; ys) might not hold. (0118.vpr@16.12)))
../../src/test/resources/frontend-generated/all/issues/silver/0120.vpr,2,6,0,0,6,6,6,Vector(List(Consistency error: acc(r.f; 1 / 2) is non pure and appears where only pure expressions are allowed. (0120.vpr@11.33); Consistency error: acc(p(r); 1 / 2) is non pure and appears where only pure expressions are allowed. (0120.vpr@17.33)); List(Consistency error: acc(r.f; 1 / 2) is non pure and appears where only pure expressions are allowed. (0120.vpr@11.33); Consistency error: acc(p(r); 1 / 2) is non pure and appears where only pure expressions are allowed. (0120.vpr@17.33)); List(Consistency error: acc(r.f; 1 / 2) is non pure and appears where only pure expressions are allowed. (0120.vpr@11.33); Consistency error: acc(p(r); 1 / 2) is non pure and appears where only pure expressions are allowed. (0120.vpr@17.33)); List(Consistency error: acc(r.f; 1 / 2) is non pure and appears where only pure expressions are allowed. (0120.vpr@11.33); Consistency error: acc(p(r); 1 / 2) is non pure and appears where only pure expressions are allowed. (0120.vpr@17.33)); List(Consistency error: acc(r.f; 1 / 2) is non pure and appears where only pure expressions are allowed. (0120.vpr@11.33); Consistency error: acc(p(r); 1 / 2) is non pure and appears where only pure expressions are allowed. (0120.vpr@17.33)))
../../src/test/resources/frontend-generated/all/issues/silver/0126.vpr,0,1621,86,5,1501,1660,1702,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0127-1.vpr,5,3,0,0,3,4,4,Vector(List(expected function or predicate  (0127-1.vpr@22.12); specified location is not a field nor a predicate (0127-1.vpr@28.16); expected function or predicate  (0127-1.vpr@33.16); expected predicate access (0127-1.vpr@39.13); specified location is not a field nor a predicate (0127-1.vpr@39.13)); List(expected function or predicate  (0127-1.vpr@22.12); specified location is not a field nor a predicate (0127-1.vpr@28.16); expected function or predicate  (0127-1.vpr@33.16); expected predicate access (0127-1.vpr@39.13); specified location is not a field nor a predicate (0127-1.vpr@39.13)); List(expected function or predicate  (0127-1.vpr@22.12); specified location is not a field nor a predicate (0127-1.vpr@28.16); expected function or predicate  (0127-1.vpr@33.16); expected predicate access (0127-1.vpr@39.13); specified location is not a field nor a predicate (0127-1.vpr@39.13)); List(expected function or predicate  (0127-1.vpr@22.12); specified location is not a field nor a predicate (0127-1.vpr@28.16); expected function or predicate  (0127-1.vpr@33.16); expected predicate access (0127-1.vpr@39.13); specified location is not a field nor a predicate (0127-1.vpr@39.13)); List(expected function or predicate  (0127-1.vpr@22.12); specified location is not a field nor a predicate (0127-1.vpr@28.16); expected function or predicate  (0127-1.vpr@33.16); expected predicate access (0127-1.vpr@39.13); specified location is not a field nor a predicate (0127-1.vpr@39.13)))
../../src/test/resources/frontend-generated/all/issues/silver/0127-2.vpr,1,1499,86,5,1378,1545,1574,Vector(List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access P(). (0127-2.vpr@12.3)); List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access P(). (0127-2.vpr@12.3)); List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access P(). (0127-2.vpr@12.3)); List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access P(). (0127-2.vpr@12.3)); List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access P(). (0127-2.vpr@12.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0127.vpr,0,1522,103,6,1415,1491,1662,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0128.vpr,1,0,0,0,0,1,1,Vector(List(expected identifier; but got PFunction(PIdnDef(balance);ArrayBuffer(PFormalArgDecl(PIdnDef(this);Ref));Int;ArrayBuffer();ArrayBuffer();None) (0128.vpr@8.12)); List(expected identifier; but got PFunction(PIdnDef(balance);ArrayBuffer(PFormalArgDecl(PIdnDef(this);Ref));Int;ArrayBuffer();ArrayBuffer();None) (0128.vpr@8.12)); List(expected identifier; but got PFunction(PIdnDef(balance);ArrayBuffer(PFormalArgDecl(PIdnDef(this);Ref));Int;ArrayBuffer();ArrayBuffer();None) (0128.vpr@8.12)); List(expected identifier; but got PFunction(PIdnDef(balance);ArrayBuffer(PFormalArgDecl(PIdnDef(this);Ref));Int;ArrayBuffer();ArrayBuffer();None) (0128.vpr@8.12)); List(expected identifier; but got PFunction(PIdnDef(balance);ArrayBuffer(PFormalArgDecl(PIdnDef(this);Ref));Int;ArrayBuffer();ArrayBuffer();None) (0128.vpr@8.12)))
../../src/test/resources/frontend-generated/all/issues/silver/0129.vpr,0,1601,71,4,1503,1630,1672,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0130.vpr,0,1535,91,5,1407,1580,1618,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0131.vpr,4,9,0,0,9,9,10,Vector(List(Consistency error: Function f recurses via its precondition: the cycle contains the function(s) f (0131.vpr@5.1); Consistency error: Function f1 recurses via its precondition: the cycle contains the function(s) f1; f2 (0131.vpr@9.1); Consistency error: Function f2 recurses via its precondition: the cycle contains the function(s) f2; f1 (0131.vpr@13.1); Consistency error: Function f10 recurses via its precondition: the cycle contains the function(s) f10; g10 (0131.vpr@35.1)); List(Consistency error: Function f recurses via its precondition: the cycle contains the function(s) f (0131.vpr@5.1); Consistency error: Function f1 recurses via its precondition: the cycle contains the function(s) f1; f2 (0131.vpr@9.1); Consistency error: Function f2 recurses via its precondition: the cycle contains the function(s) f2; f1 (0131.vpr@13.1); Consistency error: Function f10 recurses via its precondition: the cycle contains the function(s) f10; g10 (0131.vpr@35.1)); List(Consistency error: Function f recurses via its precondition: the cycle contains the function(s) f (0131.vpr@5.1); Consistency error: Function f1 recurses via its precondition: the cycle contains the function(s) f1; f2 (0131.vpr@9.1); Consistency error: Function f2 recurses via its precondition: the cycle contains the function(s) f2; f1 (0131.vpr@13.1); Consistency error: Function f10 recurses via its precondition: the cycle contains the function(s) f10; g10 (0131.vpr@35.1)); List(Consistency error: Function f recurses via its precondition: the cycle contains the function(s) f (0131.vpr@5.1); Consistency error: Function f1 recurses via its precondition: the cycle contains the function(s) f1; f2 (0131.vpr@9.1); Consistency error: Function f2 recurses via its precondition: the cycle contains the function(s) f2; f1 (0131.vpr@13.1); Consistency error: Function f10 recurses via its precondition: the cycle contains the function(s) f10; g10 (0131.vpr@35.1)); List(Consistency error: Function f recurses via its precondition: the cycle contains the function(s) f (0131.vpr@5.1); Consistency error: Function f1 recurses via its precondition: the cycle contains the function(s) f1; f2 (0131.vpr@9.1); Consistency error: Function f2 recurses via its precondition: the cycle contains the function(s) f2; f1 (0131.vpr@13.1); Consistency error: Function f10 recurses via its precondition: the cycle contains the function(s) f10; g10 (0131.vpr@35.1)))
../../src/test/resources/frontend-generated/all/issues/silver/0132.vpr,1,1,0,0,1,2,2,Vector(List(Consistency error: No matching identifier l1 found of type Label. (0132.vpr@7.18)); List(Consistency error: No matching identifier l1 found of type Label. (0132.vpr@7.18)); List(Consistency error: No matching identifier l1 found of type Label. (0132.vpr@7.18)); List(Consistency error: No matching identifier l1 found of type Label. (0132.vpr@7.18)); List(Consistency error: No matching identifier l1 found of type Label. (0132.vpr@7.18)))
../../src/test/resources/frontend-generated/all/issues/silver/0137.vpr,1,1,0,0,1,2,2,Vector(List(expected function or predicate  (0137.vpr@9.18)); List(expected function or predicate  (0137.vpr@9.18)); List(expected function or predicate  (0137.vpr@9.18)); List(expected function or predicate  (0137.vpr@9.18)); List(expected function or predicate  (0137.vpr@9.18)))
../../src/test/resources/frontend-generated/all/issues/silver/0138.vpr,1,3,0,0,2,3,4,Vector(List(Parse error: Expected found "{\n  define inner {\n "; expected invalid identifier (could be a keyword) | exp | "{" ~ (nodefinestmt ~ ";".?).rep(sep = ("/*" ~ (!(StringIn("*/")) ~ AnyChar).rep ~ "*/" | "//" ~ CharsWhile(viper.silver.parser.FastParser$$$Lambda$619/485047320@1cb2e6f5).? ~ ("\n" | End) | " " | "\t" | "\n" | "\r").rep) ~ "}" at index 156 { ^ (0138.vpr@6.1)); List(Parse error: Expected found "{\n  define inner {\n "; expected invalid identifier (could be a keyword) | exp | "{" ~ (nodefinestmt ~ ";".?).rep(sep = ("/*" ~ (!(StringIn("*/")) ~ AnyChar).rep ~ "*/" | "//" ~ CharsWhile(viper.silver.parser.FastParser$$$Lambda$619/485047320@1cb2e6f5).? ~ ("\n" | End) | " " | "\t" | "\n" | "\r").rep) ~ "}" at index 156 { ^ (0138.vpr@6.1)); List(Parse error: Expected found "{\n  define inner {\n "; expected invalid identifier (could be a keyword) | exp | "{" ~ (nodefinestmt ~ ";".?).rep(sep = ("/*" ~ (!(StringIn("*/")) ~ AnyChar).rep ~ "*/" | "//" ~ CharsWhile(viper.silver.parser.FastParser$$$Lambda$619/485047320@1cb2e6f5).? ~ ("\n" | End) | " " | "\t" | "\n" | "\r").rep) ~ "}" at index 156 { ^ (0138.vpr@6.1)); List(Parse error: Expected found "{\n  define inner {\n "; expected invalid identifier (could be a keyword) | exp | "{" ~ (nodefinestmt ~ ";".?).rep(sep = ("/*" ~ (!(StringIn("*/")) ~ AnyChar).rep ~ "*/" | "//" ~ CharsWhile(viper.silver.parser.FastParser$$$Lambda$619/485047320@1cb2e6f5).? ~ ("\n" | End) | " " | "\t" | "\n" | "\r").rep) ~ "}" at index 156 { ^ (0138.vpr@6.1)); List(Parse error: Expected found "{\n  define inner {\n "; expected invalid identifier (could be a keyword) | exp | "{" ~ (nodefinestmt ~ ";".?).rep(sep = ("/*" ~ (!(StringIn("*/")) ~ AnyChar).rep ~ "*/" | "//" ~ CharsWhile(viper.silver.parser.FastParser$$$Lambda$619/485047320@1cb2e6f5).? ~ ("\n" | End) | " " | "\t" | "\n" | "\r").rep) ~ "}" at index 156 { ^ (0138.vpr@6.1)))
../../src/test/resources/frontend-generated/all/issues/silver/0139.vpr,0,1422,79,5,1360,1373,1534,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0140.vpr,1,1516,77,5,1410,1544,1594,Vector(List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (0140.vpr@7.3)); List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (0140.vpr@7.3)); List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (0140.vpr@7.3)); List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (0140.vpr@7.3)); List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (0140.vpr@7.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0142.vpr,1,1352,26,1,1320,1351,1385,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion -a + b == -(a + b) might not hold. (0142.vpr@8.5)); List([assert.failed:assertion.false] Assert might fail. Assertion -a + b == -(a + b) might not hold. (0142.vpr@8.5)); List([assert.failed:assertion.false] Assert might fail. Assertion -a + b == -(a + b) might not hold. (0142.vpr@8.5)); List([assert.failed:assertion.false] Assert might fail. Assertion -a + b == -(a + b) might not hold. (0142.vpr@8.5)); List([assert.failed:assertion.false] Assert might fail. Assertion -a + b == -(a + b) might not hold. (0142.vpr@8.5)))
../../src/test/resources/frontend-generated/all/issues/silver/0148.vpr,0,1727,44,2,1667,1746,1770,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0151.vpr,0,1524,64,4,1446,1523,1605,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0152.vpr,0,1416,85,6,1347,1365,1536,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0155.vpr,0,1440,51,3,1382,1431,1507,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0158.vpr,1,1,0,0,1,1,1,Vector(List(Consistency error: Variable i is not mentioned in one or more triggers. (0158.vpr@7.19)); List(Consistency error: Variable i is not mentioned in one or more triggers. (0158.vpr@7.19)); List(Consistency error: Variable i is not mentioned in one or more triggers. (0158.vpr@7.19)); List(Consistency error: Variable i is not mentioned in one or more triggers. (0158.vpr@7.19)); List(Consistency error: Variable i is not mentioned in one or more triggers. (0158.vpr@7.19)))
../../src/test/resources/frontend-generated/all/issues/silver/0159.vpr,1,1560,24,1,1525,1574,1581,Vector(List([assert.failed:receiver.not.injective] Assert might fail. Receiver of e.x [0159.vpr@11.50]  might not be injective. (0159.vpr@11.3)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of e.x [0159.vpr@11.50]  might not be injective. (0159.vpr@11.3)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of e.x [0159.vpr@11.50]  might not be injective. (0159.vpr@11.3)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of e.x [0159.vpr@11.50]  might not be injective. (0159.vpr@11.3)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of e.x [0159.vpr@11.50]  might not be injective. (0159.vpr@11.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0160.vpr,1,1,0,0,1,1,1,Vector(List(Parse error: Expression macro used in statement position (0160.vpr@9.3)); List(Parse error: Expression macro used in statement position (0160.vpr@9.3)); List(Parse error: Expression macro used in statement position (0160.vpr@9.3)); List(Parse error: Expression macro used in statement position (0160.vpr@9.3)); List(Parse error: Expression macro used in statement position (0160.vpr@9.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0162-1.vpr,1,1400,34,2,1373,1380,1449,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion x != y might not hold. (0162-1.vpr@12.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x != y might not hold. (0162-1.vpr@12.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x != y might not hold. (0162-1.vpr@12.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x != y might not hold. (0162-1.vpr@12.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x != y might not hold. (0162-1.vpr@12.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0162-2.vpr,5,1568,28,1,1528,1586,1592,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@24.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@55.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@68.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@76.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@24.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@55.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@68.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@76.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@24.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@55.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@68.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@76.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@24.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@55.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@68.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@76.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@24.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@55.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@68.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@76.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0164.vpr,1,3,0,0,3,3,3,Vector(List(Consistency error: (4 == 4 ? acc(r.f; write) : 4 == 4) is non pure and appears where only pure expressions are allowed. (0164.vpr@11.11)); List(Consistency error: (4 == 4 ? acc(r.f; write) : 4 == 4) is non pure and appears where only pure expressions are allowed. (0164.vpr@11.11)); List(Consistency error: (4 == 4 ? acc(r.f; write) : 4 == 4) is non pure and appears where only pure expressions are allowed. (0164.vpr@11.11)); List(Consistency error: (4 == 4 ? acc(r.f; write) : 4 == 4) is non pure and appears where only pure expressions are allowed. (0164.vpr@11.11)); List(Consistency error: (4 == 4 ? acc(r.f; write) : 4 == 4) is non pure and appears where only pure expressions are allowed. (0164.vpr@11.11)))
../../src/test/resources/frontend-generated/all/issues/silver/0165.vpr,1,1,0,0,1,1,1,Vector(List(Parse error: Expected found "b () { }"; expected Fail | preambleImport | defineDecl | domainDecl | fieldDecl | functionDecl | predicateDecl | methodDecl | Fail | End at index 164 field a : Intmethod b () { }                     ^ (0165.vpr@5.21)); List(Parse error: Expected found "b () { }"; expected Fail | preambleImport | defineDecl | domainDecl | fieldDecl | functionDecl | predicateDecl | methodDecl | Fail | End at index 164 field a : Intmethod b () { }                     ^ (0165.vpr@5.21)); List(Parse error: Expected found "b () { }"; expected Fail | preambleImport | defineDecl | domainDecl | fieldDecl | functionDecl | predicateDecl | methodDecl | Fail | End at index 164 field a : Intmethod b () { }                     ^ (0165.vpr@5.21)); List(Parse error: Expected found "b () { }"; expected Fail | preambleImport | defineDecl | domainDecl | fieldDecl | functionDecl | predicateDecl | methodDecl | Fail | End at index 164 field a : Intmethod b () { }                     ^ (0165.vpr@5.21)); List(Parse error: Expected found "b () { }"; expected Fail | preambleImport | defineDecl | domainDecl | fieldDecl | functionDecl | predicateDecl | methodDecl | Fail | End at index 164 field a : Intmethod b () { }                     ^ (0165.vpr@5.21)))
../../src/test/resources/frontend-generated/all/issues/silver/0167-1.vpr,1,0,0,0,0,0,0,Vector(List(Parse error: Another macro named 'P' already exists at 0167-1.vpr@4.1 (0167-1.vpr@6.1)); List(Parse error: Another macro named 'P' already exists at 0167-1.vpr@4.1 (0167-1.vpr@6.1)); List(Parse error: Another macro named 'P' already exists at 0167-1.vpr@4.1 (0167-1.vpr@6.1)); List(Parse error: Another macro named 'P' already exists at 0167-1.vpr@4.1 (0167-1.vpr@6.1)); List(Parse error: Another macro named 'P' already exists at 0167-1.vpr@4.1 (0167-1.vpr@6.1)))
../../src/test/resources/frontend-generated/all/issues/silver/0167-2.vpr,1,0,0,0,0,1,1,Vector(List(Parse error: The macro name 'x' has already been used by another identifier (0167-2.vpr@9.1)); List(Parse error: The macro name 'x' has already been used by another identifier (0167-2.vpr@9.1)); List(Parse error: The macro name 'x' has already been used by another identifier (0167-2.vpr@9.1)); List(Parse error: The macro name 'x' has already been used by another identifier (0167-2.vpr@9.1)); List(Parse error: The macro name 'x' has already been used by another identifier (0167-2.vpr@9.1)))
../../src/test/resources/frontend-generated/all/issues/silver/0168.vpr,0,1489,41,2,1431,1513,1524,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0168_lib.vpr,0,1417,101,7,1334,1359,1560,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0170.vpr,0,1530,64,4,1445,1545,1602,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0172.vpr,0,1626,88,5,1510,1644,1724,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0174.vpr,1,1,0,0,1,1,2,Vector(List(Consistency error: Axioms can never contain location accesses. (0174.vpr@9.5)); List(Consistency error: Axioms can never contain location accesses. (0174.vpr@9.5)); List(Consistency error: Axioms can never contain location accesses. (0174.vpr@9.5)); List(Consistency error: Axioms can never contain location accesses. (0174.vpr@9.5)); List(Consistency error: Axioms can never contain location accesses. (0174.vpr@9.5)))
../../src/test/resources/frontend-generated/all/issues/silver/0175.vpr,1,6967,49,0,6915,6953,7033,Vector(List([not.wellformed:seq.index.length] Contract might not be well-formed. Index j into xs might exceed sequence length. (0175.vpr@9.13)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index j into xs might exceed sequence length. (0175.vpr@9.13)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index j into xs might exceed sequence length. (0175.vpr@9.13)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index j into xs might exceed sequence length. (0175.vpr@9.13)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index j into xs might exceed sequence length. (0175.vpr@9.13)))
../../src/test/resources/frontend-generated/all/issues/silver/0175b.vpr,2,5,0,0,5,5,5,Vector(List(Consistency error: Nested quantifiers are not allowed for quantified permissions. (0175b.vpr@8.30); Consistency error: (x in xs) && (forall i: Int :: (i in [0..|ys|)) ==> acc(ys[i].f; write)) is non pure and appears where only pure expressions are allowed. (0175b.vpr@8.30)); List(Consistency error: Nested quantifiers are not allowed for quantified permissions. (0175b.vpr@8.30); Consistency error: (x in xs) && (forall i: Int :: (i in [0..|ys|)) ==> acc(ys[i].f; write)) is non pure and appears where only pure expressions are allowed. (0175b.vpr@8.30)); List(Consistency error: Nested quantifiers are not allowed for quantified permissions. (0175b.vpr@8.30); Consistency error: (x in xs) && (forall i: Int :: (i in [0..|ys|)) ==> acc(ys[i].f; write)) is non pure and appears where only pure expressions are allowed. (0175b.vpr@8.30)); List(Consistency error: Nested quantifiers are not allowed for quantified permissions. (0175b.vpr@8.30); Consistency error: (x in xs) && (forall i: Int :: (i in [0..|ys|)) ==> acc(ys[i].f; write)) is non pure and appears where only pure expressions are allowed. (0175b.vpr@8.30)); List(Consistency error: Nested quantifiers are not allowed for quantified permissions. (0175b.vpr@8.30); Consistency error: (x in xs) && (forall i: Int :: (i in [0..|ys|)) ==> acc(ys[i].f; write)) is non pure and appears where only pure expressions are allowed. (0175b.vpr@8.30)))
../../src/test/resources/frontend-generated/all/issues/silver/0176.vpr,0,1430,129,9,1330,1348,1614,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0177-1.vpr,0,1472,28,1,1433,1482,1501,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0177-2.vpr,1,0,0,0,0,1,1,Vector(List(Parse error: The only calls that can be on the left-hand side of an assignment statement are calls to macros (0177-2.vpr@12.5)); List(Parse error: The only calls that can be on the left-hand side of an assignment statement are calls to macros (0177-2.vpr@12.5)); List(Parse error: The only calls that can be on the left-hand side of an assignment statement are calls to macros (0177-2.vpr@12.5)); List(Parse error: The only calls that can be on the left-hand side of an assignment statement are calls to macros (0177-2.vpr@12.5)); List(Parse error: The only calls that can be on the left-hand side of an assignment statement are calls to macros (0177-2.vpr@12.5)))
../../src/test/resources/frontend-generated/all/issues/silver/0177-3.vpr,1,1,0,0,1,1,1,Vector(List(Parse error: The body of this macro is not a suitable left-hand side for an assignment statement (0177-3.vpr@9.5)); List(Parse error: The body of this macro is not a suitable left-hand side for an assignment statement (0177-3.vpr@9.5)); List(Parse error: The body of this macro is not a suitable left-hand side for an assignment statement (0177-3.vpr@9.5)); List(Parse error: The body of this macro is not a suitable left-hand side for an assignment statement (0177-3.vpr@9.5)); List(Parse error: The body of this macro is not a suitable left-hand side for an assignment statement (0177-3.vpr@9.5)))
../../src/test/resources/frontend-generated/all/issues/silver/0178-1.vpr,1,2,0,0,2,2,2,Vector(List(identifier loc not defined. (0178-1.vpr@17.3)); List(identifier loc not defined. (0178-1.vpr@17.3)); List(identifier loc not defined. (0178-1.vpr@17.3)); List(identifier loc not defined. (0178-1.vpr@17.3)); List(identifier loc not defined. (0178-1.vpr@17.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0178-2.vpr,1,1441,40,2,1406,1420,1497,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.storedInt. (0178-2.vpr@17.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.storedInt. (0178-2.vpr@17.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.storedInt. (0178-2.vpr@17.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.storedInt. (0178-2.vpr@17.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.storedInt. (0178-2.vpr@17.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0178-3.vpr,1,2,0,0,2,2,2,Vector(List(Type error in the expression at 0178-3.vpr@[17.3-17.11] (0178-3.vpr@17.3)); List(Type error in the expression at 0178-3.vpr@[17.3-17.11] (0178-3.vpr@17.3)); List(Type error in the expression at 0178-3.vpr@[17.3-17.11] (0178-3.vpr@17.3)); List(Type error in the expression at 0178-3.vpr@[17.3-17.11] (0178-3.vpr@17.3)); List(Type error in the expression at 0178-3.vpr@[17.3-17.11] (0178-3.vpr@17.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0179.vpr,0,1495,78,5,1387,1529,1571,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0180.vpr,1,2,0,0,2,2,2,Vector(List(Consistency error: No matching identifier tst found of type Label. (0180.vpr@9.15)); List(Consistency error: No matching identifier tst found of type Label. (0180.vpr@9.15)); List(Consistency error: No matching identifier tst found of type Label. (0180.vpr@9.15)); List(Consistency error: No matching identifier tst found of type Label. (0180.vpr@9.15)); List(Consistency error: No matching identifier tst found of type Label. (0180.vpr@9.15)))
../../src/test/resources/frontend-generated/all/issues/silver/0182.vpr,2,4,0,0,4,4,4,Vector(List(Type error in the expression at 0182.vpr@[20.25-20.31] (0182.vpr@20.25); Type error in the expression at 0182.vpr@[29.28-29.37] (0182.vpr@29.28)); List(Type error in the expression at 0182.vpr@[20.25-20.31] (0182.vpr@20.25); Type error in the expression at 0182.vpr@[29.28-29.37] (0182.vpr@29.28)); List(Type error in the expression at 0182.vpr@[20.25-20.31] (0182.vpr@20.25); Type error in the expression at 0182.vpr@[29.28-29.37] (0182.vpr@29.28)); List(Type error in the expression at 0182.vpr@[20.25-20.31] (0182.vpr@20.25); Type error in the expression at 0182.vpr@[29.28-29.37] (0182.vpr@29.28)); List(Type error in the expression at 0182.vpr@[20.25-20.31] (0182.vpr@20.25); Type error in the expression at 0182.vpr@[29.28-29.37] (0182.vpr@29.28)))
../../src/test/resources/frontend-generated/all/issues/silver/0183-1.vpr,1,2,0,0,2,2,2,Vector(List(Parse error: Expected found ". // misplaced dot\n "; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 183     . // misplaced dot     ^ (0183-1.vpr@9.5)); List(Parse error: Expected found ". // misplaced dot\n "; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 183     . // misplaced dot     ^ (0183-1.vpr@9.5)); List(Parse error: Expected found ". // misplaced dot\n "; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 183     . // misplaced dot     ^ (0183-1.vpr@9.5)); List(Parse error: Expected found ". // misplaced dot\n "; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 183     . // misplaced dot     ^ (0183-1.vpr@9.5)); List(Parse error: Expected found ". // misplaced dot\n "; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 183     . // misplaced dot     ^ (0183-1.vpr@9.5)))
../../src/test/resources/frontend-generated/all/issues/silver/0183-2.vpr,1,6,0,0,6,6,6,Vector(List(Parse error: Expected found "... // allocate new "; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 1018     ... // allocate new      ^ (0183-2.vpr@43.5)); List(Parse error: Expected found "... // allocate new "; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 1018     ... // allocate new      ^ (0183-2.vpr@43.5)); List(Parse error: Expected found "... // allocate new "; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 1018     ... // allocate new      ^ (0183-2.vpr@43.5)); List(Parse error: Expected found "... // allocate new "; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 1018     ... // allocate new      ^ (0183-2.vpr@43.5)); List(Parse error: Expected found "... // allocate new "; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 1018     ... // allocate new      ^ (0183-2.vpr@43.5)))
../../src/test/resources/frontend-generated/all/issues/silver/0189.vpr,1,1446,32,2,1420,1427,1493,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion otherDummy(5) might not hold. (0189.vpr@10.9)); List([assert.failed:assertion.false] Assert might fail. Assertion otherDummy(5) might not hold. (0189.vpr@10.9)); List([assert.failed:assertion.false] Assert might fail. Assertion otherDummy(5) might not hold. (0189.vpr@10.9)); List([assert.failed:assertion.false] Assert might fail. Assertion otherDummy(5) might not hold. (0189.vpr@10.9)); List([assert.failed:assertion.false] Assert might fail. Assertion otherDummy(5) might not hold. (0189.vpr@10.9)))
../../src/test/resources/frontend-generated/all/issues/silver/0190.vpr,0,1475,69,4,1378,1509,1538,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0192.vpr,1,2,0,0,2,2,2,Vector(List(Consistency error: Targets are not allowed to have duplicates (0192.vpr@14.5)); List(Consistency error: Targets are not allowed to have duplicates (0192.vpr@14.5)); List(Consistency error: Targets are not allowed to have duplicates (0192.vpr@14.5)); List(Consistency error: Targets are not allowed to have duplicates (0192.vpr@14.5)); List(Consistency error: Targets are not allowed to have duplicates (0192.vpr@14.5)))
../../src/test/resources/frontend-generated/all/issues/silver/0193.vpr,0,1413,72,5,1311,1462,1466,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0198.vpr,3,6,0,0,6,6,6,Vector(List(Type error in the expression at 0198.vpr@[26.30-26.39] (0198.vpr@26.30); Type error in the expression at 0198.vpr@[26.41-26.50] (0198.vpr@26.41); Type error in the expression at 0198.vpr@[26.65-26.69] (0198.vpr@26.65)); List(Type error in the expression at 0198.vpr@[26.30-26.39] (0198.vpr@26.30); Type error in the expression at 0198.vpr@[26.41-26.50] (0198.vpr@26.41); Type error in the expression at 0198.vpr@[26.65-26.69] (0198.vpr@26.65)); List(Type error in the expression at 0198.vpr@[26.30-26.39] (0198.vpr@26.30); Type error in the expression at 0198.vpr@[26.41-26.50] (0198.vpr@26.41); Type error in the expression at 0198.vpr@[26.65-26.69] (0198.vpr@26.65)); List(Type error in the expression at 0198.vpr@[26.30-26.39] (0198.vpr@26.30); Type error in the expression at 0198.vpr@[26.41-26.50] (0198.vpr@26.41); Type error in the expression at 0198.vpr@[26.65-26.69] (0198.vpr@26.65)); List(Type error in the expression at 0198.vpr@[26.30-26.39] (0198.vpr@26.30); Type error in the expression at 0198.vpr@[26.41-26.50] (0198.vpr@26.41); Type error in the expression at 0198.vpr@[26.65-26.69] (0198.vpr@26.65)))
../../src/test/resources/frontend-generated/all/issues/silver/0200.vpr,4,3,0,0,3,3,3,Vector(List(specified location is not a field nor a predicate (0200.vpr@14.25); specified location is not a field nor a predicate (0200.vpr@25.16); specified location is not a field nor a predicate (0200.vpr@35.18); specified location is not a field nor a predicate (0200.vpr@48.18)); List(specified location is not a field nor a predicate (0200.vpr@14.25); specified location is not a field nor a predicate (0200.vpr@25.16); specified location is not a field nor a predicate (0200.vpr@35.18); specified location is not a field nor a predicate (0200.vpr@48.18)); List(specified location is not a field nor a predicate (0200.vpr@14.25); specified location is not a field nor a predicate (0200.vpr@25.16); specified location is not a field nor a predicate (0200.vpr@35.18); specified location is not a field nor a predicate (0200.vpr@48.18)); List(specified location is not a field nor a predicate (0200.vpr@14.25); specified location is not a field nor a predicate (0200.vpr@25.16); specified location is not a field nor a predicate (0200.vpr@35.18); specified location is not a field nor a predicate (0200.vpr@48.18)); List(specified location is not a field nor a predicate (0200.vpr@14.25); specified location is not a field nor a predicate (0200.vpr@25.16); specified location is not a field nor a predicate (0200.vpr@35.18); specified location is not a field nor a predicate (0200.vpr@48.18)))
../../src/test/resources/frontend-generated/all/issues/silver/0201.vpr,4,2,0,0,2,2,3,Vector(List(Consistency error: No matching identifier l found of type Label. (0201.vpr@6.16); Consistency error: No matching identifier l found of type Label. (0201.vpr@8.15); Consistency error: Labelled-old expressions are not allowed in preconditions. (0201.vpr@6.13); Consistency error: Labelled-old expressions are not allowed in postconditions. (0201.vpr@8.12)); List(Consistency error: No matching identifier l found of type Label. (0201.vpr@6.16); Consistency error: No matching identifier l found of type Label. (0201.vpr@8.15); Consistency error: Labelled-old expressions are not allowed in preconditions. (0201.vpr@6.13); Consistency error: Labelled-old expressions are not allowed in postconditions. (0201.vpr@8.12)); List(Consistency error: No matching identifier l found of type Label. (0201.vpr@6.16); Consistency error: No matching identifier l found of type Label. (0201.vpr@8.15); Consistency error: Labelled-old expressions are not allowed in preconditions. (0201.vpr@6.13); Consistency error: Labelled-old expressions are not allowed in postconditions. (0201.vpr@8.12)); List(Consistency error: No matching identifier l found of type Label. (0201.vpr@6.16); Consistency error: No matching identifier l found of type Label. (0201.vpr@8.15); Consistency error: Labelled-old expressions are not allowed in preconditions. (0201.vpr@6.13); Consistency error: Labelled-old expressions are not allowed in postconditions. (0201.vpr@8.12)); List(Consistency error: No matching identifier l found of type Label. (0201.vpr@6.16); Consistency error: No matching identifier l found of type Label. (0201.vpr@8.15); Consistency error: Labelled-old expressions are not allowed in preconditions. (0201.vpr@6.13); Consistency error: Labelled-old expressions are not allowed in postconditions. (0201.vpr@8.12)))
../../src/test/resources/frontend-generated/all/issues/silver/0202.vpr,1,1,0,0,1,1,1,Vector(List({ i + 1 } is not a valid Trigger (0202.vpr@7.28)); List({ i + 1 } is not a valid Trigger (0202.vpr@7.28)); List({ i + 1 } is not a valid Trigger (0202.vpr@7.28)); List({ i + 1 } is not a valid Trigger (0202.vpr@7.28)); List({ i + 1 } is not a valid Trigger (0202.vpr@7.28)))
../../src/test/resources/frontend-generated/all/issues/silver/0204.vpr,3,1988,11,0,1978,1983,2004,Vector(List([exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@54.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@63.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@71.3)); List([exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@54.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@63.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@71.3)); List([exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@54.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@63.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@71.3)); List([exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@54.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@63.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@71.3)); List([exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@54.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@63.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@71.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0205.vpr,1,1411,62,4,1365,1368,1500,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0205.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0205.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0205.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0205.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0205.vpr@14.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0207.vpr,0,1604,78,4,1495,1639,1678,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0208.vpr,1,1588,71,4,1490,1617,1659,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forall i$0: Int :: { foo(i; i$0) } foo(i; i$0)) might not hold. (0208.vpr@25.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i$0: Int :: { foo(i; i$0) } foo(i; i$0)) might not hold. (0208.vpr@25.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i$0: Int :: { foo(i; i$0) } foo(i; i$0)) might not hold. (0208.vpr@25.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i$0: Int :: { foo(i; i$0) } foo(i; i$0)) might not hold. (0208.vpr@25.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i$0: Int :: { foo(i; i$0) } foo(i; i$0)) might not hold. (0208.vpr@25.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0209.vpr,0,1460,19,1,1436,1463,1483,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0210.vpr,1,1463,60,4,1390,1462,1538,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { f(i) } f(i)) might not hold. (0210.vpr@13.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { f(i) } f(i)) might not hold. (0210.vpr@13.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { f(i) } f(i)) might not hold. (0210.vpr@13.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { f(i) } f(i)) might not hold. (0210.vpr@13.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { f(i) } f(i)) might not hold. (0210.vpr@13.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0211.vpr,1,1509,106,7,1402,1471,1654,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion 1 / 2 * (2 / 1) == 0 / 1 might not hold. (0211.vpr@20.5)); List([assert.failed:assertion.false] Assert might fail. Assertion 1 / 2 * (2 / 1) == 0 / 1 might not hold. (0211.vpr@20.5)); List([assert.failed:assertion.false] Assert might fail. Assertion 1 / 2 * (2 / 1) == 0 / 1 might not hold. (0211.vpr@20.5)); List([assert.failed:assertion.false] Assert might fail. Assertion 1 / 2 * (2 / 1) == 0 / 1 might not hold. (0211.vpr@20.5)); List([assert.failed:assertion.false] Assert might fail. Assertion 1 / 2 * (2 / 1) == 0 / 1 might not hold. (0211.vpr@20.5)))
../../src/test/resources/frontend-generated/all/issues/silver/0212.vpr,0,1646,95,5,1548,1617,1775,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0213a.vpr,1,1,0,0,1,2,2,Vector(List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: viper.silver.parser.PBinExp@7244827e (0213a.vpr@16.32)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: viper.silver.parser.PBinExp@7244827e (0213a.vpr@16.32)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: viper.silver.parser.PBinExp@7244827e (0213a.vpr@16.32)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: viper.silver.parser.PBinExp@7244827e (0213a.vpr@16.32)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: viper.silver.parser.PBinExp@7244827e (0213a.vpr@16.32)))
../../src/test/resources/frontend-generated/all/issues/silver/0213b.vpr,1,1,0,0,1,2,2,Vector(List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213b.vpr@16.15)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213b.vpr@16.15)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213b.vpr@16.15)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213b.vpr@16.15)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213b.vpr@16.15)))
../../src/test/resources/frontend-generated/all/issues/silver/0213c.vpr,1,1,0,0,1,1,1,Vector(List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213c.vpr@9.15)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213c.vpr@9.15)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213c.vpr@9.15)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213c.vpr@9.15)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213c.vpr@9.15)))
../../src/test/resources/frontend-generated/all/issues/silver/0213d.vpr,1,1,0,0,1,2,2,Vector(List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213d.vpr@16.14)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213d.vpr@16.14)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213d.vpr@16.14)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213d.vpr@16.14)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213d.vpr@16.14)))
../../src/test/resources/frontend-generated/all/issues/silver/0214.vpr,0,1553,58,3,1474,1570,1615,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0215-1.vpr,1,0,0,0,0,1,1,Vector(List(Parse error: Macros cannot be defined inside magic wands proof scripts (0215-1.vpr@8.5)); List(Parse error: Macros cannot be defined inside magic wands proof scripts (0215-1.vpr@8.5)); List(Parse error: Macros cannot be defined inside magic wands proof scripts (0215-1.vpr@8.5)); List(Parse error: Macros cannot be defined inside magic wands proof scripts (0215-1.vpr@8.5)); List(Parse error: Macros cannot be defined inside magic wands proof scripts (0215-1.vpr@8.5)))
../../src/test/resources/frontend-generated/all/issues/silver/0215-2.vpr,1,2,0,0,2,2,2,Vector(List(Parse error: Macros cannot be defined inside magic wands proof scripts (0215-2.vpr@25.9)); List(Parse error: Macros cannot be defined inside magic wands proof scripts (0215-2.vpr@25.9)); List(Parse error: Macros cannot be defined inside magic wands proof scripts (0215-2.vpr@25.9)); List(Parse error: Macros cannot be defined inside magic wands proof scripts (0215-2.vpr@25.9)); List(Parse error: Macros cannot be defined inside magic wands proof scripts (0215-2.vpr@25.9)))
../../src/test/resources/frontend-generated/all/issues/silver/0217.vpr,1,1,0,0,1,1,1,Vector(List(Parse error: Number of macro arguments does not match (0217.vpr@10.10)); List(Parse error: Number of macro arguments does not match (0217.vpr@10.10)); List(Parse error: Number of macro arguments does not match (0217.vpr@10.10)); List(Parse error: Number of macro arguments does not match (0217.vpr@10.10)); List(Parse error: Number of macro arguments does not match (0217.vpr@10.10)))
../../src/test/resources/frontend-generated/all/issues/silver/0218a.vpr,1,1,0,0,1,1,1,Vector(List(Parse error: Recursive macro declaration found: P (0218a.vpr@7.1)); List(Parse error: Recursive macro declaration found: P (0218a.vpr@7.1)); List(Parse error: Recursive macro declaration found: P (0218a.vpr@7.1)); List(Parse error: Recursive macro declaration found: P (0218a.vpr@7.1)); List(Parse error: Recursive macro declaration found: P (0218a.vpr@7.1)))
../../src/test/resources/frontend-generated/all/issues/silver/0218b.vpr,1,0,0,0,0,1,1,Vector(List(Parse error: Recursive macro declaration found: P (0218b.vpr@6.1)); List(Parse error: Recursive macro declaration found: P (0218b.vpr@6.1)); List(Parse error: Recursive macro declaration found: P (0218b.vpr@6.1)); List(Parse error: Recursive macro declaration found: P (0218b.vpr@6.1)); List(Parse error: Recursive macro declaration found: P (0218b.vpr@6.1)))
../../src/test/resources/frontend-generated/all/issues/silver/0219.vpr,1,1,0,0,1,1,1,Vector(List(Parse error: Macro expansion would result in invalid code (encountered ParseTreeDuplicationError:) Cannot duplicate PCall(PIdnUse(check);ArrayBuffer(PIdnUse(x));None) with new children List(PBoolLit(true); ArrayBuffer(PIdnUse(x)); None) (0219.vpr@9.11)); List(Parse error: Macro expansion would result in invalid code (encountered ParseTreeDuplicationError:) Cannot duplicate PCall(PIdnUse(check);ArrayBuffer(PIdnUse(x));None) with new children List(PBoolLit(true); ArrayBuffer(PIdnUse(x)); None) (0219.vpr@9.11)); List(Parse error: Macro expansion would result in invalid code (encountered ParseTreeDuplicationError:) Cannot duplicate PCall(PIdnUse(check);ArrayBuffer(PIdnUse(x));None) with new children List(PBoolLit(true); ArrayBuffer(PIdnUse(x)); None) (0219.vpr@9.11)); List(Parse error: Macro expansion would result in invalid code (encountered ParseTreeDuplicationError:) Cannot duplicate PCall(PIdnUse(check);ArrayBuffer(PIdnUse(x));None) with new children List(PBoolLit(true); ArrayBuffer(PIdnUse(x)); None) (0219.vpr@9.11)); List(Parse error: Macro expansion would result in invalid code (encountered ParseTreeDuplicationError:) Cannot duplicate PCall(PIdnUse(check);ArrayBuffer(PIdnUse(x));None) with new children List(PBoolLit(true); ArrayBuffer(PIdnUse(x)); None) (0219.vpr@9.11)))
../../src/test/resources/frontend-generated/all/issues/silver/0222.vpr,2,1580,35,2,1539,1575,1626,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0222.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0222.vpr@23.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0222.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0222.vpr@23.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0222.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0222.vpr@23.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0222.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0222.vpr@23.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0222.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0222.vpr@23.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0226.vpr,0,1583,89,5,1457,1638,1656,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0227.vpr,0,1457,68,4,1401,1418,1554,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0230.vpr,0,1573,59,3,1521,1542,1656,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0233.vpr,0,1472,66,4,1378,1518,1522,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0235-1.vpr,1,2,0,0,2,2,2,Vector(List(Parse error: Expected found ":= 1 0\n}\n\n"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 176     var x: Int := 1 0                ^ (0235-1.vpr@7.16)); List(Parse error: Expected found ":= 1 0\n}\n\n"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 176     var x: Int := 1 0                ^ (0235-1.vpr@7.16)); List(Parse error: Expected found ":= 1 0\n}\n\n"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 176     var x: Int := 1 0                ^ (0235-1.vpr@7.16)); List(Parse error: Expected found ":= 1 0\n}\n\n"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 176     var x: Int := 1 0                ^ (0235-1.vpr@7.16)); List(Parse error: Expected found ":= 1 0\n}\n\n"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 176     var x: Int := 1 0                ^ (0235-1.vpr@7.16)))
../../src/test/resources/frontend-generated/all/issues/silver/0235-2.vpr,1,1,0,0,1,2,2,Vector(List(Parse error: Expected found ":= 1    0\n}\n"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 176     var x: Int := 1    0                ^ (0235-2.vpr@7.16)); List(Parse error: Expected found ":= 1    0\n}\n"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 176     var x: Int := 1    0                ^ (0235-2.vpr@7.16)); List(Parse error: Expected found ":= 1    0\n}\n"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 176     var x: Int := 1    0                ^ (0235-2.vpr@7.16)); List(Parse error: Expected found ":= 1    0\n}\n"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 176     var x: Int := 1    0                ^ (0235-2.vpr@7.16)); List(Parse error: Expected found ":= 1    0\n}\n"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 176     var x: Int := 1    0                ^ (0235-2.vpr@7.16)))
../../src/test/resources/frontend-generated/all/issues/silver/0235-3.vpr,0,1490,62,4,1403,1530,1539,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0238.vpr,10,6,0,0,6,6,6,Vector(List(q1 is not a domain function (0238.vpr@8.22); p1 is not a domain function (0238.vpr@8.32); q2 is not a domain function (0238.vpr@19.23); p2 is not a domain function (0238.vpr@19.33); g3 is not a domain function (0238.vpr@30.5); g4 is not a domain function (0238.vpr@43.5); g7 is not a domain function (0238.vpr@69.24); Type error in the expression at 0238.vpr@[69.24-69.29] (0238.vpr@69.24); q8 is not a domain function (0238.vpr@79.22); p8 is not a domain function (0238.vpr@79.32)); List(q1 is not a domain function (0238.vpr@8.22); p1 is not a domain function (0238.vpr@8.32); q2 is not a domain function (0238.vpr@19.23); p2 is not a domain function (0238.vpr@19.33); g3 is not a domain function (0238.vpr@30.5); g4 is not a domain function (0238.vpr@43.5); g7 is not a domain function (0238.vpr@69.24); Type error in the expression at 0238.vpr@[69.24-69.29] (0238.vpr@69.24); q8 is not a domain function (0238.vpr@79.22); p8 is not a domain function (0238.vpr@79.32)); List(q1 is not a domain function (0238.vpr@8.22); p1 is not a domain function (0238.vpr@8.32); q2 is not a domain function (0238.vpr@19.23); p2 is not a domain function (0238.vpr@19.33); g3 is not a domain function (0238.vpr@30.5); g4 is not a domain function (0238.vpr@43.5); g7 is not a domain function (0238.vpr@69.24); Type error in the expression at 0238.vpr@[69.24-69.29] (0238.vpr@69.24); q8 is not a domain function (0238.vpr@79.22); p8 is not a domain function (0238.vpr@79.32)); List(q1 is not a domain function (0238.vpr@8.22); p1 is not a domain function (0238.vpr@8.32); q2 is not a domain function (0238.vpr@19.23); p2 is not a domain function (0238.vpr@19.33); g3 is not a domain function (0238.vpr@30.5); g4 is not a domain function (0238.vpr@43.5); g7 is not a domain function (0238.vpr@69.24); Type error in the expression at 0238.vpr@[69.24-69.29] (0238.vpr@69.24); q8 is not a domain function (0238.vpr@79.22); p8 is not a domain function (0238.vpr@79.32)); List(q1 is not a domain function (0238.vpr@8.22); p1 is not a domain function (0238.vpr@8.32); q2 is not a domain function (0238.vpr@19.23); p2 is not a domain function (0238.vpr@19.33); g3 is not a domain function (0238.vpr@30.5); g4 is not a domain function (0238.vpr@43.5); g7 is not a domain function (0238.vpr@69.24); Type error in the expression at 0238.vpr@[69.24-69.29] (0238.vpr@69.24); q8 is not a domain function (0238.vpr@79.22); p8 is not a domain function (0238.vpr@79.32)))
../../src/test/resources/frontend-generated/all/issues/silver/0239-1.vpr,1,1506,42,2,1460,1498,1562,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion 0 <= i + 3 might not hold. (0239-1.vpr@12.5)); List([assert.failed:assertion.false] Assert might fail. Assertion 0 <= i + 3 might not hold. (0239-1.vpr@12.5)); List([assert.failed:assertion.false] Assert might fail. Assertion 0 <= i + 3 might not hold. (0239-1.vpr@12.5)); List([assert.failed:assertion.false] Assert might fail. Assertion 0 <= i + 3 might not hold. (0239-1.vpr@12.5)); List([assert.failed:assertion.false] Assert might fail. Assertion 0 <= i + 3 might not hold. (0239-1.vpr@12.5)))
../../src/test/resources/frontend-generated/all/issues/silver/0239-2.vpr,1,1443,76,5,1362,1423,1545,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion 0 <= i + 3 might not hold. (0239-2.vpr@12.5)); List([assert.failed:assertion.false] Assert might fail. Assertion 0 <= i + 3 might not hold. (0239-2.vpr@12.5)); List([assert.failed:assertion.false] Assert might fail. Assertion 0 <= i + 3 might not hold. (0239-2.vpr@12.5)); List([assert.failed:assertion.false] Assert might fail. Assertion 0 <= i + 3 might not hold. (0239-2.vpr@12.5)); List([assert.failed:assertion.false] Assert might fail. Assertion 0 <= i + 3 might not hold. (0239-2.vpr@12.5)))
../../src/test/resources/frontend-generated/all/issues/silver/0239-3.vpr,1,1771,34,1,1724,1784,1805,Vector(List([assert.failed:seq.index.length] Assert might fail. Index i into array might exceed sequence length. (0239-3.vpr@22.5)); List([assert.failed:seq.index.length] Assert might fail. Index i into array might exceed sequence length. (0239-3.vpr@22.5)); List([assert.failed:seq.index.length] Assert might fail. Index i into array might exceed sequence length. (0239-3.vpr@22.5)); List([assert.failed:seq.index.length] Assert might fail. Index i into array might exceed sequence length. (0239-3.vpr@22.5)); List([assert.failed:seq.index.length] Assert might fail. Index i into array might exceed sequence length. (0239-3.vpr@22.5)))
../../src/test/resources/frontend-generated/all/issues/silver/0247.vpr,2,1,0,0,1,1,1,Vector(List(expected a field as argument (0247.vpr@5.3); expected a field as argument (0247.vpr@8.3)); List(expected a field as argument (0247.vpr@5.3); expected a field as argument (0247.vpr@8.3)); List(expected a field as argument (0247.vpr@5.3); expected a field as argument (0247.vpr@8.3)); List(expected a field as argument (0247.vpr@5.3); expected a field as argument (0247.vpr@8.3)); List(expected a field as argument (0247.vpr@5.3); expected a field as argument (0247.vpr@8.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0251.vpr,0,1520,41,2,1478,1506,1577,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0257.vpr,1,1509,51,3,1437,1533,1557,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion !x ==> y != 123 might not hold. (0257.vpr@30.3)); List([assert.failed:assertion.false] Assert might fail. Assertion !x ==> y != 123 might not hold. (0257.vpr@30.3)); List([assert.failed:assertion.false] Assert might fail. Assertion !x ==> y != 123 might not hold. (0257.vpr@30.3)); List([assert.failed:assertion.false] Assert might fail. Assertion !x ==> y != 123 might not hold. (0257.vpr@30.3)); List([assert.failed:assertion.false] Assert might fail. Assertion !x ==> y != 123 might not hold. (0257.vpr@30.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0258.vpr,1,1420,25,1,1386,1429,1446,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0258.vpr@20.1)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0258.vpr@20.1)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0258.vpr@20.1)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0258.vpr@20.1)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0258.vpr@20.1)))
../../src/test/resources/frontend-generated/all/issues/silver/0260.vpr,0,1512,61,4,1441,1504,1592,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0266-2.vpr,1,0,0,0,0,1,1,Vector(List(Parse error: file "/home/mauro/desktop/viper/silicon/src/test/resources/frontend-generated/all/issues/silver/doesnotexist.vpr" does not exist (0266-2.vpr@6.8)); List(Parse error: file "/home/mauro/desktop/viper/silicon/src/test/resources/frontend-generated/all/issues/silver/doesnotexist.vpr" does not exist (0266-2.vpr@6.8)); List(Parse error: file "/home/mauro/desktop/viper/silicon/src/test/resources/frontend-generated/all/issues/silver/doesnotexist.vpr" does not exist (0266-2.vpr@6.8)); List(Parse error: file "/home/mauro/desktop/viper/silicon/src/test/resources/frontend-generated/all/issues/silver/doesnotexist.vpr" does not exist (0266-2.vpr@6.8)); List(Parse error: file "/home/mauro/desktop/viper/silicon/src/test/resources/frontend-generated/all/issues/silver/doesnotexist.vpr" does not exist (0266-2.vpr@6.8)))
../../src/test/resources/frontend-generated/all/issues/silver/0271-1.vpr,1,1,0,0,1,2,2,Vector(List(Parse error: Expected found ":= - 1 // No whitesp"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 168   var i: Int := - 1 // No whitesp              ^ (0271-1.vpr@7.14)); List(Parse error: Expected found ":= - 1 // No whitesp"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 168   var i: Int := - 1 // No whitesp              ^ (0271-1.vpr@7.14)); List(Parse error: Expected found ":= - 1 // No whitesp"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 168   var i: Int := - 1 // No whitesp              ^ (0271-1.vpr@7.14)); List(Parse error: Expected found ":= - 1 // No whitesp"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 168   var i: Int := - 1 // No whitesp              ^ (0271-1.vpr@7.14)); List(Parse error: Expected found ":= - 1 // No whitesp"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 168   var i: Int := - 1 // No whitesp              ^ (0271-1.vpr@7.14)))
../../src/test/resources/frontend-generated/all/issues/silver/0271-2.vpr,1,1,0,0,1,1,2,Vector(List(Parse error: Expected found ":= ! true // No whit"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 169   var b: Bool := ! true // No whit               ^ (0271-2.vpr@7.15)); List(Parse error: Expected found ":= ! true // No whit"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 169   var b: Bool := ! true // No whit               ^ (0271-2.vpr@7.15)); List(Parse error: Expected found ":= ! true // No whit"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 169   var b: Bool := ! true // No whit               ^ (0271-2.vpr@7.15)); List(Parse error: Expected found ":= ! true // No whit"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 169   var b: Bool := ! true // No whit               ^ (0271-2.vpr@7.15)); List(Parse error: Expected found ":= ! true // No whit"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 169   var b: Bool := ! true // No whit               ^ (0271-2.vpr@7.15)))
../../src/test/resources/frontend-generated/all/issues/silver/0274.vpr,0,1437,65,4,1354,1442,1515,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0464.vpr,0,1609,71,4,1542,1578,1709,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0465.vpr,0,1927,5,0,1922,1924,1935,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0466.vpr,0,1754,90,5,1633,1778,1851,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0467.vpr,0,1431,93,6,1310,1445,1539,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0468.vpr,0,1751,57,3,1670,1783,1800,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0469.vpr,1,6,0,0,6,6,7,Vector(List(Consistency error: acc(x.b; write) && x.b is non pure and appears where only pure expressions are allowed. (0469.vpr@10.13)); List(Consistency error: acc(x.b; write) && x.b is non pure and appears where only pure expressions are allowed. (0469.vpr@10.13)); List(Consistency error: acc(x.b; write) && x.b is non pure and appears where only pure expressions are allowed. (0469.vpr@10.13)); List(Consistency error: acc(x.b; write) && x.b is non pure and appears where only pure expressions are allowed. (0469.vpr@10.13)); List(Consistency error: acc(x.b; write) && x.b is non pure and appears where only pure expressions are allowed. (0469.vpr@10.13)))
../../src/test/resources/frontend-generated/all/issues/silver/79.vpr,0,1456,85,5,1342,1481,1546,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/macros/capture_avoiding_substitution-1.vpr,1,5,0,0,5,5,5,Vector(List(Type error in the expression at capture_avoiding_substitution-1.vpr@[41.12-41.24] (capture_avoiding_substitution-1.vpr@41.12)); List(Type error in the expression at capture_avoiding_substitution-1.vpr@[41.12-41.24] (capture_avoiding_substitution-1.vpr@41.12)); List(Type error in the expression at capture_avoiding_substitution-1.vpr@[41.12-41.24] (capture_avoiding_substitution-1.vpr@41.12)); List(Type error in the expression at capture_avoiding_substitution-1.vpr@[41.12-41.24] (capture_avoiding_substitution-1.vpr@41.12)); List(Type error in the expression at capture_avoiding_substitution-1.vpr@[41.12-41.24] (capture_avoiding_substitution-1.vpr@41.12)))
../../src/test/resources/frontend-generated/all/macros/capture_avoiding_substitution-2.vpr,0,1527,33,2,1486,1528,1568,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/macros/capture_avoiding_substitution-3.vpr,0,1333,17,1,1309,1338,1352,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/macros/complex.vpr,1,2,0,0,2,2,2,Vector(List(Parse error: Recursive macro declaration found: macro2 (complex.vpr@10.1)); List(Parse error: Recursive macro declaration found: macro2 (complex.vpr@10.1)); List(Parse error: Recursive macro declaration found: macro2 (complex.vpr@10.1)); List(Parse error: Recursive macro declaration found: macro2 (complex.vpr@10.1)); List(Parse error: Recursive macro declaration found: macro2 (complex.vpr@10.1)))
../../src/test/resources/frontend-generated/all/macros/complexExp.vpr,1,1,0,0,1,1,1,Vector(List(Parse error: Recursive macro declaration found: macro (complexExp.vpr@5.1)); List(Parse error: Recursive macro declaration found: macro (complexExp.vpr@5.1)); List(Parse error: Recursive macro declaration found: macro (complexExp.vpr@5.1)); List(Parse error: Recursive macro declaration found: macro (complexExp.vpr@5.1)); List(Parse error: Recursive macro declaration found: macro (complexExp.vpr@5.1)))
../../src/test/resources/frontend-generated/all/macros/define.vpr,0,1599,87,5,1497,1589,1711,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/macros/define_consistency.vpr,2,2,0,0,2,2,2,Vector(List(identifier B not defined. (define_consistency.vpr@14.16); identifier foo not defined. (define_consistency.vpr@19.10)); List(identifier B not defined. (define_consistency.vpr@14.16); identifier foo not defined. (define_consistency.vpr@19.10)); List(identifier B not defined. (define_consistency.vpr@14.16); identifier foo not defined. (define_consistency.vpr@19.10)); List(identifier B not defined. (define_consistency.vpr@14.16); identifier foo not defined. (define_consistency.vpr@19.10)); List(identifier B not defined. (define_consistency.vpr@14.16); identifier foo not defined. (define_consistency.vpr@19.10)))
../../src/test/resources/frontend-generated/all/macros/define_consistency_typechecker.vpr,1,3,0,0,3,3,3,Vector(List(Type error in the expression at define_consistency_typechecker.vpr@[11.10-11.19] (define_consistency_typechecker.vpr@11.10)); List(Type error in the expression at define_consistency_typechecker.vpr@[11.10-11.19] (define_consistency_typechecker.vpr@11.10)); List(Type error in the expression at define_consistency_typechecker.vpr@[11.10-11.19] (define_consistency_typechecker.vpr@11.10)); List(Type error in the expression at define_consistency_typechecker.vpr@[11.10-11.19] (define_consistency_typechecker.vpr@11.10)); List(Type error in the expression at define_consistency_typechecker.vpr@[11.10-11.19] (define_consistency_typechecker.vpr@11.10)))
../../src/test/resources/frontend-generated/all/macros/define_nested.vpr,2,1420,82,5,1350,1375,1537,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (define_nested.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (define_nested.vpr@22.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (define_nested.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (define_nested.vpr@22.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (define_nested.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (define_nested.vpr@22.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (define_nested.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (define_nested.vpr@22.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (define_nested.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (define_nested.vpr@22.3)))
../../src/test/resources/frontend-generated/all/macros/simple.vpr,1,1,0,0,1,1,1,Vector(List(Parse error: Recursive macro declaration found: macro (simple.vpr@5.1)); List(Parse error: Recursive macro declaration found: macro (simple.vpr@5.1)); List(Parse error: Recursive macro declaration found: macro (simple.vpr@5.1)); List(Parse error: Recursive macro declaration found: macro (simple.vpr@5.1)); List(Parse error: Recursive macro declaration found: macro (simple.vpr@5.1)))
../../src/test/resources/frontend-generated/all/macros/simple2Broken.vpr,0,1470,18,1,1451,1466,1495,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/multisets/multisets.vpr,6,1626,86,5,1545,1589,1746,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion B1 == B2 might not hold. (multisets.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion ((x in B1)) > 0 might not hold. (multisets.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion ((x in B1)) > 0 might not hold. (multisets.vpr@55.3); [assert.failed:assertion.false] Assert might fail. Assertion |B1| == n might not hold. (multisets.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion |B1| <= 2 might not hold. (multisets.vpr@102.3); [assert.failed:assertion.false] Assert might fail. Assertion (A subset B) might not hold. (multisets.vpr@111.3)); List([assert.failed:assertion.false] Assert might fail. Assertion B1 == B2 might not hold. (multisets.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion ((x in B1)) > 0 might not hold. (multisets.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion ((x in B1)) > 0 might not hold. (multisets.vpr@55.3); [assert.failed:assertion.false] Assert might fail. Assertion |B1| == n might not hold. (multisets.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion |B1| <= 2 might not hold. (multisets.vpr@102.3); [assert.failed:assertion.false] Assert might fail. Assertion (A subset B) might not hold. (multisets.vpr@111.3)); List([assert.failed:assertion.false] Assert might fail. Assertion B1 == B2 might not hold. (multisets.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion ((x in B1)) > 0 might not hold. (multisets.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion ((x in B1)) > 0 might not hold. (multisets.vpr@55.3); [assert.failed:assertion.false] Assert might fail. Assertion |B1| == n might not hold. (multisets.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion |B1| <= 2 might not hold. (multisets.vpr@102.3); [assert.failed:assertion.false] Assert might fail. Assertion (A subset B) might not hold. (multisets.vpr@111.3)); List([assert.failed:assertion.false] Assert might fail. Assertion B1 == B2 might not hold. (multisets.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion ((x in B1)) > 0 might not hold. (multisets.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion ((x in B1)) > 0 might not hold. (multisets.vpr@55.3); [assert.failed:assertion.false] Assert might fail. Assertion |B1| == n might not hold. (multisets.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion |B1| <= 2 might not hold. (multisets.vpr@102.3); [assert.failed:assertion.false] Assert might fail. Assertion (A subset B) might not hold. (multisets.vpr@111.3)); List([assert.failed:assertion.false] Assert might fail. Assertion B1 == B2 might not hold. (multisets.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion ((x in B1)) > 0 might not hold. (multisets.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion ((x in B1)) > 0 might not hold. (multisets.vpr@55.3); [assert.failed:assertion.false] Assert might fail. Assertion |B1| == n might not hold. (multisets.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion |B1| <= 2 might not hold. (multisets.vpr@102.3); [assert.failed:assertion.false] Assert might fail. Assertion (A subset B) might not hold. (multisets.vpr@111.3)))
../../src/test/resources/frontend-generated/all/old/branching_labelled_old.vpr,2,1497,60,4,1433,1480,1579,Vector(List([assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state initial required to evaluate old[initial](m.f). (branching_labelled_old.vpr@23.3); [assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state initial required to evaluate old[initial](m.f). (branching_labelled_old.vpr@44.3)); List([assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state initial required to evaluate old[initial](m.f). (branching_labelled_old.vpr@23.3); [assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state initial required to evaluate old[initial](m.f). (branching_labelled_old.vpr@44.3)); List([assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state initial required to evaluate old[initial](m.f). (branching_labelled_old.vpr@23.3); [assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state initial required to evaluate old[initial](m.f). (branching_labelled_old.vpr@44.3)); List([assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state initial required to evaluate old[initial](m.f). (branching_labelled_old.vpr@23.3); [assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state initial required to evaluate old[initial](m.f). (branching_labelled_old.vpr@44.3)); List([assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state initial required to evaluate old[initial](m.f). (branching_labelled_old.vpr@23.3); [assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state initial required to evaluate old[initial](m.f). (branching_labelled_old.vpr@44.3)))
../../src/test/resources/frontend-generated/all/old/duplicate_label.vpr,1,3,0,0,3,3,3,Vector(List(Consistency error: Duplicate identifier initial found. (duplicate_label.vpr@18.1)); List(Consistency error: Duplicate identifier initial found. (duplicate_label.vpr@18.1)); List(Consistency error: Duplicate identifier initial found. (duplicate_label.vpr@18.1)); List(Consistency error: Duplicate identifier initial found. (duplicate_label.vpr@18.1)); List(Consistency error: Duplicate identifier initial found. (duplicate_label.vpr@18.1)))
../../src/test/resources/frontend-generated/all/old/labelled_old.vpr,4,1696,22,1,1669,1698,1723,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion old[initial](perm(m.tk)) == write might not hold. (labelled_old.vpr@36.3); [exhale.failed:assertion.false] Exhale might fail. Assertion old[initial](m.f) == 3 might not hold. (labelled_old.vpr@53.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access z.f. (labelled_old.vpr@67.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm z: Ref [z.f] :: z.f == old[first](z.f)) might not hold. (labelled_old.vpr@80.3)); List([assert.failed:assertion.false] Assert might fail. Assertion old[initial](perm(m.tk)) == write might not hold. (labelled_old.vpr@36.3); [exhale.failed:assertion.false] Exhale might fail. Assertion old[initial](m.f) == 3 might not hold. (labelled_old.vpr@53.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access z.f. (labelled_old.vpr@67.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm z: Ref [z.f] :: z.f == old[first](z.f)) might not hold. (labelled_old.vpr@80.3)); List([assert.failed:assertion.false] Assert might fail. Assertion old[initial](perm(m.tk)) == write might not hold. (labelled_old.vpr@36.3); [exhale.failed:assertion.false] Exhale might fail. Assertion old[initial](m.f) == 3 might not hold. (labelled_old.vpr@53.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access z.f. (labelled_old.vpr@67.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm z: Ref [z.f] :: z.f == old[first](z.f)) might not hold. (labelled_old.vpr@80.3)); List([assert.failed:assertion.false] Assert might fail. Assertion old[initial](perm(m.tk)) == write might not hold. (labelled_old.vpr@36.3); [exhale.failed:assertion.false] Exhale might fail. Assertion old[initial](m.f) == 3 might not hold. (labelled_old.vpr@53.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access z.f. (labelled_old.vpr@67.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm z: Ref [z.f] :: z.f == old[first](z.f)) might not hold. (labelled_old.vpr@80.3)); List([assert.failed:assertion.false] Assert might fail. Assertion old[initial](perm(m.tk)) == write might not hold. (labelled_old.vpr@36.3); [exhale.failed:assertion.false] Exhale might fail. Assertion old[initial](m.f) == 3 might not hold. (labelled_old.vpr@53.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access z.f. (labelled_old.vpr@67.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm z: Ref [z.f] :: z.f == old[first](z.f)) might not hold. (labelled_old.vpr@80.3)))
../../src/test/resources/frontend-generated/all/old/old.vpr,4,1559,118,7,1392,1638,1648,Vector(List([postcondition.violated:assertion.false] Postcondition of t2b might not hold. Assertion this.f == old(this.f) + 2 might not hold. (old.vpr@23.13); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access r.f. (old.vpr@33.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access r.f. (old.vpr@45.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (old.vpr@55.5)); List([postcondition.violated:assertion.false] Postcondition of t2b might not hold. Assertion this.f == old(this.f) + 2 might not hold. (old.vpr@23.13); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access r.f. (old.vpr@33.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access r.f. (old.vpr@45.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (old.vpr@55.5)); List([postcondition.violated:assertion.false] Postcondition of t2b might not hold. Assertion this.f == old(this.f) + 2 might not hold. (old.vpr@23.13); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access r.f. (old.vpr@33.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access r.f. (old.vpr@45.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (old.vpr@55.5)); List([postcondition.violated:assertion.false] Postcondition of t2b might not hold. Assertion this.f == old(this.f) + 2 might not hold. (old.vpr@23.13); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access r.f. (old.vpr@33.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access r.f. (old.vpr@45.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (old.vpr@55.5)); List([postcondition.violated:assertion.false] Postcondition of t2b might not hold. Assertion this.f == old(this.f) + 2 might not hold. (old.vpr@23.13); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access r.f. (old.vpr@33.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access r.f. (old.vpr@45.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (old.vpr@55.5)))
../../src/test/resources/frontend-generated/all/permission_introspection/forpermCheck.vpr,3,5,0,0,5,5,5,Vector(List(Consistency error: Body of forperm quantifier is not allowed to contain perm expressions. (forpermCheck.vpr@10.35); Consistency error: Body of forperm quantifier is not allowed to contain nested forperm expressions. (forpermCheck.vpr@16.38); Consistency error: acc(p(r); write) is non pure and appears where only pure expressions are allowed. (forpermCheck.vpr@22.37)); List(Consistency error: Body of forperm quantifier is not allowed to contain perm expressions. (forpermCheck.vpr@10.35); Consistency error: Body of forperm quantifier is not allowed to contain nested forperm expressions. (forpermCheck.vpr@16.38); Consistency error: acc(p(r); write) is non pure and appears where only pure expressions are allowed. (forpermCheck.vpr@22.37)); List(Consistency error: Body of forperm quantifier is not allowed to contain perm expressions. (forpermCheck.vpr@10.35); Consistency error: Body of forperm quantifier is not allowed to contain nested forperm expressions. (forpermCheck.vpr@16.38); Consistency error: acc(p(r); write) is non pure and appears where only pure expressions are allowed. (forpermCheck.vpr@22.37)); List(Consistency error: Body of forperm quantifier is not allowed to contain perm expressions. (forpermCheck.vpr@10.35); Consistency error: Body of forperm quantifier is not allowed to contain nested forperm expressions. (forpermCheck.vpr@16.38); Consistency error: acc(p(r); write) is non pure and appears where only pure expressions are allowed. (forpermCheck.vpr@22.37)); List(Consistency error: Body of forperm quantifier is not allowed to contain perm expressions. (forpermCheck.vpr@10.35); Consistency error: Body of forperm quantifier is not allowed to contain nested forperm expressions. (forpermCheck.vpr@16.38); Consistency error: acc(p(r); write) is non pure and appears where only pure expressions are allowed. (forpermCheck.vpr@22.37)))
../../src/test/resources/frontend-generated/all/permission_introspection/forpermFields.vpr,3,1718,62,3,1631,1752,1772,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f2. (forpermFields.vpr@49.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f2. (forpermFields.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.f1] :: false) might not hold. (forpermFields.vpr@77.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f2. (forpermFields.vpr@49.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f2. (forpermFields.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.f1] :: false) might not hold. (forpermFields.vpr@77.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f2. (forpermFields.vpr@49.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f2. (forpermFields.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.f1] :: false) might not hold. (forpermFields.vpr@77.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f2. (forpermFields.vpr@49.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f2. (forpermFields.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.f1] :: false) might not hold. (forpermFields.vpr@77.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f2. (forpermFields.vpr@49.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f2. (forpermFields.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.f1] :: false) might not hold. (forpermFields.vpr@77.3)))
../../src/test/resources/frontend-generated/all/permission_introspection/forpermInhaleExhale.vpr,3,1458,34,2,1411,1473,1491,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion x.f > 0 might not hold. (forpermInhaleExhale.vpr@9.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r: Ref [r.f] :: r.f > 0) might not hold. (forpermInhaleExhale.vpr@35.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access y.f. (forpermInhaleExhale.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f > 0 might not hold. (forpermInhaleExhale.vpr@9.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r: Ref [r.f] :: r.f > 0) might not hold. (forpermInhaleExhale.vpr@35.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access y.f. (forpermInhaleExhale.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f > 0 might not hold. (forpermInhaleExhale.vpr@9.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r: Ref [r.f] :: r.f > 0) might not hold. (forpermInhaleExhale.vpr@35.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access y.f. (forpermInhaleExhale.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f > 0 might not hold. (forpermInhaleExhale.vpr@9.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r: Ref [r.f] :: r.f > 0) might not hold. (forpermInhaleExhale.vpr@35.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access y.f. (forpermInhaleExhale.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f > 0 might not hold. (forpermInhaleExhale.vpr@9.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r: Ref [r.f] :: r.f > 0) might not hold. (forpermInhaleExhale.vpr@35.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access y.f. (forpermInhaleExhale.vpr@44.3)))
../../src/test/resources/frontend-generated/all/permission_introspection/forpermMisc.vpr,5,1648,72,4,1567,1635,1744,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (forpermMisc.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: false) might not hold. (forpermMisc.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: r == c3 ==> false) might not hold. (forpermMisc.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: r == c2 ==> false) might not hold. (forpermMisc.vpr@40.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (forpermMisc.vpr@61.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (forpermMisc.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: false) might not hold. (forpermMisc.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: r == c3 ==> false) might not hold. (forpermMisc.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: r == c2 ==> false) might not hold. (forpermMisc.vpr@40.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (forpermMisc.vpr@61.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (forpermMisc.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: false) might not hold. (forpermMisc.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: r == c3 ==> false) might not hold. (forpermMisc.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: r == c2 ==> false) might not hold. (forpermMisc.vpr@40.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (forpermMisc.vpr@61.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (forpermMisc.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: false) might not hold. (forpermMisc.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: r == c3 ==> false) might not hold. (forpermMisc.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: r == c2 ==> false) might not hold. (forpermMisc.vpr@40.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (forpermMisc.vpr@61.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (forpermMisc.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: false) might not hold. (forpermMisc.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: r == c3 ==> false) might not hold. (forpermMisc.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: r == c2 ==> false) might not hold. (forpermMisc.vpr@40.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (forpermMisc.vpr@61.3)))
../../src/test/resources/frontend-generated/all/permission_introspection/forpermPredicatesAdvanced.vpr,0,1791,45,2,1728,1823,1824,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/permission_introspection/forpermPredicatesSimple.vpr,2,1602,63,3,1513,1638,1657,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [P1(r)] :: false) might not hold. (forpermPredicatesSimple.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [P1(r)] :: false) might not hold. (forpermPredicatesSimple.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [P1(r)] :: false) might not hold. (forpermPredicatesSimple.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [P1(r)] :: false) might not hold. (forpermPredicatesSimple.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [P1(r)] :: false) might not hold. (forpermPredicatesSimple.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [P1(r)] :: false) might not hold. (forpermPredicatesSimple.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [P1(r)] :: false) might not hold. (forpermPredicatesSimple.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [P1(r)] :: false) might not hold. (forpermPredicatesSimple.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [P1(r)] :: false) might not hold. (forpermPredicatesSimple.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [P1(r)] :: false) might not hold. (forpermPredicatesSimple.vpr@44.3)))
../../src/test/resources/frontend-generated/all/permission_introspection/forpermQP.vpr,0,1982,12,0,1964,1988,1994,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/permission_introspection/forpermTypecheck.vpr,5,15,0,0,15,16,16,Vector(List(All quantified variables need to be used in a resource (forpermTypecheck.vpr@12.12); Quantified arguments can only be used directly (forpermTypecheck.vpr@19.42); Quantified arguments can only be used directly (forpermTypecheck.vpr@28.28); Quantified arguments can only be used directly (forpermTypecheck.vpr@35.44); Quantified arguments can only be used directly (forpermTypecheck.vpr@42.45)); List(All quantified variables need to be used in a resource (forpermTypecheck.vpr@12.12); Quantified arguments can only be used directly (forpermTypecheck.vpr@19.42); Quantified arguments can only be used directly (forpermTypecheck.vpr@28.28); Quantified arguments can only be used directly (forpermTypecheck.vpr@35.44); Quantified arguments can only be used directly (forpermTypecheck.vpr@42.45)); List(All quantified variables need to be used in a resource (forpermTypecheck.vpr@12.12); Quantified arguments can only be used directly (forpermTypecheck.vpr@19.42); Quantified arguments can only be used directly (forpermTypecheck.vpr@28.28); Quantified arguments can only be used directly (forpermTypecheck.vpr@35.44); Quantified arguments can only be used directly (forpermTypecheck.vpr@42.45)); List(All quantified variables need to be used in a resource (forpermTypecheck.vpr@12.12); Quantified arguments can only be used directly (forpermTypecheck.vpr@19.42); Quantified arguments can only be used directly (forpermTypecheck.vpr@28.28); Quantified arguments can only be used directly (forpermTypecheck.vpr@35.44); Quantified arguments can only be used directly (forpermTypecheck.vpr@42.45)); List(All quantified variables need to be used in a resource (forpermTypecheck.vpr@12.12); Quantified arguments can only be used directly (forpermTypecheck.vpr@19.42); Quantified arguments can only be used directly (forpermTypecheck.vpr@28.28); Quantified arguments can only be used directly (forpermTypecheck.vpr@35.44); Quantified arguments can only be used directly (forpermTypecheck.vpr@42.45)))
../../src/test/resources/frontend-generated/all/permission_introspection/forpermWands.vpr,0,1599,60,3,1517,1620,1661,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/permission_introspection/permWandAlias.vpr,0,1515,78,5,1422,1508,1615,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/permission_introspection/permWandApply.vpr,0,1497,11,0,1484,1497,1512,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/permission_introspection/permWandInhale.vpr,0,1657,48,2,1593,1670,1709,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/permission_introspection/permWandQP.vpr,1,1791,84,4,1682,1803,1888,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion perm(acc(y.f; write) --* acc(y.g; write)) == write might not hold. (permWandQP.vpr@16.5)); List([assert.failed:assertion.false] Assert might fail. Assertion perm(acc(y.f; write) --* acc(y.g; write)) == write might not hold. (permWandQP.vpr@16.5)); List([assert.failed:assertion.false] Assert might fail. Assertion perm(acc(y.f; write) --* acc(y.g; write)) == write might not hold. (permWandQP.vpr@16.5)); List([assert.failed:assertion.false] Assert might fail. Assertion perm(acc(y.f; write) --* acc(y.g; write)) == write might not hold. (permWandQP.vpr@16.5)); List([assert.failed:assertion.false] Assert might fail. Assertion perm(acc(y.f; write) --* acc(y.g; write)) == write might not hold. (permWandQP.vpr@16.5)))
../../src/test/resources/frontend-generated/all/permissions/aliasing.vpr,0,1833,26,1,1802,1831,1866,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/permissions/forperm.vpr,3,1582,52,3,1512,1598,1637,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forperm y: Ref [y.f] :: false) might not hold. (forperm.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm y: Ref [y.f] :: false) might not hold. (forperm.vpr@29.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.g. (forperm.vpr@50.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forperm y: Ref [y.f] :: false) might not hold. (forperm.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm y: Ref [y.f] :: false) might not hold. (forperm.vpr@29.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.g. (forperm.vpr@50.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forperm y: Ref [y.f] :: false) might not hold. (forperm.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm y: Ref [y.f] :: false) might not hold. (forperm.vpr@29.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.g. (forperm.vpr@50.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forperm y: Ref [y.f] :: false) might not hold. (forperm.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm y: Ref [y.f] :: false) might not hold. (forperm.vpr@29.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.g. (forperm.vpr@50.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forperm y: Ref [y.f] :: false) might not hold. (forperm.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm y: Ref [y.f] :: false) might not hold. (forperm.vpr@29.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.g. (forperm.vpr@50.3)))
../../src/test/resources/frontend-generated/all/permissions/framing_none_perms.vpr,2,1650,76,4,1581,1612,1757,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion vy == fun01(x; y; false) might not hold. (framing_none_perms.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion vy == fun02(x; y; false) might not hold. (framing_none_perms.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion vy == fun01(x; y; false) might not hold. (framing_none_perms.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion vy == fun02(x; y; false) might not hold. (framing_none_perms.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion vy == fun01(x; y; false) might not hold. (framing_none_perms.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion vy == fun02(x; y; false) might not hold. (framing_none_perms.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion vy == fun01(x; y; false) might not hold. (framing_none_perms.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion vy == fun02(x; y; false) might not hold. (framing_none_perms.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion vy == fun01(x; y; false) might not hold. (framing_none_perms.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion vy == fun02(x; y; false) might not hold. (framing_none_perms.vpr@32.3)))
../../src/test/resources/frontend-generated/all/permissions/loops.vpr,4,1432,12,0,1416,1438,1444,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (loops.vpr@14.15); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access x.f. (loops.vpr@36.10); [invariant.not.established:insufficient.permission] Loop invariant acc(x.f; write) might not hold on entry. There might be insufficient permission to access x.f. (loops.vpr@46.15); [invariant.not.preserved:insufficient.permission] Loop invariant acc(x.f; write) might not be preserved. There might be insufficient permission to access x.f. (loops.vpr@56.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (loops.vpr@14.15); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access x.f. (loops.vpr@36.10); [invariant.not.established:insufficient.permission] Loop invariant acc(x.f; write) might not hold on entry. There might be insufficient permission to access x.f. (loops.vpr@46.15); [invariant.not.preserved:insufficient.permission] Loop invariant acc(x.f; write) might not be preserved. There might be insufficient permission to access x.f. (loops.vpr@56.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (loops.vpr@14.15); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access x.f. (loops.vpr@36.10); [invariant.not.established:insufficient.permission] Loop invariant acc(x.f; write) might not hold on entry. There might be insufficient permission to access x.f. (loops.vpr@46.15); [invariant.not.preserved:insufficient.permission] Loop invariant acc(x.f; write) might not be preserved. There might be insufficient permission to access x.f. (loops.vpr@56.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (loops.vpr@14.15); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access x.f. (loops.vpr@36.10); [invariant.not.established:insufficient.permission] Loop invariant acc(x.f; write) might not hold on entry. There might be insufficient permission to access x.f. (loops.vpr@46.15); [invariant.not.preserved:insufficient.permission] Loop invariant acc(x.f; write) might not be preserved. There might be insufficient permission to access x.f. (loops.vpr@56.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (loops.vpr@14.15); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access x.f. (loops.vpr@36.10); [invariant.not.established:insufficient.permission] Loop invariant acc(x.f; write) might not hold on entry. There might be insufficient permission to access x.f. (loops.vpr@46.15); [invariant.not.preserved:insufficient.permission] Loop invariant acc(x.f; write) might not be preserved. There might be insufficient permission to access x.f. (loops.vpr@56.15)))
../../src/test/resources/frontend-generated/all/permissions/negative_amounts.vpr,2,1544,41,2,1494,1542,1596,Vector(List([exhale.failed:negative.permission] Exhale might fail. Fraction k might be negative. (negative_amounts.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion none < k might not hold. (negative_amounts.vpr@23.3)); List([exhale.failed:negative.permission] Exhale might fail. Fraction k might be negative. (negative_amounts.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion none < k might not hold. (negative_amounts.vpr@23.3)); List([exhale.failed:negative.permission] Exhale might fail. Fraction k might be negative. (negative_amounts.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion none < k might not hold. (negative_amounts.vpr@23.3)); List([exhale.failed:negative.permission] Exhale might fail. Fraction k might be negative. (negative_amounts.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion none < k might not hold. (negative_amounts.vpr@23.3)); List([exhale.failed:negative.permission] Exhale might fail. Fraction k might be negative. (negative_amounts.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion none < k might not hold. (negative_amounts.vpr@23.3)))
../../src/test/resources/frontend-generated/all/permissions/perm.vpr,6,1639,48,2,1591,1622,1706,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@20.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@29.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion perm(c1.val) <= 1 / 2 might not hold. (perm.vpr@46.3); [assert.failed:assertion.false] Assert might fail. Assertion perm(c3.val) <= 1 / 2 might not hold. (perm.vpr@54.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@20.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@29.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion perm(c1.val) <= 1 / 2 might not hold. (perm.vpr@46.3); [assert.failed:assertion.false] Assert might fail. Assertion perm(c3.val) <= 1 / 2 might not hold. (perm.vpr@54.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@20.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@29.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion perm(c1.val) <= 1 / 2 might not hold. (perm.vpr@46.3); [assert.failed:assertion.false] Assert might fail. Assertion perm(c3.val) <= 1 / 2 might not hold. (perm.vpr@54.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@20.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@29.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion perm(c1.val) <= 1 / 2 might not hold. (perm.vpr@46.3); [assert.failed:assertion.false] Assert might fail. Assertion perm(c3.val) <= 1 / 2 might not hold. (perm.vpr@54.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@20.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@29.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion perm(c1.val) <= 1 / 2 might not hold. (perm.vpr@46.3); [assert.failed:assertion.false] Assert might fail. Assertion perm(c3.val) <= 1 / 2 might not hold. (perm.vpr@54.3)))
../../src/test/resources/frontend-generated/all/permissions/possibly_none_perms.vpr,3,1582,68,4,1528,1539,1679,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.f. (possibly_none_perms.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion a1 == a3 || (a1 == a2 || a2 == a3) might not hold. (possibly_none_perms.vpr@32.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (possibly_none_perms.vpr@39.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.f. (possibly_none_perms.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion a1 == a3 || (a1 == a2 || a2 == a3) might not hold. (possibly_none_perms.vpr@32.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (possibly_none_perms.vpr@39.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.f. (possibly_none_perms.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion a1 == a3 || (a1 == a2 || a2 == a3) might not hold. (possibly_none_perms.vpr@32.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (possibly_none_perms.vpr@39.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.f. (possibly_none_perms.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion a1 == a3 || (a1 == a2 || a2 == a3) might not hold. (possibly_none_perms.vpr@32.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (possibly_none_perms.vpr@39.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.f. (possibly_none_perms.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion a1 == a3 || (a1 == a2 || a2 == a3) might not hold. (possibly_none_perms.vpr@32.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (possibly_none_perms.vpr@39.3)))
../../src/test/resources/frontend-generated/all/permissions/various.vpr,6,1611,69,4,1513,1657,1665,Vector(List([call.precondition:insufficient.permission] The precondition of method t1 might not hold. There might be insufficient permission to access null.f. (various.vpr@14.5); [call.precondition:insufficient.permission] The precondition of method t1 might not hold. There might be insufficient permission to access r.f. (various.vpr@21.5); [call.precondition:insufficient.permission] The precondition of method t2 might not hold. There might be insufficient permission to access r.f. (various.vpr@36.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (various.vpr@48.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (various.vpr@60.5); [assert.failed:assertion.false] Assert might fail. Assertion write < 1 / 10000 might not hold. (various.vpr@74.5)); List([call.precondition:insufficient.permission] The precondition of method t1 might not hold. There might be insufficient permission to access null.f. (various.vpr@14.5); [call.precondition:insufficient.permission] The precondition of method t1 might not hold. There might be insufficient permission to access r.f. (various.vpr@21.5); [call.precondition:insufficient.permission] The precondition of method t2 might not hold. There might be insufficient permission to access r.f. (various.vpr@36.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (various.vpr@48.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (various.vpr@60.5); [assert.failed:assertion.false] Assert might fail. Assertion write < 1 / 10000 might not hold. (various.vpr@74.5)); List([call.precondition:insufficient.permission] The precondition of method t1 might not hold. There might be insufficient permission to access null.f. (various.vpr@14.5); [call.precondition:insufficient.permission] The precondition of method t1 might not hold. There might be insufficient permission to access r.f. (various.vpr@21.5); [call.precondition:insufficient.permission] The precondition of method t2 might not hold. There might be insufficient permission to access r.f. (various.vpr@36.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (various.vpr@48.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (various.vpr@60.5); [assert.failed:assertion.false] Assert might fail. Assertion write < 1 / 10000 might not hold. (various.vpr@74.5)); List([call.precondition:insufficient.permission] The precondition of method t1 might not hold. There might be insufficient permission to access null.f. (various.vpr@14.5); [call.precondition:insufficient.permission] The precondition of method t1 might not hold. There might be insufficient permission to access r.f. (various.vpr@21.5); [call.precondition:insufficient.permission] The precondition of method t2 might not hold. There might be insufficient permission to access r.f. (various.vpr@36.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (various.vpr@48.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (various.vpr@60.5); [assert.failed:assertion.false] Assert might fail. Assertion write < 1 / 10000 might not hold. (various.vpr@74.5)); List([call.precondition:insufficient.permission] The precondition of method t1 might not hold. There might be insufficient permission to access null.f. (various.vpr@14.5); [call.precondition:insufficient.permission] The precondition of method t1 might not hold. There might be insufficient permission to access r.f. (various.vpr@21.5); [call.precondition:insufficient.permission] The precondition of method t2 might not hold. There might be insufficient permission to access r.f. (various.vpr@36.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (various.vpr@48.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (various.vpr@60.5); [assert.failed:assertion.false] Assert might fail. Assertion write < 1 / 10000 might not hold. (various.vpr@74.5)))
../../src/test/resources/frontend-generated/all/predicates/arguments.vpr,4,1762,55,3,1691,1771,1825,Vector(List([fold.failed:insufficient.permission] Folding valid(this; false) might fail. There might be insufficient permission to access this.g. (arguments.vpr@47.5); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access valid(this; false). (arguments.vpr@55.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access valid(this; false). (arguments.vpr@70.15); [unfold.failed:insufficient.permission] Unfolding valid(this; true) might fail. There might be insufficient permission to access valid(this; true). (arguments.vpr@86.5)); List([fold.failed:insufficient.permission] Folding valid(this; false) might fail. There might be insufficient permission to access this.g. (arguments.vpr@47.5); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access valid(this; false). (arguments.vpr@55.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access valid(this; false). (arguments.vpr@70.15); [unfold.failed:insufficient.permission] Unfolding valid(this; true) might fail. There might be insufficient permission to access valid(this; true). (arguments.vpr@86.5)); List([fold.failed:insufficient.permission] Folding valid(this; false) might fail. There might be insufficient permission to access this.g. (arguments.vpr@47.5); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access valid(this; false). (arguments.vpr@55.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access valid(this; false). (arguments.vpr@70.15); [unfold.failed:insufficient.permission] Unfolding valid(this; true) might fail. There might be insufficient permission to access valid(this; true). (arguments.vpr@86.5)); List([fold.failed:insufficient.permission] Folding valid(this; false) might fail. There might be insufficient permission to access this.g. (arguments.vpr@47.5); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access valid(this; false). (arguments.vpr@55.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access valid(this; false). (arguments.vpr@70.15); [unfold.failed:insufficient.permission] Unfolding valid(this; true) might fail. There might be insufficient permission to access valid(this; true). (arguments.vpr@86.5)); List([fold.failed:insufficient.permission] Folding valid(this; false) might fail. There might be insufficient permission to access this.g. (arguments.vpr@47.5); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access valid(this; false). (arguments.vpr@55.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access valid(this; false). (arguments.vpr@70.15); [unfold.failed:insufficient.permission] Unfolding valid(this; true) might fail. There might be insufficient permission to access valid(this; true). (arguments.vpr@86.5)))
../../src/test/resources/frontend-generated/all/predicates/different_field_types.vpr,0,1659,102,6,1526,1676,1776,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/predicates/lseg.vpr,0,1992,7,0,1982,1997,1997,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/predicates/receiverless.vpr,2,1496,40,2,1455,1484,1551,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (receiverless.vpr@12.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (receiverless.vpr@27.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (receiverless.vpr@12.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (receiverless.vpr@27.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (receiverless.vpr@12.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (receiverless.vpr@27.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (receiverless.vpr@12.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (receiverless.vpr@27.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (receiverless.vpr@12.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (receiverless.vpr@27.5)))
../../src/test/resources/frontend-generated/all/predicates/unfolding.vpr,4,1559,59,3,1502,1535,1642,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (unfolding.vpr@16.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (unfolding.vpr@39.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (unfolding.vpr@72.12); [postcondition.violated:assertion.false] Postcondition of fail2 might not hold. Assertion (unfolding acc(P(this); write) in this.x == old(this.x)) might not hold. (unfolding.vpr@82.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (unfolding.vpr@16.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (unfolding.vpr@39.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (unfolding.vpr@72.12); [postcondition.violated:assertion.false] Postcondition of fail2 might not hold. Assertion (unfolding acc(P(this); write) in this.x == old(this.x)) might not hold. (unfolding.vpr@82.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (unfolding.vpr@16.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (unfolding.vpr@39.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (unfolding.vpr@72.12); [postcondition.violated:assertion.false] Postcondition of fail2 might not hold. Assertion (unfolding acc(P(this); write) in this.x == old(this.x)) might not hold. (unfolding.vpr@82.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (unfolding.vpr@16.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (unfolding.vpr@39.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (unfolding.vpr@72.12); [postcondition.violated:assertion.false] Postcondition of fail2 might not hold. Assertion (unfolding acc(P(this); write) in this.x == old(this.x)) might not hold. (unfolding.vpr@82.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (unfolding.vpr@16.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (unfolding.vpr@39.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (unfolding.vpr@72.12); [postcondition.violated:assertion.false] Postcondition of fail2 might not hold. Assertion (unfolding acc(P(this); write) in this.x == old(this.x)) might not hold. (unfolding.vpr@82.12)))
../../src/test/resources/frontend-generated/all/predicates/unfolding_exhale.vpr,4,1682,16,0,1660,1686,1701,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (unfolding_exhale.vpr@16.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (unfolding_exhale.vpr@39.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(this). (unfolding_exhale.vpr@67.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(P(this); write) in this.x == old(this.x)) might not hold. (unfolding_exhale.vpr@77.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (unfolding_exhale.vpr@16.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (unfolding_exhale.vpr@39.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(this). (unfolding_exhale.vpr@67.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(P(this); write) in this.x == old(this.x)) might not hold. (unfolding_exhale.vpr@77.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (unfolding_exhale.vpr@16.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (unfolding_exhale.vpr@39.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(this). (unfolding_exhale.vpr@67.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(P(this); write) in this.x == old(this.x)) might not hold. (unfolding_exhale.vpr@77.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (unfolding_exhale.vpr@16.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (unfolding_exhale.vpr@39.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(this). (unfolding_exhale.vpr@67.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(P(this); write) in this.x == old(this.x)) might not hold. (unfolding_exhale.vpr@77.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (unfolding_exhale.vpr@16.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (unfolding_exhale.vpr@39.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(this). (unfolding_exhale.vpr@67.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(P(this); write) in this.x == old(this.x)) might not hold. (unfolding_exhale.vpr@77.3)))
../../src/test/resources/frontend-generated/all/sequences/binarySearchSeq.vpr,0,1777,43,2,1745,1749,1839,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/sequences/nil.vpr,0,1617,90,5,1494,1650,1709,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/sequences/sequence_incompletenesses.vpr,5,5333,102,1,5200,5353,5448,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { valid(slot(a; 1).val[j]; 1; true) } 0 <= j && j < |slot(a; 1).val| ==> slot(a; 1).val[j] == Seq(0; 1) && valid(slot(a; 1).val[j]; 1; true)) might not hold. (sequence_incompletenesses.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion valid(soln; n; true) might not hold. (sequence_incompletenesses.vpr@108.9); [assert.failed:assertion.false] Assert might fail. Assertion valid(soln; n; true) might not hold. (sequence_incompletenesses.vpr@184.9); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { (i in s) } { (i in ss[1..]) } (i in s) ==> (i in ss[1..])) might not hold. (sequence_incompletenesses.vpr@275.4); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { (i in t) } { (i in ss[|s|..]) } (i in t) ==> (i in ss[|s|..])) might not hold. (sequence_incompletenesses.vpr@288.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { valid(slot(a; 1).val[j]; 1; true) } 0 <= j && j < |slot(a; 1).val| ==> slot(a; 1).val[j] == Seq(0; 1) && valid(slot(a; 1).val[j]; 1; true)) might not hold. (sequence_incompletenesses.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion valid(soln; n; true) might not hold. (sequence_incompletenesses.vpr@108.9); [assert.failed:assertion.false] Assert might fail. Assertion valid(soln; n; true) might not hold. (sequence_incompletenesses.vpr@184.9); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { (i in s) } { (i in ss[1..]) } (i in s) ==> (i in ss[1..])) might not hold. (sequence_incompletenesses.vpr@275.4); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { (i in t) } { (i in ss[|s|..]) } (i in t) ==> (i in ss[|s|..])) might not hold. (sequence_incompletenesses.vpr@288.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { valid(slot(a; 1).val[j]; 1; true) } 0 <= j && j < |slot(a; 1).val| ==> slot(a; 1).val[j] == Seq(0; 1) && valid(slot(a; 1).val[j]; 1; true)) might not hold. (sequence_incompletenesses.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion valid(soln; n; true) might not hold. (sequence_incompletenesses.vpr@108.9); [assert.failed:assertion.false] Assert might fail. Assertion valid(soln; n; true) might not hold. (sequence_incompletenesses.vpr@184.9); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { (i in s) } { (i in ss[1..]) } (i in s) ==> (i in ss[1..])) might not hold. (sequence_incompletenesses.vpr@275.4); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { (i in t) } { (i in ss[|s|..]) } (i in t) ==> (i in ss[|s|..])) might not hold. (sequence_incompletenesses.vpr@288.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { valid(slot(a; 1).val[j]; 1; true) } 0 <= j && j < |slot(a; 1).val| ==> slot(a; 1).val[j] == Seq(0; 1) && valid(slot(a; 1).val[j]; 1; true)) might not hold. (sequence_incompletenesses.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion valid(soln; n; true) might not hold. (sequence_incompletenesses.vpr@108.9); [assert.failed:assertion.false] Assert might fail. Assertion valid(soln; n; true) might not hold. (sequence_incompletenesses.vpr@184.9); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { (i in s) } { (i in ss[1..]) } (i in s) ==> (i in ss[1..])) might not hold. (sequence_incompletenesses.vpr@275.4); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { (i in t) } { (i in ss[|s|..]) } (i in t) ==> (i in ss[|s|..])) might not hold. (sequence_incompletenesses.vpr@288.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { valid(slot(a; 1).val[j]; 1; true) } 0 <= j && j < |slot(a; 1).val| ==> slot(a; 1).val[j] == Seq(0; 1) && valid(slot(a; 1).val[j]; 1; true)) might not hold. (sequence_incompletenesses.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion valid(soln; n; true) might not hold. (sequence_incompletenesses.vpr@108.9); [assert.failed:assertion.false] Assert might fail. Assertion valid(soln; n; true) might not hold. (sequence_incompletenesses.vpr@184.9); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { (i in s) } { (i in ss[1..]) } (i in s) ==> (i in ss[1..])) might not hold. (sequence_incompletenesses.vpr@275.4); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { (i in t) } { (i in ss[|s|..]) } (i in t) ==> (i in ss[|s|..])) might not hold. (sequence_incompletenesses.vpr@288.3)))
../../src/test/resources/frontend-generated/all/sequences/sequences.vpr,9,1904,62,3,1816,1942,1954,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion |Seq(0)| == 0 might not hold. (sequences.vpr@10.5); [assert.failed:assertion.false] Assert might fail. Assertion a[1 := 22][0] == 22 might not hold. (sequences.vpr@31.5); [assert.failed:assertion.false] Assert might fail. Assertion |xs[1..]| == |xs| might not hold. (sequences.vpr@40.3); [assert.failed:assertion.false] Assert might fail. Assertion |s[j..]| == |s| - j might not hold. (sequences.vpr@51.3); [assert.failed:assertion.false] Assert might fail. Assertion Seq(3; 4; 5; 6)[3] == 5 might not hold. (sequences.vpr@65.3); [assert.failed:seq.index.negative] Assert might fail. Index i into Seq(3; 4; 5; 6) might be negative. (sequences.vpr@74.3); [assert.failed:seq.index.length] Assert might fail. Index i into Seq(3; 4; 5; 6) might exceed sequence length. (sequences.vpr@81.3); [assert.failed:seq.index.negative] Assert might fail. Index i into Seq(3; 4; 5; 6) might be negative. (sequences.vpr@89.3); [assignment.failed:seq.index.length] Assignment might fail. Index i into Seq(3; 4; 5; 6) might exceed sequence length. (sequences.vpr@97.3)); List([assert.failed:assertion.false] Assert might fail. Assertion |Seq(0)| == 0 might not hold. (sequences.vpr@10.5); [assert.failed:assertion.false] Assert might fail. Assertion a[1 := 22][0] == 22 might not hold. (sequences.vpr@31.5); [assert.failed:assertion.false] Assert might fail. Assertion |xs[1..]| == |xs| might not hold. (sequences.vpr@40.3); [assert.failed:assertion.false] Assert might fail. Assertion |s[j..]| == |s| - j might not hold. (sequences.vpr@51.3); [assert.failed:assertion.false] Assert might fail. Assertion Seq(3; 4; 5; 6)[3] == 5 might not hold. (sequences.vpr@65.3); [assert.failed:seq.index.negative] Assert might fail. Index i into Seq(3; 4; 5; 6) might be negative. (sequences.vpr@74.3); [assert.failed:seq.index.length] Assert might fail. Index i into Seq(3; 4; 5; 6) might exceed sequence length. (sequences.vpr@81.3); [assert.failed:seq.index.negative] Assert might fail. Index i into Seq(3; 4; 5; 6) might be negative. (sequences.vpr@89.3); [assignment.failed:seq.index.length] Assignment might fail. Index i into Seq(3; 4; 5; 6) might exceed sequence length. (sequences.vpr@97.3)); List([assert.failed:assertion.false] Assert might fail. Assertion |Seq(0)| == 0 might not hold. (sequences.vpr@10.5); [assert.failed:assertion.false] Assert might fail. Assertion a[1 := 22][0] == 22 might not hold. (sequences.vpr@31.5); [assert.failed:assertion.false] Assert might fail. Assertion |xs[1..]| == |xs| might not hold. (sequences.vpr@40.3); [assert.failed:assertion.false] Assert might fail. Assertion |s[j..]| == |s| - j might not hold. (sequences.vpr@51.3); [assert.failed:assertion.false] Assert might fail. Assertion Seq(3; 4; 5; 6)[3] == 5 might not hold. (sequences.vpr@65.3); [assert.failed:seq.index.negative] Assert might fail. Index i into Seq(3; 4; 5; 6) might be negative. (sequences.vpr@74.3); [assert.failed:seq.index.length] Assert might fail. Index i into Seq(3; 4; 5; 6) might exceed sequence length. (sequences.vpr@81.3); [assert.failed:seq.index.negative] Assert might fail. Index i into Seq(3; 4; 5; 6) might be negative. (sequences.vpr@89.3); [assignment.failed:seq.index.length] Assignment might fail. Index i into Seq(3; 4; 5; 6) might exceed sequence length. (sequences.vpr@97.3)); List([assert.failed:assertion.false] Assert might fail. Assertion |Seq(0)| == 0 might not hold. (sequences.vpr@10.5); [assert.failed:assertion.false] Assert might fail. Assertion a[1 := 22][0] == 22 might not hold. (sequences.vpr@31.5); [assert.failed:assertion.false] Assert might fail. Assertion |xs[1..]| == |xs| might not hold. (sequences.vpr@40.3); [assert.failed:assertion.false] Assert might fail. Assertion |s[j..]| == |s| - j might not hold. (sequences.vpr@51.3); [assert.failed:assertion.false] Assert might fail. Assertion Seq(3; 4; 5; 6)[3] == 5 might not hold. (sequences.vpr@65.3); [assert.failed:seq.index.negative] Assert might fail. Index i into Seq(3; 4; 5; 6) might be negative. (sequences.vpr@74.3); [assert.failed:seq.index.length] Assert might fail. Index i into Seq(3; 4; 5; 6) might exceed sequence length. (sequences.vpr@81.3); [assert.failed:seq.index.negative] Assert might fail. Index i into Seq(3; 4; 5; 6) might be negative. (sequences.vpr@89.3); [assignment.failed:seq.index.length] Assignment might fail. Index i into Seq(3; 4; 5; 6) might exceed sequence length. (sequences.vpr@97.3)); List([assert.failed:assertion.false] Assert might fail. Assertion |Seq(0)| == 0 might not hold. (sequences.vpr@10.5); [assert.failed:assertion.false] Assert might fail. Assertion a[1 := 22][0] == 22 might not hold. (sequences.vpr@31.5); [assert.failed:assertion.false] Assert might fail. Assertion |xs[1..]| == |xs| might not hold. (sequences.vpr@40.3); [assert.failed:assertion.false] Assert might fail. Assertion |s[j..]| == |s| - j might not hold. (sequences.vpr@51.3); [assert.failed:assertion.false] Assert might fail. Assertion Seq(3; 4; 5; 6)[3] == 5 might not hold. (sequences.vpr@65.3); [assert.failed:seq.index.negative] Assert might fail. Index i into Seq(3; 4; 5; 6) might be negative. (sequences.vpr@74.3); [assert.failed:seq.index.length] Assert might fail. Index i into Seq(3; 4; 5; 6) might exceed sequence length. (sequences.vpr@81.3); [assert.failed:seq.index.negative] Assert might fail. Index i into Seq(3; 4; 5; 6) might be negative. (sequences.vpr@89.3); [assignment.failed:seq.index.length] Assignment might fail. Index i into Seq(3; 4; 5; 6) might exceed sequence length. (sequences.vpr@97.3)))
../../src/test/resources/frontend-generated/all/sets/sets.vpr,0,1533,6,0,1527,1532,1542,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testCollections.vpr,0,1815,31,1,1773,1828,1846,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testGoto1.vpr,1,1498,95,6,1368,1535,1593,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion sys__result > 0 might not hold. (testGoto1.vpr@19.3)); List([assert.failed:assertion.false] Assert might fail. Assertion sys__result > 0 might not hold. (testGoto1.vpr@19.3)); List([assert.failed:assertion.false] Assert might fail. Assertion sys__result > 0 might not hold. (testGoto1.vpr@19.3)); List([assert.failed:assertion.false] Assert might fail. Assertion sys__result > 0 might not hold. (testGoto1.vpr@19.3)); List([assert.failed:assertion.false] Assert might fail. Assertion sys__result > 0 might not hold. (testGoto1.vpr@19.3)))
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testGoto2.vpr,0,1386,3,0,1383,1385,1391,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testHistoryApplication.vpr,0,1994,64,3,1925,1977,2081,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testHistoryLemmasPVL.vpr,0,1665,54,3,1596,1670,1729,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testHistoryLoop.vpr,0,2315,98,4,2181,2349,2416,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testHistoryProcessesPVL.vpr,0,1594,46,2,1540,1591,1653,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testHistoryThreadsApplication.vpr,0,5169,103,1,5022,5240,5245,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testHistoryThreadsLemmasPVL.vpr,0,1648,26,1,1618,1646,1682,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testHistoryThreadsProcessesPVL.vpr,0,1593,73,4,1489,1641,1650,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testListAppend.vpr,1,24875,2328,9,22302,24383,27941,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access List__state(old(Wand_list_for_list__get_out_1(diz))). (testListAppend.vpr@106.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access List__state(old(Wand_list_for_list__get_out_1(diz))). (testListAppend.vpr@109.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access List__state(old(Wand_list_for_list__get_out_1(diz))). (testListAppend.vpr@106.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access List__state(old(Wand_list_for_list__get_out_1(diz))). (testListAppend.vpr@106.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access List__state(old(Wand_list_for_list__get_out_1(diz))). (testListAppend.vpr@106.5)))
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testLockSetDemo.vpr,1,1980,17,0,1964,1971,2005,Vector(List([unfold.failed:insufficient.permission] Unfolding Client__inv(diz; write) might fail. There might be insufficient permission to access Client__inv(diz; write). (testLockSetDemo.vpr@117.3)); List([unfold.failed:insufficient.permission] Unfolding Client__inv(diz; write) might fail. There might be insufficient permission to access Client__inv(diz; write). (testLockSetDemo.vpr@117.3)); List([unfold.failed:insufficient.permission] Unfolding Client__inv(diz; write) might fail. There might be insufficient permission to access Client__inv(diz; write). (testLockSetDemo.vpr@117.3)); List([unfold.failed:insufficient.permission] Unfolding Client__inv(diz; write) might fail. There might be insufficient permission to access Client__inv(diz; write). (testLockSetDemo.vpr@117.3)); List([unfold.failed:insufficient.permission] Unfolding Client__inv(diz; write) might fail. There might be insufficient permission to access Client__inv(diz; write). (testLockSetDemo.vpr@117.3)))
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testLoopInvariant.vpr,0,1600,38,2,1563,1586,1653,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testLoopInvariantE1.vpr,1,1493,27,1,1455,1512,1513,Vector(List([invariant.not.preserved:assertion.false] Loop invariant i <= n might not be preserved. Assertion i <= n might not hold. (testLoopInvariantE1.vpr@30.15)); List([invariant.not.preserved:assertion.false] Loop invariant i <= n might not be preserved. Assertion i <= n might not hold. (testLoopInvariantE1.vpr@30.15)); List([invariant.not.preserved:assertion.false] Loop invariant i <= n might not be preserved. Assertion i <= n might not hold. (testLoopInvariantE1.vpr@30.15)); List([invariant.not.preserved:assertion.false] Loop invariant i <= n might not be preserved. Assertion i <= n might not hold. (testLoopInvariantE1.vpr@30.15)); List([invariant.not.preserved:assertion.false] Loop invariant i <= n might not be preserved. Assertion i <= n might not hold. (testLoopInvariantE1.vpr@30.15)))
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testPVLLocks.vpr,0,1971,19,0,1949,1967,1997,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testPVLSyntax.vpr,0,1542,47,3,1506,1512,1610,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testThreadInheritance.vpr,0,2954,153,5,2737,3053,3072,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testThreadInheritanceE1.vpr,1,3083,37,1,3046,3069,3135,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion w.Worker__output == 7 might not hold. (testThreadInheritanceE1.vpr@384.3)); List([assert.failed:assertion.false] Assert might fail. Assertion w.Worker__output == 7 might not hold. (testThreadInheritanceE1.vpr@384.3)); List([assert.failed:assertion.false] Assert might fail. Assertion w.Worker__output == 7 might not hold. (testThreadInheritanceE1.vpr@384.3)); List([assert.failed:assertion.false] Assert might fail. Assertion w.Worker__output == 7 might not hold. (testThreadInheritanceE1.vpr@384.3)); List([assert.failed:assertion.false] Assert might fail. Assertion w.Worker__output == 7 might not hold. (testThreadInheritanceE1.vpr@384.3)))
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testThreadInheritanceE2.vpr,1,3303,101,3,3208,3258,3443,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access w.Worker__output. (testThreadInheritanceE2.vpr@376.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access w.Worker__output. (testThreadInheritanceE2.vpr@376.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access w.Worker__output. (testThreadInheritanceE2.vpr@376.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access w.Worker__output. (testThreadInheritanceE2.vpr@376.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access w.Worker__output. (testThreadInheritanceE2.vpr@376.3)))
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testThreadInheritanceReal.vpr,0,3595,40,1,3560,3574,3652,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testTreeRecursive.vpr,0,3107,45,1,3067,3085,3171,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testTreeWand.vpr,1,180497,14,0,180479,180497,180515,Vector(List(Timeout occurred after 180 second(s) (<no position>)); List(Timeout occurred after 180 second(s) (<no position>)); List(Timeout occurred after 180 second(s) (<no position>)); List(Timeout occurred after 180 second(s) (<no position>)); List(Timeout occurred after 180 second(s) (<no position>)))
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testTreeWandE1.vpr,1,180497,14,0,180487,180488,180518,Vector(List(Timeout occurred after 180 second(s) (<no position>)); List(Timeout occurred after 180 second(s) (<no position>)); List(Timeout occurred after 180 second(s) (<no position>)); List(Timeout occurred after 180 second(s) (<no position>)); List(Timeout occurred after 180 second(s) (<no position>)))
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testTreeWandE2.vpr,1,180486,6,0,180478,180486,180494,Vector(List(Timeout occurred after 180 second(s) (<no position>)); List(Timeout occurred after 180 second(s) (<no position>)); List(Timeout occurred after 180 second(s) (<no position>)); List(Timeout occurred after 180 second(s) (<no position>)); List(Timeout occurred after 180 second(s) (<no position>)))
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testValue1.vpr,1,1531,55,3,1464,1530,1600,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testValue1.vpr@17.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testValue1.vpr@17.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testValue1.vpr@17.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testValue1.vpr@17.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testValue1.vpr@17.5)))
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testValue2.vpr,1,1541,55,3,1475,1537,1611,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testValue2.vpr@19.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testValue2.vpr@19.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testValue2.vpr@19.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testValue2.vpr@19.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testValue2.vpr@19.5)))
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testWandDemo.vpr,0,2021,39,1,1980,2009,2075,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/test_example1.vpr,1,1570,68,4,1474,1606,1630,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion c.Counter__x == 17 might not hold. (test_example1.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion c.Counter__x == 17 might not hold. (test_example1.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion c.Counter__x == 17 might not hold. (test_example1.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion c.Counter__x == 17 might not hold. (test_example1.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion c.Counter__x == 17 might not hold. (test_example1.vpr@24.3)))
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/test_example2.vpr,0,1582,71,4,1484,1610,1653,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/test_example3.vpr,1,1597,47,2,1531,1625,1636,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access c.Counter__x. (test_example3.vpr@39.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access c.Counter__x. (test_example3.vpr@39.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access c.Counter__x. (test_example3.vpr@39.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access c.Counter__x. (test_example3.vpr@39.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access c.Counter__x. (test_example3.vpr@39.3)))
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/test_example4.vpr,0,1568,44,2,1506,1593,1606,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/test_fibonacci.vpr,0,1741,17,0,1728,1730,1767,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/test_functions.vpr,0,1596,100,6,1458,1639,1692,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/test_list.vpr,0,1968,8,0,1957,1968,1979,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/test_vector_add_pvl.vpr,0,2039,14,0,2023,2035,2059,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/test_zero.vpr,0,1862,94,5,1731,1910,1947,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/test_zero_err.vpr,1,1974,32,1,1928,1996,1998,Vector(List([postcondition.violated:assertion.false] Postcondition of zero__main_main might not hold. Assertion diz.zero__x[tid].Ref__Integer_value == 0 might not hold. (test_zero_err.vpr@32.11)); List([postcondition.violated:assertion.false] Postcondition of zero__main_main might not hold. Assertion diz.zero__x[tid].Ref__Integer_value == 0 might not hold. (test_zero_err.vpr@32.11)); List([postcondition.violated:assertion.false] Postcondition of zero__main_main might not hold. Assertion diz.zero__x[tid].Ref__Integer_value == 0 might not hold. (test_zero_err.vpr@32.11)); List([postcondition.violated:assertion.false] Postcondition of zero__main_main might not hold. Assertion diz.zero__x[tid].Ref__Integer_value == 0 might not hold. (test_zero_err.vpr@32.11)); List([postcondition.violated:assertion.false] Postcondition of zero__main_main might not hold. Assertion diz.zero__x[tid].Ref__Integer_value == 0 might not hold. (test_zero_err.vpr@32.11)))
../../src/test/resources/frontend-generated/all/third_party/vercors/vercors_magic_wand_demo.encoded.chalice.vpr,0,3650,115,3,3487,3720,3743,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/forward-dep.vpr,0,1807,112,6,1651,1858,1913,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/loop-inv-bug.vpr,0,1591,103,6,1446,1657,1672,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/testHistoryApplication.vpr,0,1944,11,0,1928,1953,1953,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/testHistoryApplicationPVL.vpr,0,1956,4,0,1951,1957,1962,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/testHistoryAxioms.vpr,0,1956,8,0,1945,1962,1963,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/testHistoryProcesses.vpr,0,1771,58,3,1708,1757,1848,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/testHistoryProcessesPVL.vpr,0,1879,21,1,1856,1873,1908,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/testLoopInvariant.vpr,0,1601,94,5,1470,1649,1686,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/testLoopInvariantE1.vpr,1,1597,37,2,1544,1617,1630,Vector(List([invariant.not.preserved:assertion.false] Loop invariant i <= n might not be preserved. Assertion i <= n might not hold. (testLoopInvariantE1.vpr@29.15)); List([invariant.not.preserved:assertion.false] Loop invariant i <= n might not be preserved. Assertion i <= n might not hold. (testLoopInvariantE1.vpr@29.15)); List([invariant.not.preserved:assertion.false] Loop invariant i <= n might not be preserved. Assertion i <= n might not hold. (testLoopInvariantE1.vpr@29.15)); List([invariant.not.preserved:assertion.false] Loop invariant i <= n might not be preserved. Assertion i <= n might not hold. (testLoopInvariantE1.vpr@29.15)); List([invariant.not.preserved:assertion.false] Loop invariant i <= n might not be preserved. Assertion i <= n might not hold. (testLoopInvariantE1.vpr@29.15)))
../../src/test/resources/frontend-generated/consistency/consistency.vpr,1,92,2,2,89,93,94,Vector(ArrayBuffer([internal:feature.unsupported] An internal error occurred. Feature is not supported. Silicon doesn't support the permission expression epsilon. (consistency.vpr@9.21)); ArrayBuffer([internal:feature.unsupported] An internal error occurred. Feature is not supported. Silicon doesn't support the permission expression epsilon. (consistency.vpr@9.21)); ArrayBuffer([internal:feature.unsupported] An internal error occurred. Feature is not supported. Silicon doesn't support the permission expression epsilon. (consistency.vpr@9.21)); ArrayBuffer([internal:feature.unsupported] An internal error occurred. Feature is not supported. Silicon doesn't support the permission expression epsilon. (consistency.vpr@9.21)); ArrayBuffer([internal:feature.unsupported] An internal error occurred. Feature is not supported. Silicon doesn't support the permission expression epsilon. (consistency.vpr@9.21)))
../../src/test/resources/frontend-generated/examples/binary-search/binary-search-array.vpr,0,2054,52,2,1998,2041,2125,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/examples/binary-search/binary-search-seq.vpr,0,1878,3,0,1873,1879,1882,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/examples/graph-copy/graph-copy.vpr,0,7483,141,1,7359,7410,7681,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/examples/graph-marking/graph-marking-reduced.vpr,0,1967,28,1,1928,1983,1991,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/examples/graph-marking/graph-marking.vpr,1,6319,326,5,5975,6224,6758,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forall n: Ref :: { (n in nodes) } (n in nodes) ==> n.is_marked) might not hold. (graph-marking.vpr@85.2)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall n: Ref :: { (n in nodes) } (n in nodes) ==> n.is_marked) might not hold. (graph-marking.vpr@85.2)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall n: Ref :: { (n in nodes) } (n in nodes) ==> n.is_marked) might not hold. (graph-marking.vpr@85.2)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall n: Ref :: { (n in nodes) } (n in nodes) ==> n.is_marked) might not hold. (graph-marking.vpr@85.2)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall n: Ref :: { (n in nodes) } (n in nodes) ==> n.is_marked) might not hold. (graph-marking.vpr@85.2)))
../../src/test/resources/frontend-generated/examples/max_array/max-array-elimination.vpr,0,2034,62,3,1962,2027,2114,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/examples/max_array/max-array-standard.vpr,0,1894,36,1,1863,1875,1945,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/examples/parallel-array-replace/parallel-array-replace.vpr,0,1962,44,2,1911,1956,2019,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/examples/quickselect/arrays_quickselect_rec.vpr,0,5539,74,1,5461,5518,5640,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/examples/quickselect/arrays_quickselect_rec_index-shifting.vpr,0,6976,7,0,6969,6973,6986,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/examples/tree-delete-min/tree_delete_min.vpr,0,5152,364,7,4696,5173,5589,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/examples/vmcai2016/arraylist-quantified-permissions.vpr,0,4400,131,2,4219,4459,4524,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/examples/vmcai2016/encoding-adts.vpr,1,1546,71,4,1445,1595,1598,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion !is_Nil(xs) && (!(is_Cons(xs) && (let ys == (tail_Cons(xs)) in is_Nil(ys))) && !(is_Cons(xs) && (let y == (head_Cons(xs)) in (let ys == (tail_Cons(xs)) in is_Cons(ys) && (let z == (head_Cons(ys)) in y < z))))) ==> false might not hold. (encoding-adts.vpr@116.4)); List([assert.failed:assertion.false] Assert might fail. Assertion !is_Nil(xs) && (!(is_Cons(xs) && (let ys == (tail_Cons(xs)) in is_Nil(ys))) && !(is_Cons(xs) && (let y == (head_Cons(xs)) in (let ys == (tail_Cons(xs)) in is_Cons(ys) && (let z == (head_Cons(ys)) in y < z))))) ==> false might not hold. (encoding-adts.vpr@116.4)); List([assert.failed:assertion.false] Assert might fail. Assertion !is_Nil(xs) && (!(is_Cons(xs) && (let ys == (tail_Cons(xs)) in is_Nil(ys))) && !(is_Cons(xs) && (let y == (head_Cons(xs)) in (let ys == (tail_Cons(xs)) in is_Cons(ys) && (let z == (head_Cons(ys)) in y < z))))) ==> false might not hold. (encoding-adts.vpr@116.4)); List([assert.failed:assertion.false] Assert might fail. Assertion !is_Nil(xs) && (!(is_Cons(xs) && (let ys == (tail_Cons(xs)) in is_Nil(ys))) && !(is_Cons(xs) && (let y == (head_Cons(xs)) in (let ys == (tail_Cons(xs)) in is_Cons(ys) && (let z == (head_Cons(ys)) in y < z))))) ==> false might not hold. (encoding-adts.vpr@116.4)); List([assert.failed:assertion.false] Assert might fail. Assertion !is_Nil(xs) && (!(is_Cons(xs) && (let ys == (tail_Cons(xs)) in is_Nil(ys))) && !(is_Cons(xs) && (let y == (head_Cons(xs)) in (let ys == (tail_Cons(xs)) in is_Cons(ys) && (let z == (head_Cons(ys)) in y < z))))) ==> false might not hold. (encoding-adts.vpr@116.4)))
../../src/test/resources/frontend-generated/examples/vmcai2016/linked-list-predicates.vpr,0,22916,4832,21,17482,22046,29222,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/issue387/va1.vpr,0,1558,84,5,1449,1573,1654,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/issue387/va10.vpr,0,1502,63,4,1417,1521,1568,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/issue387/va11.vpr,0,1590,34,2,1545,1599,1627,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/issue387/va12.vpr,0,1554,81,5,1444,1580,1638,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/issue387/va13.vpr,0,1621,99,6,1484,1662,1718,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/issue387/va14.vpr,0,2726,182,6,2469,2845,2866,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/issue387/va15.vpr,0,1603,73,4,1505,1622,1682,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/issue387/va2.vpr,0,1717,15,0,1698,1718,1736,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/issue387/va3.vpr,0,1845,56,3,1799,1811,1925,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/issue387/va4.vpr,0,1597,37,2,1545,1613,1633,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/issue387/va5.vpr,0,1701,10,0,1686,1705,1712,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/issue387/va6.vpr,1,2036,76,3,1976,1988,2145,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion v2 == v1 might not hold. (va6.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion v2 == v1 might not hold. (va6.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion v2 == v1 might not hold. (va6.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion v2 == v1 might not hold. (va6.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion v2 == v1 might not hold. (va6.vpr@35.3)))
../../src/test/resources/frontend-generated/issue387/va7.vpr,0,1505,22,1,1477,1508,1531,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/issue387/va8.vpr,0,1707,43,2,1665,1691,1767,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/issue387/va9.vpr,1,1578,95,6,1445,1633,1658,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion o.f == 2 might not hold. (va9.vpr@14.5)); List([assert.failed:assertion.false] Assert might fail. Assertion o.f == 2 might not hold. (va9.vpr@14.5)); List([assert.failed:assertion.false] Assert might fail. Assertion o.f == 2 might not hold. (va9.vpr@14.5)); List([assert.failed:assertion.false] Assert might fail. Assertion o.f == 2 might not hold. (va9.vpr@14.5)); List([assert.failed:assertion.false] Assert might fail. Assertion o.f == 2 might not hold. (va9.vpr@14.5)))
../../src/test/resources/frontend-generated/quantifiedcombinations/dependency.vpr,3,2062,81,3,1983,2030,2174,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (dependency.vpr@30.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access pred(x). (dependency.vpr@44.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.g. (dependency.vpr@54.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (dependency.vpr@30.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access pred(x). (dependency.vpr@44.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.g. (dependency.vpr@54.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (dependency.vpr@30.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access pred(x). (dependency.vpr@44.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.g. (dependency.vpr@54.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (dependency.vpr@30.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access pred(x). (dependency.vpr@44.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.g. (dependency.vpr@54.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (dependency.vpr@30.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access pred(x). (dependency.vpr@44.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.g. (dependency.vpr@54.12)))
../../src/test/resources/frontend-generated/quantifiedcombinations/forall.vpr,0,1886,52,2,1830,1871,1957,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedcombinations/functions.vpr,0,2010,26,1,1982,2003,2045,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedcombinations/independence.vpr,1,1986,25,1,1953,1991,2016,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (independence.vpr@74.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (independence.vpr@74.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (independence.vpr@74.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (independence.vpr@74.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (independence.vpr@74.5)))
../../src/test/resources/frontend-generated/quantifiedcombinations/injectivity.vpr,5,1896,78,4,1789,1929,1972,Vector(List([postcondition.violated:receiver.not.injective] Postcondition of test01_1 might not hold. Receiver of pred1(y) [injectivity.vpr@19.43]  might not be injective. (injectivity.vpr@19.9); [postcondition.violated:receiver.not.injective] Postcondition of test01_2 might not hold. Receiver of pred1(y) [injectivity.vpr@26.55]  might not be injective. (injectivity.vpr@26.9); [postcondition.violated:receiver.not.injective] Postcondition of test02 might not hold. Receiver of pred2(y; 1) [injectivity.vpr@34.44]  might not be injective. (injectivity.vpr@34.10); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@42.2); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@49.2)); List([postcondition.violated:receiver.not.injective] Postcondition of test01_1 might not hold. Receiver of pred1(y) [injectivity.vpr@19.43]  might not be injective. (injectivity.vpr@19.9); [postcondition.violated:receiver.not.injective] Postcondition of test01_2 might not hold. Receiver of pred1(y) [injectivity.vpr@26.55]  might not be injective. (injectivity.vpr@26.9); [postcondition.violated:receiver.not.injective] Postcondition of test02 might not hold. Receiver of pred2(y; 1) [injectivity.vpr@34.44]  might not be injective. (injectivity.vpr@34.10); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@42.2); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@49.2)); List([postcondition.violated:receiver.not.injective] Postcondition of test01_1 might not hold. Receiver of pred1(y) [injectivity.vpr@19.43]  might not be injective. (injectivity.vpr@19.9); [postcondition.violated:receiver.not.injective] Postcondition of test01_2 might not hold. Receiver of pred1(y) [injectivity.vpr@26.55]  might not be injective. (injectivity.vpr@26.9); [postcondition.violated:receiver.not.injective] Postcondition of test02 might not hold. Receiver of pred2(y; 1) [injectivity.vpr@34.44]  might not be injective. (injectivity.vpr@34.10); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@42.2); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@49.2)); List([postcondition.violated:receiver.not.injective] Postcondition of test01_1 might not hold. Receiver of pred1(y) [injectivity.vpr@19.43]  might not be injective. (injectivity.vpr@19.9); [postcondition.violated:receiver.not.injective] Postcondition of test01_2 might not hold. Receiver of pred1(y) [injectivity.vpr@26.55]  might not be injective. (injectivity.vpr@26.9); [postcondition.violated:receiver.not.injective] Postcondition of test02 might not hold. Receiver of pred2(y; 1) [injectivity.vpr@34.44]  might not be injective. (injectivity.vpr@34.10); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@42.2); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@49.2)); List([postcondition.violated:receiver.not.injective] Postcondition of test01_1 might not hold. Receiver of pred1(y) [injectivity.vpr@19.43]  might not be injective. (injectivity.vpr@19.9); [postcondition.violated:receiver.not.injective] Postcondition of test01_2 might not hold. Receiver of pred1(y) [injectivity.vpr@26.55]  might not be injective. (injectivity.vpr@26.9); [postcondition.violated:receiver.not.injective] Postcondition of test02 might not hold. Receiver of pred2(y; 1) [injectivity.vpr@34.44]  might not be injective. (injectivity.vpr@34.10); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@42.2); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@49.2)))
../../src/test/resources/frontend-generated/quantifiedcombinations/multiple_quantifiers.vpr,2,2395,147,6,2204,2418,2564,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access rcvr(i; j).f. (multiple_quantifiers.vpr@41.3); [unfold.failed:insufficient.permission] Unfolding P((aloc(rs1; k1): Ref); (aloc(rs2; k2): Ref)) might fail. There might be insufficient permission to access P((aloc(rs1; k1): Ref); (aloc(rs2; k2): Ref)). (multiple_quantifiers.vpr@149.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access rcvr(i; j).f. (multiple_quantifiers.vpr@41.3); [unfold.failed:insufficient.permission] Unfolding P((aloc(rs1; k1): Ref); (aloc(rs2; k2): Ref)) might fail. There might be insufficient permission to access P((aloc(rs1; k1): Ref); (aloc(rs2; k2): Ref)). (multiple_quantifiers.vpr@149.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access rcvr(i; j).f. (multiple_quantifiers.vpr@41.3); [unfold.failed:insufficient.permission] Unfolding P((aloc(rs1; k1): Ref); (aloc(rs2; k2): Ref)) might fail. There might be insufficient permission to access P((aloc(rs1; k1): Ref); (aloc(rs2; k2): Ref)). (multiple_quantifiers.vpr@149.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access rcvr(i; j).f. (multiple_quantifiers.vpr@41.3); [unfold.failed:insufficient.permission] Unfolding P((aloc(rs1; k1): Ref); (aloc(rs2; k2): Ref)) might fail. There might be insufficient permission to access P((aloc(rs1; k1): Ref); (aloc(rs2; k2): Ref)). (multiple_quantifiers.vpr@149.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access rcvr(i; j).f. (multiple_quantifiers.vpr@41.3); [unfold.failed:insufficient.permission] Unfolding P((aloc(rs1; k1): Ref); (aloc(rs2; k2): Ref)) might fail. There might be insufficient permission to access P((aloc(rs1; k1): Ref); (aloc(rs2; k2): Ref)). (multiple_quantifiers.vpr@149.3)))
../../src/test/resources/frontend-generated/quantifiedcombinations/no_condition.vpr,0,1904,7,0,1894,1905,1913,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedcombinations/perm.vpr,0,1559,38,2,1505,1578,1594,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedcombinations/write_permission.vpr,4,2009,27,1,1982,1999,2047,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.g. (write_permission.vpr@24.9); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.f. (write_permission.vpr@37.9); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.g. (write_permission.vpr@70.9); [unfold.failed:insufficient.permission] Unfolding p(r) might fail. There might be insufficient permission to access p(r). (write_permission.vpr@84.9)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.g. (write_permission.vpr@24.9); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.f. (write_permission.vpr@37.9); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.g. (write_permission.vpr@70.9); [unfold.failed:insufficient.permission] Unfolding p(r) might fail. There might be insufficient permission to access p(r). (write_permission.vpr@84.9)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.g. (write_permission.vpr@24.9); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.f. (write_permission.vpr@37.9); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.g. (write_permission.vpr@70.9); [unfold.failed:insufficient.permission] Unfolding p(r) might fail. There might be insufficient permission to access p(r). (write_permission.vpr@84.9)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.g. (write_permission.vpr@24.9); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.f. (write_permission.vpr@37.9); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.g. (write_permission.vpr@70.9); [unfold.failed:insufficient.permission] Unfolding p(r) might fail. There might be insufficient permission to access p(r). (write_permission.vpr@84.9)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.g. (write_permission.vpr@24.9); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.f. (write_permission.vpr@37.9); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.g. (write_permission.vpr@70.9); [unfold.failed:insufficient.permission] Unfolding p(r) might fail. There might be insufficient permission to access p(r). (write_permission.vpr@84.9)))
../../src/test/resources/frontend-generated/quantifiedpermissions/consistency/foralls.vpr,2,1917,37,1,1866,1930,1956,Vector(List([not.wellformed:seq.index.length] Contract might not be well-formed. Index a * i + b into xs might exceed sequence length. (foralls.vpr@35.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (foralls.vpr@45.12)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index a * i + b into xs might exceed sequence length. (foralls.vpr@35.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (foralls.vpr@45.12)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index a * i + b into xs might exceed sequence length. (foralls.vpr@35.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (foralls.vpr@45.12)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index a * i + b into xs might exceed sequence length. (foralls.vpr@35.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (foralls.vpr@45.12)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index a * i + b into xs might exceed sequence length. (foralls.vpr@35.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (foralls.vpr@45.12)))
../../src/test/resources/frontend-generated/quantifiedpermissions/consistency/injectivity-check.vpr,2,1539,63,4,1449,1576,1592,Vector(List([assert.failed:receiver.not.injective] Assert might fail. Receiver of P(0; 1) [injectivity-check.vpr@20.38]  might not be injective. (injectivity-check.vpr@20.5); [assert.failed:receiver.not.injective] Assert might fail. Receiver of P(j; j) [injectivity-check.vpr@31.46]  might not be injective. (injectivity-check.vpr@31.5)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of P(0; 1) [injectivity-check.vpr@20.38]  might not be injective. (injectivity-check.vpr@20.5); [assert.failed:receiver.not.injective] Assert might fail. Receiver of P(j; j) [injectivity-check.vpr@31.46]  might not be injective. (injectivity-check.vpr@31.5)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of P(0; 1) [injectivity-check.vpr@20.38]  might not be injective. (injectivity-check.vpr@20.5); [assert.failed:receiver.not.injective] Assert might fail. Receiver of P(j; j) [injectivity-check.vpr@31.46]  might not be injective. (injectivity-check.vpr@31.5)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of P(0; 1) [injectivity-check.vpr@20.38]  might not be injective. (injectivity-check.vpr@20.5); [assert.failed:receiver.not.injective] Assert might fail. Receiver of P(j; j) [injectivity-check.vpr@31.46]  might not be injective. (injectivity-check.vpr@31.5)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of P(0; 1) [injectivity-check.vpr@20.38]  might not be injective. (injectivity-check.vpr@20.5); [assert.failed:receiver.not.injective] Assert might fail. Receiver of P(j; j) [injectivity-check.vpr@31.46]  might not be injective. (injectivity-check.vpr@31.5)))
../../src/test/resources/frontend-generated/quantifiedpermissions/consistency/permissions.vpr,6,1765,74,4,1662,1805,1830,Vector(List([call.precondition:insufficient.permission] The precondition of method test01 might not hold. There might be insufficient permission to access x.f. (permissions.vpr@14.3); [call.precondition:insufficient.permission] The precondition of method test01_qp might not hold. There might be insufficient permission to access x.f. (permissions.vpr@28.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (permissions.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@48.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@56.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@70.3)); List([call.precondition:insufficient.permission] The precondition of method test01 might not hold. There might be insufficient permission to access x.f. (permissions.vpr@14.3); [call.precondition:insufficient.permission] The precondition of method test01_qp might not hold. There might be insufficient permission to access x.f. (permissions.vpr@28.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (permissions.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@48.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@56.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@70.3)); List([call.precondition:insufficient.permission] The precondition of method test01 might not hold. There might be insufficient permission to access x.f. (permissions.vpr@14.3); [call.precondition:insufficient.permission] The precondition of method test01_qp might not hold. There might be insufficient permission to access x.f. (permissions.vpr@28.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (permissions.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@48.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@56.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@70.3)); List([call.precondition:insufficient.permission] The precondition of method test01 might not hold. There might be insufficient permission to access x.f. (permissions.vpr@14.3); [call.precondition:insufficient.permission] The precondition of method test01_qp might not hold. There might be insufficient permission to access x.f. (permissions.vpr@28.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (permissions.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@48.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@56.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@70.3)); List([call.precondition:insufficient.permission] The precondition of method test01 might not hold. There might be insufficient permission to access x.f. (permissions.vpr@14.3); [call.precondition:insufficient.permission] The precondition of method test01_qp might not hold. There might be insufficient permission to access x.f. (permissions.vpr@28.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (permissions.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@48.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@56.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@70.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0059.vpr,0,1571,23,1,1538,1582,1593,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0060.vpr,0,1969,34,1,1925,1976,2008,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0062.vpr,1,1951,21,1,1929,1945,1980,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion x != y might not hold. (issue_0062.vpr@18.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x != y might not hold. (issue_0062.vpr@18.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x != y might not hold. (issue_0062.vpr@18.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x != y might not hold. (issue_0062.vpr@18.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x != y might not hold. (issue_0062.vpr@18.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0063.vpr,0,1944,23,1,1914,1949,1970,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0064.vpr,4,1960,20,1,1944,1949,1989,Vector(List([postcondition.violated:insufficient.permission] Postcondition of m01 might not hold. There might be insufficient permission to access y.f. (issue_0064.vpr@12.12); [postcondition.violated:assertion.false] Postcondition of m03 might not hold. Assertion (forall y: Ref :: { (y in S2) } (y in S2) ==> y != null) might not hold. (issue_0064.vpr@26.12); [postcondition.violated:assertion.false] Postcondition of m04 might not hold. Assertion (forall y: Ref :: { (y in S2) } (y in S2) ==> y != null) might not hold. (issue_0064.vpr@34.12); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { s[i] } 0 <= i && i < |s| ==> s[i] != null) might not hold. (issue_0064.vpr@50.3)); List([postcondition.violated:insufficient.permission] Postcondition of m01 might not hold. There might be insufficient permission to access y.f. (issue_0064.vpr@12.12); [postcondition.violated:assertion.false] Postcondition of m03 might not hold. Assertion (forall y: Ref :: { (y in S2) } (y in S2) ==> y != null) might not hold. (issue_0064.vpr@26.12); [postcondition.violated:assertion.false] Postcondition of m04 might not hold. Assertion (forall y: Ref :: { (y in S2) } (y in S2) ==> y != null) might not hold. (issue_0064.vpr@34.12); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { s[i] } 0 <= i && i < |s| ==> s[i] != null) might not hold. (issue_0064.vpr@50.3)); List([postcondition.violated:insufficient.permission] Postcondition of m01 might not hold. There might be insufficient permission to access y.f. (issue_0064.vpr@12.12); [postcondition.violated:assertion.false] Postcondition of m03 might not hold. Assertion (forall y: Ref :: { (y in S2) } (y in S2) ==> y != null) might not hold. (issue_0064.vpr@26.12); [postcondition.violated:assertion.false] Postcondition of m04 might not hold. Assertion (forall y: Ref :: { (y in S2) } (y in S2) ==> y != null) might not hold. (issue_0064.vpr@34.12); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { s[i] } 0 <= i && i < |s| ==> s[i] != null) might not hold. (issue_0064.vpr@50.3)); List([postcondition.violated:insufficient.permission] Postcondition of m01 might not hold. There might be insufficient permission to access y.f. (issue_0064.vpr@12.12); [postcondition.violated:assertion.false] Postcondition of m03 might not hold. Assertion (forall y: Ref :: { (y in S2) } (y in S2) ==> y != null) might not hold. (issue_0064.vpr@26.12); [postcondition.violated:assertion.false] Postcondition of m04 might not hold. Assertion (forall y: Ref :: { (y in S2) } (y in S2) ==> y != null) might not hold. (issue_0064.vpr@34.12); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { s[i] } 0 <= i && i < |s| ==> s[i] != null) might not hold. (issue_0064.vpr@50.3)); List([postcondition.violated:insufficient.permission] Postcondition of m01 might not hold. There might be insufficient permission to access y.f. (issue_0064.vpr@12.12); [postcondition.violated:assertion.false] Postcondition of m03 might not hold. Assertion (forall y: Ref :: { (y in S2) } (y in S2) ==> y != null) might not hold. (issue_0064.vpr@26.12); [postcondition.violated:assertion.false] Postcondition of m04 might not hold. Assertion (forall y: Ref :: { (y in S2) } (y in S2) ==> y != null) might not hold. (issue_0064.vpr@34.12); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { s[i] } 0 <= i && i < |s| ==> s[i] != null) might not hold. (issue_0064.vpr@50.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0065.vpr,0,1937,30,1,1896,1947,1970,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0066.vpr,1,1675,47,2,1613,1683,1729,Vector(List([assert.failed:receiver.not.injective] Assert might fail. Receiver of s.f.g [issue_0066.vpr@26.42]  might not be injective. (issue_0066.vpr@26.3)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of s.f.g [issue_0066.vpr@26.42]  might not be injective. (issue_0066.vpr@26.3)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of s.f.g [issue_0066.vpr@26.42]  might not be injective. (issue_0066.vpr@26.3)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of s.f.g [issue_0066.vpr@26.42]  might not be injective. (issue_0066.vpr@26.3)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of s.f.g [issue_0066.vpr@26.42]  might not be injective. (issue_0066.vpr@26.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0067.vpr,4,1777,66,3,1684,1823,1826,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access a.f. (issue_0067.vpr@15.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access b.f. (issue_0067.vpr@26.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access b.f. (issue_0067.vpr@37.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0067.vpr@50.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access a.f. (issue_0067.vpr@15.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access b.f. (issue_0067.vpr@26.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access b.f. (issue_0067.vpr@37.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0067.vpr@50.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access a.f. (issue_0067.vpr@15.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access b.f. (issue_0067.vpr@26.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access b.f. (issue_0067.vpr@37.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0067.vpr@50.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access a.f. (issue_0067.vpr@15.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access b.f. (issue_0067.vpr@26.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access b.f. (issue_0067.vpr@37.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0067.vpr@50.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access a.f. (issue_0067.vpr@15.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access b.f. (issue_0067.vpr@26.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access b.f. (issue_0067.vpr@37.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0067.vpr@50.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0073.vpr,1,1887,43,2,1841,1874,1946,Vector(List([postcondition.violated:receiver.not.injective] Postcondition of n might not hold. Receiver of s[i1].f [issue_0073.vpr@30.49]  might not be injective. (issue_0073.vpr@30.11)); List([postcondition.violated:receiver.not.injective] Postcondition of n might not hold. Receiver of s[i1].f [issue_0073.vpr@30.49]  might not be injective. (issue_0073.vpr@30.11)); List([postcondition.violated:receiver.not.injective] Postcondition of n might not hold. Receiver of s[i1].f [issue_0073.vpr@30.49]  might not be injective. (issue_0073.vpr@30.11)); List([postcondition.violated:receiver.not.injective] Postcondition of n might not hold. Receiver of s[i1].f [issue_0073.vpr@30.49]  might not be injective. (issue_0073.vpr@30.11)); List([postcondition.violated:receiver.not.injective] Postcondition of n might not hold. Receiver of s[i1].f [issue_0073.vpr@30.49]  might not be injective. (issue_0073.vpr@30.11)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0077.vpr,1,1947,4,0,1943,1946,1953,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion p != none might not hold. (issue_0077.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion p != none might not hold. (issue_0077.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion p != none might not hold. (issue_0077.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion p != none might not hold. (issue_0077.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion p != none might not hold. (issue_0077.vpr@27.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0078-distilled.vpr,0,1645,15,0,1624,1656,1657,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0078-working.vpr,1,1600,81,5,1487,1643,1672,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion y.left == z.left might not hold. (issue_0078-working.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion y.left == z.left might not hold. (issue_0078-working.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion y.left == z.left might not hold. (issue_0078-working.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion y.left == z.left might not hold. (issue_0078-working.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion y.left == z.left might not hold. (issue_0078-working.vpr@32.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0078.vpr,1,1829,41,2,1773,1840,1874,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.p. (issue_0078.vpr@28.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.p. (issue_0078.vpr@28.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.p. (issue_0078.vpr@28.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.p. (issue_0078.vpr@28.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.p. (issue_0078.vpr@28.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0079.vpr,0,1767,39,2,1713,1784,1806,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0080.vpr,1,1953,15,0,1942,1943,1976,Vector(List([not.wellformed:seq.index.negative] Contract might not be well-formed. Index a * x + b into xs might be negative. (issue_0080.vpr@10.12)); List([not.wellformed:seq.index.negative] Contract might not be well-formed. Index a * x + b into xs might be negative. (issue_0080.vpr@10.12)); List([not.wellformed:seq.index.negative] Contract might not be well-formed. Index a * x + b into xs might be negative. (issue_0080.vpr@10.12)); List([not.wellformed:seq.index.negative] Contract might not be well-formed. Index a * x + b into xs might be negative. (issue_0080.vpr@10.12)); List([not.wellformed:seq.index.negative] Contract might not be well-formed. Index a * x + b into xs might be negative. (issue_0080.vpr@10.12)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0081.vpr,0,1989,6,0,1984,1985,1999,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0081b.vpr,0,1566,46,2,1526,1541,1632,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0085.vpr,1,1638,60,3,1579,1616,1721,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085.vpr@18.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085.vpr@18.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085.vpr@18.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085.vpr@18.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085.vpr@18.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0085a.vpr,3,1662,80,4,1555,1683,1748,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@16.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@26.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@40.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@16.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@26.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@40.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@16.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@26.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@40.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@16.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@26.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@40.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@16.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@26.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@40.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0095.vpr,0,1507,65,4,1415,1550,1558,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0096.vpr,1,38,1,2,37,39,40,Vector(List(Consistency error: "wildcard" can only be used in accessibility predicates (issue_0096.vpr@14.8)); List(Consistency error: "wildcard" can only be used in accessibility predicates (issue_0096.vpr@14.8)); List(Consistency error: "wildcard" can only be used in accessibility predicates (issue_0096.vpr@14.8)); List(Consistency error: "wildcard" can only be used in accessibility predicates (issue_0096.vpr@14.8)); List(Consistency error: "wildcard" can only be used in accessibility predicates (issue_0096.vpr@14.8)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0098.vpr,1,1532,11,0,1519,1531,1546,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion a.f == b.f might not hold. (issue_0098.vpr@15.3)); List([assert.failed:assertion.false] Assert might fail. Assertion a.f == b.f might not hold. (issue_0098.vpr@15.3)); List([assert.failed:assertion.false] Assert might fail. Assertion a.f == b.f might not hold. (issue_0098.vpr@15.3)); List([assert.failed:assertion.false] Assert might fail. Assertion a.f == b.f might not hold. (issue_0098.vpr@15.3)); List([assert.failed:assertion.false] Assert might fail. Assertion a.f == b.f might not hold. (issue_0098.vpr@15.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0099.vpr,5,1971,11,0,1955,1977,1981,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion n > 0 might not hold. (issue_0099.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion n > 0 might not hold. (issue_0099.vpr@21.3); [postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion n > 0 might not hold. (issue_0099.vpr@30.12); [assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (issue_0099.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (issue_0099.vpr@51.3)); List([assert.failed:assertion.false] Assert might fail. Assertion n > 0 might not hold. (issue_0099.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion n > 0 might not hold. (issue_0099.vpr@21.3); [postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion n > 0 might not hold. (issue_0099.vpr@30.12); [assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (issue_0099.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (issue_0099.vpr@51.3)); List([assert.failed:assertion.false] Assert might fail. Assertion n > 0 might not hold. (issue_0099.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion n > 0 might not hold. (issue_0099.vpr@21.3); [postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion n > 0 might not hold. (issue_0099.vpr@30.12); [assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (issue_0099.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (issue_0099.vpr@51.3)); List([assert.failed:assertion.false] Assert might fail. Assertion n > 0 might not hold. (issue_0099.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion n > 0 might not hold. (issue_0099.vpr@21.3); [postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion n > 0 might not hold. (issue_0099.vpr@30.12); [assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (issue_0099.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (issue_0099.vpr@51.3)); List([assert.failed:assertion.false] Assert might fail. Assertion n > 0 might not hold. (issue_0099.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion n > 0 might not hold. (issue_0099.vpr@21.3); [postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion n > 0 might not hold. (issue_0099.vpr@30.12); [assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (issue_0099.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (issue_0099.vpr@51.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0102.vpr,3,2063,40,1,2018,2054,2117,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0102.vpr@31.3); [postcondition.violated:assertion.false] Postcondition of test5 might not hold. Assertion false might not hold. (issue_0102.vpr@45.11); [postcondition.violated:assertion.false] Postcondition of test4 might not hold. Assertion false might not hold. (issue_0102.vpr@62.11)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0102.vpr@31.3); [postcondition.violated:assertion.false] Postcondition of test5 might not hold. Assertion false might not hold. (issue_0102.vpr@45.11); [postcondition.violated:assertion.false] Postcondition of test4 might not hold. Assertion false might not hold. (issue_0102.vpr@62.11)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0102.vpr@31.3); [postcondition.violated:assertion.false] Postcondition of test5 might not hold. Assertion false might not hold. (issue_0102.vpr@45.11); [postcondition.violated:assertion.false] Postcondition of test4 might not hold. Assertion false might not hold. (issue_0102.vpr@62.11)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0102.vpr@31.3); [postcondition.violated:assertion.false] Postcondition of test5 might not hold. Assertion false might not hold. (issue_0102.vpr@45.11); [postcondition.violated:assertion.false] Postcondition of test4 might not hold. Assertion false might not hold. (issue_0102.vpr@62.11)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0102.vpr@31.3); [postcondition.violated:assertion.false] Postcondition of test5 might not hold. Assertion false might not hold. (issue_0102.vpr@45.11); [postcondition.violated:assertion.false] Postcondition of test4 might not hold. Assertion false might not hold. (issue_0102.vpr@62.11)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0121.vpr,0,1613,83,5,1496,1662,1682,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0122.vpr,0,1572,43,2,1514,1583,1620,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0124.vpr,0,1969,15,0,1950,1971,1988,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0139.vpr,6,2767,52,1,2694,2791,2816,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@36.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@54.3); [assert.failed:assertion.false] Assert might fail. Assertion 20 == fun04(xs; false) might not hold. (issue_0139.vpr@90.3); [assert.failed:assertion.false] Assert might fail. Assertion 10 == fun05(x; xs) might not hold. (issue_0139.vpr@107.3); [assert.failed:assertion.false] Assert might fail. Assertion 10 == fun06(x; i; xs) might not hold. (issue_0139.vpr@128.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@36.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@54.3); [assert.failed:assertion.false] Assert might fail. Assertion 20 == fun04(xs; false) might not hold. (issue_0139.vpr@90.3); [assert.failed:assertion.false] Assert might fail. Assertion 10 == fun05(x; xs) might not hold. (issue_0139.vpr@107.3); [assert.failed:assertion.false] Assert might fail. Assertion 10 == fun06(x; i; xs) might not hold. (issue_0139.vpr@128.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@36.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@54.3); [assert.failed:assertion.false] Assert might fail. Assertion 20 == fun04(xs; false) might not hold. (issue_0139.vpr@90.3); [assert.failed:assertion.false] Assert might fail. Assertion 10 == fun05(x; xs) might not hold. (issue_0139.vpr@107.3); [assert.failed:assertion.false] Assert might fail. Assertion 10 == fun06(x; i; xs) might not hold. (issue_0139.vpr@128.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@36.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@54.3); [assert.failed:assertion.false] Assert might fail. Assertion 20 == fun04(xs; false) might not hold. (issue_0139.vpr@90.3); [assert.failed:assertion.false] Assert might fail. Assertion 10 == fun05(x; xs) might not hold. (issue_0139.vpr@107.3); [assert.failed:assertion.false] Assert might fail. Assertion 10 == fun06(x; i; xs) might not hold. (issue_0139.vpr@128.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@36.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@54.3); [assert.failed:assertion.false] Assert might fail. Assertion 20 == fun04(xs; false) might not hold. (issue_0139.vpr@90.3); [assert.failed:assertion.false] Assert might fail. Assertion 10 == fun05(x; xs) might not hold. (issue_0139.vpr@107.3); [assert.failed:assertion.false] Assert might fail. Assertion 10 == fun06(x; i; xs) might not hold. (issue_0139.vpr@128.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0142.vpr,2,1969,9,0,1956,1975,1977,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0142.vpr@29.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0142.vpr@39.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0142.vpr@29.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0142.vpr@39.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0142.vpr@29.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0142.vpr@39.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0142.vpr@29.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0142.vpr@39.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0142.vpr@29.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0142.vpr@39.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0147.vpr,1,1813,58,3,1736,1825,1878,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion xs[idx(5; 2; xs[3]; n)].f == 7 might not hold. (issue_0147.vpr@20.3)); List([assert.failed:assertion.false] Assert might fail. Assertion xs[idx(5; 2; xs[3]; n)].f == 7 might not hold. (issue_0147.vpr@20.3)); List([assert.failed:assertion.false] Assert might fail. Assertion xs[idx(5; 2; xs[3]; n)].f == 7 might not hold. (issue_0147.vpr@20.3)); List([assert.failed:assertion.false] Assert might fail. Assertion xs[idx(5; 2; xs[3]; n)].f == 7 might not hold. (issue_0147.vpr@20.3)); List([assert.failed:assertion.false] Assert might fail. Assertion xs[idx(5; 2; xs[3]; n)].f == 7 might not hold. (issue_0147.vpr@20.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0149.vpr,0,1962,11,0,1946,1968,1972,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0170.vpr,0,1956,13,0,1939,1961,1970,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0176.vpr,0,1955,17,0,1940,1946,1979,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0179.vpr,0,1620,31,1,1579,1627,1654,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0184.vpr,0,1936,22,1,1907,1942,1960,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0205.vpr,4,3881,94,2,3767,3879,3998,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion fun01qp(xs; i2) == old(fun01qp(xs; i2)) might not hold. (issue_0205.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02qp(xs; i2) == old(fun02qp(xs; i2)) might not hold. (issue_0205.vpr@104.3); [assert.failed:assertion.false] Assert might fail. Assertion fun03qp(x; i2) == old(fun03qp(x; i2)) might not hold. (issue_0205.vpr@123.3); [assert.failed:assertion.false] Assert might fail. Assertion fun04qp(x; i2) == old(fun04qp(x; i2)) might not hold. (issue_0205.vpr@142.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun01qp(xs; i2) == old(fun01qp(xs; i2)) might not hold. (issue_0205.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02qp(xs; i2) == old(fun02qp(xs; i2)) might not hold. (issue_0205.vpr@104.3); [assert.failed:assertion.false] Assert might fail. Assertion fun03qp(x; i2) == old(fun03qp(x; i2)) might not hold. (issue_0205.vpr@123.3); [assert.failed:assertion.false] Assert might fail. Assertion fun04qp(x; i2) == old(fun04qp(x; i2)) might not hold. (issue_0205.vpr@142.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun01qp(xs; i2) == old(fun01qp(xs; i2)) might not hold. (issue_0205.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02qp(xs; i2) == old(fun02qp(xs; i2)) might not hold. (issue_0205.vpr@104.3); [assert.failed:assertion.false] Assert might fail. Assertion fun03qp(x; i2) == old(fun03qp(x; i2)) might not hold. (issue_0205.vpr@123.3); [assert.failed:assertion.false] Assert might fail. Assertion fun04qp(x; i2) == old(fun04qp(x; i2)) might not hold. (issue_0205.vpr@142.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun01qp(xs; i2) == old(fun01qp(xs; i2)) might not hold. (issue_0205.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02qp(xs; i2) == old(fun02qp(xs; i2)) might not hold. (issue_0205.vpr@104.3); [assert.failed:assertion.false] Assert might fail. Assertion fun03qp(x; i2) == old(fun03qp(x; i2)) might not hold. (issue_0205.vpr@123.3); [assert.failed:assertion.false] Assert might fail. Assertion fun04qp(x; i2) == old(fun04qp(x; i2)) might not hold. (issue_0205.vpr@142.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun01qp(xs; i2) == old(fun01qp(xs; i2)) might not hold. (issue_0205.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02qp(xs; i2) == old(fun02qp(xs; i2)) might not hold. (issue_0205.vpr@104.3); [assert.failed:assertion.false] Assert might fail. Assertion fun03qp(x; i2) == old(fun03qp(x; i2)) might not hold. (issue_0205.vpr@123.3); [assert.failed:assertion.false] Assert might fail. Assertion fun04qp(x; i2) == old(fun04qp(x; i2)) might not hold. (issue_0205.vpr@142.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/unofficial_0001.vpr,0,1808,84,4,1742,1755,1928,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/unofficial_0002.vpr,1,1719,24,1,1694,1713,1752,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access node.is_marked. (unofficial_0002.vpr@29.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access node.is_marked. (unofficial_0002.vpr@29.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access node.is_marked. (unofficial_0002.vpr@29.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access node.is_marked. (unofficial_0002.vpr@29.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access node.is_marked. (unofficial_0002.vpr@29.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/unofficial_0003.vpr,0,2040,31,1,2018,2018,2084,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/unofficial_0004.vpr,0,1955,5,0,1948,1958,1961,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/arrays.vpr,0,1917,148,7,1708,2006,2037,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/countfalse.vpr,1,1909,13,0,1897,1903,1928,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (countfalse.vpr@31.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (countfalse.vpr@31.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (countfalse.vpr@31.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (countfalse.vpr@31.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (countfalse.vpr@31.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/dutch-flag.vpr,0,2414,40,1,2367,2410,2466,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/functions.vpr,6,3166,21,0,3138,3171,3190,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion fun02(xs) == 14 might not hold. (functions.vpr@37.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions.vpr@87.3); [assert.failed:assertion.false] Assert might fail. Assertion v2 == v1 might not hold. (functions.vpr@115.3); [assert.failed:assertion.false] Assert might fail. Assertion v2 == fun04(x; n; 4) might not hold. (functions.vpr@155.3); [assert.failed:assertion.false] Assert might fail. Assertion fun07(xs; -10) > 0 might not hold. (functions.vpr@181.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun02(xs) == 14 might not hold. (functions.vpr@37.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions.vpr@87.3); [assert.failed:assertion.false] Assert might fail. Assertion v2 == v1 might not hold. (functions.vpr@115.3); [assert.failed:assertion.false] Assert might fail. Assertion v2 == fun04(x; n; 4) might not hold. (functions.vpr@155.3); [assert.failed:assertion.false] Assert might fail. Assertion fun07(xs; -10) > 0 might not hold. (functions.vpr@181.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun02(xs) == 14 might not hold. (functions.vpr@37.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions.vpr@87.3); [assert.failed:assertion.false] Assert might fail. Assertion v2 == v1 might not hold. (functions.vpr@115.3); [assert.failed:assertion.false] Assert might fail. Assertion v2 == fun04(x; n; 4) might not hold. (functions.vpr@155.3); [assert.failed:assertion.false] Assert might fail. Assertion fun07(xs; -10) > 0 might not hold. (functions.vpr@181.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun02(xs) == 14 might not hold. (functions.vpr@37.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions.vpr@87.3); [assert.failed:assertion.false] Assert might fail. Assertion v2 == v1 might not hold. (functions.vpr@115.3); [assert.failed:assertion.false] Assert might fail. Assertion v2 == fun04(x; n; 4) might not hold. (functions.vpr@155.3); [assert.failed:assertion.false] Assert might fail. Assertion fun07(xs; -10) > 0 might not hold. (functions.vpr@181.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun02(xs) == 14 might not hold. (functions.vpr@37.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions.vpr@87.3); [assert.failed:assertion.false] Assert might fail. Assertion v2 == v1 might not hold. (functions.vpr@115.3); [assert.failed:assertion.false] Assert might fail. Assertion v2 == fun04(x; n; 4) might not hold. (functions.vpr@155.3); [assert.failed:assertion.false] Assert might fail. Assertion fun07(xs; -10) > 0 might not hold. (functions.vpr@181.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/functions2.vpr,2,1970,10,0,1957,1971,1983,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions2.vpr@22.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(xs; ys) might not hold. (functions2.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions2.vpr@22.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(xs; ys) might not hold. (functions2.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions2.vpr@22.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(xs; ys) might not hold. (functions2.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions2.vpr@22.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(xs; ys) might not hold. (functions2.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions2.vpr@22.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(xs; ys) might not hold. (functions2.vpr@37.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/functions3.vpr,0,1734,134,7,1556,1766,1880,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/heap_dependent_triggers.vpr,4,2537,45,1,2495,2515,2601,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { foo(xs; i) } foo(xs; i)) might not hold. (heap_dependent_triggers.vpr@12.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (forall j: Int :: { fun01(xs; j) } { fun02(ys; j) } fun01(xs; j) == fun02(ys; j)) might not hold. (heap_dependent_triggers.vpr@30.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (forall j: Int :: { bar01(xs; bar02(ys; j)) } { foo(xs; j) } bar01(xs; bar02(ys; j)) == foo(xs; j)) might not hold. (heap_dependent_triggers.vpr@51.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall z: Int :: { get(hm2m(C); z; z) } get(hm2m(C); z; z) == 0) might not hold. (heap_dependent_triggers.vpr@122.5)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { foo(xs; i) } foo(xs; i)) might not hold. (heap_dependent_triggers.vpr@12.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (forall j: Int :: { fun01(xs; j) } { fun02(ys; j) } fun01(xs; j) == fun02(ys; j)) might not hold. (heap_dependent_triggers.vpr@30.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (forall j: Int :: { bar01(xs; bar02(ys; j)) } { foo(xs; j) } bar01(xs; bar02(ys; j)) == foo(xs; j)) might not hold. (heap_dependent_triggers.vpr@51.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall z: Int :: { get(hm2m(C); z; z) } get(hm2m(C); z; z) == 0) might not hold. (heap_dependent_triggers.vpr@122.5)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { foo(xs; i) } foo(xs; i)) might not hold. (heap_dependent_triggers.vpr@12.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (forall j: Int :: { fun01(xs; j) } { fun02(ys; j) } fun01(xs; j) == fun02(ys; j)) might not hold. (heap_dependent_triggers.vpr@30.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (forall j: Int :: { bar01(xs; bar02(ys; j)) } { foo(xs; j) } bar01(xs; bar02(ys; j)) == foo(xs; j)) might not hold. (heap_dependent_triggers.vpr@51.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall z: Int :: { get(hm2m(C); z; z) } get(hm2m(C); z; z) == 0) might not hold. (heap_dependent_triggers.vpr@122.5)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { foo(xs; i) } foo(xs; i)) might not hold. (heap_dependent_triggers.vpr@12.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (forall j: Int :: { fun01(xs; j) } { fun02(ys; j) } fun01(xs; j) == fun02(ys; j)) might not hold. (heap_dependent_triggers.vpr@30.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (forall j: Int :: { bar01(xs; bar02(ys; j)) } { foo(xs; j) } bar01(xs; bar02(ys; j)) == foo(xs; j)) might not hold. (heap_dependent_triggers.vpr@51.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall z: Int :: { get(hm2m(C); z; z) } get(hm2m(C); z; z) == 0) might not hold. (heap_dependent_triggers.vpr@122.5)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { foo(xs; i) } foo(xs; i)) might not hold. (heap_dependent_triggers.vpr@12.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (forall j: Int :: { fun01(xs; j) } { fun02(ys; j) } fun01(xs; j) == fun02(ys; j)) might not hold. (heap_dependent_triggers.vpr@30.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (forall j: Int :: { bar01(xs; bar02(ys; j)) } { foo(xs; j) } bar01(xs; bar02(ys; j)) == foo(xs; j)) might not hold. (heap_dependent_triggers.vpr@51.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall z: Int :: { get(hm2m(C); z; z) } get(hm2m(C); z; z) == 0) might not hold. (heap_dependent_triggers.vpr@122.5)))
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/misc1.vpr,0,1741,44,2,1701,1720,1804,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/performance.vpr,0,2277,108,4,2125,2340,2367,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/repeated_reading.vpr,0,1873,97,5,1742,1903,1976,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/snapshots.vpr,0,2260,60,2,2182,2272,2328,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/snapshots2.vpr,2,3901,95,2,3767,3961,3977,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion f1(xs) might not hold. (snapshots2.vpr@28.2); [assert.failed:assertion.false] Assert might fail. Assertion f3(xs) == b might not hold. (snapshots2.vpr@44.2)); List([assert.failed:assertion.false] Assert might fail. Assertion f1(xs) might not hold. (snapshots2.vpr@28.2); [assert.failed:assertion.false] Assert might fail. Assertion f3(xs) == b might not hold. (snapshots2.vpr@44.2)); List([assert.failed:assertion.false] Assert might fail. Assertion f1(xs) might not hold. (snapshots2.vpr@28.2); [assert.failed:assertion.false] Assert might fail. Assertion f3(xs) == b might not hold. (snapshots2.vpr@44.2)); List([assert.failed:assertion.false] Assert might fail. Assertion f1(xs) might not hold. (snapshots2.vpr@28.2); [assert.failed:assertion.false] Assert might fail. Assertion f3(xs) == b might not hold. (snapshots2.vpr@44.2)); List([assert.failed:assertion.false] Assert might fail. Assertion f1(xs) might not hold. (snapshots2.vpr@28.2); [assert.failed:assertion.false] Assert might fail. Assertion f3(xs) == b might not hold. (snapshots2.vpr@44.2)))
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/snapshots_partial_fvfs.vpr,1,2006,25,1,1986,1991,2043,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion xs[4].f == old(xs[4].f) might not hold. (snapshots_partial_fvfs.vpr@25.3)); List([assert.failed:assertion.false] Assert might fail. Assertion xs[4].f == old(xs[4].f) might not hold. (snapshots_partial_fvfs.vpr@25.3)); List([assert.failed:assertion.false] Assert might fail. Assertion xs[4].f == old(xs[4].f) might not hold. (snapshots_partial_fvfs.vpr@25.3)); List([assert.failed:assertion.false] Assert might fail. Assertion xs[4].f == old(xs[4].f) might not hold. (snapshots_partial_fvfs.vpr@25.3)); List([assert.failed:assertion.false] Assert might fail. Assertion xs[4].f == old(xs[4].f) might not hold. (snapshots_partial_fvfs.vpr@25.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/triggers_field_deref.vpr,3,2019,4,0,2015,2017,2025,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion fun02(x.g) > 0 might not hold. (triggers_field_deref.vpr@27.3); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (triggers_field_deref.vpr@93.3); [assert.failed:assertion.false] Assert might fail. Assertion y.g > 0 might not hold. (triggers_field_deref.vpr@139.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun02(x.g) > 0 might not hold. (triggers_field_deref.vpr@27.3); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (triggers_field_deref.vpr@93.3); [assert.failed:assertion.false] Assert might fail. Assertion y.g > 0 might not hold. (triggers_field_deref.vpr@139.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun02(x.g) > 0 might not hold. (triggers_field_deref.vpr@27.3); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (triggers_field_deref.vpr@93.3); [assert.failed:assertion.false] Assert might fail. Assertion y.g > 0 might not hold. (triggers_field_deref.vpr@139.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun02(x.g) > 0 might not hold. (triggers_field_deref.vpr@27.3); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (triggers_field_deref.vpr@93.3); [assert.failed:assertion.false] Assert might fail. Assertion y.g > 0 might not hold. (triggers_field_deref.vpr@139.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun02(x.g) > 0 might not hold. (triggers_field_deref.vpr@27.3); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (triggers_field_deref.vpr@93.3); [assert.failed:assertion.false] Assert might fail. Assertion y.g > 0 might not hold. (triggers_field_deref.vpr@139.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/unbounded.vpr,2,1613,57,3,1532,1653,1655,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unbounded.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unbounded.vpr@52.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unbounded.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unbounded.vpr@52.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unbounded.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unbounded.vpr@52.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unbounded.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unbounded.vpr@52.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unbounded.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unbounded.vpr@52.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/array.vpr,0,1876,2,0,1875,1875,1880,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/bsearch.vpr,1,2891,19,0,2866,2895,2913,Vector(List([postcondition.violated:assertion.false] Postcondition of bfind_orig might not hold. Assertion index == -1 ==> (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x) might not hold. (bsearch.vpr@18.11)); List([postcondition.violated:assertion.false] Postcondition of bfind_orig might not hold. Assertion index == -1 ==> (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x) might not hold. (bsearch.vpr@18.11)); List([postcondition.violated:assertion.false] Postcondition of bfind_orig might not hold. Assertion index == -1 ==> (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x) might not hold. (bsearch.vpr@18.11)); List([postcondition.violated:assertion.false] Postcondition of bfind_orig might not hold. Assertion index == -1 ==> (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x) might not hold. (bsearch.vpr@18.11)); List([postcondition.violated:assertion.false] Postcondition of bfind_orig might not hold. Assertion index == -1 ==> (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x) might not hold. (bsearch.vpr@18.11)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/exhaleseqparts.vpr,0,1963,21,1,1935,1968,1986,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/linked-list-qp-append.vpr,0,3007,59,1,2926,3031,3065,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/mergesort.vpr,0,2872,26,0,2835,2889,2893,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/parallel_max.vpr,0,2549,156,6,2329,2659,2661,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/parallel_qsort.vpr,0,2233,126,5,2122,2167,2411,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/random_access.vpr,1,1972,8,0,1964,1969,1983,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion s[a + j * b] != null might not hold. (random_access.vpr@31.3)); List([assert.failed:assertion.false] Assert might fail. Assertion s[a + j * b] != null might not hold. (random_access.vpr@31.3)); List([assert.failed:assertion.false] Assert might fail. Assertion s[a + j * b] != null might not hold. (random_access.vpr@31.3)); List([assert.failed:assertion.false] Assert might fail. Assertion s[a + j * b] != null might not hold. (random_access.vpr@31.3)); List([assert.failed:assertion.false] Assert might fail. Assertion s[a + j * b] != null might not hold. (random_access.vpr@31.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/self_framing.vpr,3,1952,7,0,1942,1953,1961,Vector(List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[2].f. (self_framing.vpr@10.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[i2].f. (self_framing.vpr@24.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[i3].f. (self_framing.vpr@41.3)); List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[2].f. (self_framing.vpr@10.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[i2].f. (self_framing.vpr@24.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[i3].f. (self_framing.vpr@41.3)); List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[2].f. (self_framing.vpr@10.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[i2].f. (self_framing.vpr@24.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[i3].f. (self_framing.vpr@41.3)); List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[2].f. (self_framing.vpr@10.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[i2].f. (self_framing.vpr@24.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[i3].f. (self_framing.vpr@41.3)); List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[2].f. (self_framing.vpr@10.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[i2].f. (self_framing.vpr@24.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[i3].f. (self_framing.vpr@41.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/seq_pure.vpr,3,2012,24,1,1981,2014,2041,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { (j in [0..|S|)) } { S[j] } (j in [0..|S|)) ==> S[j].f > 0) might not hold. (seq_pure.vpr@25.3); [postcondition.violated:assertion.false] Postcondition of test04 might not hold. Assertion (forall j: Int :: { S[j] } (j in [0..|S| - 1)) ==> S[j].f <= S[j + 1].f) might not hold. (seq_pure.vpr@41.11); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access S[j].f. (seq_pure.vpr@52.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { (j in [0..|S|)) } { S[j] } (j in [0..|S|)) ==> S[j].f > 0) might not hold. (seq_pure.vpr@25.3); [postcondition.violated:assertion.false] Postcondition of test04 might not hold. Assertion (forall j: Int :: { S[j] } (j in [0..|S| - 1)) ==> S[j].f <= S[j + 1].f) might not hold. (seq_pure.vpr@41.11); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access S[j].f. (seq_pure.vpr@52.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { (j in [0..|S|)) } { S[j] } (j in [0..|S|)) ==> S[j].f > 0) might not hold. (seq_pure.vpr@25.3); [postcondition.violated:assertion.false] Postcondition of test04 might not hold. Assertion (forall j: Int :: { S[j] } (j in [0..|S| - 1)) ==> S[j].f <= S[j + 1].f) might not hold. (seq_pure.vpr@41.11); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access S[j].f. (seq_pure.vpr@52.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { (j in [0..|S|)) } { S[j] } (j in [0..|S|)) ==> S[j].f > 0) might not hold. (seq_pure.vpr@25.3); [postcondition.violated:assertion.false] Postcondition of test04 might not hold. Assertion (forall j: Int :: { S[j] } (j in [0..|S| - 1)) ==> S[j].f <= S[j + 1].f) might not hold. (seq_pure.vpr@41.11); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access S[j].f. (seq_pure.vpr@52.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { (j in [0..|S|)) } { S[j] } (j in [0..|S|)) ==> S[j].f > 0) might not hold. (seq_pure.vpr@25.3); [postcondition.violated:assertion.false] Postcondition of test04 might not hold. Assertion (forall j: Int :: { S[j] } (j in [0..|S| - 1)) ==> S[j].f <= S[j + 1].f) might not hold. (seq_pure.vpr@41.11); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access S[j].f. (seq_pure.vpr@52.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/seqsingleelements.vpr,1,2863,87,3,2743,2903,2945,Vector(List([postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion S[k].value == 0 might not hold. (seqsingleelements.vpr@36.11)); List([postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion S[k].value == 0 might not hold. (seqsingleelements.vpr@36.11)); List([postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion S[k].value == 0 might not hold. (seqsingleelements.vpr@36.11)); List([postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion S[k].value == 0 might not hold. (seqsingleelements.vpr@36.11)); List([postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion S[k].value == 0 might not hold. (seqsingleelements.vpr@36.11)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/snapshots1.vpr,1,2055,37,1,2026,2032,2108,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion a == b might not hold. (snapshots1.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion a == b might not hold. (snapshots1.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion a == b might not hold. (snapshots1.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion a == b might not hold. (snapshots1.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion a == b might not hold. (snapshots1.vpr@24.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/snapshots2.vpr,0,1931,18,0,1907,1937,1951,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/test1.vpr,0,1774,86,4,1652,1829,1843,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/test2.vpr,2,1968,23,1,1947,1957,2001,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (test2.vpr@17.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (test2.vpr@35.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (test2.vpr@17.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (test2.vpr@35.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (test2.vpr@17.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (test2.vpr@35.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (test2.vpr@17.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (test2.vpr@35.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (test2.vpr@17.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (test2.vpr@35.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/wildcardedold.vpr,1,1957,9,0,1944,1961,1967,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion a.f == old(a.f) might not hold. (wildcardedold.vpr@20.5)); List([assert.failed:assertion.false] Assert might fail. Assertion a.f == old(a.f) might not hold. (wildcardedold.vpr@20.5)); List([assert.failed:assertion.false] Assert might fail. Assertion a.f == old(a.f) might not hold. (wildcardedold.vpr@20.5)); List([assert.failed:assertion.false] Assert might fail. Assertion a.f == old(a.f) might not hold. (wildcardedold.vpr@20.5)); List([assert.failed:assertion.false] Assert might fail. Assertion a.f == old(a.f) might not hold. (wildcardedold.vpr@20.5)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/access.vpr,1,1690,9,0,1677,1693,1700,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.g. (access.vpr@28.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.g. (access.vpr@28.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.g. (access.vpr@28.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.g. (access.vpr@28.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.g. (access.vpr@28.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/assignments.vpr,3,1564,45,2,1514,1554,1624,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@21.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@35.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@51.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@21.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@35.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@51.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@21.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@35.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@51.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@21.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@35.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@51.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@21.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@35.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@51.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/constraining_permissions.vpr,1,1607,41,2,1549,1636,1637,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (constraining_permissions.vpr@31.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (constraining_permissions.vpr@31.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (constraining_permissions.vpr@31.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (constraining_permissions.vpr@31.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (constraining_permissions.vpr@31.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/consumepureforall.vpr,1,1902,11,0,1894,1894,1918,Vector(List([exhale.failed:assertion.false] Exhale might fail. Assertion (forall t: Ref :: { (t in S) } (t in S) ==> t.f > 2 * a) might not hold. (consumepureforall.vpr@66.5)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forall t: Ref :: { (t in S) } (t in S) ==> t.f > 2 * a) might not hold. (consumepureforall.vpr@66.5)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forall t: Ref :: { (t in S) } (t in S) ==> t.f > 2 * a) might not hold. (consumepureforall.vpr@66.5)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forall t: Ref :: { (t in S) } (t in S) ==> t.f > 2 * a) might not hold. (consumepureforall.vpr@66.5)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forall t: Ref :: { (t in S) } (t in S) ==> t.f > 2 * a) might not hold. (consumepureforall.vpr@66.5)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/emptyforall.vpr,1,1616,86,5,1494,1672,1684,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion this.nodes == old(this.nodes) might not hold. (emptyforall.vpr@15.2)); List([assert.failed:assertion.false] Assert might fail. Assertion this.nodes == old(this.nodes) might not hold. (emptyforall.vpr@15.2)); List([assert.failed:assertion.false] Assert might fail. Assertion this.nodes == old(this.nodes) might not hold. (emptyforall.vpr@15.2)); List([assert.failed:assertion.false] Assert might fail. Assertion this.nodes == old(this.nodes) might not hold. (emptyforall.vpr@15.2)); List([assert.failed:assertion.false] Assert might fail. Assertion this.nodes == old(this.nodes) might not hold. (emptyforall.vpr@15.2)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/forall.vpr,0,1563,31,1,1519,1581,1591,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/forall_exhale.vpr,4,1735,25,1,1712,1723,1771,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access w.f. (forall_exhale.vpr@11.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access q.f. (forall_exhale.vpr@20.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access a.f. (forall_exhale.vpr@30.4); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access c.f. (forall_exhale.vpr@43.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access w.f. (forall_exhale.vpr@11.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access q.f. (forall_exhale.vpr@20.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access a.f. (forall_exhale.vpr@30.4); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access c.f. (forall_exhale.vpr@43.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access w.f. (forall_exhale.vpr@11.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access q.f. (forall_exhale.vpr@20.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access a.f. (forall_exhale.vpr@30.4); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access c.f. (forall_exhale.vpr@43.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access w.f. (forall_exhale.vpr@11.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access q.f. (forall_exhale.vpr@20.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access a.f. (forall_exhale.vpr@30.4); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access c.f. (forall_exhale.vpr@43.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access w.f. (forall_exhale.vpr@11.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access q.f. (forall_exhale.vpr@20.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access a.f. (forall_exhale.vpr@30.4); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access c.f. (forall_exhale.vpr@43.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/forall_exhale_single_elements.vpr,3,1615,114,7,1454,1690,1703,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (forall_exhale_single_elements.vpr@15.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (forall_exhale_single_elements.vpr@26.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (forall_exhale_single_elements.vpr@36.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (forall_exhale_single_elements.vpr@15.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (forall_exhale_single_elements.vpr@26.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (forall_exhale_single_elements.vpr@36.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (forall_exhale_single_elements.vpr@15.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (forall_exhale_single_elements.vpr@26.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (forall_exhale_single_elements.vpr@36.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (forall_exhale_single_elements.vpr@15.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (forall_exhale_single_elements.vpr@26.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (forall_exhale_single_elements.vpr@36.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (forall_exhale_single_elements.vpr@15.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (forall_exhale_single_elements.vpr@26.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (forall_exhale_single_elements.vpr@36.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/functions.vpr,0,1936,12,0,1918,1943,1947,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/generalised_shape.vpr,9,6715,30,0,6676,6719,6750,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x2.f. (generalised_shape.vpr@16.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access y1.g. (generalised_shape.vpr@27.3); [postcondition.violated:insufficient.permission] Postcondition of test12 might not hold. There might be insufficient permission to access x1.g. (generalised_shape.vpr@34.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.g. (generalised_shape.vpr@46.11); [postcondition.violated:receiver.not.injective] Postcondition of test10 might not hold. Receiver of x.g.f [generalised_shape.vpr@54.54]  might not be injective. (generalised_shape.vpr@54.12); [assert.failed:assertion.false] Assert might fail. Assertion y1.g != y3.g might not hold. (generalised_shape.vpr@92.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.f. (generalised_shape.vpr@124.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.g. (generalised_shape.vpr@136.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.g.f. (generalised_shape.vpr@152.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x2.f. (generalised_shape.vpr@16.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access y1.g. (generalised_shape.vpr@27.3); [postcondition.violated:insufficient.permission] Postcondition of test12 might not hold. There might be insufficient permission to access x1.g. (generalised_shape.vpr@34.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.g. (generalised_shape.vpr@46.11); [postcondition.violated:receiver.not.injective] Postcondition of test10 might not hold. Receiver of x.g.f [generalised_shape.vpr@54.54]  might not be injective. (generalised_shape.vpr@54.12); [assert.failed:assertion.false] Assert might fail. Assertion y1.g != y3.g might not hold. (generalised_shape.vpr@92.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.f. (generalised_shape.vpr@124.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.g. (generalised_shape.vpr@136.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.g.f. (generalised_shape.vpr@152.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x2.f. (generalised_shape.vpr@16.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access y1.g. (generalised_shape.vpr@27.3); [postcondition.violated:insufficient.permission] Postcondition of test12 might not hold. There might be insufficient permission to access x1.g. (generalised_shape.vpr@34.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.g. (generalised_shape.vpr@46.11); [postcondition.violated:receiver.not.injective] Postcondition of test10 might not hold. Receiver of x.g.f [generalised_shape.vpr@54.54]  might not be injective. (generalised_shape.vpr@54.12); [assert.failed:assertion.false] Assert might fail. Assertion y1.g != y3.g might not hold. (generalised_shape.vpr@92.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.f. (generalised_shape.vpr@124.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.g. (generalised_shape.vpr@136.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.g.f. (generalised_shape.vpr@152.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x2.f. (generalised_shape.vpr@16.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access y1.g. (generalised_shape.vpr@27.3); [postcondition.violated:insufficient.permission] Postcondition of test12 might not hold. There might be insufficient permission to access x1.g. (generalised_shape.vpr@34.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.g. (generalised_shape.vpr@46.11); [postcondition.violated:receiver.not.injective] Postcondition of test10 might not hold. Receiver of x.g.f [generalised_shape.vpr@54.54]  might not be injective. (generalised_shape.vpr@54.12); [assert.failed:assertion.false] Assert might fail. Assertion y1.g != y3.g might not hold. (generalised_shape.vpr@92.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.f. (generalised_shape.vpr@124.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.g. (generalised_shape.vpr@136.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.g.f. (generalised_shape.vpr@152.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x2.f. (generalised_shape.vpr@16.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access y1.g. (generalised_shape.vpr@27.3); [postcondition.violated:insufficient.permission] Postcondition of test12 might not hold. There might be insufficient permission to access x1.g. (generalised_shape.vpr@34.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.g. (generalised_shape.vpr@46.11); [postcondition.violated:receiver.not.injective] Postcondition of test10 might not hold. Receiver of x.g.f [generalised_shape.vpr@54.54]  might not be injective. (generalised_shape.vpr@54.12); [assert.failed:assertion.false] Assert might fail. Assertion y1.g != y3.g might not hold. (generalised_shape.vpr@92.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.f. (generalised_shape.vpr@124.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.g. (generalised_shape.vpr@136.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.g.f. (generalised_shape.vpr@152.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/nonnull.vpr,3,1549,91,5,1436,1553,1659,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (nonnull.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (nonnull.vpr@21.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (nonnull.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (nonnull.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (nonnull.vpr@21.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (nonnull.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (nonnull.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (nonnull.vpr@21.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (nonnull.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (nonnull.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (nonnull.vpr@21.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (nonnull.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (nonnull.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (nonnull.vpr@21.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (nonnull.vpr@44.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/quantification_over_pred_permissions.vpr,0,1633,67,4,1538,1674,1689,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/quantifiedvalues.vpr,1,1707,8,0,1700,1704,1719,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion x.f == old(x.f) might not hold. (quantifiedvalues.vpr@24.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == old(x.f) might not hold. (quantifiedvalues.vpr@24.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == old(x.f) might not hold. (quantifiedvalues.vpr@24.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == old(x.f) might not hold. (quantifiedvalues.vpr@24.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == old(x.f) might not hold. (quantifiedvalues.vpr@24.5)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/snapshots1.vpr,4,2327,30,1,2293,2322,2366,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion fun1(xs; y) == yf might not hold. (snapshots1.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@106.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion fun1(xs; y) == yf might not hold. (snapshots1.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@106.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion fun1(xs; y) == yf might not hold. (snapshots1.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@106.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion fun1(xs; y) == yf might not hold. (snapshots1.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@106.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion fun1(xs; y) == yf might not hold. (snapshots1.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@106.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/snapshots2.vpr,1,1907,55,2,1829,1944,1948,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion v == fun(xs; x; n) might not hold. (snapshots2.vpr@36.3)); List([assert.failed:assertion.false] Assert might fail. Assertion v == fun(xs; x; n) might not hold. (snapshots2.vpr@36.3)); List([assert.failed:assertion.false] Assert might fail. Assertion v == fun(xs; x; n) might not hold. (snapshots2.vpr@36.3)); List([assert.failed:assertion.false] Assert might fail. Assertion v == fun(xs; x; n) might not hold. (snapshots2.vpr@36.3)); List([assert.failed:assertion.false] Assert might fail. Assertion v == fun(xs; x; n) might not hold. (snapshots2.vpr@36.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/snapshots3.vpr,2,1711,50,2,1643,1728,1764,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion a == t.f might not hold. (snapshots3.vpr@48.2); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots3.vpr@68.9)); List([assert.failed:assertion.false] Assert might fail. Assertion a == t.f might not hold. (snapshots3.vpr@48.2); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots3.vpr@68.9)); List([assert.failed:assertion.false] Assert might fail. Assertion a == t.f might not hold. (snapshots3.vpr@48.2); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots3.vpr@68.9)); List([assert.failed:assertion.false] Assert might fail. Assertion a == t.f might not hold. (snapshots3.vpr@48.2); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots3.vpr@68.9)); List([assert.failed:assertion.false] Assert might fail. Assertion a == t.f might not hold. (snapshots3.vpr@48.2); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots3.vpr@68.9)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/unionfind.vpr,2,1952,18,0,1939,1940,1978,Vector(List([application.precondition:assertion.false] Precondition of function find might not hold. Assertion o != null might not hold. (unionfind.vpr@31.59); [application.precondition:assertion.false] Precondition of function find might not hold. Assertion p != null might not hold. (unionfind.vpr@90.90)); List([application.precondition:assertion.false] Precondition of function find might not hold. Assertion o != null might not hold. (unionfind.vpr@31.59); [application.precondition:assertion.false] Precondition of function find might not hold. Assertion p != null might not hold. (unionfind.vpr@90.90)); List([application.precondition:assertion.false] Precondition of function find might not hold. Assertion o != null might not hold. (unionfind.vpr@31.59); [application.precondition:assertion.false] Precondition of function find might not hold. Assertion p != null might not hold. (unionfind.vpr@90.90)); List([application.precondition:assertion.false] Precondition of function find might not hold. Assertion o != null might not hold. (unionfind.vpr@31.59); [application.precondition:assertion.false] Precondition of function find might not hold. Assertion p != null might not hold. (unionfind.vpr@90.90)); List([application.precondition:assertion.false] Precondition of function find might not hold. Assertion o != null might not hold. (unionfind.vpr@31.59); [application.precondition:assertion.false] Precondition of function find might not hold. Assertion p != null might not hold. (unionfind.vpr@90.90)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/unionone.vpr,0,1534,51,3,1469,1541,1594,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/ZeroArray.vpr,0,2005,30,1,1972,1999,2046,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/array-sum.vpr,0,1960,12,0,1950,1952,1978,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/array_problem.vpr,0,2205,58,2,2147,2183,2285,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/back.vpr,0,2090,89,4,2015,2041,2216,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/blom01.vpr,0,1893,35,1,1855,1885,1940,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/blom02.vpr,0,2013,29,1,1972,2030,2037,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/blom03.vpr,0,1937,36,1,1888,1948,1975,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/fmse-2015-04-16.vpr,0,5617,106,1,5522,5565,5766,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/fwd.vpr,0,2022,27,1,1985,2029,2052,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/max-two-range.vpr,0,3857,61,1,3783,3857,3933,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/par_id.vpr,0,1830,60,3,1776,1800,1914,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/shift.vpr,0,1932,50,2,1861,1962,1974,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/summation.vpr,0,2481,25,1,2454,2474,2516,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testAccessSubmatrix.vpr,0,1876,51,2,1806,1893,1929,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testAccessSubmatrixErr1.vpr,1,1885,3,0,1881,1885,1889,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_3.Ref__Integer_value. (testAccessSubmatrixErr1.vpr@38.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_3.Ref__Integer_value. (testAccessSubmatrixErr1.vpr@38.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_3.Ref__Integer_value. (testAccessSubmatrixErr1.vpr@38.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_3.Ref__Integer_value. (testAccessSubmatrixErr1.vpr@38.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_3.Ref__Integer_value. (testAccessSubmatrixErr1.vpr@38.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testDepParLoop.vpr,0,2888,37,1,2840,2895,2931,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testDepParLoopBack.vpr,0,2937,59,2,2878,2916,3018,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testDepParLoopBackE1.vpr,1,2980,18,0,2955,2987,3000,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_4.Ref__Integer_value. (testDepParLoopBackE1.vpr@124.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_4.Ref__Integer_value. (testDepParLoopBackE1.vpr@124.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_4.Ref__Integer_value. (testDepParLoopBackE1.vpr@124.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_4.Ref__Integer_value. (testDepParLoopBackE1.vpr@124.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_4.Ref__Integer_value. (testDepParLoopBackE1.vpr@124.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testDepParLoopE1.vpr,1,2780,112,4,2623,2846,2873,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_11.Ref__Integer_value. (testDepParLoopE1.vpr@132.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_11.Ref__Integer_value. (testDepParLoopE1.vpr@132.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_11.Ref__Integer_value. (testDepParLoopE1.vpr@132.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_11.Ref__Integer_value. (testDepParLoopE1.vpr@132.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_11.Ref__Integer_value. (testDepParLoopE1.vpr@132.5)))
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testHistogram.vpr,0,2931,8,0,2922,2929,2943,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testNestedDoubleIC.vpr,0,2487,117,4,2355,2468,2640,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testNestedSingleIC.vpr,0,2486,93,3,2354,2551,2554,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testTranspose.vpr,0,17243,10029,58,3060,24225,24445,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testZeroArray.vpr,0,2308,130,5,2131,2350,2443,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testZeroArrayC.vpr,0,2358,118,5,2251,2300,2524,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testZeroArrayE1.vpr,1,2287,120,5,2182,2224,2457,Vector(List([postcondition.violated:assertion.false] Postcondition of Ref__loop_body_23 might not hold. Assertion ar[i].Ref__Integer_value == 0 might not hold. (testZeroArrayE1.vpr@77.11)); List([postcondition.violated:assertion.false] Postcondition of Ref__loop_body_23 might not hold. Assertion ar[i].Ref__Integer_value == 0 might not hold. (testZeroArrayE1.vpr@77.11)); List([postcondition.violated:assertion.false] Postcondition of Ref__loop_body_23 might not hold. Assertion ar[i].Ref__Integer_value == 0 might not hold. (testZeroArrayE1.vpr@77.11)); List([postcondition.violated:assertion.false] Postcondition of Ref__loop_body_23 might not hold. Assertion ar[i].Ref__Integer_value == 0 might not hold. (testZeroArrayE1.vpr@77.11)); List([postcondition.violated:assertion.false] Postcondition of Ref__loop_body_23 might not hold. Assertion ar[i].Ref__Integer_value == 0 might not hold. (testZeroArrayE1.vpr@77.11)))
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testZeroArrayJava.vpr,0,2142,135,6,2029,2066,2333,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testZeroArraySilicon.vpr,0,1860,43,2,1801,1873,1906,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testZeroMatrix.vpr,0,2301,74,3,2233,2266,2406,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testZeroSubmatrix.vpr,0,2503,95,3,2369,2557,2583,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_IterationExample.vpr,0,2384,148,6,2213,2365,2575,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_array.vpr,0,1913,52,2,1840,1940,1959,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_backward_dep_c.vpr,0,3018,16,0,3000,3016,3039,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_backward_dep_drf_c.vpr,0,2792,130,4,2653,2756,2967,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_backward_dep_e1_c.vpr,1,2963,30,1,2923,2970,2998,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_4.Ref__Integer_value. (test_backward_dep_e1_c.vpr@124.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_4.Ref__Integer_value. (test_backward_dep_e1_c.vpr@124.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_4.Ref__Integer_value. (test_backward_dep_e1_c.vpr@124.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_4.Ref__Integer_value. (test_backward_dep_e1_c.vpr@124.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_4.Ref__Integer_value. (test_backward_dep_e1_c.vpr@124.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_binomial_auto.vpr,0,6975,48,0,6926,6960,7041,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_binomial_noauto.vpr,0,2767,127,4,2619,2752,2931,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_forward_dep_c.vpr,0,2957,43,1,2896,2983,2992,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_forward_dep_drf_c.vpr,0,2907,60,2,2825,2929,2967,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_forward_dep_e1_c.vpr,1,2882,3,0,2878,2885,2885,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_11.Ref__Integer_value. (test_forward_dep_e1_c.vpr@132.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_11.Ref__Integer_value. (test_forward_dep_e1_c.vpr@132.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_11.Ref__Integer_value. (test_forward_dep_e1_c.vpr@132.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_11.Ref__Integer_value. (test_forward_dep_e1_c.vpr@132.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_11.Ref__Integer_value. (test_forward_dep_e1_c.vpr@132.5)))
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_forward_dep_noauto_pvl.vpr,0,2956,8,0,2948,2954,2968,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_forward_dep_pvl.vpr,0,3562,110,3,3449,3527,3712,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_idx_3.vpr,0,1974,0,0,1973,1974,1975,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_indep_loop_drf_c.vpr,0,2385,41,1,2351,2362,2444,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_kernel_example_pvl.vpr,0,3078,61,1,3020,3051,3164,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_kernel_example_v2_pvl.vpr,0,3397,17,0,3376,3397,3418,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_kernel_example_v3_pvl.vpr,0,2407,105,4,2289,2389,2545,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_par_id.vpr,0,2460,62,2,2372,2504,2505,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_vector_add_c.vpr,0,2798,43,1,2740,2809,2846,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_zero_array_pvl.vpr,0,2321,34,1,2291,2304,2370,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_zero_matrix_pvl.vpr,0,2370,142,5,2253,2287,2571,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/trigger-z3-bug.vpr,1,3609,58,1,3534,3617,3676,Vector(List([invariant.not.established:insufficient.permission] Loop invariant acc(this.dst[tid].Integer_value; write) might not hold on entry. There might be insufficient permission to access this.dst[tid].Integer_value. (trigger-z3-bug.vpr@73.17)); List([invariant.not.established:insufficient.permission] Loop invariant acc(this.dst[tid].Integer_value; write) might not hold on entry. There might be insufficient permission to access this.dst[tid].Integer_value. (trigger-z3-bug.vpr@73.17)); List([invariant.not.established:insufficient.permission] Loop invariant acc(this.dst[tid].Integer_value; write) might not hold on entry. There might be insufficient permission to access this.dst[tid].Integer_value. (trigger-z3-bug.vpr@73.17)); List([invariant.not.established:insufficient.permission] Loop invariant acc(this.dst[tid].Integer_value; write) might not hold on entry. There might be insufficient permission to access this.dst[tid].Integer_value. (trigger-z3-bug.vpr@73.17)); List([invariant.not.established:insufficient.permission] Loop invariant acc(this.dst[tid].Integer_value; write) might not hold on entry. There might be insufficient permission to access this.dst[tid].Integer_value. (trigger-z3-bug.vpr@73.17)))
../../src/test/resources/frontend-generated/quantifiedpredicates/arity/fold_arity1.vpr,5,1894,57,3,1814,1929,1941,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (fold_arity1.vpr@47.5); [fold.failed:assertion.false] Folding p3(x) might fail. Assertion r.f == 0 might not hold. (fold_arity1.vpr@59.5); [fold.failed:insufficient.permission] Folding p5(x; 4) might fail. There might be insufficient permission to access r.f. (fold_arity1.vpr@91.5); [fold.failed:assertion.false] Folding p5(x; i) might fail. Assertion r.f == i might not hold. (fold_arity1.vpr@102.5); [fold.failed:insufficient.permission] Folding p5(x; i) might fail. There might be insufficient permission to access r.f. (fold_arity1.vpr@110.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (fold_arity1.vpr@47.5); [fold.failed:assertion.false] Folding p3(x) might fail. Assertion r.f == 0 might not hold. (fold_arity1.vpr@59.5); [fold.failed:insufficient.permission] Folding p5(x; 4) might fail. There might be insufficient permission to access r.f. (fold_arity1.vpr@91.5); [fold.failed:assertion.false] Folding p5(x; i) might fail. Assertion r.f == i might not hold. (fold_arity1.vpr@102.5); [fold.failed:insufficient.permission] Folding p5(x; i) might fail. There might be insufficient permission to access r.f. (fold_arity1.vpr@110.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (fold_arity1.vpr@47.5); [fold.failed:assertion.false] Folding p3(x) might fail. Assertion r.f == 0 might not hold. (fold_arity1.vpr@59.5); [fold.failed:insufficient.permission] Folding p5(x; 4) might fail. There might be insufficient permission to access r.f. (fold_arity1.vpr@91.5); [fold.failed:assertion.false] Folding p5(x; i) might fail. Assertion r.f == i might not hold. (fold_arity1.vpr@102.5); [fold.failed:insufficient.permission] Folding p5(x; i) might fail. There might be insufficient permission to access r.f. (fold_arity1.vpr@110.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (fold_arity1.vpr@47.5); [fold.failed:assertion.false] Folding p3(x) might fail. Assertion r.f == 0 might not hold. (fold_arity1.vpr@59.5); [fold.failed:insufficient.permission] Folding p5(x; 4) might fail. There might be insufficient permission to access r.f. (fold_arity1.vpr@91.5); [fold.failed:assertion.false] Folding p5(x; i) might fail. Assertion r.f == i might not hold. (fold_arity1.vpr@102.5); [fold.failed:insufficient.permission] Folding p5(x; i) might fail. There might be insufficient permission to access r.f. (fold_arity1.vpr@110.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (fold_arity1.vpr@47.5); [fold.failed:assertion.false] Folding p3(x) might fail. Assertion r.f == 0 might not hold. (fold_arity1.vpr@59.5); [fold.failed:insufficient.permission] Folding p5(x; 4) might fail. There might be insufficient permission to access r.f. (fold_arity1.vpr@91.5); [fold.failed:assertion.false] Folding p5(x; i) might fail. Assertion r.f == i might not hold. (fold_arity1.vpr@102.5); [fold.failed:insufficient.permission] Folding p5(x; i) might fail. There might be insufficient permission to access r.f. (fold_arity1.vpr@110.5)))
../../src/test/resources/frontend-generated/quantifiedpredicates/arity/qpprod_arity.vpr,0,1956,3,0,1952,1958,1959,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpredicates/arity/snapshots.vpr,2,6056,465,7,5398,6375,6396,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion f1(n; m) might not hold. (snapshots.vpr@29.2); [assert.failed:assertion.false] Assert might fail. Assertion f3(n; m) == b might not hold. (snapshots.vpr@47.2)); List([assert.failed:assertion.false] Assert might fail. Assertion f1(n; m) might not hold. (snapshots.vpr@29.2); [assert.failed:assertion.false] Assert might fail. Assertion f3(n; m) == b might not hold. (snapshots.vpr@47.2)); List([assert.failed:assertion.false] Assert might fail. Assertion f1(n; m) might not hold. (snapshots.vpr@29.2); [assert.failed:assertion.false] Assert might fail. Assertion f3(n; m) == b might not hold. (snapshots.vpr@47.2)); List([assert.failed:assertion.false] Assert might fail. Assertion f1(n; m) might not hold. (snapshots.vpr@29.2); [assert.failed:assertion.false] Assert might fail. Assertion f3(n; m) == b might not hold. (snapshots.vpr@47.2)); List([assert.failed:assertion.false] Assert might fail. Assertion f1(n; m) might not hold. (snapshots.vpr@29.2); [assert.failed:assertion.false] Assert might fail. Assertion f3(n; m) == b might not hold. (snapshots.vpr@47.2)))
../../src/test/resources/frontend-generated/quantifiedpredicates/arity/spexhale_arity.vpr,4,1951,29,1,1909,1971,1973,Vector(List([postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p2(x). (spexhale_arity.vpr@43.9); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p3(x). (spexhale_arity.vpr@56.9); [postcondition.violated:insufficient.permission] Postcondition of m7 might not hold. There might be insufficient permission to access p4(x; i). (spexhale_arity.vpr@69.9); [postcondition.violated:insufficient.permission] Postcondition of m9 might not hold. There might be insufficient permission to access p5(x; i). (spexhale_arity.vpr@82.9)); List([postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p2(x). (spexhale_arity.vpr@43.9); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p3(x). (spexhale_arity.vpr@56.9); [postcondition.violated:insufficient.permission] Postcondition of m7 might not hold. There might be insufficient permission to access p4(x; i). (spexhale_arity.vpr@69.9); [postcondition.violated:insufficient.permission] Postcondition of m9 might not hold. There might be insufficient permission to access p5(x; i). (spexhale_arity.vpr@82.9)); List([postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p2(x). (spexhale_arity.vpr@43.9); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p3(x). (spexhale_arity.vpr@56.9); [postcondition.violated:insufficient.permission] Postcondition of m7 might not hold. There might be insufficient permission to access p4(x; i). (spexhale_arity.vpr@69.9); [postcondition.violated:insufficient.permission] Postcondition of m9 might not hold. There might be insufficient permission to access p5(x; i). (spexhale_arity.vpr@82.9)); List([postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p2(x). (spexhale_arity.vpr@43.9); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p3(x). (spexhale_arity.vpr@56.9); [postcondition.violated:insufficient.permission] Postcondition of m7 might not hold. There might be insufficient permission to access p4(x; i). (spexhale_arity.vpr@69.9); [postcondition.violated:insufficient.permission] Postcondition of m9 might not hold. There might be insufficient permission to access p5(x; i). (spexhale_arity.vpr@82.9)); List([postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p2(x). (spexhale_arity.vpr@43.9); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p3(x). (spexhale_arity.vpr@56.9); [postcondition.violated:insufficient.permission] Postcondition of m7 might not hold. There might be insufficient permission to access p4(x; i). (spexhale_arity.vpr@69.9); [postcondition.violated:insufficient.permission] Postcondition of m9 might not hold. There might be insufficient permission to access p5(x; i). (spexhale_arity.vpr@82.9)))
../../src/test/resources/frontend-generated/quantifiedpredicates/arity/spprod_arity.vpr,0,1933,14,0,1913,1938,1948,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpredicates/arity/unfold_arity1.vpr,6,1965,15,0,1945,1966,1984,Vector(List([unfold.failed:insufficient.permission] Unfolding p2(x) might fail. There might be insufficient permission to access p2(x). (unfold_arity1.vpr@45.5); [unfold.failed:insufficient.permission] Unfolding p3(x) might fail. There might be insufficient permission to access p3(x). (unfold_arity1.vpr@58.2); [unfold.failed:insufficient.permission] Unfolding p3(x) might fail. There might be insufficient permission to access p3(x). (unfold_arity1.vpr@65.5); [unfold.failed:insufficient.permission] Unfolding p4(x; i) might fail. There might be insufficient permission to access p4(x; i). (unfold_arity1.vpr@81.5); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (unfold_arity1.vpr@100.5); [unfold.failed:insufficient.permission] Unfolding p5(x; i) might fail. There might be insufficient permission to access p5(x; i). (unfold_arity1.vpr@108.5)); List([unfold.failed:insufficient.permission] Unfolding p2(x) might fail. There might be insufficient permission to access p2(x). (unfold_arity1.vpr@45.5); [unfold.failed:insufficient.permission] Unfolding p3(x) might fail. There might be insufficient permission to access p3(x). (unfold_arity1.vpr@58.2); [unfold.failed:insufficient.permission] Unfolding p3(x) might fail. There might be insufficient permission to access p3(x). (unfold_arity1.vpr@65.5); [unfold.failed:insufficient.permission] Unfolding p4(x; i) might fail. There might be insufficient permission to access p4(x; i). (unfold_arity1.vpr@81.5); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (unfold_arity1.vpr@100.5); [unfold.failed:insufficient.permission] Unfolding p5(x; i) might fail. There might be insufficient permission to access p5(x; i). (unfold_arity1.vpr@108.5)); List([unfold.failed:insufficient.permission] Unfolding p2(x) might fail. There might be insufficient permission to access p2(x). (unfold_arity1.vpr@45.5); [unfold.failed:insufficient.permission] Unfolding p3(x) might fail. There might be insufficient permission to access p3(x). (unfold_arity1.vpr@58.2); [unfold.failed:insufficient.permission] Unfolding p3(x) might fail. There might be insufficient permission to access p3(x). (unfold_arity1.vpr@65.5); [unfold.failed:insufficient.permission] Unfolding p4(x; i) might fail. There might be insufficient permission to access p4(x; i). (unfold_arity1.vpr@81.5); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (unfold_arity1.vpr@100.5); [unfold.failed:insufficient.permission] Unfolding p5(x; i) might fail. There might be insufficient permission to access p5(x; i). (unfold_arity1.vpr@108.5)); List([unfold.failed:insufficient.permission] Unfolding p2(x) might fail. There might be insufficient permission to access p2(x). (unfold_arity1.vpr@45.5); [unfold.failed:insufficient.permission] Unfolding p3(x) might fail. There might be insufficient permission to access p3(x). (unfold_arity1.vpr@58.2); [unfold.failed:insufficient.permission] Unfolding p3(x) might fail. There might be insufficient permission to access p3(x). (unfold_arity1.vpr@65.5); [unfold.failed:insufficient.permission] Unfolding p4(x; i) might fail. There might be insufficient permission to access p4(x; i). (unfold_arity1.vpr@81.5); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (unfold_arity1.vpr@100.5); [unfold.failed:insufficient.permission] Unfolding p5(x; i) might fail. There might be insufficient permission to access p5(x; i). (unfold_arity1.vpr@108.5)); List([unfold.failed:insufficient.permission] Unfolding p2(x) might fail. There might be insufficient permission to access p2(x). (unfold_arity1.vpr@45.5); [unfold.failed:insufficient.permission] Unfolding p3(x) might fail. There might be insufficient permission to access p3(x). (unfold_arity1.vpr@58.2); [unfold.failed:insufficient.permission] Unfolding p3(x) might fail. There might be insufficient permission to access p3(x). (unfold_arity1.vpr@65.5); [unfold.failed:insufficient.permission] Unfolding p4(x; i) might fail. There might be insufficient permission to access p4(x; i). (unfold_arity1.vpr@81.5); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (unfold_arity1.vpr@100.5); [unfold.failed:insufficient.permission] Unfolding p5(x; i) might fail. There might be insufficient permission to access p5(x; i). (unfold_arity1.vpr@108.5)))
../../src/test/resources/frontend-generated/quantifiedpredicates/arity/unfolding_arity.vpr,1,1871,8,0,1859,1875,1879,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forall r: Ref :: { (r in xs) } (r in xs) ==> (unfolding acc(p3(r; i); write) in r.f == i)) might not hold. (unfolding_arity.vpr@49.4)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall r: Ref :: { (r in xs) } (r in xs) ==> (unfolding acc(p3(r; i); write) in r.f == i)) might not hold. (unfolding_arity.vpr@49.4)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall r: Ref :: { (r in xs) } (r in xs) ==> (unfolding acc(p3(r; i); write) in r.f == i)) might not hold. (unfolding_arity.vpr@49.4)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall r: Ref :: { (r in xs) } (r in xs) ==> (unfolding acc(p3(r; i); write) in r.f == i)) might not hold. (unfolding_arity.vpr@49.4)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall r: Ref :: { (r in xs) } (r in xs) ==> (unfolding acc(p3(r; i); write) in r.f == i)) might not hold. (unfolding_arity.vpr@49.4)))
../../src/test/resources/frontend-generated/quantifiedpredicates/basic/array.vpr,2,2021,50,2,1952,2043,2069,Vector(List([postcondition.violated:insufficient.permission] Postcondition of t2 might not hold. There might be insufficient permission to access p(a; i). (array.vpr@44.11); [postcondition.violated:insufficient.permission] Postcondition of t4 might not hold. There might be insufficient permission to access p(a; 1). (array.vpr@60.11)); List([postcondition.violated:insufficient.permission] Postcondition of t2 might not hold. There might be insufficient permission to access p(a; i). (array.vpr@44.11); [postcondition.violated:insufficient.permission] Postcondition of t4 might not hold. There might be insufficient permission to access p(a; 1). (array.vpr@60.11)); List([postcondition.violated:insufficient.permission] Postcondition of t2 might not hold. There might be insufficient permission to access p(a; i). (array.vpr@44.11); [postcondition.violated:insufficient.permission] Postcondition of t4 might not hold. There might be insufficient permission to access p(a; 1). (array.vpr@60.11)); List([postcondition.violated:insufficient.permission] Postcondition of t2 might not hold. There might be insufficient permission to access p(a; i). (array.vpr@44.11); [postcondition.violated:insufficient.permission] Postcondition of t4 might not hold. There might be insufficient permission to access p(a; 1). (array.vpr@60.11)); List([postcondition.violated:insufficient.permission] Postcondition of t2 might not hold. There might be insufficient permission to access p(a; i). (array.vpr@44.11); [postcondition.violated:insufficient.permission] Postcondition of t4 might not hold. There might be insufficient permission to access p(a; 1). (array.vpr@60.11)))
../../src/test/resources/frontend-generated/quantifiedpredicates/basic/exhale.vpr,4,1964,4,0,1958,1967,1968,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred1(x). (exhale.vpr@54.4); [unfold.failed:insufficient.permission] Unfolding pred1(y) might fail. There might be insufficient permission to access pred1(y). (exhale.vpr@67.4); [unfold.failed:insufficient.permission] Unfolding pred1(y) might fail. There might be insufficient permission to access pred1(y). (exhale.vpr@84.4); [unfold.failed:insufficient.permission] Unfolding pred1(z) might fail. There might be insufficient permission to access pred1(z). (exhale.vpr@93.4)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred1(x). (exhale.vpr@54.4); [unfold.failed:insufficient.permission] Unfolding pred1(y) might fail. There might be insufficient permission to access pred1(y). (exhale.vpr@67.4); [unfold.failed:insufficient.permission] Unfolding pred1(y) might fail. There might be insufficient permission to access pred1(y). (exhale.vpr@84.4); [unfold.failed:insufficient.permission] Unfolding pred1(z) might fail. There might be insufficient permission to access pred1(z). (exhale.vpr@93.4)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred1(x). (exhale.vpr@54.4); [unfold.failed:insufficient.permission] Unfolding pred1(y) might fail. There might be insufficient permission to access pred1(y). (exhale.vpr@67.4); [unfold.failed:insufficient.permission] Unfolding pred1(y) might fail. There might be insufficient permission to access pred1(y). (exhale.vpr@84.4); [unfold.failed:insufficient.permission] Unfolding pred1(z) might fail. There might be insufficient permission to access pred1(z). (exhale.vpr@93.4)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred1(x). (exhale.vpr@54.4); [unfold.failed:insufficient.permission] Unfolding pred1(y) might fail. There might be insufficient permission to access pred1(y). (exhale.vpr@67.4); [unfold.failed:insufficient.permission] Unfolding pred1(y) might fail. There might be insufficient permission to access pred1(y). (exhale.vpr@84.4); [unfold.failed:insufficient.permission] Unfolding pred1(z) might fail. There might be insufficient permission to access pred1(z). (exhale.vpr@93.4)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred1(x). (exhale.vpr@54.4); [unfold.failed:insufficient.permission] Unfolding pred1(y) might fail. There might be insufficient permission to access pred1(y). (exhale.vpr@67.4); [unfold.failed:insufficient.permission] Unfolding pred1(y) might fail. There might be insufficient permission to access pred1(y). (exhale.vpr@84.4); [unfold.failed:insufficient.permission] Unfolding pred1(z) might fail. There might be insufficient permission to access pred1(z). (exhale.vpr@93.4)))
../../src/test/resources/frontend-generated/quantifiedpredicates/basic/foralls.vpr,2,1965,4,0,1961,1963,1972,Vector(List([not.wellformed:seq.index.length] Contract might not be well-formed. Index a * i + b into xs might exceed sequence length. (foralls.vpr@34.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (foralls.vpr@44.12)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index a * i + b into xs might exceed sequence length. (foralls.vpr@34.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (foralls.vpr@44.12)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index a * i + b into xs might exceed sequence length. (foralls.vpr@34.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (foralls.vpr@44.12)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index a * i + b into xs might exceed sequence length. (foralls.vpr@34.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (foralls.vpr@44.12)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index a * i + b into xs might exceed sequence length. (foralls.vpr@34.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (foralls.vpr@44.12)))
../../src/test/resources/frontend-generated/quantifiedpredicates/basic/functions1.vpr,0,1934,43,2,1872,1962,1968,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpredicates/basic/functions2.vpr,0,1861,9,0,1849,1866,1870,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpredicates/basic/independence.vpr,0,1830,60,3,1747,1856,1887,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpredicates/basic/injectivity.vpr,3,1927,24,1,1904,1917,1962,Vector(List([postcondition.violated:receiver.not.injective] Postcondition of test01 might not hold. Receiver of pred1(y) [injectivity.vpr@18.43]  might not be injective. (injectivity.vpr@18.9); [postcondition.violated:receiver.not.injective] Postcondition of test02 might not hold. Receiver of pred2(y; 1) [injectivity.vpr@25.44]  might not be injective. (injectivity.vpr@25.10); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@32.2)); List([postcondition.violated:receiver.not.injective] Postcondition of test01 might not hold. Receiver of pred1(y) [injectivity.vpr@18.43]  might not be injective. (injectivity.vpr@18.9); [postcondition.violated:receiver.not.injective] Postcondition of test02 might not hold. Receiver of pred2(y; 1) [injectivity.vpr@25.44]  might not be injective. (injectivity.vpr@25.10); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@32.2)); List([postcondition.violated:receiver.not.injective] Postcondition of test01 might not hold. Receiver of pred1(y) [injectivity.vpr@18.43]  might not be injective. (injectivity.vpr@18.9); [postcondition.violated:receiver.not.injective] Postcondition of test02 might not hold. Receiver of pred2(y; 1) [injectivity.vpr@25.44]  might not be injective. (injectivity.vpr@25.10); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@32.2)); List([postcondition.violated:receiver.not.injective] Postcondition of test01 might not hold. Receiver of pred1(y) [injectivity.vpr@18.43]  might not be injective. (injectivity.vpr@18.9); [postcondition.violated:receiver.not.injective] Postcondition of test02 might not hold. Receiver of pred2(y; 1) [injectivity.vpr@25.44]  might not be injective. (injectivity.vpr@25.10); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@32.2)); List([postcondition.violated:receiver.not.injective] Postcondition of test01 might not hold. Receiver of pred1(y) [injectivity.vpr@18.43]  might not be injective. (injectivity.vpr@18.9); [postcondition.violated:receiver.not.injective] Postcondition of test02 might not hold. Receiver of pred2(y; 1) [injectivity.vpr@25.44]  might not be injective. (injectivity.vpr@25.10); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@32.2)))
../../src/test/resources/frontend-generated/quantifiedpredicates/basic/knownfolded.vpr,0,1755,26,1,1719,1765,1783,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpredicates/basic/partial_permissions.vpr,3,1999,9,0,1986,2004,2008,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (partial_permissions.vpr@51.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (partial_permissions.vpr@60.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred(x). (partial_permissions.vpr@67.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (partial_permissions.vpr@51.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (partial_permissions.vpr@60.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred(x). (partial_permissions.vpr@67.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (partial_permissions.vpr@51.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (partial_permissions.vpr@60.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred(x). (partial_permissions.vpr@67.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (partial_permissions.vpr@51.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (partial_permissions.vpr@60.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred(x). (partial_permissions.vpr@67.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (partial_permissions.vpr@51.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (partial_permissions.vpr@60.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred(x). (partial_permissions.vpr@67.5)))
../../src/test/resources/frontend-generated/quantifiedpredicates/basic/permissions.vpr,7,1964,12,0,1948,1967,1977,Vector(List([call.precondition:insufficient.permission] The precondition of method test01 might not hold. There might be insufficient permission to access pred1(x). (permissions.vpr@23.3); [call.precondition:insufficient.permission] The precondition of method test01_qp might not hold. There might be insufficient permission to access pred1(x). (permissions.vpr@38.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (permissions.vpr@45.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@54.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@64.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@73.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@83.3)); List([call.precondition:insufficient.permission] The precondition of method test01 might not hold. There might be insufficient permission to access pred1(x). (permissions.vpr@23.3); [call.precondition:insufficient.permission] The precondition of method test01_qp might not hold. There might be insufficient permission to access pred1(x). (permissions.vpr@38.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (permissions.vpr@45.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@54.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@64.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@73.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@83.3)); List([call.precondition:insufficient.permission] The precondition of method test01 might not hold. There might be insufficient permission to access pred1(x). (permissions.vpr@23.3); [call.precondition:insufficient.permission] The precondition of method test01_qp might not hold. There might be insufficient permission to access pred1(x). (permissions.vpr@38.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (permissions.vpr@45.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@54.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@64.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@73.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@83.3)); List([call.precondition:insufficient.permission] The precondition of method test01 might not hold. There might be insufficient permission to access pred1(x). (permissions.vpr@23.3); [call.precondition:insufficient.permission] The precondition of method test01_qp might not hold. There might be insufficient permission to access pred1(x). (permissions.vpr@38.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (permissions.vpr@45.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@54.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@64.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@73.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@83.3)); List([call.precondition:insufficient.permission] The precondition of method test01 might not hold. There might be insufficient permission to access pred1(x). (permissions.vpr@23.3); [call.precondition:insufficient.permission] The precondition of method test01_qp might not hold. There might be insufficient permission to access pred1(x). (permissions.vpr@38.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (permissions.vpr@45.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@54.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@64.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@73.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@83.3)))
../../src/test/resources/frontend-generated/quantifiedpredicates/basic/qp_exhale.vpr,2,1976,12,0,1967,1968,1994,Vector(List([postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access p2(r). (qp_exhale.vpr@61.9); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p2(r). (qp_exhale.vpr@69.9)); List([postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access p2(r). (qp_exhale.vpr@61.9); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p2(r). (qp_exhale.vpr@69.9)); List([postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access p2(r). (qp_exhale.vpr@61.9); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p2(r). (qp_exhale.vpr@69.9)); List([postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access p2(r). (qp_exhale.vpr@61.9); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p2(r). (qp_exhale.vpr@69.9)); List([postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access p2(r). (qp_exhale.vpr@61.9); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p2(r). (qp_exhale.vpr@69.9)))
../../src/test/resources/frontend-generated/quantifiedpredicates/basic/recursive.vpr,0,1930,9,0,1919,1932,1941,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpredicates/basic/triggers.vpr,0,1963,49,2,1894,1996,2000,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpredicates/examples/list.vpr,0,5361,291,5,5002,5366,5717,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpredicates/examples/list_false.vpr,1,3736,64,1,3677,3707,3826,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (list_false.vpr@65.9)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (list_false.vpr@65.9)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (list_false.vpr@65.9)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (list_false.vpr@65.9)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (list_false.vpr@65.9)))
../../src/test/resources/frontend-generated/quantifiedpredicates/issues/array_exhale.vpr,5,1943,20,1,1915,1956,1960,Vector(List([postcondition.violated:insufficient.permission] Postcondition of m1 might not hold. There might be insufficient permission to access p(a; i + 1). (array_exhale.vpr@37.12); [postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (array_exhale.vpr@51.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (array_exhale.vpr@59.12); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p(a; i). (array_exhale.vpr@67.12); [postcondition.violated:insufficient.permission] Postcondition of m6 might not hold. There might be insufficient permission to access loc(a; i).val. (array_exhale.vpr@75.12)); List([postcondition.violated:insufficient.permission] Postcondition of m1 might not hold. There might be insufficient permission to access p(a; i + 1). (array_exhale.vpr@37.12); [postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (array_exhale.vpr@51.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (array_exhale.vpr@59.12); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p(a; i). (array_exhale.vpr@67.12); [postcondition.violated:insufficient.permission] Postcondition of m6 might not hold. There might be insufficient permission to access loc(a; i).val. (array_exhale.vpr@75.12)); List([postcondition.violated:insufficient.permission] Postcondition of m1 might not hold. There might be insufficient permission to access p(a; i + 1). (array_exhale.vpr@37.12); [postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (array_exhale.vpr@51.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (array_exhale.vpr@59.12); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p(a; i). (array_exhale.vpr@67.12); [postcondition.violated:insufficient.permission] Postcondition of m6 might not hold. There might be insufficient permission to access loc(a; i).val. (array_exhale.vpr@75.12)); List([postcondition.violated:insufficient.permission] Postcondition of m1 might not hold. There might be insufficient permission to access p(a; i + 1). (array_exhale.vpr@37.12); [postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (array_exhale.vpr@51.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (array_exhale.vpr@59.12); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p(a; i). (array_exhale.vpr@67.12); [postcondition.violated:insufficient.permission] Postcondition of m6 might not hold. There might be insufficient permission to access loc(a; i).val. (array_exhale.vpr@75.12)); List([postcondition.violated:insufficient.permission] Postcondition of m1 might not hold. There might be insufficient permission to access p(a; i + 1). (array_exhale.vpr@37.12); [postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (array_exhale.vpr@51.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (array_exhale.vpr@59.12); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p(a; i). (array_exhale.vpr@67.12); [postcondition.violated:insufficient.permission] Postcondition of m6 might not hold. There might be insufficient permission to access loc(a; i).val. (array_exhale.vpr@75.12)))
../../src/test/resources/frontend-generated/quantifiedpredicates/issues/array_exhale2.vpr,5,1894,9,0,1882,1896,1906,Vector(List([postcondition.violated:insufficient.permission] Postcondition of m1 might not hold. There might be insufficient permission to access p(a; i + 1). (array_exhale2.vpr@37.12); [postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (array_exhale2.vpr@51.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (array_exhale2.vpr@59.12); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p(a; i). (array_exhale2.vpr@67.12); [postcondition.violated:insufficient.permission] Postcondition of m6 might not hold. There might be insufficient permission to access loc(a; i).val. (array_exhale2.vpr@75.12)); List([postcondition.violated:insufficient.permission] Postcondition of m1 might not hold. There might be insufficient permission to access p(a; i + 1). (array_exhale2.vpr@37.12); [postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (array_exhale2.vpr@51.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (array_exhale2.vpr@59.12); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p(a; i). (array_exhale2.vpr@67.12); [postcondition.violated:insufficient.permission] Postcondition of m6 might not hold. There might be insufficient permission to access loc(a; i).val. (array_exhale2.vpr@75.12)); List([postcondition.violated:insufficient.permission] Postcondition of m1 might not hold. There might be insufficient permission to access p(a; i + 1). (array_exhale2.vpr@37.12); [postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (array_exhale2.vpr@51.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (array_exhale2.vpr@59.12); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p(a; i). (array_exhale2.vpr@67.12); [postcondition.violated:insufficient.permission] Postcondition of m6 might not hold. There might be insufficient permission to access loc(a; i).val. (array_exhale2.vpr@75.12)); List([postcondition.violated:insufficient.permission] Postcondition of m1 might not hold. There might be insufficient permission to access p(a; i + 1). (array_exhale2.vpr@37.12); [postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (array_exhale2.vpr@51.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (array_exhale2.vpr@59.12); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p(a; i). (array_exhale2.vpr@67.12); [postcondition.violated:insufficient.permission] Postcondition of m6 might not hold. There might be insufficient permission to access loc(a; i).val. (array_exhale2.vpr@75.12)); List([postcondition.violated:insufficient.permission] Postcondition of m1 might not hold. There might be insufficient permission to access p(a; i + 1). (array_exhale2.vpr@37.12); [postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (array_exhale2.vpr@51.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (array_exhale2.vpr@59.12); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p(a; i). (array_exhale2.vpr@67.12); [postcondition.violated:insufficient.permission] Postcondition of m6 might not hold. There might be insufficient permission to access loc(a; i).val. (array_exhale2.vpr@75.12)))
../../src/test/resources/frontend-generated/quantifiedpredicates/issues/trigger_check.vpr,0,1750,41,2,1708,1735,1807,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpredicates/issues/unfolding.vpr,1,1752,24,1,1723,1751,1782,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p2(r). (unfolding.vpr@26.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p2(r). (unfolding.vpr@26.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p2(r). (unfolding.vpr@26.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p2(r). (unfolding.vpr@26.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p2(r). (unfolding.vpr@26.5)))
../../src/test/resources/frontend-generated/quantifiedpredicates/issues/wildcards.vpr,0,1542,80,5,1437,1558,1631,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpredicates/predicates/arguments.vpr,2,2252,160,7,2125,2153,2478,Vector(List([fold.failed:insufficient.permission] Folding valid(x2; false) might fail. There might be insufficient permission to access this.g. (arguments.vpr@99.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.g. (arguments.vpr@141.5)); List([fold.failed:insufficient.permission] Folding valid(x2; false) might fail. There might be insufficient permission to access this.g. (arguments.vpr@99.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.g. (arguments.vpr@141.5)); List([fold.failed:insufficient.permission] Folding valid(x2; false) might fail. There might be insufficient permission to access this.g. (arguments.vpr@99.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.g. (arguments.vpr@141.5)); List([fold.failed:insufficient.permission] Folding valid(x2; false) might fail. There might be insufficient permission to access this.g. (arguments.vpr@99.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.g. (arguments.vpr@141.5)); List([fold.failed:insufficient.permission] Folding valid(x2; false) might fail. There might be insufficient permission to access this.g. (arguments.vpr@99.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.g. (arguments.vpr@141.5)))
../../src/test/resources/frontend-generated/termination/errorMessages/cycleDecreases.vpr,3,16,2,12,14,16,20,Vector(List(Consistency error: Function fun1 recurses via its precondition: the cycle contains the function(s) fun1; fun2 (cycleDecreases.vpr@8.1); Consistency error: Function g1 recurses via its precondition: the cycle contains the function(s) g1; g2 (cycleDecreases.vpr@24.1); Consistency error: Function g2 recurses via its precondition: the cycle contains the function(s) g2; g1 (cycleDecreases.vpr@29.1)); List(Consistency error: Function fun1 recurses via its precondition: the cycle contains the function(s) fun1; fun2 (cycleDecreases.vpr@8.1); Consistency error: Function g1 recurses via its precondition: the cycle contains the function(s) g1; g2 (cycleDecreases.vpr@24.1); Consistency error: Function g2 recurses via its precondition: the cycle contains the function(s) g2; g1 (cycleDecreases.vpr@29.1)); List(Consistency error: Function fun1 recurses via its precondition: the cycle contains the function(s) fun1; fun2 (cycleDecreases.vpr@8.1); Consistency error: Function g1 recurses via its precondition: the cycle contains the function(s) g1; g2 (cycleDecreases.vpr@24.1); Consistency error: Function g2 recurses via its precondition: the cycle contains the function(s) g2; g1 (cycleDecreases.vpr@29.1)); List(Consistency error: Function fun1 recurses via its precondition: the cycle contains the function(s) fun1; fun2 (cycleDecreases.vpr@8.1); Consistency error: Function g1 recurses via its precondition: the cycle contains the function(s) g1; g2 (cycleDecreases.vpr@24.1); Consistency error: Function g2 recurses via its precondition: the cycle contains the function(s) g2; g1 (cycleDecreases.vpr@29.1)); List(Consistency error: Function fun1 recurses via its precondition: the cycle contains the function(s) fun1; fun2 (cycleDecreases.vpr@8.1); Consistency error: Function g1 recurses via its precondition: the cycle contains the function(s) g1; g2 (cycleDecreases.vpr@24.1); Consistency error: Function g2 recurses via its precondition: the cycle contains the function(s) g2; g1 (cycleDecreases.vpr@29.1)))
../../src/test/resources/frontend-generated/termination/errorMessages/illegalDecreases.vpr,2,46,9,19,40,40,60,Vector(List(Consistency error: Inhale Exhale expressions are not allowed as termination measure. (illegalDecreases.vpr@15.23); Consistency error: Inhale Exhale expressions are not allowed as termination measure. (illegalDecreases.vpr@15.38)); List(Consistency error: Inhale Exhale expressions are not allowed as termination measure. (illegalDecreases.vpr@15.23); Consistency error: Inhale Exhale expressions are not allowed as termination measure. (illegalDecreases.vpr@15.38)); List(Consistency error: Inhale Exhale expressions are not allowed as termination measure. (illegalDecreases.vpr@15.23); Consistency error: Inhale Exhale expressions are not allowed as termination measure. (illegalDecreases.vpr@15.38)); List(Consistency error: Inhale Exhale expressions are not allowed as termination measure. (illegalDecreases.vpr@15.23); Consistency error: Inhale Exhale expressions are not allowed as termination measure. (illegalDecreases.vpr@15.38)); List(Consistency error: Inhale Exhale expressions are not allowed as termination measure. (illegalDecreases.vpr@15.23); Consistency error: Inhale Exhale expressions are not allowed as termination measure. (illegalDecreases.vpr@15.38)))
../../src/test/resources/frontend-generated/termination/errorMessages/multipleDecreases.vpr,3,15,1,6,14,15,17,Vector(List(Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@8.11); Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@17.15); Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@23.18)); List(Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@8.11); Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@17.15); Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@23.18)); List(Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@8.11); Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@17.15); Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@23.18)); List(Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@8.11); Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@17.15); Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@23.18)); List(Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@8.11); Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@17.15); Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@23.18)))
../../src/test/resources/frontend-generated/termination/errorMessages/notDefined.vpr,6,8,1,12,7,8,10,Vector(List(Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@8.15); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@8.15); Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@21.19); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@21.19); Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@16.15); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@16.15)); List(Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@8.15); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@8.15); Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@21.19); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@21.19); Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@16.15); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@16.15)); List(Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@8.15); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@8.15); Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@21.19); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@21.19); Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@16.15); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@16.15)); List(Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@8.15); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@8.15); Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@21.19); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@21.19); Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@16.15); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@16.15)); List(Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@8.15); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@8.15); Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@21.19); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@21.19); Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@16.15); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@16.15)))
../../src/test/resources/frontend-generated/termination/errorMessages/typeCheckErrorDecreases.vpr,2,5,0,0,5,5,6,Vector(List(expected function or predicate  (typeCheckErrorDecreases.vpr@8.11); expected function or predicate  (typeCheckErrorDecreases.vpr@25.27)); List(expected function or predicate  (typeCheckErrorDecreases.vpr@8.11); expected function or predicate  (typeCheckErrorDecreases.vpr@25.27)); List(expected function or predicate  (typeCheckErrorDecreases.vpr@8.11); expected function or predicate  (typeCheckErrorDecreases.vpr@25.27)); List(expected function or predicate  (typeCheckErrorDecreases.vpr@8.11); expected function or predicate  (typeCheckErrorDecreases.vpr@25.27)); List(expected function or predicate  (typeCheckErrorDecreases.vpr@8.11); expected function or predicate  (typeCheckErrorDecreases.vpr@25.27)))
../../src/test/resources/frontend-generated/termination/functions/basic/adt.vpr,0,2025,18,0,2004,2021,2050,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/termination/functions/basic/allTypes.vpr,11,3208,38,1,3181,3181,3262,Vector(List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@19.18); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@33.21); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@50.10); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@63.16); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@79.18); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@89.22); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@103.31); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@117.35); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@157.47); [assert.failed:assertion.false] Assert might fail. Assertion (decreasing(Multiset(1; 1); Multiset(1; 1)): Bool) might not hold. (allTypes.vpr@128.5); [assert.failed:assertion.false] Assert might fail. Assertion (decreasing(Multiset(2); Multiset(1)): Bool) might not hold. (allTypes.vpr@135.5)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@19.18); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@33.21); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@50.10); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@63.16); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@79.18); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@89.22); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@103.31); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@117.35); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@157.47); [assert.failed:assertion.false] Assert might fail. Assertion (decreasing(Multiset(1; 1); Multiset(1; 1)): Bool) might not hold. (allTypes.vpr@128.5); [assert.failed:assertion.false] Assert might fail. Assertion (decreasing(Multiset(2); Multiset(1)): Bool) might not hold. (allTypes.vpr@135.5)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@19.18); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@33.21); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@50.10); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@63.16); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@79.18); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@89.22); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@103.31); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@117.35); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@157.47); [assert.failed:assertion.false] Assert might fail. Assertion (decreasing(Multiset(1; 1); Multiset(1; 1)): Bool) might not hold. (allTypes.vpr@128.5); [assert.failed:assertion.false] Assert might fail. Assertion (decreasing(Multiset(2); Multiset(1)): Bool) might not hold. (allTypes.vpr@135.5)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@19.18); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@33.21); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@50.10); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@63.16); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@79.18); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@89.22); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@103.31); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@117.35); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@157.47); [assert.failed:assertion.false] Assert might fail. Assertion (decreasing(Multiset(1; 1); Multiset(1; 1)): Bool) might not hold. (allTypes.vpr@128.5); [assert.failed:assertion.false] Assert might fail. Assertion (decreasing(Multiset(2); Multiset(1)): Bool) might not hold. (allTypes.vpr@135.5)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@19.18); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@33.21); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@50.10); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@63.16); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@79.18); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@89.22); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@103.31); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@117.35); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@157.47); [assert.failed:assertion.false] Assert might fail. Assertion (decreasing(Multiset(1; 1); Multiset(1; 1)): Bool) might not hold. (allTypes.vpr@128.5); [assert.failed:assertion.false] Assert might fail. Assertion (decreasing(Multiset(2); Multiset(1)): Bool) might not hold. (allTypes.vpr@135.5)))
../../src/test/resources/frontend-generated/termination/functions/basic/conditions.vpr,0,1738,35,2,1701,1728,1787,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/termination/functions/basic/decCondition.vpr,2,1746,75,4,1641,1783,1814,Vector(List([termination.failed:tuple.condition.false] Function might not terminate. Required tuple condition might not hold. (decCondition.vpr@34.31); [termination.failed:termination.condition.false] Function might not terminate. Required termination condition might not hold. (decCondition.vpr@43.46)); List([termination.failed:tuple.condition.false] Function might not terminate. Required tuple condition might not hold. (decCondition.vpr@34.31); [termination.failed:termination.condition.false] Function might not terminate. Required termination condition might not hold. (decCondition.vpr@43.46)); List([termination.failed:tuple.condition.false] Function might not terminate. Required tuple condition might not hold. (decCondition.vpr@34.31); [termination.failed:termination.condition.false] Function might not terminate. Required termination condition might not hold. (decCondition.vpr@43.46)); List([termination.failed:tuple.condition.false] Function might not terminate. Required tuple condition might not hold. (decCondition.vpr@34.31); [termination.failed:termination.condition.false] Function might not terminate. Required termination condition might not hold. (decCondition.vpr@43.46)); List([termination.failed:tuple.condition.false] Function might not terminate. Required tuple condition might not hold. (decCondition.vpr@34.31); [termination.failed:termination.condition.false] Function might not terminate. Required termination condition might not hold. (decCondition.vpr@43.46)))
../../src/test/resources/frontend-generated/termination/functions/basic/nestedFunctionCalls.sil,2,1663,118,7,1497,1725,1767,Vector(List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (nestedFunctionCalls.sil@16.11); [postcondition.violated:assertion.false] Postcondition of h might not hold. Assertion result == 1 might not hold. (nestedFunctionCalls.sil@30.9)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (nestedFunctionCalls.sil@16.11); [postcondition.violated:assertion.false] Postcondition of h might not hold. Assertion result == 1 might not hold. (nestedFunctionCalls.sil@30.9)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (nestedFunctionCalls.sil@16.11); [postcondition.violated:assertion.false] Postcondition of h might not hold. Assertion result == 1 might not hold. (nestedFunctionCalls.sil@30.9)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (nestedFunctionCalls.sil@16.11); [postcondition.violated:assertion.false] Postcondition of h might not hold. Assertion result == 1 might not hold. (nestedFunctionCalls.sil@30.9)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (nestedFunctionCalls.sil@16.11); [postcondition.violated:assertion.false] Postcondition of h might not hold. Assertion result == 1 might not hold. (nestedFunctionCalls.sil@30.9)))
../../src/test/resources/frontend-generated/termination/functions/basic/postsCheck.vpr,2,1715,62,3,1628,1748,1770,Vector(List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (postsCheck.vpr@20.23); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (postsCheck.vpr@30.23)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (postsCheck.vpr@20.23); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (postsCheck.vpr@30.23)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (postsCheck.vpr@20.23); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (postsCheck.vpr@30.23)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (postsCheck.vpr@20.23); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (postsCheck.vpr@30.23)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (postsCheck.vpr@20.23); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (postsCheck.vpr@30.23)))
../../src/test/resources/frontend-generated/termination/functions/basic/presCheck.vpr,1,1609,73,4,1510,1633,1684,Vector(List([termination.failed:termination.condition.false] Function might not terminate. Required termination condition might not hold. (presCheck.vpr@33.14)); List([termination.failed:termination.condition.false] Function might not terminate. Required termination condition might not hold. (presCheck.vpr@33.14)); List([termination.failed:termination.condition.false] Function might not terminate. Required termination condition might not hold. (presCheck.vpr@33.14)); List([termination.failed:termination.condition.false] Function might not terminate. Required termination condition might not hold. (presCheck.vpr@33.14)); List([termination.failed:termination.condition.false] Function might not terminate. Required termination condition might not hold. (presCheck.vpr@33.14)))
../../src/test/resources/frontend-generated/termination/functions/basic/simpleTests.vpr,0,1710,67,3,1614,1754,1762,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/termination/functions/existingExamples/AckermanFnc.sil,0,1585,62,3,1511,1580,1664,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/termination/functions/existingExamples/AckermanFncWithOwnTuples.sil,0,1825,25,1,1793,1828,1855,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/termination/functions/existingExamples/BinarySearch.sil,0,1928,20,1,1901,1932,1952,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/termination/functions/existingExamples/Factorial.sil,0,1607,64,3,1518,1639,1665,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/termination/functions/existingExamples/Fibonacci.sil,0,1586,33,2,1551,1578,1631,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/termination/functions/existingExamples/LinkedLists.sil,0,2423,74,3,2359,2384,2528,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/termination/functions/existingExamples/McCarthys91Fnc.sil,0,1629,81,4,1516,1669,1704,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/termination/functions/expressions/inhaleexhale.vpr,0,1603,82,5,1488,1649,1674,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/termination/functions/expressions/letexpr.vpr,1,1585,80,5,1482,1597,1678,Vector(List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (letexpr.vpr@16.15)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (letexpr.vpr@16.15)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (letexpr.vpr@16.15)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (letexpr.vpr@16.15)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (letexpr.vpr@16.15)))
../../src/test/resources/frontend-generated/termination/functions/expressions/unfolding.vpr,0,1493,58,3,1417,1503,1559,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/termination/methods/basic/decCondition.vpr,2,1559,42,2,1503,1568,1606,Vector(List([termination.failed:tuple.condition.false] Method might not terminate. Required tuple condition might not hold. (decCondition.vpr@34.7); [termination.failed:termination.condition.false] Method might not terminate. Required termination condition might not hold. (decCondition.vpr@46.5)); List([termination.failed:tuple.condition.false] Method might not terminate. Required tuple condition might not hold. (decCondition.vpr@34.7); [termination.failed:termination.condition.false] Method might not terminate. Required termination condition might not hold. (decCondition.vpr@46.5)); List([termination.failed:tuple.condition.false] Method might not terminate. Required tuple condition might not hold. (decCondition.vpr@34.7); [termination.failed:termination.condition.false] Method might not terminate. Required termination condition might not hold. (decCondition.vpr@46.5)); List([termination.failed:tuple.condition.false] Method might not terminate. Required tuple condition might not hold. (decCondition.vpr@34.7); [termination.failed:termination.condition.false] Method might not terminate. Required termination condition might not hold. (decCondition.vpr@46.5)); List([termination.failed:tuple.condition.false] Method might not terminate. Required tuple condition might not hold. (decCondition.vpr@34.7); [termination.failed:termination.condition.false] Method might not terminate. Required termination condition might not hold. (decCondition.vpr@46.5)))
../../src/test/resources/frontend-generated/termination/methods/basic/simpleTests.vpr,0,1607,69,4,1511,1641,1670,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/termination/methods/basic/someTypes.vpr,1,1796,63,3,1729,1777,1882,Vector(List([termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (someTypes.vpr@35.5)); List([termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (someTypes.vpr@35.5)); List([termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (someTypes.vpr@35.5)); List([termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (someTypes.vpr@35.5)); List([termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (someTypes.vpr@35.5)))
../../src/test/resources/frontend-generated/termination/methods/loops/loopCondition.vpr,1,1680,20,1,1652,1691,1698,Vector(List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (loopCondition.vpr@40.15)); List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (loopCondition.vpr@40.15)); List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (loopCondition.vpr@40.15)); List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (loopCondition.vpr@40.15)); List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (loopCondition.vpr@40.15)))
../../src/test/resources/frontend-generated/termination/methods/loops/predicates.vpr,1,1878,38,2,1833,1875,1926,Vector(List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (predicates.vpr@26.23)); List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (predicates.vpr@26.23)); List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (predicates.vpr@26.23)); List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (predicates.vpr@26.23)); List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (predicates.vpr@26.23)))
../../src/test/resources/frontend-generated/termination/methods/loops/whileLoop.vpr,6,1906,16,0,1883,1916,1919,Vector(List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@24.19); [termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@40.9); [termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@75.9); [termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@115.23); [termination.failed:termination.condition.false] Method might not terminate. Required termination condition might not hold. (whileLoop.vpr@148.5); [termination.failed:tuple.condition.false] Loop might not terminate. Required tuple condition might not hold. (whileLoop.vpr@165.19)); List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@24.19); [termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@40.9); [termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@75.9); [termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@115.23); [termination.failed:termination.condition.false] Method might not terminate. Required termination condition might not hold. (whileLoop.vpr@148.5); [termination.failed:tuple.condition.false] Loop might not terminate. Required tuple condition might not hold. (whileLoop.vpr@165.19)); List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@24.19); [termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@40.9); [termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@75.9); [termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@115.23); [termination.failed:termination.condition.false] Method might not terminate. Required termination condition might not hold. (whileLoop.vpr@148.5); [termination.failed:tuple.condition.false] Loop might not terminate. Required tuple condition might not hold. (whileLoop.vpr@165.19)); List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@24.19); [termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@40.9); [termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@75.9); [termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@115.23); [termination.failed:termination.condition.false] Method might not terminate. Required termination condition might not hold. (whileLoop.vpr@148.5); [termination.failed:tuple.condition.false] Loop might not terminate. Required tuple condition might not hold. (whileLoop.vpr@165.19)); List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@24.19); [termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@40.9); [termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@75.9); [termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@115.23); [termination.failed:termination.condition.false] Method might not terminate. Required termination condition might not hold. (whileLoop.vpr@148.5); [termination.failed:tuple.condition.false] Loop might not terminate. Required tuple condition might not hold. (whileLoop.vpr@165.19)))
../../src/test/resources/frontend-generated/wands/examples/list_insert_tmp.vpr,1,3810,227,5,3514,3849,4068,Vector(List([apply.failed:assertion.false] Applying wand might fail. Assertion elems(prev) == Seq(x) ++ oElems might not hold. (list_insert_tmp.vpr@91.9)); List([apply.failed:assertion.false] Applying wand might fail. Assertion elems(prev) == Seq(x) ++ oElems might not hold. (list_insert_tmp.vpr@91.9)); List([apply.failed:assertion.false] Applying wand might fail. Assertion elems(prev) == Seq(x) ++ oElems might not hold. (list_insert_tmp.vpr@91.9)); List([apply.failed:assertion.false] Applying wand might fail. Assertion elems(prev) == Seq(x) ++ oElems might not hold. (list_insert_tmp.vpr@91.9)); List([apply.failed:assertion.false] Applying wand might fail. Assertion elems(prev) == Seq(x) ++ oElems might not hold. (list_insert_tmp.vpr@91.9)))
../../src/test/resources/frontend-generated/wands/examples/list_sum_verbose.vpr,0,2424,168,6,2204,2458,2612,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/examples/tree_delete_min_no_assert.vpr,0,49337,828,1,48302,49381,50329,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/examples_paper/conditionals.vpr,0,1933,23,1,1900,1945,1955,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/examples_paper/list_insert.vpr,0,8712,1217,13,7578,8159,10401,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/examples_paper/list_insert_noseq.vpr,0,2081,29,1,2039,2102,2103,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/examples_paper/list_insert_noseq_heuristics.vpr,0,2938,49,1,2882,2930,3003,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/examples_paper/list_sum.vpr,0,1981,11,0,1966,1986,1992,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/examples_paper/list_sum_heuristics.vpr,0,2397,149,6,2274,2311,2607,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/examples_paper/tree_delete_min.vpr,0,4891,201,4,4607,5009,5057,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/examples_paper/tree_delete_min_heuristics.vpr,0,14335,144,1,14199,14272,14535,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/examples_paper/un_currying.vpr,0,1761,69,3,1674,1766,1845,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/examples_paper/un_currying_heuristics.vpr,0,1918,12,0,1902,1919,1933,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/new_syntax/ApplyingBranching.vpr,0,1968,6,0,1960,1970,1976,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/new_syntax/ApplyingExpression.vpr,1,1739,83,4,1625,1768,1824,Vector(List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (ApplyingExpression.vpr@28.9)); List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (ApplyingExpression.vpr@28.9)); List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (ApplyingExpression.vpr@28.9)); List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (ApplyingExpression.vpr@28.9)); List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (ApplyingExpression.vpr@28.9)))
../../src/test/resources/frontend-generated/wands/new_syntax/Assert.vpr,2,1759,129,7,1582,1812,1885,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (Assert.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (Assert.vpr@22.9)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (Assert.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (Assert.vpr@22.9)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (Assert.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (Assert.vpr@22.9)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (Assert.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (Assert.vpr@22.9)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (Assert.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (Assert.vpr@22.9)))
../../src/test/resources/frontend-generated/wands/new_syntax/AssertTransfer.vpr,3,1752,26,1,1722,1750,1786,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (AssertTransfer.vpr@12.9); [if.failed:insufficient.permission] Conditional statement might fail. There might be insufficient permission to access x.g. (AssertTransfer.vpr@40.17); [if.failed:insufficient.permission] Conditional statement might fail. There might be insufficient permission to access x.g. (AssertTransfer.vpr@55.17)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (AssertTransfer.vpr@12.9); [if.failed:insufficient.permission] Conditional statement might fail. There might be insufficient permission to access x.g. (AssertTransfer.vpr@40.17); [if.failed:insufficient.permission] Conditional statement might fail. There might be insufficient permission to access x.g. (AssertTransfer.vpr@55.17)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (AssertTransfer.vpr@12.9); [if.failed:insufficient.permission] Conditional statement might fail. There might be insufficient permission to access x.g. (AssertTransfer.vpr@40.17); [if.failed:insufficient.permission] Conditional statement might fail. There might be insufficient permission to access x.g. (AssertTransfer.vpr@55.17)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (AssertTransfer.vpr@12.9); [if.failed:insufficient.permission] Conditional statement might fail. There might be insufficient permission to access x.g. (AssertTransfer.vpr@40.17); [if.failed:insufficient.permission] Conditional statement might fail. There might be insufficient permission to access x.g. (AssertTransfer.vpr@55.17)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (AssertTransfer.vpr@12.9); [if.failed:insufficient.permission] Conditional statement might fail. There might be insufficient permission to access x.g. (AssertTransfer.vpr@40.17); [if.failed:insufficient.permission] Conditional statement might fail. There might be insufficient permission to access x.g. (AssertTransfer.vpr@55.17)))
../../src/test/resources/frontend-generated/wands/new_syntax/AssertUnfolding.vpr,1,1661,79,4,1563,1664,1758,Vector(List([application.precondition:insufficient.permission] Precondition of function func might not hold. There might be insufficient permission to access P(x). (AssertUnfolding.vpr@20.44)); List([application.precondition:insufficient.permission] Precondition of function func might not hold. There might be insufficient permission to access P(x). (AssertUnfolding.vpr@20.44)); List([application.precondition:insufficient.permission] Precondition of function func might not hold. There might be insufficient permission to access P(x). (AssertUnfolding.vpr@20.44)); List([application.precondition:insufficient.permission] Precondition of function func might not hold. There might be insufficient permission to access P(x). (AssertUnfolding.vpr@20.44)); List([application.precondition:insufficient.permission] Precondition of function func might not hold. There might be insufficient permission to access P(x). (AssertUnfolding.vpr@20.44)))
../../src/test/resources/frontend-generated/wands/new_syntax/Assume.vpr,0,1859,44,2,1802,1868,1909,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/new_syntax/FunctionCall.vpr,1,1772,86,4,1650,1826,1841,Vector(List([postcondition.violated:insufficient.permission] Postcondition of test1 might not hold. There might be insufficient permission to access Cell(x). (FunctionCall.vpr@29.9)); List([postcondition.violated:insufficient.permission] Postcondition of test1 might not hold. There might be insufficient permission to access Cell(x). (FunctionCall.vpr@29.9)); List([postcondition.violated:insufficient.permission] Postcondition of test1 might not hold. There might be insufficient permission to access Cell(x). (FunctionCall.vpr@29.9)); List([postcondition.violated:insufficient.permission] Postcondition of test1 might not hold. There might be insufficient permission to access Cell(x). (FunctionCall.vpr@29.9)); List([postcondition.violated:insufficient.permission] Postcondition of test1 might not hold. There might be insufficient permission to access Cell(x). (FunctionCall.vpr@29.9)))
../../src/test/resources/frontend-generated/wands/new_syntax/IfElseDifferentFootprint.vpr,1,1619,98,6,1480,1685,1692,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (IfElseDifferentFootprint.vpr@23.9)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (IfElseDifferentFootprint.vpr@23.9)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (IfElseDifferentFootprint.vpr@23.9)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (IfElseDifferentFootprint.vpr@23.9)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (IfElseDifferentFootprint.vpr@23.9)))
../../src/test/resources/frontend-generated/wands/new_syntax/IfElsePackage.vpr,0,1924,25,1,1897,1918,1959,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/new_syntax/InhaleExhale.vpr,2,1626,95,5,1497,1661,1722,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (InhaleExhale.vpr@16.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(x). (InhaleExhale.vpr@27.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (InhaleExhale.vpr@16.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(x). (InhaleExhale.vpr@27.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (InhaleExhale.vpr@16.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(x). (InhaleExhale.vpr@27.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (InhaleExhale.vpr@16.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(x). (InhaleExhale.vpr@27.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (InhaleExhale.vpr@16.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(x). (InhaleExhale.vpr@27.5)))
../../src/test/resources/frontend-generated/wands/new_syntax/LhsOldConsistency.vpr,1,0,0,0,0,1,1,Vector(List(Parse error: Expected found "lhs\n}\n"; expected invalid identifier (could be a keyword) at index 174     label lhs           ^ (LhsOldConsistency.vpr@6.11)); List(Parse error: Expected found "lhs\n}\n"; expected invalid identifier (could be a keyword) at index 174     label lhs           ^ (LhsOldConsistency.vpr@6.11)); List(Parse error: Expected found "lhs\n}\n"; expected invalid identifier (could be a keyword) at index 174     label lhs           ^ (LhsOldConsistency.vpr@6.11)); List(Parse error: Expected found "lhs\n}\n"; expected invalid identifier (could be a keyword) at index 174     label lhs           ^ (LhsOldConsistency.vpr@6.11)); List(Parse error: Expected found "lhs\n}\n"; expected invalid identifier (could be a keyword) at index 174     label lhs           ^ (LhsOldConsistency.vpr@6.11)))
../../src/test/resources/frontend-generated/wands/new_syntax/LocalVarScoping.vpr,3,7,0,0,7,7,7,Vector(List(Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@9.9); Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@28.13); Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@38.13)); List(Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@9.9); Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@28.13); Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@38.13)); List(Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@9.9); Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@28.13); Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@38.13)); List(Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@9.9); Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@28.13); Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@38.13)); List(Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@9.9); Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@28.13); Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@38.13)))
../../src/test/resources/frontend-generated/wands/new_syntax/MethodCall.vpr,1,1647,28,1,1607,1665,1669,Vector(List([postcondition.violated:insufficient.permission] Postcondition of test1 might not hold. There might be insufficient permission to access Cell(x). (MethodCall.vpr@29.9)); List([postcondition.violated:insufficient.permission] Postcondition of test1 might not hold. There might be insufficient permission to access Cell(x). (MethodCall.vpr@29.9)); List([postcondition.violated:insufficient.permission] Postcondition of test1 might not hold. There might be insufficient permission to access Cell(x). (MethodCall.vpr@29.9)); List([postcondition.violated:insufficient.permission] Postcondition of test1 might not hold. There might be insufficient permission to access Cell(x). (MethodCall.vpr@29.9)); List([postcondition.violated:insufficient.permission] Postcondition of test1 might not hold. There might be insufficient permission to access Cell(x). (MethodCall.vpr@29.9)))
../../src/test/resources/frontend-generated/wands/new_syntax/Old.vpr,3,1949,23,1,1918,1956,1974,Vector(List([assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state first required to evaluate old[first](x.f). (Old.vpr@35.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (Old.vpr@50.9); [postcondition.violated:assertion.false] Postcondition of test4 might not hold. Assertion x.f == 0 might not hold. (Old.vpr@65.9)); List([assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state first required to evaluate old[first](x.f). (Old.vpr@35.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (Old.vpr@50.9); [postcondition.violated:assertion.false] Postcondition of test4 might not hold. Assertion x.f == 0 might not hold. (Old.vpr@65.9)); List([assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state first required to evaluate old[first](x.f). (Old.vpr@35.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (Old.vpr@50.9); [postcondition.violated:assertion.false] Postcondition of test4 might not hold. Assertion x.f == 0 might not hold. (Old.vpr@65.9)); List([assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state first required to evaluate old[first](x.f). (Old.vpr@35.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (Old.vpr@50.9); [postcondition.violated:assertion.false] Postcondition of test4 might not hold. Assertion x.f == 0 might not hold. (Old.vpr@65.9)); List([assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state first required to evaluate old[first](x.f). (Old.vpr@35.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (Old.vpr@50.9); [postcondition.violated:assertion.false] Postcondition of test4 might not hold. Assertion x.f == 0 might not hold. (Old.vpr@65.9)))
../../src/test/resources/frontend-generated/wands/new_syntax/OldLhsConsistency.vpr,4,10,0,0,10,10,10,Vector(List(Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@11.22); Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@17.15); Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@22.13); Consistency error: Wands may use the old[lhs]-expression on the rhs and in their proof script only. (OldLhsConsistency.vpr@26.25)); List(Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@11.22); Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@17.15); Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@22.13); Consistency error: Wands may use the old[lhs]-expression on the rhs and in their proof script only. (OldLhsConsistency.vpr@26.25)); List(Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@11.22); Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@17.15); Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@22.13); Consistency error: Wands may use the old[lhs]-expression on the rhs and in their proof script only. (OldLhsConsistency.vpr@26.25)); List(Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@11.22); Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@17.15); Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@22.13); Consistency error: Wands may use the old[lhs]-expression on the rhs and in their proof script only. (OldLhsConsistency.vpr@26.25)); List(Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@11.22); Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@17.15); Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@22.13); Consistency error: Wands may use the old[lhs]-expression on the rhs and in their proof script only. (OldLhsConsistency.vpr@26.25)))
../../src/test/resources/frontend-generated/wands/new_syntax/Perm.vpr,2,1895,38,2,1842,1913,1930,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion perm(x.a) == perm(x.b) might not hold. (Perm.vpr@12.9); [assert.failed:assertion.false] Assert might fail. Assertion perm(x.a) == perm(x.b) might not hold. (Perm.vpr@22.13)); List([assert.failed:assertion.false] Assert might fail. Assertion perm(x.a) == perm(x.b) might not hold. (Perm.vpr@12.9); [assert.failed:assertion.false] Assert might fail. Assertion perm(x.a) == perm(x.b) might not hold. (Perm.vpr@22.13)); List([assert.failed:assertion.false] Assert might fail. Assertion perm(x.a) == perm(x.b) might not hold. (Perm.vpr@12.9); [assert.failed:assertion.false] Assert might fail. Assertion perm(x.a) == perm(x.b) might not hold. (Perm.vpr@22.13)); List([assert.failed:assertion.false] Assert might fail. Assertion perm(x.a) == perm(x.b) might not hold. (Perm.vpr@12.9); [assert.failed:assertion.false] Assert might fail. Assertion perm(x.a) == perm(x.b) might not hold. (Perm.vpr@22.13)); List([assert.failed:assertion.false] Assert might fail. Assertion perm(x.a) == perm(x.b) might not hold. (Perm.vpr@12.9); [assert.failed:assertion.false] Assert might fail. Assertion perm(x.a) == perm(x.b) might not hold. (Perm.vpr@22.13)))
../../src/test/resources/frontend-generated/wands/new_syntax/ProofScriptStatementsConsistency.vpr,4,9,0,0,9,9,10,Vector(List(Consistency error: Field assignments are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@10.9); Consistency error: Field assignments are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@18.13); Consistency error: While statements are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@27.9); Consistency error: New statements statements are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@37.9)); List(Consistency error: Field assignments are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@10.9); Consistency error: Field assignments are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@18.13); Consistency error: While statements are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@27.9); Consistency error: New statements statements are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@37.9)); List(Consistency error: Field assignments are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@10.9); Consistency error: Field assignments are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@18.13); Consistency error: While statements are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@27.9); Consistency error: New statements statements are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@37.9)); List(Consistency error: Field assignments are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@10.9); Consistency error: Field assignments are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@18.13); Consistency error: While statements are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@27.9); Consistency error: New statements statements are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@37.9)); List(Consistency error: Field assignments are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@10.9); Consistency error: Field assignments are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@18.13); Consistency error: While statements are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@27.9); Consistency error: New statements statements are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@37.9)))
../../src/test/resources/frontend-generated/wands/new_syntax/QPFields.vpr,7,2020,4,0,2017,2018,2026,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@18.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (QPFields.vpr@32.9); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@43.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@55.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@68.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@77.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@89.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@18.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (QPFields.vpr@32.9); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@43.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@55.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@68.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@77.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@89.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@18.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (QPFields.vpr@32.9); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@43.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@55.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@68.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@77.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@89.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@18.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (QPFields.vpr@32.9); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@43.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@55.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@68.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@77.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@89.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@18.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (QPFields.vpr@32.9); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@43.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@55.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@68.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@77.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@89.5)))
../../src/test/resources/frontend-generated/wands/new_syntax/QPPredicates.vpr,8,2531,150,5,2318,2633,2643,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@35.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(x). (QPPredicates.vpr@49.9); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@60.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@72.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@85.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@94.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@106.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Pair(y0; y1). (QPPredicates.vpr@166.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@35.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(x). (QPPredicates.vpr@49.9); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@60.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@72.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@85.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@94.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@106.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Pair(y0; y1). (QPPredicates.vpr@166.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@35.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(x). (QPPredicates.vpr@49.9); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@60.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@72.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@85.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@94.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@106.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Pair(y0; y1). (QPPredicates.vpr@166.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@35.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(x). (QPPredicates.vpr@49.9); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@60.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@72.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@85.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@94.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@106.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Pair(y0; y1). (QPPredicates.vpr@166.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@35.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(x). (QPPredicates.vpr@49.9); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@60.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@72.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@85.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@94.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@106.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Pair(y0; y1). (QPPredicates.vpr@166.5)))
../../src/test/resources/frontend-generated/wands/new_syntax/QPWands.vpr,7,6061,54,0,6011,6036,6138,Vector(List([invariant.not.preserved:assertion.false] Loop invariant (forall x: Ref :: { (x in completed) } (x in completed) ==> (applying acc(y.f; write) --* acc(x.f; write) && (acc(y.f; write) && y.f == old[lhs](y.f)) in x.f == old[setupComplete](x.f))) might not be preserved. Assertion (forall x: Ref :: { (x in completed) } (x in completed) ==> (applying acc(y.f; write) --* acc(x.f; write) && (acc(y.f; write) && y.f == old[lhs](y.f)) in x.f == old[setupComplete](x.f))) might not hold. (QPWands.vpr@28.15); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@48.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@55.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@70.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@79.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (QPWands.vpr@98.5); [assert.failed:assertion.false] Assert might fail. Assertion xs[0].f == 0 might not hold. (QPWands.vpr@108.5)); List([invariant.not.preserved:assertion.false] Loop invariant (forall x: Ref :: { (x in completed) } (x in completed) ==> (applying acc(y.f; write) --* acc(x.f; write) && (acc(y.f; write) && y.f == old[lhs](y.f)) in x.f == old[setupComplete](x.f))) might not be preserved. Assertion (forall x: Ref :: { (x in completed) } (x in completed) ==> (applying acc(y.f; write) --* acc(x.f; write) && (acc(y.f; write) && y.f == old[lhs](y.f)) in x.f == old[setupComplete](x.f))) might not hold. (QPWands.vpr@28.15); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@48.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@55.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@70.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@79.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (QPWands.vpr@98.5); [assert.failed:assertion.false] Assert might fail. Assertion xs[0].f == 0 might not hold. (QPWands.vpr@108.5)); List([invariant.not.preserved:assertion.false] Loop invariant (forall x: Ref :: { (x in completed) } (x in completed) ==> (applying acc(y.f; write) --* acc(x.f; write) && (acc(y.f; write) && y.f == old[lhs](y.f)) in x.f == old[setupComplete](x.f))) might not be preserved. Assertion (forall x: Ref :: { (x in completed) } (x in completed) ==> (applying acc(y.f; write) --* acc(x.f; write) && (acc(y.f; write) && y.f == old[lhs](y.f)) in x.f == old[setupComplete](x.f))) might not hold. (QPWands.vpr@28.15); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@48.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@55.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@70.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@79.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (QPWands.vpr@98.5); [assert.failed:assertion.false] Assert might fail. Assertion xs[0].f == 0 might not hold. (QPWands.vpr@108.5)); List([invariant.not.preserved:assertion.false] Loop invariant (forall x: Ref :: { (x in completed) } (x in completed) ==> (applying acc(y.f; write) --* acc(x.f; write) && (acc(y.f; write) && y.f == old[lhs](y.f)) in x.f == old[setupComplete](x.f))) might not be preserved. Assertion (forall x: Ref :: { (x in completed) } (x in completed) ==> (applying acc(y.f; write) --* acc(x.f; write) && (acc(y.f; write) && y.f == old[lhs](y.f)) in x.f == old[setupComplete](x.f))) might not hold. (QPWands.vpr@28.15); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@48.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@55.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@70.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@79.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (QPWands.vpr@98.5); [assert.failed:assertion.false] Assert might fail. Assertion xs[0].f == 0 might not hold. (QPWands.vpr@108.5)); List([invariant.not.preserved:assertion.false] Loop invariant (forall x: Ref :: { (x in completed) } (x in completed) ==> (applying acc(y.f; write) --* acc(x.f; write) && (acc(y.f; write) && y.f == old[lhs](y.f)) in x.f == old[setupComplete](x.f))) might not be preserved. Assertion (forall x: Ref :: { (x in completed) } (x in completed) ==> (applying acc(y.f; write) --* acc(x.f; write) && (acc(y.f; write) && y.f == old[lhs](y.f)) in x.f == old[setupComplete](x.f))) might not hold. (QPWands.vpr@28.15); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@48.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@55.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@70.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@79.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (QPWands.vpr@98.5); [assert.failed:assertion.false] Assert might fail. Assertion xs[0].f == 0 might not hold. (QPWands.vpr@108.5)))
../../src/test/resources/frontend-generated/wands/new_syntax/SnapshotsBranching.vpr,0,1968,6,0,1960,1971,1975,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/new_syntax/SnapshotsLearning.vpr,0,1965,0,0,1965,1965,1966,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/new_syntax/SnapshotsLocallyPackaged.vpr,2,2017,26,1,1981,2026,2044,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (SnapshotsLocallyPackaged.vpr@82.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (SnapshotsLocallyPackaged.vpr@90.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (SnapshotsLocallyPackaged.vpr@82.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (SnapshotsLocallyPackaged.vpr@90.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (SnapshotsLocallyPackaged.vpr@82.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (SnapshotsLocallyPackaged.vpr@90.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (SnapshotsLocallyPackaged.vpr@82.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (SnapshotsLocallyPackaged.vpr@90.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (SnapshotsLocallyPackaged.vpr@82.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (SnapshotsLocallyPackaged.vpr@90.5)))
../../src/test/resources/frontend-generated/wands/new_syntax/SnapshotsNestedMagicWands-reduced.vpr,1,1854,12,0,1838,1857,1867,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion x.g == old_g might not hold. (SnapshotsNestedMagicWands-reduced.vpr@32.2)); List([assert.failed:assertion.false] Assert might fail. Assertion x.g == old_g might not hold. (SnapshotsNestedMagicWands-reduced.vpr@32.2)); List([assert.failed:assertion.false] Assert might fail. Assertion x.g == old_g might not hold. (SnapshotsNestedMagicWands-reduced.vpr@32.2)); List([assert.failed:assertion.false] Assert might fail. Assertion x.g == old_g might not hold. (SnapshotsNestedMagicWands-reduced.vpr@32.2)); List([assert.failed:assertion.false] Assert might fail. Assertion x.g == old_g might not hold. (SnapshotsNestedMagicWands-reduced.vpr@32.2)))
../../src/test/resources/frontend-generated/wands/new_syntax/SnapshotsNestedMagicWands.vpr,1,2069,111,5,1972,2010,2225,Vector(List([postcondition.violated:assertion.false] Postcondition of test2 might not hold. Assertion x.f == old(x.f) might not hold. (SnapshotsNestedMagicWands.vpr@35.9)); List([postcondition.violated:assertion.false] Postcondition of test2 might not hold. Assertion x.f == old(x.f) might not hold. (SnapshotsNestedMagicWands.vpr@35.9)); List([postcondition.violated:assertion.false] Postcondition of test2 might not hold. Assertion x.f == old(x.f) might not hold. (SnapshotsNestedMagicWands.vpr@35.9)); List([postcondition.violated:assertion.false] Postcondition of test2 might not hold. Assertion x.f == old(x.f) might not hold. (SnapshotsNestedMagicWands.vpr@35.9)); List([postcondition.violated:assertion.false] Postcondition of test2 might not hold. Assertion x.f == old(x.f) might not hold. (SnapshotsNestedMagicWands.vpr@35.9)))
../../src/test/resources/frontend-generated/wands/new_syntax/SnapshotsWithPredicates.vpr,0,1948,32,1,1905,1958,1983,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/new_syntax/UnfoldPredicateOnField.vpr,0,1707,9,0,1696,1706,1719,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/new_syntax/UnfoldTwice.vpr,1,1857,28,1,1830,1845,1897,Vector(List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access Cell(x.f). (UnfoldTwice.vpr@15.5)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access Cell(x.f). (UnfoldTwice.vpr@15.5)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access Cell(x.f). (UnfoldTwice.vpr@15.5)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access Cell(x.f). (UnfoldTwice.vpr@15.5)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access Cell(x.f). (UnfoldTwice.vpr@15.5)))
../../src/test/resources/frontend-generated/wands/new_syntax/VariableAccess.vpr,0,1715,49,2,1645,1749,1751,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/new_syntax/localVarAssign.vpr,0,1624,49,3,1558,1641,1675,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/PackageStateConsolidation.vpr,0,1708,17,0,1685,1712,1727,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/apply.vpr,3,1839,21,1,1813,1841,1865,Vector(List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (apply.vpr@10.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (apply.vpr@30.3); [call.precondition:wand.not.found] The precondition of method test02 might not hold. Magic wand instance not found. (apply.vpr@48.3)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (apply.vpr@10.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (apply.vpr@30.3); [call.precondition:wand.not.found] The precondition of method test02 might not hold. Magic wand instance not found. (apply.vpr@48.3)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (apply.vpr@10.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (apply.vpr@30.3); [call.precondition:wand.not.found] The precondition of method test02 might not hold. Magic wand instance not found. (apply.vpr@48.3)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (apply.vpr@10.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (apply.vpr@30.3); [call.precondition:wand.not.found] The precondition of method test02 might not hold. Magic wand instance not found. (apply.vpr@48.3)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (apply.vpr@10.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (apply.vpr@30.3); [call.precondition:wand.not.found] The precondition of method test02 might not hold. Magic wand instance not found. (apply.vpr@48.3)))
../../src/test/resources/frontend-generated/wands/regression/apply1.vpr,2,1600,10,0,1585,1604,1611,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply1.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply1.vpr@23.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply1.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply1.vpr@23.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply1.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply1.vpr@23.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply1.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply1.vpr@23.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply1.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply1.vpr@23.3)))
../../src/test/resources/frontend-generated/wands/regression/apply_potential_incompleteness.vpr,1,1663,18,1,1643,1660,1687,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply_potential_incompleteness.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply_potential_incompleteness.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply_potential_incompleteness.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply_potential_incompleteness.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply_potential_incompleteness.vpr@14.3)))
../../src/test/resources/frontend-generated/wands/regression/applying.vpr,4,1956,42,2,1898,1972,1998,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (applying.vpr@26.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (applying.vpr@34.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.g. (applying.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (applying.vpr@72.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (applying.vpr@26.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (applying.vpr@34.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.g. (applying.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (applying.vpr@72.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (applying.vpr@26.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (applying.vpr@34.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.g. (applying.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (applying.vpr@72.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (applying.vpr@26.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (applying.vpr@34.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.g. (applying.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (applying.vpr@72.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (applying.vpr@26.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (applying.vpr@34.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.g. (applying.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (applying.vpr@72.3)))
../../src/test/resources/frontend-generated/wands/regression/closures_encoded.vpr,0,2010,11,0,1994,2014,2022,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/conditionals1.vpr,7,2539,112,4,2380,2614,2624,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access M(x). (conditionals1.vpr@32.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access M(x). (conditionals1.vpr@44.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@72.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@86.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@97.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals1.vpr@118.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals1.vpr@137.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access M(x). (conditionals1.vpr@32.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access M(x). (conditionals1.vpr@44.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@72.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@86.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@97.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals1.vpr@118.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals1.vpr@137.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access M(x). (conditionals1.vpr@32.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access M(x). (conditionals1.vpr@44.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@72.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@86.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@97.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals1.vpr@118.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals1.vpr@137.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access M(x). (conditionals1.vpr@32.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access M(x). (conditionals1.vpr@44.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@72.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@86.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@97.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals1.vpr@118.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals1.vpr@137.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access M(x). (conditionals1.vpr@32.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access M(x). (conditionals1.vpr@44.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@72.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@86.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@97.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals1.vpr@118.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals1.vpr@137.3)))
../../src/test/resources/frontend-generated/wands/regression/conditionals2.vpr,3,1955,75,3,1851,1988,2027,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals2.vpr@81.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.h. (conditionals2.vpr@102.5); [assert.failed:assertion.false] Assert might fail. Assertion perm(x.g) == write might not hold. (conditionals2.vpr@123.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals2.vpr@81.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.h. (conditionals2.vpr@102.5); [assert.failed:assertion.false] Assert might fail. Assertion perm(x.g) == write might not hold. (conditionals2.vpr@123.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals2.vpr@81.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.h. (conditionals2.vpr@102.5); [assert.failed:assertion.false] Assert might fail. Assertion perm(x.g) == write might not hold. (conditionals2.vpr@123.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals2.vpr@81.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.h. (conditionals2.vpr@102.5); [assert.failed:assertion.false] Assert might fail. Assertion perm(x.g) == write might not hold. (conditionals2.vpr@123.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals2.vpr@81.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.h. (conditionals2.vpr@102.5); [assert.failed:assertion.false] Assert might fail. Assertion perm(x.g) == write might not hold. (conditionals2.vpr@123.3)))
../../src/test/resources/frontend-generated/wands/regression/conditionals3.vpr,3,3247,27,0,3224,3233,3286,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals3.vpr@70.3); [assert.failed:assertion.false] Assert might fail. Assertion !b1 && (!b2 && !b3) ==> false might not hold. (conditionals3.vpr@114.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals3.vpr@205.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals3.vpr@70.3); [assert.failed:assertion.false] Assert might fail. Assertion !b1 && (!b2 && !b3) ==> false might not hold. (conditionals3.vpr@114.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals3.vpr@205.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals3.vpr@70.3); [assert.failed:assertion.false] Assert might fail. Assertion !b1 && (!b2 && !b3) ==> false might not hold. (conditionals3.vpr@114.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals3.vpr@205.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals3.vpr@70.3); [assert.failed:assertion.false] Assert might fail. Assertion !b1 && (!b2 && !b3) ==> false might not hold. (conditionals3.vpr@114.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals3.vpr@205.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals3.vpr@70.3); [assert.failed:assertion.false] Assert might fail. Assertion !b1 && (!b2 && !b3) ==> false might not hold. (conditionals3.vpr@114.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals3.vpr@205.3)))
../../src/test/resources/frontend-generated/wands/regression/consistency.vpr,12,22,0,0,22,22,22,Vector(List(Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@18.12); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@25.10); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@30.20); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@71.11); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@77.9); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@18.46); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@25.64); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@30.42); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@39.33); Consistency error: acc(Pair(p); write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@48.31); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@71.33); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@77.31)); List(Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@18.12); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@25.10); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@30.20); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@71.11); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@77.9); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@18.46); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@25.64); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@30.42); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@39.33); Consistency error: acc(Pair(p); write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@48.31); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@71.33); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@77.31)); List(Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@18.12); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@25.10); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@30.20); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@71.11); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@77.9); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@18.46); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@25.64); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@30.42); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@39.33); Consistency error: acc(Pair(p); write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@48.31); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@71.33); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@77.31)); List(Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@18.12); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@25.10); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@30.20); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@71.11); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@77.9); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@18.46); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@25.64); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@30.42); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@39.33); Consistency error: acc(Pair(p); write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@48.31); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@71.33); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@77.31)); List(Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@18.12); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@25.10); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@30.20); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@71.11); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@77.9); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@18.46); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@25.64); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@30.42); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@39.33); Consistency error: acc(Pair(p); write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@48.31); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@71.33); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@77.31)))
../../src/test/resources/frontend-generated/wands/regression/consistency_define.vpr,2,2,0,0,2,2,2,Vector(List(identifier B not defined. (consistency_define.vpr@14.16); identifier foo not defined. (consistency_define.vpr@19.10)); List(identifier B not defined. (consistency_define.vpr@14.16); identifier foo not defined. (consistency_define.vpr@19.10)); List(identifier B not defined. (consistency_define.vpr@14.16); identifier foo not defined. (consistency_define.vpr@19.10)); List(identifier B not defined. (consistency_define.vpr@14.16); identifier foo not defined. (consistency_define.vpr@19.10)); List(identifier B not defined. (consistency_define.vpr@14.16); identifier foo not defined. (consistency_define.vpr@19.10)))
../../src/test/resources/frontend-generated/wands/regression/consistency_define_typechecker.vpr,1,2,0,0,2,2,3,Vector(List(Type error in the expression at consistency_define_typechecker.vpr@[11.10-11.19] (consistency_define_typechecker.vpr@11.10)); List(Type error in the expression at consistency_define_typechecker.vpr@[11.10-11.19] (consistency_define_typechecker.vpr@11.10)); List(Type error in the expression at consistency_define_typechecker.vpr@[11.10-11.19] (consistency_define_typechecker.vpr@11.10)); List(Type error in the expression at consistency_define_typechecker.vpr@[11.10-11.19] (consistency_define_typechecker.vpr@11.10)); List(Type error in the expression at consistency_define_typechecker.vpr@[11.10-11.19] (consistency_define_typechecker.vpr@11.10)))
../../src/test/resources/frontend-generated/wands/regression/consistency_let_resolver.vpr,6,2,0,0,2,2,3,Vector(List(identifier y not defined. (consistency_let_resolver.vpr@7.10); identifier y not defined. (consistency_let_resolver.vpr@12.36); Duplicate identifier `test03' at consistency_let_resolver.vpr@16.8 and at consistency_let_resolver.vpr@20.8 (consistency_let_resolver.vpr@16.8); Duplicate identifier `y' at consistency_let_resolver.vpr@16.15 and at consistency_let_resolver.vpr@17.14 (consistency_let_resolver.vpr@16.15); Duplicate identifier `y' at consistency_let_resolver.vpr@22.14 and at consistency_let_resolver.vpr@22.30 (consistency_let_resolver.vpr@22.14); identifier y not defined. (consistency_let_resolver.vpr@27.20)); List(identifier y not defined. (consistency_let_resolver.vpr@7.10); identifier y not defined. (consistency_let_resolver.vpr@12.36); Duplicate identifier `test03' at consistency_let_resolver.vpr@16.8 and at consistency_let_resolver.vpr@20.8 (consistency_let_resolver.vpr@16.8); Duplicate identifier `y' at consistency_let_resolver.vpr@16.15 and at consistency_let_resolver.vpr@17.14 (consistency_let_resolver.vpr@16.15); Duplicate identifier `y' at consistency_let_resolver.vpr@22.14 and at consistency_let_resolver.vpr@22.30 (consistency_let_resolver.vpr@22.14); identifier y not defined. (consistency_let_resolver.vpr@27.20)); List(identifier y not defined. (consistency_let_resolver.vpr@7.10); identifier y not defined. (consistency_let_resolver.vpr@12.36); Duplicate identifier `test03' at consistency_let_resolver.vpr@16.8 and at consistency_let_resolver.vpr@20.8 (consistency_let_resolver.vpr@16.8); Duplicate identifier `y' at consistency_let_resolver.vpr@16.15 and at consistency_let_resolver.vpr@17.14 (consistency_let_resolver.vpr@16.15); Duplicate identifier `y' at consistency_let_resolver.vpr@22.14 and at consistency_let_resolver.vpr@22.30 (consistency_let_resolver.vpr@22.14); identifier y not defined. (consistency_let_resolver.vpr@27.20)); List(identifier y not defined. (consistency_let_resolver.vpr@7.10); identifier y not defined. (consistency_let_resolver.vpr@12.36); Duplicate identifier `test03' at consistency_let_resolver.vpr@16.8 and at consistency_let_resolver.vpr@20.8 (consistency_let_resolver.vpr@16.8); Duplicate identifier `y' at consistency_let_resolver.vpr@16.15 and at consistency_let_resolver.vpr@17.14 (consistency_let_resolver.vpr@16.15); Duplicate identifier `y' at consistency_let_resolver.vpr@22.14 and at consistency_let_resolver.vpr@22.30 (consistency_let_resolver.vpr@22.14); identifier y not defined. (consistency_let_resolver.vpr@27.20)); List(identifier y not defined. (consistency_let_resolver.vpr@7.10); identifier y not defined. (consistency_let_resolver.vpr@12.36); Duplicate identifier `test03' at consistency_let_resolver.vpr@16.8 and at consistency_let_resolver.vpr@20.8 (consistency_let_resolver.vpr@16.8); Duplicate identifier `y' at consistency_let_resolver.vpr@16.15 and at consistency_let_resolver.vpr@17.14 (consistency_let_resolver.vpr@16.15); Duplicate identifier `y' at consistency_let_resolver.vpr@22.14 and at consistency_let_resolver.vpr@22.30 (consistency_let_resolver.vpr@22.14); identifier y not defined. (consistency_let_resolver.vpr@27.20)))
../../src/test/resources/frontend-generated/wands/regression/consistency_let_typechecker.vpr,1,1,0,0,1,1,1,Vector(List(Type error in the expression at consistency_let_typechecker.vpr@[6.26-6.28] (consistency_let_typechecker.vpr@6.26)); List(Type error in the expression at consistency_let_typechecker.vpr@[6.26-6.28] (consistency_let_typechecker.vpr@6.26)); List(Type error in the expression at consistency_let_typechecker.vpr@[6.26-6.28] (consistency_let_typechecker.vpr@6.26)); List(Type error in the expression at consistency_let_typechecker.vpr@[6.26-6.28] (consistency_let_typechecker.vpr@6.26)); List(Type error in the expression at consistency_let_typechecker.vpr@[6.26-6.28] (consistency_let_typechecker.vpr@6.26)))
../../src/test/resources/frontend-generated/wands/regression/consistency_resolver.vpr,2,3,0,0,3,4,4,Vector(List(expected magic wand (consistency_resolver.vpr@18.9); expected magic wand (consistency_resolver.vpr@30.11)); List(expected magic wand (consistency_resolver.vpr@18.9); expected magic wand (consistency_resolver.vpr@30.11)); List(expected magic wand (consistency_resolver.vpr@18.9); expected magic wand (consistency_resolver.vpr@30.11)); List(expected magic wand (consistency_resolver.vpr@18.9); expected magic wand (consistency_resolver.vpr@30.11)); List(expected magic wand (consistency_resolver.vpr@18.9); expected magic wand (consistency_resolver.vpr@30.11)))
../../src/test/resources/frontend-generated/wands/regression/consumption.vpr,5,1978,19,0,1951,1988,1997,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.f. (consumption.vpr@30.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.f. (consumption.vpr@47.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (consumption.vpr@57.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (consumption.vpr@64.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access y.f. (consumption.vpr@74.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.f. (consumption.vpr@30.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.f. (consumption.vpr@47.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (consumption.vpr@57.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (consumption.vpr@64.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access y.f. (consumption.vpr@74.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.f. (consumption.vpr@30.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.f. (consumption.vpr@47.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (consumption.vpr@57.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (consumption.vpr@64.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access y.f. (consumption.vpr@74.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.f. (consumption.vpr@30.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.f. (consumption.vpr@47.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (consumption.vpr@57.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (consumption.vpr@64.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access y.f. (consumption.vpr@74.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.f. (consumption.vpr@30.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.f. (consumption.vpr@47.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (consumption.vpr@57.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (consumption.vpr@64.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access y.f. (consumption.vpr@74.3)))
../../src/test/resources/frontend-generated/wands/regression/eval_states.vpr,0,1992,63,3,1903,2031,2042,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/exec_unfolding.vpr,2,1761,110,6,1605,1839,1841,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (exec_unfolding.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (exec_unfolding.vpr@29.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (exec_unfolding.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (exec_unfolding.vpr@29.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (exec_unfolding.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (exec_unfolding.vpr@29.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (exec_unfolding.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (exec_unfolding.vpr@29.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (exec_unfolding.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (exec_unfolding.vpr@29.3)))
../../src/test/resources/frontend-generated/wands/regression/folding.vpr,0,1596,51,3,1524,1624,1640,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/folding_2.vpr,3,1865,62,3,1809,1836,1952,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (folding_2.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_2.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_2.vpr@45.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (folding_2.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_2.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_2.vpr@45.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (folding_2.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_2.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_2.vpr@45.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (folding_2.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_2.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_2.vpr@45.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (folding_2.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_2.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_2.vpr@45.3)))
../../src/test/resources/frontend-generated/wands/regression/folding_fun_frame.vpr,1,1860,41,2,1803,1876,1901,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_fun_frame.vpr@38.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_fun_frame.vpr@38.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_fun_frame.vpr@38.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_fun_frame.vpr@38.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_fun_frame.vpr@38.3)))
../../src/test/resources/frontend-generated/wands/regression/folding_fun_frame_2.vpr,1,1688,117,6,1523,1762,1781,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_fun_frame_2.vpr@30.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_fun_frame_2.vpr@30.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_fun_frame_2.vpr@30.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_fun_frame_2.vpr@30.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_fun_frame_2.vpr@30.3)))
../../src/test/resources/frontend-generated/wands/regression/folding_inc1.vpr,3,1951,50,2,1886,1960,2008,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_inc1.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_inc1.vpr@36.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (folding_inc1.vpr@41.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_inc1.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_inc1.vpr@36.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (folding_inc1.vpr@41.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_inc1.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_inc1.vpr@36.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (folding_inc1.vpr@41.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_inc1.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_inc1.vpr@36.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (folding_inc1.vpr@41.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_inc1.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_inc1.vpr@36.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (folding_inc1.vpr@41.3)))
../../src/test/resources/frontend-generated/wands/regression/folding_unfolding_combo.vpr,3,1949,30,1,1922,1935,1992,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@47.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@60.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@47.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@60.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@47.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@60.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@47.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@60.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@47.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@60.3)))
../../src/test/resources/frontend-generated/wands/regression/footprints.vpr,3,1949,46,2,1892,1952,2005,Vector(List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (footprints.vpr@13.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (footprints.vpr@23.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.v. (footprints.vpr@39.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (footprints.vpr@13.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (footprints.vpr@23.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.v. (footprints.vpr@39.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (footprints.vpr@13.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (footprints.vpr@23.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.v. (footprints.vpr@39.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (footprints.vpr@13.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (footprints.vpr@23.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.v. (footprints.vpr@39.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (footprints.vpr@13.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (footprints.vpr@23.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.v. (footprints.vpr@39.3)))
../../src/test/resources/frontend-generated/wands/regression/heuristics_access_paths.vpr,0,1964,14,0,1949,1960,1983,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/heuristics_apply.vpr,1,2501,153,6,2285,2602,2617,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (heuristics_apply.vpr@28.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (heuristics_apply.vpr@28.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (heuristics_apply.vpr@28.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (heuristics_apply.vpr@28.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (heuristics_apply.vpr@28.3)))
../../src/test/resources/frontend-generated/wands/regression/heuristics_fold_unfold.vpr,0,2025,63,3,1976,1985,2114,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/heuristics_misc.vpr,0,2693,84,3,2576,2732,2773,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/heuristics_package.vpr,5,2857,28,0,2836,2839,2898,Vector(List([postcondition.violated:wand.not.found] Postcondition of test03 might not hold. Magic wand instance not found. (heuristics_package.vpr@32.11); [postcondition.violated:wand.not.found] Postcondition of test04 might not hold. Magic wand instance not found. (heuristics_package.vpr@39.11); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (heuristics_package.vpr@67.3); [postcondition.violated:wand.not.found] Postcondition of test07 might not hold. Magic wand instance not found. (heuristics_package.vpr@74.11); [postcondition.violated:wand.not.found] Postcondition of test08b might not hold. Magic wand instance not found. (heuristics_package.vpr@87.11)); List([postcondition.violated:wand.not.found] Postcondition of test03 might not hold. Magic wand instance not found. (heuristics_package.vpr@32.11); [postcondition.violated:wand.not.found] Postcondition of test04 might not hold. Magic wand instance not found. (heuristics_package.vpr@39.11); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (heuristics_package.vpr@67.3); [postcondition.violated:wand.not.found] Postcondition of test07 might not hold. Magic wand instance not found. (heuristics_package.vpr@74.11); [postcondition.violated:wand.not.found] Postcondition of test08b might not hold. Magic wand instance not found. (heuristics_package.vpr@87.11)); List([postcondition.violated:wand.not.found] Postcondition of test03 might not hold. Magic wand instance not found. (heuristics_package.vpr@32.11); [postcondition.violated:wand.not.found] Postcondition of test04 might not hold. Magic wand instance not found. (heuristics_package.vpr@39.11); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (heuristics_package.vpr@67.3); [postcondition.violated:wand.not.found] Postcondition of test07 might not hold. Magic wand instance not found. (heuristics_package.vpr@74.11); [postcondition.violated:wand.not.found] Postcondition of test08b might not hold. Magic wand instance not found. (heuristics_package.vpr@87.11)); List([postcondition.violated:wand.not.found] Postcondition of test03 might not hold. Magic wand instance not found. (heuristics_package.vpr@32.11); [postcondition.violated:wand.not.found] Postcondition of test04 might not hold. Magic wand instance not found. (heuristics_package.vpr@39.11); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (heuristics_package.vpr@67.3); [postcondition.violated:wand.not.found] Postcondition of test07 might not hold. Magic wand instance not found. (heuristics_package.vpr@74.11); [postcondition.violated:wand.not.found] Postcondition of test08b might not hold. Magic wand instance not found. (heuristics_package.vpr@87.11)); List([postcondition.violated:wand.not.found] Postcondition of test03 might not hold. Magic wand instance not found. (heuristics_package.vpr@32.11); [postcondition.violated:wand.not.found] Postcondition of test04 might not hold. Magic wand instance not found. (heuristics_package.vpr@39.11); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (heuristics_package.vpr@67.3); [postcondition.violated:wand.not.found] Postcondition of test07 might not hold. Magic wand instance not found. (heuristics_package.vpr@74.11); [postcondition.violated:wand.not.found] Postcondition of test08b might not hold. Magic wand instance not found. (heuristics_package.vpr@87.11)))
../../src/test/resources/frontend-generated/wands/regression/inconsistency_scenario_2.vpr,1,1618,91,5,1488,1682,1684,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (inconsistency_scenario_2.vpr@16.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (inconsistency_scenario_2.vpr@16.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (inconsistency_scenario_2.vpr@16.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (inconsistency_scenario_2.vpr@16.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (inconsistency_scenario_2.vpr@16.3)))
../../src/test/resources/frontend-generated/wands/regression/issue005.vpr,1,1847,38,2,1795,1861,1886,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue005.vpr@34.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue005.vpr@34.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue005.vpr@34.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue005.vpr@34.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue005.vpr@34.3)))
../../src/test/resources/frontend-generated/wands/regression/issue006.vpr,3,1975,15,0,1956,1977,1993,Vector(List([apply.failed:assertion.false] Applying wand might fail. Assertion x == a - 1 might not hold. (issue006.vpr@33.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (issue006.vpr@54.3); [apply.failed:assertion.false] Applying wand might fail. Assertion x < y might not hold. (issue006.vpr@93.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion x == a - 1 might not hold. (issue006.vpr@33.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (issue006.vpr@54.3); [apply.failed:assertion.false] Applying wand might fail. Assertion x < y might not hold. (issue006.vpr@93.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion x == a - 1 might not hold. (issue006.vpr@33.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (issue006.vpr@54.3); [apply.failed:assertion.false] Applying wand might fail. Assertion x < y might not hold. (issue006.vpr@93.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion x == a - 1 might not hold. (issue006.vpr@33.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (issue006.vpr@54.3); [apply.failed:assertion.false] Applying wand might fail. Assertion x < y might not hold. (issue006.vpr@93.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion x == a - 1 might not hold. (issue006.vpr@33.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (issue006.vpr@54.3); [apply.failed:assertion.false] Applying wand might fail. Assertion x < y might not hold. (issue006.vpr@93.3)))
../../src/test/resources/frontend-generated/wands/regression/issue007.vpr,2,1774,12,0,1757,1782,1784,Vector(List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (issue007.vpr@17.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (issue007.vpr@48.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (issue007.vpr@17.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (issue007.vpr@48.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (issue007.vpr@17.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (issue007.vpr@48.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (issue007.vpr@17.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (issue007.vpr@48.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (issue007.vpr@17.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (issue007.vpr@48.3)))
../../src/test/resources/frontend-generated/wands/regression/issue009.vpr,0,1743,62,3,1655,1786,1788,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/issue010.vpr,0,1766,70,3,1667,1808,1824,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/issue011.vpr,0,1572,51,3,1507,1577,1633,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/issue012.vpr,0,2006,10,0,1996,2002,2020,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/issue013.vpr,0,1625,16,0,1607,1622,1646,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/issue015.vpr,1,1655,124,7,1482,1718,1766,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue015.vpr@26.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue015.vpr@26.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue015.vpr@26.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue015.vpr@26.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue015.vpr@26.3)))
../../src/test/resources/frontend-generated/wands/regression/issue017.vpr,0,1569,62,3,1494,1566,1648,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/issue023.vpr,0,1762,30,1,1719,1781,1786,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/issue024.vpr,1,1989,28,1,1963,1976,2028,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion x.f == old(x.f) might not hold. (issue024.vpr@28.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == old(x.f) might not hold. (issue024.vpr@28.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == old(x.f) might not hold. (issue024.vpr@28.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == old(x.f) might not hold. (issue024.vpr@28.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == old(x.f) might not hold. (issue024.vpr@28.5)))
../../src/test/resources/frontend-generated/wands/regression/issue029.vpr,4,3598,97,2,3461,3658,3677,Vector(List([apply.failed:assertion.false] Applying wand might fail. Assertion (unfolding acc(LL(x); write) in x.val == 10) might not hold. (issue029.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(LL(x); write) in x.next != null ==> (unfolding acc(LL(x.next); write) in x.next.val == 2 * x.val)) might not hold. (issue029.vpr@57.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access P(). (issue029.vpr@93.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue029.vpr@119.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion (unfolding acc(LL(x); write) in x.val == 10) might not hold. (issue029.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(LL(x); write) in x.next != null ==> (unfolding acc(LL(x.next); write) in x.next.val == 2 * x.val)) might not hold. (issue029.vpr@57.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access P(). (issue029.vpr@93.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue029.vpr@119.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion (unfolding acc(LL(x); write) in x.val == 10) might not hold. (issue029.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(LL(x); write) in x.next != null ==> (unfolding acc(LL(x.next); write) in x.next.val == 2 * x.val)) might not hold. (issue029.vpr@57.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access P(). (issue029.vpr@93.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue029.vpr@119.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion (unfolding acc(LL(x); write) in x.val == 10) might not hold. (issue029.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(LL(x); write) in x.next != null ==> (unfolding acc(LL(x.next); write) in x.next.val == 2 * x.val)) might not hold. (issue029.vpr@57.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access P(). (issue029.vpr@93.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue029.vpr@119.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion (unfolding acc(LL(x); write) in x.val == 10) might not hold. (issue029.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(LL(x); write) in x.next != null ==> (unfolding acc(LL(x.next); write) in x.next.val == 2 * x.val)) might not hold. (issue029.vpr@57.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access P(). (issue029.vpr@93.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue029.vpr@119.3)))
../../src/test/resources/frontend-generated/wands/regression/issue198.vpr,0,1597,84,5,1530,1546,1716,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/known_folded_1.vpr,2,1888,81,4,1777,1922,1967,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (known_folded_1.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (known_folded_1.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (known_folded_1.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (known_folded_1.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (known_folded_1.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (known_folded_1.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (known_folded_1.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (known_folded_1.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (known_folded_1.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (known_folded_1.vpr@27.3)))
../../src/test/resources/frontend-generated/wands/regression/let.vpr,0,1665,55,3,1620,1633,1743,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/let_ghostops.vpr,0,1912,43,2,1851,1943,1944,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/let_test1.vpr,0,1658,47,2,1600,1658,1716,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/let_wands.vpr,7,2113,46,2,2067,2096,2176,Vector(List([apply.failed:assertion.false] Applying wand might fail. Assertion x.f == w might not hold. (let_wands.vpr@36.3); [apply.failed:assertion.false] Applying wand might fail. Assertion x.f == w might not hold. (let_wands.vpr@54.3); [apply.failed:assertion.false] Applying wand might fail. Assertion sum(x) == old(sum(x)) might not hold. (let_wands.vpr@79.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (let_wands.vpr@96.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (let_wands.vpr@115.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (let_wands.vpr@135.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access y.g. (let_wands.vpr@145.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion x.f == w might not hold. (let_wands.vpr@36.3); [apply.failed:assertion.false] Applying wand might fail. Assertion x.f == w might not hold. (let_wands.vpr@54.3); [apply.failed:assertion.false] Applying wand might fail. Assertion sum(x) == old(sum(x)) might not hold. (let_wands.vpr@79.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (let_wands.vpr@96.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (let_wands.vpr@115.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (let_wands.vpr@135.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access y.g. (let_wands.vpr@145.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion x.f == w might not hold. (let_wands.vpr@36.3); [apply.failed:assertion.false] Applying wand might fail. Assertion x.f == w might not hold. (let_wands.vpr@54.3); [apply.failed:assertion.false] Applying wand might fail. Assertion sum(x) == old(sum(x)) might not hold. (let_wands.vpr@79.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (let_wands.vpr@96.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (let_wands.vpr@115.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (let_wands.vpr@135.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access y.g. (let_wands.vpr@145.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion x.f == w might not hold. (let_wands.vpr@36.3); [apply.failed:assertion.false] Applying wand might fail. Assertion x.f == w might not hold. (let_wands.vpr@54.3); [apply.failed:assertion.false] Applying wand might fail. Assertion sum(x) == old(sum(x)) might not hold. (let_wands.vpr@79.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (let_wands.vpr@96.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (let_wands.vpr@115.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (let_wands.vpr@135.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access y.g. (let_wands.vpr@145.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion x.f == w might not hold. (let_wands.vpr@36.3); [apply.failed:assertion.false] Applying wand might fail. Assertion x.f == w might not hold. (let_wands.vpr@54.3); [apply.failed:assertion.false] Applying wand might fail. Assertion sum(x) == old(sum(x)) might not hold. (let_wands.vpr@79.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (let_wands.vpr@96.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (let_wands.vpr@115.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (let_wands.vpr@135.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access y.g. (let_wands.vpr@145.3)))
../../src/test/resources/frontend-generated/wands/regression/lhs.vpr,0,1753,104,5,1605,1827,1828,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/loop_sum_ghostvar_old.vpr,0,1991,30,1,1963,1978,2034,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/nesting.vpr,0,1941,15,0,1919,1949,1955,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/old.vpr,0,1608,27,1,1571,1622,1633,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/package-sandboxed.vpr,1,1616,42,2,1563,1619,1667,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (package-sandboxed.vpr@14.2)); List([assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (package-sandboxed.vpr@14.2)); List([assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (package-sandboxed.vpr@14.2)); List([assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (package-sandboxed.vpr@14.2)); List([assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (package-sandboxed.vpr@14.2)))
../../src/test/resources/frontend-generated/wands/regression/package.vpr,11,2331,135,5,2215,2257,2522,Vector(List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (package.vpr@16.3); [package.failed:assertion.false] Packaging wand might fail. Assertion x.f == 0 might not hold. (package.vpr@24.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (package.vpr@34.3); [package.failed:assertion.false] Packaging wand might fail. Assertion x.f == 0 might not hold. (package.vpr@49.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package.vpr@63.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@94.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package.vpr@101.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@109.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@122.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@136.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (package.vpr@149.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (package.vpr@16.3); [package.failed:assertion.false] Packaging wand might fail. Assertion x.f == 0 might not hold. (package.vpr@24.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (package.vpr@34.3); [package.failed:assertion.false] Packaging wand might fail. Assertion x.f == 0 might not hold. (package.vpr@49.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package.vpr@63.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@94.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package.vpr@101.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@109.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@122.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@136.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (package.vpr@149.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (package.vpr@16.3); [package.failed:assertion.false] Packaging wand might fail. Assertion x.f == 0 might not hold. (package.vpr@24.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (package.vpr@34.3); [package.failed:assertion.false] Packaging wand might fail. Assertion x.f == 0 might not hold. (package.vpr@49.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package.vpr@63.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@94.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package.vpr@101.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@109.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@122.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@136.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (package.vpr@149.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (package.vpr@16.3); [package.failed:assertion.false] Packaging wand might fail. Assertion x.f == 0 might not hold. (package.vpr@24.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (package.vpr@34.3); [package.failed:assertion.false] Packaging wand might fail. Assertion x.f == 0 might not hold. (package.vpr@49.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package.vpr@63.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@94.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package.vpr@101.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@109.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@122.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@136.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (package.vpr@149.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (package.vpr@16.3); [package.failed:assertion.false] Packaging wand might fail. Assertion x.f == 0 might not hold. (package.vpr@24.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (package.vpr@34.3); [package.failed:assertion.false] Packaging wand might fail. Assertion x.f == 0 might not hold. (package.vpr@49.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package.vpr@63.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@94.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package.vpr@101.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@109.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@122.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@136.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (package.vpr@149.3)))
../../src/test/resources/frontend-generated/wands/regression/package_hyp.vpr,5,1922,28,1,1884,1930,1953,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@37.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package_hyp.vpr@44.7); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@56.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@37.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package_hyp.vpr@44.7); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@56.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@37.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package_hyp.vpr@44.7); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@56.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@37.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package_hyp.vpr@44.7); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@56.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@37.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package_hyp.vpr@44.7); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@56.3)))
../../src/test/resources/frontend-generated/wands/regression/package_inc1.vpr,2,1704,25,1,1679,1695,1740,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc1.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc1.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc1.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc1.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc1.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc1.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc1.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc1.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc1.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc1.vpr@24.3)))
../../src/test/resources/frontend-generated/wands/regression/package_inc2.vpr,4,1869,68,3,1783,1875,1951,Vector(List([apply.failed:assertion.false] Applying wand might fail. Assertion x.f == 2 might not hold. (package_inc2.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc2.vpr@30.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (package_inc2.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc2.vpr@48.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion x.f == 2 might not hold. (package_inc2.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc2.vpr@30.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (package_inc2.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc2.vpr@48.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion x.f == 2 might not hold. (package_inc2.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc2.vpr@30.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (package_inc2.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc2.vpr@48.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion x.f == 2 might not hold. (package_inc2.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc2.vpr@30.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (package_inc2.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc2.vpr@48.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion x.f == 2 might not hold. (package_inc2.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc2.vpr@30.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (package_inc2.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc2.vpr@48.3)))
../../src/test/resources/frontend-generated/wands/regression/package_inc3.vpr,3,1955,8,0,1943,1959,1963,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@37.3)))
../../src/test/resources/frontend-generated/wands/regression/package_inc5.vpr,2,1934,10,0,1919,1940,1944,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc5.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc5.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc5.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc5.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc5.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc5.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc5.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc5.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc5.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc5.vpr@35.3)))
../../src/test/resources/frontend-generated/wands/regression/package_simple_no_perm.vpr,3,1725,12,0,1716,1717,1742,Vector(List([package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package_simple_no_perm.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_simple_no_perm.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_simple_no_perm.vpr@35.3)); List([package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package_simple_no_perm.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_simple_no_perm.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_simple_no_perm.vpr@35.3)); List([package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package_simple_no_perm.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_simple_no_perm.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_simple_no_perm.vpr@35.3)); List([package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package_simple_no_perm.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_simple_no_perm.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_simple_no_perm.vpr@35.3)); List([package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package_simple_no_perm.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_simple_no_perm.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_simple_no_perm.vpr@35.3)))
../../src/test/resources/frontend-generated/wands/regression/packaging.vpr,4,1862,48,2,1807,1856,1925,Vector(List([package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (packaging.vpr@12.7); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@24.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@36.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@43.3)); List([package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (packaging.vpr@12.7); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@24.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@36.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@43.3)); List([package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (packaging.vpr@12.7); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@24.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@36.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@43.3)); List([package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (packaging.vpr@12.7); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@24.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@36.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@43.3)); List([package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (packaging.vpr@12.7); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@24.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@36.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@43.3)))
../../src/test/resources/frontend-generated/wands/regression/packaging_1.vpr,4,1978,13,0,1960,1984,1991,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@23.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@39.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (packaging_1.vpr@47.7); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@59.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@23.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@39.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (packaging_1.vpr@47.7); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@59.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@23.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@39.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (packaging_1.vpr@47.7); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@59.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@23.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@39.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (packaging_1.vpr@47.7); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@59.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@23.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@39.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (packaging_1.vpr@47.7); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@59.3)))
../../src/test/resources/frontend-generated/wands/regression/packaging_apply.vpr,1,1900,44,2,1838,1925,1939,Vector(List([apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging_apply.vpr@20.3)); List([apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging_apply.vpr@20.3)); List([apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging_apply.vpr@20.3)); List([apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging_apply.vpr@20.3)); List([apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging_apply.vpr@20.3)))
../../src/test/resources/frontend-generated/wands/regression/packaging_cond_perm.vpr,4,1994,37,1,1960,1976,2046,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@23.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_cond_perm.vpr@45.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@56.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@23.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_cond_perm.vpr@45.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@56.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@23.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_cond_perm.vpr@45.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@56.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@23.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_cond_perm.vpr@45.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@56.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@23.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_cond_perm.vpr@45.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@56.3)))
../../src/test/resources/frontend-generated/wands/regression/packaging_nested.vpr,2,1932,3,0,1929,1930,1937,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_nested.vpr@23.1); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_nested.vpr@40.1)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_nested.vpr@23.1); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_nested.vpr@40.1)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_nested.vpr@23.1); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_nested.vpr@40.1)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_nested.vpr@23.1); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_nested.vpr@40.1)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_nested.vpr@23.1); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_nested.vpr@40.1)))
../../src/test/resources/frontend-generated/wands/regression/packaging_shield.vpr,1,1796,75,4,1690,1838,1861,Vector(List([package.failed:assertion.false] Packaging wand might fail. Assertion ys.f == 2 might not hold. (packaging_shield.vpr@15.5)); List([package.failed:assertion.false] Packaging wand might fail. Assertion ys.f == 2 might not hold. (packaging_shield.vpr@15.5)); List([package.failed:assertion.false] Packaging wand might fail. Assertion ys.f == 2 might not hold. (packaging_shield.vpr@15.5)); List([package.failed:assertion.false] Packaging wand might fail. Assertion ys.f == 2 might not hold. (packaging_shield.vpr@15.5)); List([package.failed:assertion.false] Packaging wand might fail. Assertion ys.f == 2 might not hold. (packaging_shield.vpr@15.5)))
../../src/test/resources/frontend-generated/wands/regression/resultstate1.vpr,1,1856,46,2,1795,1868,1907,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (resultstate1.vpr@20.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (resultstate1.vpr@20.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (resultstate1.vpr@20.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (resultstate1.vpr@20.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (resultstate1.vpr@20.3)))
../../src/test/resources/frontend-generated/wands/regression/shorthand_define.vpr,3,1688,28,1,1651,1695,1719,Vector(List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (shorthand_define.vpr@12.3); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (shorthand_define.vpr@24.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (shorthand_define.vpr@35.3)); List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (shorthand_define.vpr@12.3); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (shorthand_define.vpr@24.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (shorthand_define.vpr@35.3)); List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (shorthand_define.vpr@12.3); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (shorthand_define.vpr@24.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (shorthand_define.vpr@35.3)); List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (shorthand_define.vpr@12.3); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (shorthand_define.vpr@24.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (shorthand_define.vpr@35.3)); List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (shorthand_define.vpr@12.3); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (shorthand_define.vpr@24.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (shorthand_define.vpr@35.3)))
../../src/test/resources/frontend-generated/wands/regression/shorthand_wand.vpr,1,1708,147,8,1513,1743,1870,Vector(List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (shorthand_wand.vpr@39.3)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (shorthand_wand.vpr@39.3)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (shorthand_wand.vpr@39.3)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (shorthand_wand.vpr@39.3)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (shorthand_wand.vpr@39.3)))
../../src/test/resources/frontend-generated/wands/regression/snapshot_report.vpr,0,1644,80,4,1580,1596,1758,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/snapshots.vpr,0,1971,3,0,1967,1970,1976,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/snapshots2.vpr,2,1980,23,1,1961,1968,2013,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion v1 == v2 might not hold. (snapshots2.vpr@29.5); [assert.failed:assertion.false] Assert might fail. Assertion sum(x) == 3 might not hold. (snapshots2.vpr@56.5)); List([assert.failed:assertion.false] Assert might fail. Assertion v1 == v2 might not hold. (snapshots2.vpr@29.5); [assert.failed:assertion.false] Assert might fail. Assertion sum(x) == 3 might not hold. (snapshots2.vpr@56.5)); List([assert.failed:assertion.false] Assert might fail. Assertion v1 == v2 might not hold. (snapshots2.vpr@29.5); [assert.failed:assertion.false] Assert might fail. Assertion sum(x) == 3 might not hold. (snapshots2.vpr@56.5)); List([assert.failed:assertion.false] Assert might fail. Assertion v1 == v2 might not hold. (snapshots2.vpr@29.5); [assert.failed:assertion.false] Assert might fail. Assertion sum(x) == 3 might not hold. (snapshots2.vpr@56.5)); List([assert.failed:assertion.false] Assert might fail. Assertion v1 == v2 might not hold. (snapshots2.vpr@29.5); [assert.failed:assertion.false] Assert might fail. Assertion sum(x) == 3 might not hold. (snapshots2.vpr@56.5)))
../../src/test/resources/frontend-generated/wands/regression/transfer_naive_issue_1.vpr,0,1659,22,1,1628,1672,1677,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/un_currying.vpr,5,1703,78,4,1641,1654,1814,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@30.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@47.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access Q(). (un_currying.vpr@60.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(). (un_currying.vpr@76.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@94.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@30.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@47.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access Q(). (un_currying.vpr@60.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(). (un_currying.vpr@76.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@94.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@30.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@47.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access Q(). (un_currying.vpr@60.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(). (un_currying.vpr@76.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@94.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@30.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@47.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access Q(). (un_currying.vpr@60.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(). (un_currying.vpr@76.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@94.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@30.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@47.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access Q(). (un_currying.vpr@60.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(). (un_currying.vpr@76.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@94.3)))
../../src/test/resources/frontend-generated/wands/regression/unfolding.vpr,3,1902,32,1,1859,1911,1937,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@44.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@63.3); [unfold.failed:insufficient.permission] Unfolding Pair(p) might fail. There might be insufficient permission to access Pair(p). (unfolding.vpr@77.7)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@44.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@63.3); [unfold.failed:insufficient.permission] Unfolding Pair(p) might fail. There might be insufficient permission to access Pair(p). (unfolding.vpr@77.7)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@44.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@63.3); [unfold.failed:insufficient.permission] Unfolding Pair(p) might fail. There might be insufficient permission to access Pair(p). (unfolding.vpr@77.7)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@44.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@63.3); [unfold.failed:insufficient.permission] Unfolding Pair(p) might fail. There might be insufficient permission to access Pair(p). (unfolding.vpr@77.7)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@44.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@63.3); [unfold.failed:insufficient.permission] Unfolding Pair(p) might fail. There might be insufficient permission to access Pair(p). (unfolding.vpr@77.7)))
../../src/test/resources/frontend-generated/wands/regression/unfolding_ambiguity.vpr,1,1732,34,1,1690,1732,1775,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding_ambiguity.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding_ambiguity.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding_ambiguity.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding_ambiguity.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding_ambiguity.vpr@14.3)))
../../src/test/resources/frontend-generated/wands/regression/unfolding_ambiguity2.vpr,0,1757,27,1,1722,1761,1788,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/unfolding_trivial_wand.vpr,1,1623,123,7,1456,1662,1752,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding_trivial_wand.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding_trivial_wand.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding_trivial_wand.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding_trivial_wand.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding_trivial_wand.vpr@14.3)))
../../src/test/resources/frontend-generated/wands/regression/wand_conjunction.vpr,3,1599,73,4,1496,1644,1659,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@35.3)))
../../src/test/resources/frontend-generated/wands/regression/wand_shapes_1.vpr,4,1910,12,0,1893,1918,1920,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_shapes_1.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_shapes_1.vpr@29.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_1.vpr@40.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_1.vpr@47.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_shapes_1.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_shapes_1.vpr@29.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_1.vpr@40.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_1.vpr@47.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_shapes_1.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_shapes_1.vpr@29.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_1.vpr@40.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_1.vpr@47.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_shapes_1.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_shapes_1.vpr@29.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_1.vpr@40.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_1.vpr@47.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_shapes_1.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_shapes_1.vpr@29.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_1.vpr@40.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_1.vpr@47.3)))
../../src/test/resources/frontend-generated/wands/regression/wand_shapes_simple_exhale.vpr,2,1780,71,3,1679,1829,1834,Vector(List([exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_simple_exhale.vpr@15.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_simple_exhale.vpr@25.3)); List([exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_simple_exhale.vpr@15.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_simple_exhale.vpr@25.3)); List([exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_simple_exhale.vpr@15.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_simple_exhale.vpr@25.3)); List([exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_simple_exhale.vpr@15.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_simple_exhale.vpr@25.3)); List([exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_simple_exhale.vpr@15.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_simple_exhale.vpr@25.3)))
../../src/test/resources/frontend-generated/wands/regression/well_formedness_wand_1.vpr,3,1681,5,0,1673,1684,1686,Vector(List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@13.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@32.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@51.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@13.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@32.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@51.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@13.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@32.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@51.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@13.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@32.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@51.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@13.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@32.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@51.3)))
