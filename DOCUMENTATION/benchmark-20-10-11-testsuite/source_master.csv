File,Outputs,Mean [ms],StdDev [ms],RelStdDev [%],Best [ms],Median [ms],Worst [ms], Verification results
../../src/test/resources/frontend-generated/all/assume/assume.vpr,2,1504,33,2,1480,1481,1551,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion x == y ==> none <= q && q <= p might not hold. (assume.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion b2 ==> false might not hold. (assume.vpr@36.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x == y ==> none <= q && q <= p might not hold. (assume.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion b2 ==> false might not hold. (assume.vpr@36.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x == y ==> none <= q && q <= p might not hold. (assume.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion b2 ==> false might not hold. (assume.vpr@36.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x == y ==> none <= q && q <= p might not hold. (assume.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion b2 ==> false might not hold. (assume.vpr@36.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x == y ==> none <= q && q <= p might not hold. (assume.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion b2 ==> false might not hold. (assume.vpr@36.3)))
../../src/test/resources/frontend-generated/all/assume/assume10.vpr,0,1470,66,4,1419,1428,1565,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/assume/assume10QP.vpr,0,2458,173,7,2216,2543,2615,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/assume/assume10QPpred-mod1.vpr,0,1480,46,3,1440,1457,1545,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/assume/assume10QPpred-mod2.vpr,0,1465,39,2,1412,1475,1508,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/assume/assume10QPpred-mod3.vpr,0,1474,18,1,1458,1465,1500,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/assume/assume10QPpred.vpr,0,3058,76,2,3001,3008,3166,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/assume/assume10QPwand.vpr,0,3984,61,1,3900,4008,4044,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/basic/abstract_funcs_and_preds.vpr,5,1215,57,4,1162,1189,1295,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion fun01(x) == 0 might not hold. (abstract_funcs_and_preds.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) == fun01(y) might not hold. (abstract_funcs_and_preds.vpr@21.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(x) might not hold. (abstract_funcs_and_preds.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion !fun03(x) might not hold. (abstract_funcs_and_preds.vpr@51.3); [call.precondition:insufficient.permission] The precondition of method file_close might not hold. There might be insufficient permission to access file(id). (abstract_funcs_and_preds.vpr@69.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun01(x) == 0 might not hold. (abstract_funcs_and_preds.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) == fun01(y) might not hold. (abstract_funcs_and_preds.vpr@21.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(x) might not hold. (abstract_funcs_and_preds.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion !fun03(x) might not hold. (abstract_funcs_and_preds.vpr@51.3); [call.precondition:insufficient.permission] The precondition of method file_close might not hold. There might be insufficient permission to access file(id). (abstract_funcs_and_preds.vpr@69.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun01(x) == 0 might not hold. (abstract_funcs_and_preds.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) == fun01(y) might not hold. (abstract_funcs_and_preds.vpr@21.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(x) might not hold. (abstract_funcs_and_preds.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion !fun03(x) might not hold. (abstract_funcs_and_preds.vpr@51.3); [call.precondition:insufficient.permission] The precondition of method file_close might not hold. There might be insufficient permission to access file(id). (abstract_funcs_and_preds.vpr@69.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun01(x) == 0 might not hold. (abstract_funcs_and_preds.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) == fun01(y) might not hold. (abstract_funcs_and_preds.vpr@21.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(x) might not hold. (abstract_funcs_and_preds.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion !fun03(x) might not hold. (abstract_funcs_and_preds.vpr@51.3); [call.precondition:insufficient.permission] The precondition of method file_close might not hold. There might be insufficient permission to access file(id). (abstract_funcs_and_preds.vpr@69.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun01(x) == 0 might not hold. (abstract_funcs_and_preds.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) == fun01(y) might not hold. (abstract_funcs_and_preds.vpr@21.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(x) might not hold. (abstract_funcs_and_preds.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion !fun03(x) might not hold. (abstract_funcs_and_preds.vpr@51.3); [call.precondition:insufficient.permission] The precondition of method file_close might not hold. There might be insufficient permission to access file(id). (abstract_funcs_and_preds.vpr@69.3)))
../../src/test/resources/frontend-generated/all/basic/abstract_funcs_and_preds_consistency.vpr,5,5,0,0,5,5,5,Vector(List(abstract predicates cannot be folded (abstract_funcs_and_preds_consistency.vpr@10.12); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@12.14); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@17.24); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@24.17); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@30.20)); List(abstract predicates cannot be folded (abstract_funcs_and_preds_consistency.vpr@10.12); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@12.14); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@17.24); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@24.17); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@30.20)); List(abstract predicates cannot be folded (abstract_funcs_and_preds_consistency.vpr@10.12); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@12.14); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@17.24); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@24.17); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@30.20)); List(abstract predicates cannot be folded (abstract_funcs_and_preds_consistency.vpr@10.12); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@12.14); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@17.24); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@24.17); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@30.20)); List(abstract predicates cannot be folded (abstract_funcs_and_preds_consistency.vpr@10.12); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@12.14); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@17.24); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@24.17); abstract predicates cannot be unfolded (abstract_funcs_and_preds_consistency.vpr@30.20)))
../../src/test/resources/frontend-generated/all/basic/arithmetic.vpr,5,1109,50,4,1061,1089,1179,Vector(List([assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@19.5); [assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@26.5); [assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@33.5); [assert.failed:assertion.false] Assert might fail. Assertion 2 / 3 == none might not hold. (arithmetic.vpr@39.5); [assert.failed:assertion.false] Assert might fail. Assertion 2 / 3 == 3 / 4 might not hold. (arithmetic.vpr@46.5)); List([assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@19.5); [assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@26.5); [assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@33.5); [assert.failed:assertion.false] Assert might fail. Assertion 2 / 3 == none might not hold. (arithmetic.vpr@39.5); [assert.failed:assertion.false] Assert might fail. Assertion 2 / 3 == 3 / 4 might not hold. (arithmetic.vpr@46.5)); List([assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@19.5); [assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@26.5); [assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@33.5); [assert.failed:assertion.false] Assert might fail. Assertion 2 / 3 == none might not hold. (arithmetic.vpr@39.5); [assert.failed:assertion.false] Assert might fail. Assertion 2 / 3 == 3 / 4 might not hold. (arithmetic.vpr@46.5)); List([assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@19.5); [assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@26.5); [assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@33.5); [assert.failed:assertion.false] Assert might fail. Assertion 2 / 3 == none might not hold. (arithmetic.vpr@39.5); [assert.failed:assertion.false] Assert might fail. Assertion 2 / 3 == 3 / 4 might not hold. (arithmetic.vpr@46.5)); List([assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@19.5); [assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@26.5); [assignment.failed:division.by.zero] Assignment might fail. Divisor 0 might be zero. (arithmetic.vpr@33.5); [assert.failed:assertion.false] Assert might fail. Assertion 2 / 3 == none might not hold. (arithmetic.vpr@39.5); [assert.failed:assertion.false] Assert might fail. Assertion 2 / 3 == 3 / 4 might not hold. (arithmetic.vpr@46.5)))
../../src/test/resources/frontend-generated/all/basic/assert.vpr,0,1042,14,1,1027,1040,1061,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/basic/consistency1.vpr,2,16,0,0,16,16,17,Vector(List(Consistency error: acc(r.next.f; write) && acc(r.next.next; write) is non pure and appears where only pure expressions are allowed. (consistency1.vpr@11.81); Consistency error: acc(r.next.f; write) && acc(r.next.next; write) is non pure and appears where only pure expressions are allowed. (consistency1.vpr@22.72)); List(Consistency error: acc(r.next.f; write) && acc(r.next.next; write) is non pure and appears where only pure expressions are allowed. (consistency1.vpr@11.81); Consistency error: acc(r.next.f; write) && acc(r.next.next; write) is non pure and appears where only pure expressions are allowed. (consistency1.vpr@22.72)); List(Consistency error: acc(r.next.f; write) && acc(r.next.next; write) is non pure and appears where only pure expressions are allowed. (consistency1.vpr@11.81); Consistency error: acc(r.next.f; write) && acc(r.next.next; write) is non pure and appears where only pure expressions are allowed. (consistency1.vpr@22.72)); List(Consistency error: acc(r.next.f; write) && acc(r.next.next; write) is non pure and appears where only pure expressions are allowed. (consistency1.vpr@11.81); Consistency error: acc(r.next.f; write) && acc(r.next.next; write) is non pure and appears where only pure expressions are allowed. (consistency1.vpr@22.72)); List(Consistency error: acc(r.next.f; write) && acc(r.next.next; write) is non pure and appears where only pure expressions are allowed. (consistency1.vpr@11.81); Consistency error: acc(r.next.f; write) && acc(r.next.next; write) is non pure and appears where only pure expressions are allowed. (consistency1.vpr@22.72)))
../../src/test/resources/frontend-generated/all/basic/disjunction_fast_20.vpr,0,2700,206,7,2528,2583,2990,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/basic/disjunction_slow_20.vpr,0,2450,34,1,2410,2446,2495,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/basic/elsif.vpr,0,1037,22,2,1005,1052,1054,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/basic/fold.vpr,3,1086,26,2,1063,1072,1123,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (fold.vpr@18.5); [fold.failed:assertion.false] Folding valid(r) might fail. Assertion r.f == 0 might not hold. (fold.vpr@26.5); [unfold.failed:insufficient.permission] Unfolding valid(r) might fail. There might be insufficient permission to access valid(r). (fold.vpr@34.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (fold.vpr@18.5); [fold.failed:assertion.false] Folding valid(r) might fail. Assertion r.f == 0 might not hold. (fold.vpr@26.5); [unfold.failed:insufficient.permission] Unfolding valid(r) might fail. There might be insufficient permission to access valid(r). (fold.vpr@34.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (fold.vpr@18.5); [fold.failed:assertion.false] Folding valid(r) might fail. Assertion r.f == 0 might not hold. (fold.vpr@26.5); [unfold.failed:insufficient.permission] Unfolding valid(r) might fail. There might be insufficient permission to access valid(r). (fold.vpr@34.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (fold.vpr@18.5); [fold.failed:assertion.false] Folding valid(r) might fail. Assertion r.f == 0 might not hold. (fold.vpr@26.5); [unfold.failed:insufficient.permission] Unfolding valid(r) might fail. There might be insufficient permission to access valid(r). (fold.vpr@34.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (fold.vpr@18.5); [fold.failed:assertion.false] Folding valid(r) might fail. Assertion r.f == 0 might not hold. (fold.vpr@26.5); [unfold.failed:insufficient.permission] Unfolding valid(r) might fail. There might be insufficient permission to access valid(r). (fold.vpr@34.5)))
../../src/test/resources/frontend-generated/all/basic/func.vpr,0,1149,21,1,1130,1138,1180,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/basic/func2.vpr,5,1135,27,2,1098,1144,1165,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@12.13); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@18.13); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@27.1); [application.precondition:insufficient.permission] Precondition of function f4 might not hold. There might be insufficient permission to access r.f. (func2.vpr@35.3); [application.precondition:assertion.false] Precondition of function f4 might not hold. Assertion r.f == 2 might not hold. (func2.vpr@46.10)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@12.13); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@18.13); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@27.1); [application.precondition:insufficient.permission] Precondition of function f4 might not hold. There might be insufficient permission to access r.f. (func2.vpr@35.3); [application.precondition:assertion.false] Precondition of function f4 might not hold. Assertion r.f == 2 might not hold. (func2.vpr@46.10)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@12.13); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@18.13); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@27.1); [application.precondition:insufficient.permission] Precondition of function f4 might not hold. There might be insufficient permission to access r.f. (func2.vpr@35.3); [application.precondition:assertion.false] Precondition of function f4 might not hold. Assertion r.f == 2 might not hold. (func2.vpr@46.10)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@12.13); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@18.13); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@27.1); [application.precondition:insufficient.permission] Precondition of function f4 might not hold. There might be insufficient permission to access r.f. (func2.vpr@35.3); [application.precondition:assertion.false] Precondition of function f4 might not hold. Assertion r.f == 2 might not hold. (func2.vpr@46.10)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@12.13); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@18.13); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access r.f. (func2.vpr@27.1); [application.precondition:insufficient.permission] Precondition of function f4 might not hold. There might be insufficient permission to access r.f. (func2.vpr@35.3); [application.precondition:assertion.false] Precondition of function f4 might not hold. Assertion r.f == 2 might not hold. (func2.vpr@46.10)))
../../src/test/resources/frontend-generated/all/basic/func3.vpr,2,1156,6,0,1151,1153,1166,Vector(List([postcondition.violated:assertion.false] Postcondition of f2 might not hold. Assertion result == 2 might not hold. (func3.vpr@18.13); [assert.failed:assertion.false] Assert might fail. Assertion f3(r) == 1 might not hold. (func3.vpr@41.5)); List([postcondition.violated:assertion.false] Postcondition of f2 might not hold. Assertion result == 2 might not hold. (func3.vpr@18.13); [assert.failed:assertion.false] Assert might fail. Assertion f3(r) == 1 might not hold. (func3.vpr@41.5)); List([postcondition.violated:assertion.false] Postcondition of f2 might not hold. Assertion result == 2 might not hold. (func3.vpr@18.13); [assert.failed:assertion.false] Assert might fail. Assertion f3(r) == 1 might not hold. (func3.vpr@41.5)); List([postcondition.violated:assertion.false] Postcondition of f2 might not hold. Assertion result == 2 might not hold. (func3.vpr@18.13); [assert.failed:assertion.false] Assert might fail. Assertion f3(r) == 1 might not hold. (func3.vpr@41.5)); List([postcondition.violated:assertion.false] Postcondition of f2 might not hold. Assertion result == 2 might not hold. (func3.vpr@18.13); [assert.failed:assertion.false] Assert might fail. Assertion f3(r) == 1 might not hold. (func3.vpr@41.5)))
../../src/test/resources/frontend-generated/all/basic/funcpred.vpr,0,1164,35,3,1134,1145,1214,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/basic/goto.vpr,1,1116,2,0,1113,1117,1120,Vector(List([postcondition.violated:assertion.false] Postcondition of t1 might not hold. Assertion r > 0 might not hold. (goto.vpr@8.13)); List([postcondition.violated:assertion.false] Postcondition of t1 might not hold. Assertion r > 0 might not hold. (goto.vpr@8.13)); List([postcondition.violated:assertion.false] Postcondition of t1 might not hold. Assertion r > 0 might not hold. (goto.vpr@8.13)); List([postcondition.violated:assertion.false] Postcondition of t1 might not hold. Assertion r > 0 might not hold. (goto.vpr@8.13)); List([postcondition.violated:assertion.false] Postcondition of t1 might not hold. Assertion r > 0 might not hold. (goto.vpr@8.13)))
../../src/test/resources/frontend-generated/all/basic/heap.vpr,2,1084,39,3,1036,1085,1133,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (heap.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion a.f != c might not hold. (heap.vpr@32.5)); List([assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (heap.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion a.f != c might not hold. (heap.vpr@32.5)); List([assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (heap.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion a.f != c might not hold. (heap.vpr@32.5)); List([assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (heap.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion a.f != c might not hold. (heap.vpr@32.5)); List([assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (heap.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion a.f != c might not hold. (heap.vpr@32.5)))
../../src/test/resources/frontend-generated/all/basic/inex.vpr,2,1055,9,0,1045,1052,1068,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.f. (inex.vpr@17.5); [postcondition.violated:assertion.false] Postcondition of t4 might not hold. Assertion r.f == 3 might not hold. (inex.vpr@30.13)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.f. (inex.vpr@17.5); [postcondition.violated:assertion.false] Postcondition of t4 might not hold. Assertion r.f == 3 might not hold. (inex.vpr@30.13)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.f. (inex.vpr@17.5); [postcondition.violated:assertion.false] Postcondition of t4 might not hold. Assertion r.f == 3 might not hold. (inex.vpr@30.13)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.f. (inex.vpr@17.5); [postcondition.violated:assertion.false] Postcondition of t4 might not hold. Assertion r.f == 3 might not hold. (inex.vpr@30.13)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.f. (inex.vpr@17.5); [postcondition.violated:assertion.false] Postcondition of t4 might not hold. Assertion r.f == 3 might not hold. (inex.vpr@30.13)))
../../src/test/resources/frontend-generated/all/basic/learning-from-unfolding.vpr,0,1541,44,2,1494,1528,1601,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/basic/let.vpr,0,1181,42,3,1125,1191,1229,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/basic/let_consistency_resolver.vpr,6,3,0,0,3,3,4,Vector(List(identifier y not defined. (let_consistency_resolver.vpr@7.10); identifier y not defined. (let_consistency_resolver.vpr@12.36); Duplicate identifier `test03' at let_consistency_resolver.vpr@16.8 and at let_consistency_resolver.vpr@20.8 (let_consistency_resolver.vpr@16.8); Duplicate identifier `y' at let_consistency_resolver.vpr@16.15 and at let_consistency_resolver.vpr@17.14 (let_consistency_resolver.vpr@16.15); Duplicate identifier `y' at let_consistency_resolver.vpr@22.14 and at let_consistency_resolver.vpr@22.30 (let_consistency_resolver.vpr@22.14); identifier y not defined. (let_consistency_resolver.vpr@27.20)); List(identifier y not defined. (let_consistency_resolver.vpr@7.10); identifier y not defined. (let_consistency_resolver.vpr@12.36); Duplicate identifier `test03' at let_consistency_resolver.vpr@16.8 and at let_consistency_resolver.vpr@20.8 (let_consistency_resolver.vpr@16.8); Duplicate identifier `y' at let_consistency_resolver.vpr@16.15 and at let_consistency_resolver.vpr@17.14 (let_consistency_resolver.vpr@16.15); Duplicate identifier `y' at let_consistency_resolver.vpr@22.14 and at let_consistency_resolver.vpr@22.30 (let_consistency_resolver.vpr@22.14); identifier y not defined. (let_consistency_resolver.vpr@27.20)); List(identifier y not defined. (let_consistency_resolver.vpr@7.10); identifier y not defined. (let_consistency_resolver.vpr@12.36); Duplicate identifier `test03' at let_consistency_resolver.vpr@16.8 and at let_consistency_resolver.vpr@20.8 (let_consistency_resolver.vpr@16.8); Duplicate identifier `y' at let_consistency_resolver.vpr@16.15 and at let_consistency_resolver.vpr@17.14 (let_consistency_resolver.vpr@16.15); Duplicate identifier `y' at let_consistency_resolver.vpr@22.14 and at let_consistency_resolver.vpr@22.30 (let_consistency_resolver.vpr@22.14); identifier y not defined. (let_consistency_resolver.vpr@27.20)); List(identifier y not defined. (let_consistency_resolver.vpr@7.10); identifier y not defined. (let_consistency_resolver.vpr@12.36); Duplicate identifier `test03' at let_consistency_resolver.vpr@16.8 and at let_consistency_resolver.vpr@20.8 (let_consistency_resolver.vpr@16.8); Duplicate identifier `y' at let_consistency_resolver.vpr@16.15 and at let_consistency_resolver.vpr@17.14 (let_consistency_resolver.vpr@16.15); Duplicate identifier `y' at let_consistency_resolver.vpr@22.14 and at let_consistency_resolver.vpr@22.30 (let_consistency_resolver.vpr@22.14); identifier y not defined. (let_consistency_resolver.vpr@27.20)); List(identifier y not defined. (let_consistency_resolver.vpr@7.10); identifier y not defined. (let_consistency_resolver.vpr@12.36); Duplicate identifier `test03' at let_consistency_resolver.vpr@16.8 and at let_consistency_resolver.vpr@20.8 (let_consistency_resolver.vpr@16.8); Duplicate identifier `y' at let_consistency_resolver.vpr@16.15 and at let_consistency_resolver.vpr@17.14 (let_consistency_resolver.vpr@16.15); Duplicate identifier `y' at let_consistency_resolver.vpr@22.14 and at let_consistency_resolver.vpr@22.30 (let_consistency_resolver.vpr@22.14); identifier y not defined. (let_consistency_resolver.vpr@27.20)))
../../src/test/resources/frontend-generated/all/basic/let_consistency_typechecker.vpr,1,1,0,0,1,2,2,Vector(List(Type error in the expression at let_consistency_typechecker.vpr@[6.26-6.28] (let_consistency_typechecker.vpr@6.26)); List(Type error in the expression at let_consistency_typechecker.vpr@[6.26-6.28] (let_consistency_typechecker.vpr@6.26)); List(Type error in the expression at let_consistency_typechecker.vpr@[6.26-6.28] (let_consistency_typechecker.vpr@6.26)); List(Type error in the expression at let_consistency_typechecker.vpr@[6.26-6.28] (let_consistency_typechecker.vpr@6.26)); List(Type error in the expression at let_consistency_typechecker.vpr@[6.26-6.28] (let_consistency_typechecker.vpr@6.26)))
../../src/test/resources/frontend-generated/all/basic/many_conjuncts.vpr,2,1329,15,1,1313,1324,1351,Vector(List([postcondition.violated:assertion.false] Postcondition of read_erroneous might not hold. Assertion false might not hold. (many_conjuncts.vpr@40.11); [postcondition.violated:assertion.false] Postcondition of read2_erroneous might not hold. Assertion false might not hold. (many_conjuncts.vpr@96.5)); List([postcondition.violated:assertion.false] Postcondition of read_erroneous might not hold. Assertion false might not hold. (many_conjuncts.vpr@40.11); [postcondition.violated:assertion.false] Postcondition of read2_erroneous might not hold. Assertion false might not hold. (many_conjuncts.vpr@96.5)); List([postcondition.violated:assertion.false] Postcondition of read_erroneous might not hold. Assertion false might not hold. (many_conjuncts.vpr@40.11); [postcondition.violated:assertion.false] Postcondition of read2_erroneous might not hold. Assertion false might not hold. (many_conjuncts.vpr@96.5)); List([postcondition.violated:assertion.false] Postcondition of read_erroneous might not hold. Assertion false might not hold. (many_conjuncts.vpr@40.11); [postcondition.violated:assertion.false] Postcondition of read2_erroneous might not hold. Assertion false might not hold. (many_conjuncts.vpr@96.5)); List([postcondition.violated:assertion.false] Postcondition of read_erroneous might not hold. Assertion false might not hold. (many_conjuncts.vpr@40.11); [postcondition.violated:assertion.false] Postcondition of read2_erroneous might not hold. Assertion false might not hold. (many_conjuncts.vpr@96.5)))
../../src/test/resources/frontend-generated/all/basic/methods.vpr,11,1157,23,1,1138,1143,1190,Vector(List([call.precondition:assertion.false] The precondition of method t3 might not hold. Assertion -1 > 0 might not hold. (methods.vpr@10.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (methods.vpr@18.5); [assert.failed:assertion.false] Assert might fail. Assertion a != b might not hold. (methods.vpr@38.5); [assert.failed:assertion.false] Assert might fail. Assertion a != c might not hold. (methods.vpr@49.5); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@58.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@65.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@71.13); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@79.13); [assert.failed:assertion.false] Assert might fail. Assertion r.f == 2 might not hold. (methods.vpr@100.5); [assert.failed:assertion.false] Assert might fail. Assertion r.f == 2 might not hold. (methods.vpr@110.5); [assert.failed:assertion.false] Assert might fail. Assertion o.f == 2 might not hold. (methods.vpr@123.5)); List([call.precondition:assertion.false] The precondition of method t3 might not hold. Assertion -1 > 0 might not hold. (methods.vpr@10.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (methods.vpr@18.5); [assert.failed:assertion.false] Assert might fail. Assertion a != b might not hold. (methods.vpr@38.5); [assert.failed:assertion.false] Assert might fail. Assertion a != c might not hold. (methods.vpr@49.5); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@58.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@65.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@71.13); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@79.13); [assert.failed:assertion.false] Assert might fail. Assertion r.f == 2 might not hold. (methods.vpr@100.5); [assert.failed:assertion.false] Assert might fail. Assertion r.f == 2 might not hold. (methods.vpr@110.5); [assert.failed:assertion.false] Assert might fail. Assertion o.f == 2 might not hold. (methods.vpr@123.5)); List([call.precondition:assertion.false] The precondition of method t3 might not hold. Assertion -1 > 0 might not hold. (methods.vpr@10.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (methods.vpr@18.5); [assert.failed:assertion.false] Assert might fail. Assertion a != b might not hold. (methods.vpr@38.5); [assert.failed:assertion.false] Assert might fail. Assertion a != c might not hold. (methods.vpr@49.5); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@58.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@65.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@71.13); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@79.13); [assert.failed:assertion.false] Assert might fail. Assertion r.f == 2 might not hold. (methods.vpr@100.5); [assert.failed:assertion.false] Assert might fail. Assertion r.f == 2 might not hold. (methods.vpr@110.5); [assert.failed:assertion.false] Assert might fail. Assertion o.f == 2 might not hold. (methods.vpr@123.5)); List([call.precondition:assertion.false] The precondition of method t3 might not hold. Assertion -1 > 0 might not hold. (methods.vpr@10.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (methods.vpr@18.5); [assert.failed:assertion.false] Assert might fail. Assertion a != b might not hold. (methods.vpr@38.5); [assert.failed:assertion.false] Assert might fail. Assertion a != c might not hold. (methods.vpr@49.5); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@58.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@65.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@71.13); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@79.13); [assert.failed:assertion.false] Assert might fail. Assertion r.f == 2 might not hold. (methods.vpr@100.5); [assert.failed:assertion.false] Assert might fail. Assertion r.f == 2 might not hold. (methods.vpr@110.5); [assert.failed:assertion.false] Assert might fail. Assertion o.f == 2 might not hold. (methods.vpr@123.5)); List([call.precondition:assertion.false] The precondition of method t3 might not hold. Assertion -1 > 0 might not hold. (methods.vpr@10.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (methods.vpr@18.5); [assert.failed:assertion.false] Assert might fail. Assertion a != b might not hold. (methods.vpr@38.5); [assert.failed:assertion.false] Assert might fail. Assertion a != c might not hold. (methods.vpr@49.5); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@58.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@65.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@71.13); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (methods.vpr@79.13); [assert.failed:assertion.false] Assert might fail. Assertion r.f == 2 might not hold. (methods.vpr@100.5); [assert.failed:assertion.false] Assert might fail. Assertion r.f == 2 might not hold. (methods.vpr@110.5); [assert.failed:assertion.false] Assert might fail. Assertion o.f == 2 might not hold. (methods.vpr@123.5)))
../../src/test/resources/frontend-generated/all/basic/names.vpr,0,979,27,2,959,961,1018,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/basic/new.vpr,3,1193,39,3,1141,1202,1237,Vector(List([exhale.failed:assertion.false] Exhale might fail. Assertion a != b might not hold. (new.vpr@42.5); [exhale.failed:assertion.false] Exhale might fail. Assertion a != b might not hold. (new.vpr@53.9); [assert.failed:assertion.false] Assert might fail. Assertion m != n.Node_n might not hold. (new.vpr@90.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion a != b might not hold. (new.vpr@42.5); [exhale.failed:assertion.false] Exhale might fail. Assertion a != b might not hold. (new.vpr@53.9); [assert.failed:assertion.false] Assert might fail. Assertion m != n.Node_n might not hold. (new.vpr@90.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion a != b might not hold. (new.vpr@42.5); [exhale.failed:assertion.false] Exhale might fail. Assertion a != b might not hold. (new.vpr@53.9); [assert.failed:assertion.false] Assert might fail. Assertion m != n.Node_n might not hold. (new.vpr@90.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion a != b might not hold. (new.vpr@42.5); [exhale.failed:assertion.false] Exhale might fail. Assertion a != b might not hold. (new.vpr@53.9); [assert.failed:assertion.false] Assert might fail. Assertion m != n.Node_n might not hold. (new.vpr@90.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion a != b might not hold. (new.vpr@42.5); [exhale.failed:assertion.false] Exhale might fail. Assertion a != b might not hold. (new.vpr@53.9); [assert.failed:assertion.false] Assert might fail. Assertion m != n.Node_n might not hold. (new.vpr@90.3)))
../../src/test/resources/frontend-generated/all/basic/quantifiers.vpr,8,1946,82,4,1842,1953,2043,Vector(List([application.precondition:insufficient.permission] Precondition of function Cell_get might not hold. There might be insufficient permission to access c.Cell_x. (quantifiers.vpr@30.43); [postcondition.violated:assertion.false] Postcondition of fail20ForallCellGet10 might not hold. Assertion (forall i2: Int :: 0 <= i2 && i2 < Cell_get(c) ==> Cell_get(c) <= i2) might not hold. (quantifiers.vpr@41.10); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.Cell_x. (quantifiers.vpr@46.12); [application.precondition:insufficient.permission] Precondition of function Cell_get might not hold. There might be insufficient permission to access r.Cell_x. (quantifiers.vpr@51.52); [application.precondition:assertion.false] Precondition of function reqIGt0 might not hold. Assertion i >= 0 might not hold. (quantifiers.vpr@64.51); [application.precondition:assertion.false] Precondition of function reqIGt0 might not hold. Assertion i >= 0 might not hold. (quantifiers.vpr@74.56); [assert.failed:assertion.false] Assert might fail. Assertion (forall v2: Int :: { f2(v2) } 0 <= v2 && (v2 < 3 && f2(v2)) ==> (exists j2: Int :: 0 <= j2 && (j2 < 3 && j2 == v2))) might not hold. (quantifiers.vpr@121.2); [assert.failed:assertion.false] Assert might fail. Assertion f2(0) ==> (exists j2: Int :: 0 <= j2 && (j2 < 3 && j2 > 0)) might not hold. (quantifiers.vpr@155.2)); List([application.precondition:insufficient.permission] Precondition of function Cell_get might not hold. There might be insufficient permission to access c.Cell_x. (quantifiers.vpr@30.43); [postcondition.violated:assertion.false] Postcondition of fail20ForallCellGet10 might not hold. Assertion (forall i2: Int :: 0 <= i2 && i2 < Cell_get(c) ==> Cell_get(c) <= i2) might not hold. (quantifiers.vpr@41.10); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.Cell_x. (quantifiers.vpr@46.12); [application.precondition:insufficient.permission] Precondition of function Cell_get might not hold. There might be insufficient permission to access r.Cell_x. (quantifiers.vpr@51.52); [application.precondition:assertion.false] Precondition of function reqIGt0 might not hold. Assertion i >= 0 might not hold. (quantifiers.vpr@64.51); [application.precondition:assertion.false] Precondition of function reqIGt0 might not hold. Assertion i >= 0 might not hold. (quantifiers.vpr@74.56); [assert.failed:assertion.false] Assert might fail. Assertion (forall v2: Int :: { f2(v2) } 0 <= v2 && (v2 < 3 && f2(v2)) ==> (exists j2: Int :: 0 <= j2 && (j2 < 3 && j2 == v2))) might not hold. (quantifiers.vpr@121.2); [assert.failed:assertion.false] Assert might fail. Assertion f2(0) ==> (exists j2: Int :: 0 <= j2 && (j2 < 3 && j2 > 0)) might not hold. (quantifiers.vpr@155.2)); List([application.precondition:insufficient.permission] Precondition of function Cell_get might not hold. There might be insufficient permission to access c.Cell_x. (quantifiers.vpr@30.43); [postcondition.violated:assertion.false] Postcondition of fail20ForallCellGet10 might not hold. Assertion (forall i2: Int :: 0 <= i2 && i2 < Cell_get(c) ==> Cell_get(c) <= i2) might not hold. (quantifiers.vpr@41.10); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.Cell_x. (quantifiers.vpr@46.12); [application.precondition:insufficient.permission] Precondition of function Cell_get might not hold. There might be insufficient permission to access r.Cell_x. (quantifiers.vpr@51.52); [application.precondition:assertion.false] Precondition of function reqIGt0 might not hold. Assertion i >= 0 might not hold. (quantifiers.vpr@64.51); [application.precondition:assertion.false] Precondition of function reqIGt0 might not hold. Assertion i >= 0 might not hold. (quantifiers.vpr@74.56); [assert.failed:assertion.false] Assert might fail. Assertion (forall v2: Int :: { f2(v2) } 0 <= v2 && (v2 < 3 && f2(v2)) ==> (exists j2: Int :: 0 <= j2 && (j2 < 3 && j2 == v2))) might not hold. (quantifiers.vpr@121.2); [assert.failed:assertion.false] Assert might fail. Assertion f2(0) ==> (exists j2: Int :: 0 <= j2 && (j2 < 3 && j2 > 0)) might not hold. (quantifiers.vpr@155.2)); List([application.precondition:insufficient.permission] Precondition of function Cell_get might not hold. There might be insufficient permission to access c.Cell_x. (quantifiers.vpr@30.43); [postcondition.violated:assertion.false] Postcondition of fail20ForallCellGet10 might not hold. Assertion (forall i2: Int :: 0 <= i2 && i2 < Cell_get(c) ==> Cell_get(c) <= i2) might not hold. (quantifiers.vpr@41.10); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.Cell_x. (quantifiers.vpr@46.12); [application.precondition:insufficient.permission] Precondition of function Cell_get might not hold. There might be insufficient permission to access r.Cell_x. (quantifiers.vpr@51.52); [application.precondition:assertion.false] Precondition of function reqIGt0 might not hold. Assertion i >= 0 might not hold. (quantifiers.vpr@64.51); [application.precondition:assertion.false] Precondition of function reqIGt0 might not hold. Assertion i >= 0 might not hold. (quantifiers.vpr@74.56); [assert.failed:assertion.false] Assert might fail. Assertion (forall v2: Int :: { f2(v2) } 0 <= v2 && (v2 < 3 && f2(v2)) ==> (exists j2: Int :: 0 <= j2 && (j2 < 3 && j2 == v2))) might not hold. (quantifiers.vpr@121.2); [assert.failed:assertion.false] Assert might fail. Assertion f2(0) ==> (exists j2: Int :: 0 <= j2 && (j2 < 3 && j2 > 0)) might not hold. (quantifiers.vpr@155.2)); List([application.precondition:insufficient.permission] Precondition of function Cell_get might not hold. There might be insufficient permission to access c.Cell_x. (quantifiers.vpr@30.43); [postcondition.violated:assertion.false] Postcondition of fail20ForallCellGet10 might not hold. Assertion (forall i2: Int :: 0 <= i2 && i2 < Cell_get(c) ==> Cell_get(c) <= i2) might not hold. (quantifiers.vpr@41.10); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.Cell_x. (quantifiers.vpr@46.12); [application.precondition:insufficient.permission] Precondition of function Cell_get might not hold. There might be insufficient permission to access r.Cell_x. (quantifiers.vpr@51.52); [application.precondition:assertion.false] Precondition of function reqIGt0 might not hold. Assertion i >= 0 might not hold. (quantifiers.vpr@64.51); [application.precondition:assertion.false] Precondition of function reqIGt0 might not hold. Assertion i >= 0 might not hold. (quantifiers.vpr@74.56); [assert.failed:assertion.false] Assert might fail. Assertion (forall v2: Int :: { f2(v2) } 0 <= v2 && (v2 < 3 && f2(v2)) ==> (exists j2: Int :: 0 <= j2 && (j2 < 3 && j2 == v2))) might not hold. (quantifiers.vpr@121.2); [assert.failed:assertion.false] Assert might fail. Assertion f2(0) ==> (exists j2: Int :: 0 <= j2 && (j2 < 3 && j2 > 0)) might not hold. (quantifiers.vpr@155.2)))
../../src/test/resources/frontend-generated/all/basic/regression1.vpr,1,1153,27,2,1126,1144,1191,Vector(List([postcondition.violated:assertion.false] Postcondition of Simple_test2 might not hold. Assertion vresult == x * x might not hold. (regression1.vpr@53.11)); List([postcondition.violated:assertion.false] Postcondition of Simple_test2 might not hold. Assertion vresult == x * x might not hold. (regression1.vpr@53.11)); List([postcondition.violated:assertion.false] Postcondition of Simple_test2 might not hold. Assertion vresult == x * x might not hold. (regression1.vpr@53.11)); List([postcondition.violated:assertion.false] Postcondition of Simple_test2 might not hold. Assertion vresult == x * x might not hold. (regression1.vpr@53.11)); List([postcondition.violated:assertion.false] Postcondition of Simple_test2 might not hold. Assertion vresult == x * x might not hold. (regression1.vpr@53.11)))
../../src/test/resources/frontend-generated/all/basic/syntax.vpr,1,5,1,20,4,4,7,Vector(List(Duplicate identifier `this' at syntax.vpr@40.12 and at syntax.vpr@40.32 (syntax.vpr@40.12)); List(Duplicate identifier `this' at syntax.vpr@40.12 and at syntax.vpr@40.32 (syntax.vpr@40.12)); List(Duplicate identifier `this' at syntax.vpr@40.12 and at syntax.vpr@40.32 (syntax.vpr@40.12)); List(Duplicate identifier `this' at syntax.vpr@40.12 and at syntax.vpr@40.32 (syntax.vpr@40.12)); List(Duplicate identifier `this' at syntax.vpr@40.12 and at syntax.vpr@40.32 (syntax.vpr@40.12)))
../../src/test/resources/frontend-generated/all/basic/syntax2.vpr,0,1248,14,1,1237,1239,1268,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/basic/trigger-projection.vpr,1,1594,62,3,1521,1589,1674,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion f4(5) might not hold. (trigger-projection.vpr@54.3)); List([assert.failed:assertion.false] Assert might fail. Assertion f4(5) might not hold. (trigger-projection.vpr@54.3)); List([assert.failed:assertion.false] Assert might fail. Assertion f4(5) might not hold. (trigger-projection.vpr@54.3)); List([assert.failed:assertion.false] Assert might fail. Assertion f4(5) might not hold. (trigger-projection.vpr@54.3)); List([assert.failed:assertion.false] Assert might fail. Assertion f4(5) might not hold. (trigger-projection.vpr@54.3)))
../../src/test/resources/frontend-generated/all/basic/unfolding.vpr,6,1426,7,0,1415,1430,1433,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access valid(r). (unfolding.vpr@21.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access valid(r). (unfolding.vpr@28.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.next.f. (unfolding.vpr@44.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.next.next. (unfolding.vpr@57.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@76.4); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(strange(r); write) in false) might not hold. (unfolding.vpr@83.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access valid(r). (unfolding.vpr@21.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access valid(r). (unfolding.vpr@28.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.next.f. (unfolding.vpr@44.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.next.next. (unfolding.vpr@57.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@76.4); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(strange(r); write) in false) might not hold. (unfolding.vpr@83.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access valid(r). (unfolding.vpr@21.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access valid(r). (unfolding.vpr@28.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.next.f. (unfolding.vpr@44.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.next.next. (unfolding.vpr@57.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@76.4); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(strange(r); write) in false) might not hold. (unfolding.vpr@83.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access valid(r). (unfolding.vpr@21.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access valid(r). (unfolding.vpr@28.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.next.f. (unfolding.vpr@44.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.next.next. (unfolding.vpr@57.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@76.4); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(strange(r); write) in false) might not hold. (unfolding.vpr@83.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access valid(r). (unfolding.vpr@21.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access valid(r). (unfolding.vpr@28.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.next.f. (unfolding.vpr@44.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.next.next. (unfolding.vpr@57.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@76.4); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(strange(r); write) in false) might not hold. (unfolding.vpr@83.3)))
../../src/test/resources/frontend-generated/all/basic/unique.vpr,1,1072,12,1,1059,1069,1089,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion c() != u1() might not hold. (unique.vpr@15.5)); List([assert.failed:assertion.false] Assert might fail. Assertion c() != u1() might not hold. (unique.vpr@15.5)); List([assert.failed:assertion.false] Assert might fail. Assertion c() != u1() might not hold. (unique.vpr@15.5)); List([assert.failed:assertion.false] Assert might fail. Assertion c() != u1() might not hold. (unique.vpr@15.5)); List([assert.failed:assertion.false] Assert might fail. Assertion c() != u1() might not hold. (unique.vpr@15.5)))
../../src/test/resources/frontend-generated/all/basic/welldef.vpr,6,1139,18,1,1113,1151,1154,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@14.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@21.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@27.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@34.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@40.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@47.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@14.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@21.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@27.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@34.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@40.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@47.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@14.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@21.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@27.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@34.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@40.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@47.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@14.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@21.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@27.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@34.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@40.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@47.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@14.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@21.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@27.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@34.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@40.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.f. (welldef.vpr@47.5)))
../../src/test/resources/frontend-generated/all/basic/while.vpr,7,1147,32,2,1117,1133,1193,Vector(List([invariant.not.preserved:assertion.false] Loop invariant i < n might not be preserved. Assertion i < n might not hold. (while.vpr@26.19); [invariant.not.established:assertion.false] Loop invariant i <= n might not hold on entry. Assertion i <= n might not hold. (while.vpr@39.19); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access r.f. (while.vpr@52.12); [assert.failed:assertion.false] Assert might fail. Assertion j == 2 might not hold. (while.vpr@87.9); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while.vpr@103.5); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access r.f. (while.vpr@124.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (while.vpr@140.19)); List([invariant.not.preserved:assertion.false] Loop invariant i < n might not be preserved. Assertion i < n might not hold. (while.vpr@26.19); [invariant.not.established:assertion.false] Loop invariant i <= n might not hold on entry. Assertion i <= n might not hold. (while.vpr@39.19); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access r.f. (while.vpr@52.12); [assert.failed:assertion.false] Assert might fail. Assertion j == 2 might not hold. (while.vpr@87.9); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while.vpr@103.5); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access r.f. (while.vpr@124.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (while.vpr@140.19)); List([invariant.not.preserved:assertion.false] Loop invariant i < n might not be preserved. Assertion i < n might not hold. (while.vpr@26.19); [invariant.not.established:assertion.false] Loop invariant i <= n might not hold on entry. Assertion i <= n might not hold. (while.vpr@39.19); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access r.f. (while.vpr@52.12); [assert.failed:assertion.false] Assert might fail. Assertion j == 2 might not hold. (while.vpr@87.9); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while.vpr@103.5); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access r.f. (while.vpr@124.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (while.vpr@140.19)); List([invariant.not.preserved:assertion.false] Loop invariant i < n might not be preserved. Assertion i < n might not hold. (while.vpr@26.19); [invariant.not.established:assertion.false] Loop invariant i <= n might not hold on entry. Assertion i <= n might not hold. (while.vpr@39.19); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access r.f. (while.vpr@52.12); [assert.failed:assertion.false] Assert might fail. Assertion j == 2 might not hold. (while.vpr@87.9); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while.vpr@103.5); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access r.f. (while.vpr@124.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (while.vpr@140.19)); List([invariant.not.preserved:assertion.false] Loop invariant i < n might not be preserved. Assertion i < n might not hold. (while.vpr@26.19); [invariant.not.established:assertion.false] Loop invariant i <= n might not hold on entry. Assertion i <= n might not hold. (while.vpr@39.19); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access r.f. (while.vpr@52.12); [assert.failed:assertion.false] Assert might fail. Assertion j == 2 might not hold. (while.vpr@87.9); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while.vpr@103.5); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access r.f. (while.vpr@124.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (while.vpr@140.19)))
../../src/test/resources/frontend-generated/all/chalice/AVLTree.iterative.vpr,0,2082,17,0,2061,2082,2103,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/chalice/FoldUnfoldExperiments.vpr,0,1109,31,2,1065,1126,1137,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/chalice/RingBufferRd.vpr,0,1945,53,2,1875,1958,2003,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/chalice/cyclic-list.vpr,2,1190,38,3,1138,1204,1229,Vector(List([fold.failed:insufficient.permission] Folding valid(x) might fail. There might be insufficient permission to access valid(this.next). (cyclic-list.vpr@32.3); [application.precondition:insufficient.permission] Precondition of function length might not hold. There might be insufficient permission to access valid(x). (cyclic-list.vpr@44.12)); List([fold.failed:insufficient.permission] Folding valid(x) might fail. There might be insufficient permission to access valid(this.next). (cyclic-list.vpr@32.3); [application.precondition:insufficient.permission] Precondition of function length might not hold. There might be insufficient permission to access valid(x). (cyclic-list.vpr@44.12)); List([fold.failed:insufficient.permission] Folding valid(x) might fail. There might be insufficient permission to access valid(this.next). (cyclic-list.vpr@32.3); [application.precondition:insufficient.permission] Precondition of function length might not hold. There might be insufficient permission to access valid(x). (cyclic-list.vpr@44.12)); List([fold.failed:insufficient.permission] Folding valid(x) might fail. There might be insufficient permission to access valid(this.next). (cyclic-list.vpr@32.3); [application.precondition:insufficient.permission] Precondition of function length might not hold. There might be insufficient permission to access valid(x). (cyclic-list.vpr@44.12)); List([fold.failed:insufficient.permission] Folding valid(x) might fail. There might be insufficient permission to access valid(this.next). (cyclic-list.vpr@32.3); [application.precondition:insufficient.permission] Precondition of function length might not hold. There might be insufficient permission to access valid(x). (cyclic-list.vpr@44.12)))
../../src/test/resources/frontend-generated/all/chalice/framing-fields.vpr,1,1195,19,1,1169,1203,1214,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(valid(y); write) in j == y.value) might not hold. (framing-fields.vpr@20.5)); List([assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(valid(y); write) in j == y.value) might not hold. (framing-fields.vpr@20.5)); List([assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(valid(y); write) in j == y.value) might not hold. (framing-fields.vpr@20.5)); List([assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(valid(y); write) in j == y.value) might not hold. (framing-fields.vpr@20.5)); List([assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(valid(y); write) in j == y.value) might not hold. (framing-fields.vpr@20.5)))
../../src/test/resources/frontend-generated/all/chalice/framing-functions.vpr,1,1153,16,1,1136,1149,1175,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion j == itemAt(y; 0) might not hold. (framing-functions.vpr@23.5)); List([assert.failed:assertion.false] Assert might fail. Assertion j == itemAt(y; 0) might not hold. (framing-functions.vpr@23.5)); List([assert.failed:assertion.false] Assert might fail. Assertion j == itemAt(y; 0) might not hold. (framing-functions.vpr@23.5)); List([assert.failed:assertion.false] Assert might fail. Assertion j == itemAt(y; 0) might not hold. (framing-functions.vpr@23.5)); List([assert.failed:assertion.false] Assert might fail. Assertion j == itemAt(y; 0) might not hold. (framing-functions.vpr@23.5)))
../../src/test/resources/frontend-generated/all/chalice/internal-bug-1.vpr,0,1115,14,1,1098,1115,1134,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/chalice/internal-bug-2.vpr,1,1018,12,1,1000,1026,1028,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.x. (internal-bug-2.vpr@12.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.x. (internal-bug-2.vpr@12.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.x. (internal-bug-2.vpr@12.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.x. (internal-bug-2.vpr@12.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.x. (internal-bug-2.vpr@12.3)))
../../src/test/resources/frontend-generated/all/chalice/internal-bug-6.vpr,0,1043,5,0,1037,1041,1051,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/chalice/internal-bug-7.vpr,0,1163,35,3,1115,1178,1198,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/chalice/setset.vpr,1,1181,12,1,1166,1181,1196,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion get(x) == 3 might not hold. (setset.vpr@52.5)); List([assert.failed:assertion.false] Assert might fail. Assertion get(x) == 3 might not hold. (setset.vpr@52.5)); List([assert.failed:assertion.false] Assert might fail. Assertion get(x) == 3 might not hold. (setset.vpr@52.5)); List([assert.failed:assertion.false] Assert might fail. Assertion get(x) == 3 might not hold. (setset.vpr@52.5)); List([assert.failed:assertion.false] Assert might fail. Assertion get(x) == 3 might not hold. (setset.vpr@52.5)))
../../src/test/resources/frontend-generated/all/chalice/swap.vpr,0,1081,23,2,1062,1068,1115,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/chalice/test1.vpr,0,1255,3,0,1252,1254,1260,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/chalice/test10.vpr,0,1093,20,1,1065,1102,1113,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/chalice/test2.vpr,0,1167,16,1,1148,1166,1188,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/chalice/test3.vpr,0,1117,22,1,1086,1133,1134,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/chalice/test7.vpr,7,1184,28,2,1164,1165,1224,Vector(List([call.precondition:insufficient.permission] The precondition of method set might not hold. There might be insufficient permission to access inv(this). (test7.vpr@27.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.value. (test7.vpr@67.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access inv(this). (test7.vpr@89.5); [application.precondition:insufficient.permission] Precondition of function get might not hold. There might be insufficient permission to access inv(this). (test7.vpr@94.16); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.value. (test7.vpr@100.15); [application.precondition:insufficient.permission] Precondition of function get might not hold. There might be insufficient permission to access inv(this). (test7.vpr@106.42); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.value. (test7.vpr@112.14)); List([call.precondition:insufficient.permission] The precondition of method set might not hold. There might be insufficient permission to access inv(this). (test7.vpr@27.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.value. (test7.vpr@67.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access inv(this). (test7.vpr@89.5); [application.precondition:insufficient.permission] Precondition of function get might not hold. There might be insufficient permission to access inv(this). (test7.vpr@94.16); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.value. (test7.vpr@100.15); [application.precondition:insufficient.permission] Precondition of function get might not hold. There might be insufficient permission to access inv(this). (test7.vpr@106.42); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.value. (test7.vpr@112.14)); List([call.precondition:insufficient.permission] The precondition of method set might not hold. There might be insufficient permission to access inv(this). (test7.vpr@27.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.value. (test7.vpr@67.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access inv(this). (test7.vpr@89.5); [application.precondition:insufficient.permission] Precondition of function get might not hold. There might be insufficient permission to access inv(this). (test7.vpr@94.16); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.value. (test7.vpr@100.15); [application.precondition:insufficient.permission] Precondition of function get might not hold. There might be insufficient permission to access inv(this). (test7.vpr@106.42); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.value. (test7.vpr@112.14)); List([call.precondition:insufficient.permission] The precondition of method set might not hold. There might be insufficient permission to access inv(this). (test7.vpr@27.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.value. (test7.vpr@67.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access inv(this). (test7.vpr@89.5); [application.precondition:insufficient.permission] Precondition of function get might not hold. There might be insufficient permission to access inv(this). (test7.vpr@94.16); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.value. (test7.vpr@100.15); [application.precondition:insufficient.permission] Precondition of function get might not hold. There might be insufficient permission to access inv(this). (test7.vpr@106.42); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.value. (test7.vpr@112.14)); List([call.precondition:insufficient.permission] The precondition of method set might not hold. There might be insufficient permission to access inv(this). (test7.vpr@27.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.value. (test7.vpr@67.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access inv(this). (test7.vpr@89.5); [application.precondition:insufficient.permission] Precondition of function get might not hold. There might be insufficient permission to access inv(this). (test7.vpr@94.16); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.value. (test7.vpr@100.15); [application.precondition:insufficient.permission] Precondition of function get might not hold. There might be insufficient permission to access inv(this). (test7.vpr@106.42); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.value. (test7.vpr@112.14)))
../../src/test/resources/frontend-generated/all/chalice/test8.vpr,0,1166,27,2,1132,1166,1200,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/domains/domains.vpr,3,1873,23,1,1851,1864,1905,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (Pair_second((Pair_pair(a; b): Pair[Int; Bool])): Bool) == b2 might not hold. (domains.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion (Triple_second((Triple_triple(a; b; c): Triple[Int; Bool; Ref])): Bool) == b2 might not hold. (domains.vpr@83.3); [assert.failed:assertion.false] Assert might fail. Assertion (Triple_isPrefix(p; t2): Bool) might not hold. (domains.vpr@93.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (Pair_second((Pair_pair(a; b): Pair[Int; Bool])): Bool) == b2 might not hold. (domains.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion (Triple_second((Triple_triple(a; b; c): Triple[Int; Bool; Ref])): Bool) == b2 might not hold. (domains.vpr@83.3); [assert.failed:assertion.false] Assert might fail. Assertion (Triple_isPrefix(p; t2): Bool) might not hold. (domains.vpr@93.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (Pair_second((Pair_pair(a; b): Pair[Int; Bool])): Bool) == b2 might not hold. (domains.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion (Triple_second((Triple_triple(a; b; c): Triple[Int; Bool; Ref])): Bool) == b2 might not hold. (domains.vpr@83.3); [assert.failed:assertion.false] Assert might fail. Assertion (Triple_isPrefix(p; t2): Bool) might not hold. (domains.vpr@93.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (Pair_second((Pair_pair(a; b): Pair[Int; Bool])): Bool) == b2 might not hold. (domains.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion (Triple_second((Triple_triple(a; b; c): Triple[Int; Bool; Ref])): Bool) == b2 might not hold. (domains.vpr@83.3); [assert.failed:assertion.false] Assert might fail. Assertion (Triple_isPrefix(p; t2): Bool) might not hold. (domains.vpr@93.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (Pair_second((Pair_pair(a; b): Pair[Int; Bool])): Bool) == b2 might not hold. (domains.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion (Triple_second((Triple_triple(a; b; c): Triple[Int; Bool; Ref])): Bool) == b2 might not hold. (domains.vpr@83.3); [assert.failed:assertion.false] Assert might fail. Assertion (Triple_isPrefix(p; t2): Bool) might not hold. (domains.vpr@93.3)))
../../src/test/resources/frontend-generated/all/domains/domains2.vpr,0,9017,53,0,8942,9050,9061,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/domains/domains_threshold.vpr,0,1312,24,1,1287,1305,1346,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/domains/domains_underspecified.vpr,0,1202,13,1,1184,1212,1212,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/functions/applying.vpr,1,1203,29,2,1175,1191,1245,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion v == g(x) might not hold. (applying.vpr@22.2)); List([assert.failed:assertion.false] Assert might fail. Assertion v == g(x) might not hold. (applying.vpr@22.2)); List([assert.failed:assertion.false] Assert might fail. Assertion v == g(x) might not hold. (applying.vpr@22.2)); List([assert.failed:assertion.false] Assert might fail. Assertion v == g(x) might not hold. (applying.vpr@22.2)); List([assert.failed:assertion.false] Assert might fail. Assertion v == g(x) might not hold. (applying.vpr@22.2)))
../../src/test/resources/frontend-generated/all/functions/basic.vpr,3,1232,22,1,1212,1222,1263,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion add(x) == add(y) might not hold. (basic.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion add3(x; 1) == add(x) might not hold. (basic.vpr@36.3); [assert.failed:assertion.false] Assert might fail. Assertion tern(x; !b2) > 1 might not hold. (basic.vpr@54.3)); List([assert.failed:assertion.false] Assert might fail. Assertion add(x) == add(y) might not hold. (basic.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion add3(x; 1) == add(x) might not hold. (basic.vpr@36.3); [assert.failed:assertion.false] Assert might fail. Assertion tern(x; !b2) > 1 might not hold. (basic.vpr@54.3)); List([assert.failed:assertion.false] Assert might fail. Assertion add(x) == add(y) might not hold. (basic.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion add3(x; 1) == add(x) might not hold. (basic.vpr@36.3); [assert.failed:assertion.false] Assert might fail. Assertion tern(x; !b2) > 1 might not hold. (basic.vpr@54.3)); List([assert.failed:assertion.false] Assert might fail. Assertion add(x) == add(y) might not hold. (basic.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion add3(x; 1) == add(x) might not hold. (basic.vpr@36.3); [assert.failed:assertion.false] Assert might fail. Assertion tern(x; !b2) > 1 might not hold. (basic.vpr@54.3)); List([assert.failed:assertion.false] Assert might fail. Assertion add(x) == add(y) might not hold. (basic.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion add3(x; 1) == add(x) might not hold. (basic.vpr@36.3); [assert.failed:assertion.false] Assert might fail. Assertion tern(x; !b2) > 1 might not hold. (basic.vpr@54.3)))
../../src/test/resources/frontend-generated/all/functions/basic2.vpr,1,1115,16,1,1093,1123,1130,Vector(List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (basic2.vpr@6.11)); List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (basic2.vpr@6.11)); List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (basic2.vpr@6.11)); List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (basic2.vpr@6.11)); List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (basic2.vpr@6.11)))
../../src/test/resources/frontend-generated/all/functions/conditional-permissions.vpr,1,1081,40,3,1052,1054,1138,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion fun01(y; false) == old(fun01(y; false)) might not hold. (conditional-permissions.vpr@16.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun01(y; false) == old(fun01(y; false)) might not hold. (conditional-permissions.vpr@16.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun01(y; false) == old(fun01(y; false)) might not hold. (conditional-permissions.vpr@16.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun01(y; false) == old(fun01(y; false)) might not hold. (conditional-permissions.vpr@16.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun01(y; false) == old(fun01(y; false)) might not hold. (conditional-permissions.vpr@16.3)))
../../src/test/resources/frontend-generated/all/functions/framing_abstract_functions.vpr,1,1112,26,2,1078,1114,1144,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion fun01(x; false) == -1 might not hold. (framing_abstract_functions.vpr@29.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun01(x; false) == -1 might not hold. (framing_abstract_functions.vpr@29.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun01(x; false) == -1 might not hold. (framing_abstract_functions.vpr@29.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun01(x; false) == -1 might not hold. (framing_abstract_functions.vpr@29.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun01(x; false) == -1 might not hold. (framing_abstract_functions.vpr@29.3)))
../../src/test/resources/frontend-generated/all/functions/functions.vpr,3,1202,32,2,1165,1197,1245,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.h. (functions.vpr@46.12); [application.precondition:insufficient.permission] Precondition of function err1 might not hold. There might be insufficient permission to access x.h. (functions.vpr@52.12); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access y.f. (functions.vpr@56.1)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.h. (functions.vpr@46.12); [application.precondition:insufficient.permission] Precondition of function err1 might not hold. There might be insufficient permission to access x.h. (functions.vpr@52.12); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access y.f. (functions.vpr@56.1)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.h. (functions.vpr@46.12); [application.precondition:insufficient.permission] Precondition of function err1 might not hold. There might be insufficient permission to access x.h. (functions.vpr@52.12); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access y.f. (functions.vpr@56.1)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.h. (functions.vpr@46.12); [application.precondition:insufficient.permission] Precondition of function err1 might not hold. There might be insufficient permission to access x.h. (functions.vpr@52.12); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access y.f. (functions.vpr@56.1)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.h. (functions.vpr@46.12); [application.precondition:insufficient.permission] Precondition of function err1 might not hold. There might be insufficient permission to access x.h. (functions.vpr@52.12); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access y.f. (functions.vpr@56.1)))
../../src/test/resources/frontend-generated/all/functions/heap_dependent_triggers.vpr,0,1171,41,3,1118,1178,1219,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/functions/linkedlists.vpr,0,2106,135,6,1998,2025,2297,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/functions/nested.vpr,2,1228,26,2,1205,1214,1266,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (nested.vpr@57.3); [application.precondition:insufficient.permission] Precondition of function fun3 might not hold. There might be insufficient permission to access x.g. (nested.vpr@63.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (nested.vpr@57.3); [application.precondition:insufficient.permission] Precondition of function fun3 might not hold. There might be insufficient permission to access x.g. (nested.vpr@63.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (nested.vpr@57.3); [application.precondition:insufficient.permission] Precondition of function fun3 might not hold. There might be insufficient permission to access x.g. (nested.vpr@63.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (nested.vpr@57.3); [application.precondition:insufficient.permission] Precondition of function fun3 might not hold. There might be insufficient permission to access x.g. (nested.vpr@63.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (nested.vpr@57.3); [application.precondition:insufficient.permission] Precondition of function fun3 might not hold. There might be insufficient permission to access x.g. (nested.vpr@63.3)))
../../src/test/resources/frontend-generated/all/functions/recursion.vpr,1,1146,29,2,1106,1160,1174,Vector(List([postcondition.violated:assertion.false] Postcondition of err1 might not hold. Assertion result >= 0 might not hold. (recursion.vpr@26.11)); List([postcondition.violated:assertion.false] Postcondition of err1 might not hold. Assertion result >= 0 might not hold. (recursion.vpr@26.11)); List([postcondition.violated:assertion.false] Postcondition of err1 might not hold. Assertion result >= 0 might not hold. (recursion.vpr@26.11)); List([postcondition.violated:assertion.false] Postcondition of err1 might not hold. Assertion result >= 0 might not hold. (recursion.vpr@26.11)); List([postcondition.violated:assertion.false] Postcondition of err1 might not hold. Assertion result >= 0 might not hold. (recursion.vpr@26.11)))
../../src/test/resources/frontend-generated/all/functions/recursive_unrolling.vpr,0,1177,33,2,1145,1163,1223,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/functions/unfolding.vpr,2,1281,10,0,1272,1276,1297,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion sum(x) == sum(y) might not hold. (unfolding.vpr@65.3); [assert.failed:assertion.false] Assert might fail. Assertion add(x; y) < 0 might not hold. (unfolding.vpr@101.3)); List([assert.failed:assertion.false] Assert might fail. Assertion sum(x) == sum(y) might not hold. (unfolding.vpr@65.3); [assert.failed:assertion.false] Assert might fail. Assertion add(x; y) < 0 might not hold. (unfolding.vpr@101.3)); List([assert.failed:assertion.false] Assert might fail. Assertion sum(x) == sum(y) might not hold. (unfolding.vpr@65.3); [assert.failed:assertion.false] Assert might fail. Assertion add(x; y) < 0 might not hold. (unfolding.vpr@101.3)); List([assert.failed:assertion.false] Assert might fail. Assertion sum(x) == sum(y) might not hold. (unfolding.vpr@65.3); [assert.failed:assertion.false] Assert might fail. Assertion add(x; y) < 0 might not hold. (unfolding.vpr@101.3)); List([assert.failed:assertion.false] Assert might fail. Assertion sum(x) == sum(y) might not hold. (unfolding.vpr@65.3); [assert.failed:assertion.false] Assert might fail. Assertion add(x; y) < 0 might not hold. (unfolding.vpr@101.3)))
../../src/test/resources/frontend-generated/all/functions/unfolding_nonnull.vpr,2,1117,24,2,1083,1133,1137,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (unfolding_nonnull.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (unfolding_nonnull.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (unfolding_nonnull.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (unfolding_nonnull.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (unfolding_nonnull.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (unfolding_nonnull.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (unfolding_nonnull.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (unfolding_nonnull.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (unfolding_nonnull.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (unfolding_nonnull.vpr@35.3)))
../../src/test/resources/frontend-generated/all/functions/wildcards.vpr,0,1125,44,3,1072,1125,1180,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/heap-dependent_triggers/HeapTriggersForperm.vpr,0,1578,62,3,1496,1592,1647,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/heap-dependent_triggers/heapTriggersInhaleExhale.vpr,0,1648,81,4,1552,1641,1752,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/heap-dependent_triggers/heapTriggersNested.vpr,0,1577,54,3,1501,1611,1621,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/heap-dependent_triggers/testNonQuant.vpr,0,1729,46,2,1676,1723,1789,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/heap-dependent_triggers/triggerFoldPackage.vpr,0,1866,65,3,1794,1854,1952,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/heap-dependent_triggers/triggerNotInBody.vpr,0,1628,49,3,1580,1610,1696,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/heap-dependent_triggers/triggerPred.vpr,0,1495,29,1,1463,1488,1535,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/heap-dependent_triggers/triggerWand.vpr,0,1561,75,4,1493,1524,1667,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/demo/account.vpr,0,1093,40,3,1057,1074,1150,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/demo/demo.vpr,0,1089,8,0,1082,1086,1101,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/demo/list.vpr,0,1030,5,0,1026,1027,1039,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/init_past/liba.vpr,0,1126,34,3,1080,1138,1161,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/init_past/libb.vpr,0,1161,16,1,1139,1169,1176,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/init_past/main.vpr,0,1126,27,2,1088,1141,1150,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/issue203/sub/libA.vpr,0,1103,21,1,1084,1094,1133,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/issue203/sub/libB.vpr,0,1093,22,2,1062,1105,1112,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/issue203/main.vpr,0,1132,20,1,1112,1123,1161,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/loop/main.vpr,1,1115,32,2,1070,1136,1141,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion main() might not hold. (main.vpr@12.2)); List([assert.failed:assertion.false] Assert might fail. Assertion main() might not hold. (main.vpr@12.2)); List([assert.failed:assertion.false] Assert might fail. Assertion main() might not hold. (main.vpr@12.2)); List([assert.failed:assertion.false] Assert might fail. Assertion main() might not hold. (main.vpr@12.2)); List([assert.failed:assertion.false] Assert might fail. Assertion main() might not hold. (main.vpr@12.2)))
../../src/test/resources/frontend-generated/all/import/standard_import/basic.vpr,0,1137,21,1,1107,1149,1157,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/standard_import/failing.vpr,1,0,0,0,0,1,1,Vector(List(Parse error: file <cpubquzspu/xvjpwyonmf/pmndfkmmqb.vpr> does not exist (failing.vpr@5.8)); List(Parse error: file <cpubquzspu/xvjpwyonmf/pmndfkmmqb.vpr> does not exist (failing.vpr@5.8)); List(Parse error: file <cpubquzspu/xvjpwyonmf/pmndfkmmqb.vpr> does not exist (failing.vpr@5.8)); List(Parse error: file <cpubquzspu/xvjpwyonmf/pmndfkmmqb.vpr> does not exist (failing.vpr@5.8)); List(Parse error: file <cpubquzspu/xvjpwyonmf/pmndfkmmqb.vpr> does not exist (failing.vpr@5.8)))
../../src/test/resources/frontend-generated/all/import/standard_import/local_and_standard.vpr,0,1120,36,3,1077,1119,1166,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/standard_import/local_then_standard.vpr,0,1178,7,0,1168,1181,1185,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/standard_import/loop_both.vpr,0,1191,36,3,1158,1175,1242,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/standard_import/loop_local.vpr,0,1185,18,1,1159,1195,1201,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/import/standard_import/loop_standard.vpr,0,1166,29,2,1125,1186,1188,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/inhale_exhale/basic.vpr,5,1101,42,3,1041,1127,1135,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@36.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (basic.vpr@64.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@79.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@36.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (basic.vpr@64.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@79.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@36.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (basic.vpr@64.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@79.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@36.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (basic.vpr@64.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@79.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@36.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (basic.vpr@64.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (basic.vpr@79.3)))
../../src/test/resources/frontend-generated/all/inhale_exhale/disjunction.vpr,0,1085,30,2,1045,1091,1119,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/inhale_exhale/loops.vpr,3,1101,22,1,1084,1088,1133,Vector(List([invariant.not.established:assertion.false] Loop invariant [true; false] might not hold on entry. Assertion false might not hold. (loops.vpr@34.15); [invariant.not.established:assertion.false] Loop invariant false might not hold on entry. Assertion false might not hold. (loops.vpr@46.15); [invariant.not.preserved:insufficient.permission] Loop invariant [true; acc(this.x; write)] might not be preserved. There might be insufficient permission to access this.x. (loops.vpr@59.15)); List([invariant.not.established:assertion.false] Loop invariant [true; false] might not hold on entry. Assertion false might not hold. (loops.vpr@34.15); [invariant.not.established:assertion.false] Loop invariant false might not hold on entry. Assertion false might not hold. (loops.vpr@46.15); [invariant.not.preserved:insufficient.permission] Loop invariant [true; acc(this.x; write)] might not be preserved. There might be insufficient permission to access this.x. (loops.vpr@59.15)); List([invariant.not.established:assertion.false] Loop invariant [true; false] might not hold on entry. Assertion false might not hold. (loops.vpr@34.15); [invariant.not.established:assertion.false] Loop invariant false might not hold on entry. Assertion false might not hold. (loops.vpr@46.15); [invariant.not.preserved:insufficient.permission] Loop invariant [true; acc(this.x; write)] might not be preserved. There might be insufficient permission to access this.x. (loops.vpr@59.15)); List([invariant.not.established:assertion.false] Loop invariant [true; false] might not hold on entry. Assertion false might not hold. (loops.vpr@34.15); [invariant.not.established:assertion.false] Loop invariant false might not hold on entry. Assertion false might not hold. (loops.vpr@46.15); [invariant.not.preserved:insufficient.permission] Loop invariant [true; acc(this.x; write)] might not be preserved. There might be insufficient permission to access this.x. (loops.vpr@59.15)); List([invariant.not.established:assertion.false] Loop invariant [true; false] might not hold on entry. Assertion false might not hold. (loops.vpr@34.15); [invariant.not.established:assertion.false] Loop invariant false might not hold on entry. Assertion false might not hold. (loops.vpr@46.15); [invariant.not.preserved:insufficient.permission] Loop invariant [true; acc(this.x; write)] might not be preserved. There might be insufficient permission to access this.x. (loops.vpr@59.15)))
../../src/test/resources/frontend-generated/all/inhale_exhale/permissions.vpr,1,1136,19,1,1113,1136,1161,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.x. (permissions.vpr@15.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.x. (permissions.vpr@15.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.x. (permissions.vpr@15.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.x. (permissions.vpr@15.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.x. (permissions.vpr@15.3)))
../../src/test/resources/frontend-generated/all/inhale_exhale/pure_expressions.vpr,5,1121,18,1,1099,1119,1145,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (pure_expressions.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@48.3); [exhale.failed:assertion.false] Exhale might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (pure_expressions.vpr@106.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (pure_expressions.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@48.3); [exhale.failed:assertion.false] Exhale might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (pure_expressions.vpr@106.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (pure_expressions.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@48.3); [exhale.failed:assertion.false] Exhale might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (pure_expressions.vpr@106.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (pure_expressions.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@48.3); [exhale.failed:assertion.false] Exhale might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (pure_expressions.vpr@106.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (pure_expressions.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@48.3); [exhale.failed:assertion.false] Exhale might fail. Assertion x == 0 might not hold. (pure_expressions.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (pure_expressions.vpr@106.3)))
../../src/test/resources/frontend-generated/all/inhale_exhale/wellformedness.vpr,14,1178,25,2,1144,1186,1206,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@20.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@26.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@33.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@39.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@54.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@60.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@67.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@73.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@118.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@124.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@131.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@137.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@169.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@197.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@20.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@26.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@33.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@39.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@54.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@60.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@67.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@73.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@118.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@124.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@131.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@137.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@169.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@197.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@20.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@26.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@33.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@39.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@54.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@60.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@67.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@73.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@118.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@124.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@131.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@137.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@169.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@197.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@20.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@26.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@33.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@39.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@54.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@60.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@67.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@73.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@118.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@124.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@131.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@137.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@169.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@197.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@20.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@26.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@33.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@39.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@54.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@60.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@67.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@73.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@118.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@124.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@131.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@137.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@169.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (wellformedness.vpr@197.11)))
../../src/test/resources/frontend-generated/all/invariants/loops1.vpr,0,1155,39,3,1108,1153,1205,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/invariants/loops2.vpr,0,1122,51,4,1055,1132,1180,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/invariants/while1.vpr,3,1165,36,3,1123,1159,1213,Vector(List([invariant.not.established:insufficient.permission] Loop invariant acc(x.f; 1 / 2) might not hold on entry. There might be insufficient permission to access x.f. (while1.vpr@20.15); [invariant.not.preserved:insufficient.permission] Loop invariant acc(x.f; 1 / 2) might not be preserved. There might be insufficient permission to access x.f. (while1.vpr@31.15); [assert.failed:assertion.false] Assert might fail. Assertion perm(y.f) == none might not hold. (while1.vpr@59.5)); List([invariant.not.established:insufficient.permission] Loop invariant acc(x.f; 1 / 2) might not hold on entry. There might be insufficient permission to access x.f. (while1.vpr@20.15); [invariant.not.preserved:insufficient.permission] Loop invariant acc(x.f; 1 / 2) might not be preserved. There might be insufficient permission to access x.f. (while1.vpr@31.15); [assert.failed:assertion.false] Assert might fail. Assertion perm(y.f) == none might not hold. (while1.vpr@59.5)); List([invariant.not.established:insufficient.permission] Loop invariant acc(x.f; 1 / 2) might not hold on entry. There might be insufficient permission to access x.f. (while1.vpr@20.15); [invariant.not.preserved:insufficient.permission] Loop invariant acc(x.f; 1 / 2) might not be preserved. There might be insufficient permission to access x.f. (while1.vpr@31.15); [assert.failed:assertion.false] Assert might fail. Assertion perm(y.f) == none might not hold. (while1.vpr@59.5)); List([invariant.not.established:insufficient.permission] Loop invariant acc(x.f; 1 / 2) might not hold on entry. There might be insufficient permission to access x.f. (while1.vpr@20.15); [invariant.not.preserved:insufficient.permission] Loop invariant acc(x.f; 1 / 2) might not be preserved. There might be insufficient permission to access x.f. (while1.vpr@31.15); [assert.failed:assertion.false] Assert might fail. Assertion perm(y.f) == none might not hold. (while1.vpr@59.5)); List([invariant.not.established:insufficient.permission] Loop invariant acc(x.f; 1 / 2) might not hold on entry. There might be insufficient permission to access x.f. (while1.vpr@20.15); [invariant.not.preserved:insufficient.permission] Loop invariant acc(x.f; 1 / 2) might not be preserved. There might be insufficient permission to access x.f. (while1.vpr@31.15); [assert.failed:assertion.false] Assert might fail. Assertion perm(y.f) == none might not hold. (while1.vpr@59.5)))
../../src/test/resources/frontend-generated/all/invariants/while2.vpr,4,1083,16,1,1062,1085,1102,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while2.vpr@16.3); [postcondition.violated:insufficient.permission] Postcondition of test03 might not hold. There might be insufficient permission to access x.f. (while2.vpr@22.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (while2.vpr@38.15); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access x.f. (while2.vpr@51.10)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while2.vpr@16.3); [postcondition.violated:insufficient.permission] Postcondition of test03 might not hold. There might be insufficient permission to access x.f. (while2.vpr@22.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (while2.vpr@38.15); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access x.f. (while2.vpr@51.10)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while2.vpr@16.3); [postcondition.violated:insufficient.permission] Postcondition of test03 might not hold. There might be insufficient permission to access x.f. (while2.vpr@22.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (while2.vpr@38.15); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access x.f. (while2.vpr@51.10)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while2.vpr@16.3); [postcondition.violated:insufficient.permission] Postcondition of test03 might not hold. There might be insufficient permission to access x.f. (while2.vpr@22.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (while2.vpr@38.15); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access x.f. (while2.vpr@51.10)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while2.vpr@16.3); [postcondition.violated:insufficient.permission] Postcondition of test03 might not hold. There might be insufficient permission to access x.f. (while2.vpr@22.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (while2.vpr@38.15); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access x.f. (while2.vpr@51.10)))
../../src/test/resources/frontend-generated/all/invariants/while3.vpr,3,1111,23,2,1089,1101,1144,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while3.vpr@22.3); [postcondition.violated:assertion.false] Postcondition of test02a might not hold. Assertion false might not hold. (while3.vpr@27.11); [postcondition.violated:assertion.false] Postcondition of test02b might not hold. Assertion false might not hold. (while3.vpr@41.11)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while3.vpr@22.3); [postcondition.violated:assertion.false] Postcondition of test02a might not hold. Assertion false might not hold. (while3.vpr@27.11); [postcondition.violated:assertion.false] Postcondition of test02b might not hold. Assertion false might not hold. (while3.vpr@41.11)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while3.vpr@22.3); [postcondition.violated:assertion.false] Postcondition of test02a might not hold. Assertion false might not hold. (while3.vpr@27.11); [postcondition.violated:assertion.false] Postcondition of test02b might not hold. Assertion false might not hold. (while3.vpr@41.11)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while3.vpr@22.3); [postcondition.violated:assertion.false] Postcondition of test02a might not hold. Assertion false might not hold. (while3.vpr@27.11); [postcondition.violated:assertion.false] Postcondition of test02b might not hold. Assertion false might not hold. (while3.vpr@41.11)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (while3.vpr@22.3); [postcondition.violated:assertion.false] Postcondition of test02a might not hold. Assertion false might not hold. (while3.vpr@27.11); [postcondition.violated:assertion.false] Postcondition of test02b might not hold. Assertion false might not hold. (while3.vpr@41.11)))
../../src/test/resources/frontend-generated/all/issues/carbon/0002.vpr,0,1275,22,1,1255,1265,1306,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0004.vpr,0,1064,19,1,1042,1061,1090,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0005.vpr,0,1097,29,2,1058,1103,1130,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0006.vpr,0,1079,28,2,1058,1061,1120,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0008.vpr,0,1380,28,2,1346,1380,1415,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0030.vpr,1,1040,12,1,1024,1044,1054,Vector(List([predicate.not.wellformed:insufficient.permission] Predicate might not be well-formed. There might be insufficient permission to access this.x. (0030.vpr@8.1)); List([predicate.not.wellformed:insufficient.permission] Predicate might not be well-formed. There might be insufficient permission to access this.x. (0030.vpr@8.1)); List([predicate.not.wellformed:insufficient.permission] Predicate might not be well-formed. There might be insufficient permission to access this.x. (0030.vpr@8.1)); List([predicate.not.wellformed:insufficient.permission] Predicate might not be well-formed. There might be insufficient permission to access this.x. (0030.vpr@8.1)); List([predicate.not.wellformed:insufficient.permission] Predicate might not be well-formed. There might be insufficient permission to access this.x. (0030.vpr@8.1)))
../../src/test/resources/frontend-generated/all/issues/carbon/0042.vpr,3,1156,26,2,1121,1164,1184,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion unknown(x) >= none might not hold. (0042.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) >= none might not hold. (0042.vpr@23.3); [fold.failed:insufficient.permission] Folding token(diz) might fail. There might be insufficient permission to access diz.unknown_y. (0042.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion unknown(x) >= none might not hold. (0042.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) >= none might not hold. (0042.vpr@23.3); [fold.failed:insufficient.permission] Folding token(diz) might fail. There might be insufficient permission to access diz.unknown_y. (0042.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion unknown(x) >= none might not hold. (0042.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) >= none might not hold. (0042.vpr@23.3); [fold.failed:insufficient.permission] Folding token(diz) might fail. There might be insufficient permission to access diz.unknown_y. (0042.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion unknown(x) >= none might not hold. (0042.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) >= none might not hold. (0042.vpr@23.3); [fold.failed:insufficient.permission] Folding token(diz) might fail. There might be insufficient permission to access diz.unknown_y. (0042.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion unknown(x) >= none might not hold. (0042.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) >= none might not hold. (0042.vpr@23.3); [fold.failed:insufficient.permission] Folding token(diz) might fail. There might be insufficient permission to access diz.unknown_y. (0042.vpr@37.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0045.vpr,0,1131,38,3,1083,1134,1177,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0049.vpr,1,1160,16,1,1142,1157,1183,Vector(List([fold.failed:insufficient.permission] Folding Cellwrite1$(this) might fail. There might be insufficient permission to access this$_1.Cellx$. (0049.vpr@38.3)); List([fold.failed:insufficient.permission] Folding Cellwrite1$(this) might fail. There might be insufficient permission to access this$_1.Cellx$. (0049.vpr@38.3)); List([fold.failed:insufficient.permission] Folding Cellwrite1$(this) might fail. There might be insufficient permission to access this$_1.Cellx$. (0049.vpr@38.3)); List([fold.failed:insufficient.permission] Folding Cellwrite1$(this) might fail. There might be insufficient permission to access this$_1.Cellx$. (0049.vpr@38.3)); List([fold.failed:insufficient.permission] Folding Cellwrite1$(this) might fail. There might be insufficient permission to access this$_1.Cellx$. (0049.vpr@38.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0052.vpr,1,1072,20,1,1050,1068,1100,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0052.vpr@9.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0052.vpr@9.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0052.vpr@9.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0052.vpr@9.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0052.vpr@9.11)))
../../src/test/resources/frontend-generated/all/issues/carbon/0053.vpr,1,1054,30,2,1012,1072,1079,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.Testx$. (0053.vpr@18.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.Testx$. (0053.vpr@18.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.Testx$. (0053.vpr@18.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.Testx$. (0053.vpr@18.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.Testx$. (0053.vpr@18.12)))
../../src/test/resources/frontend-generated/all/issues/carbon/0054.vpr,1,1101,27,2,1073,1091,1139,Vector(List([postcondition.violated:insufficient.permission] Postcondition of Test02test04$ might not hold. There might be insufficient permission to access this.f. (0054.vpr@16.11)); List([postcondition.violated:insufficient.permission] Postcondition of Test02test04$ might not hold. There might be insufficient permission to access this.f. (0054.vpr@16.11)); List([postcondition.violated:insufficient.permission] Postcondition of Test02test04$ might not hold. There might be insufficient permission to access this.f. (0054.vpr@16.11)); List([postcondition.violated:insufficient.permission] Postcondition of Test02test04$ might not hold. There might be insufficient permission to access this.f. (0054.vpr@16.11)); List([postcondition.violated:insufficient.permission] Postcondition of Test02test04$ might not hold. There might be insufficient permission to access this.f. (0054.vpr@16.11)))
../../src/test/resources/frontend-generated/all/issues/carbon/0055.vpr,0,1220,31,2,1188,1211,1263,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0056.vpr,0,1228,3,0,1224,1228,1232,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0059-1.vpr,0,1121,29,2,1081,1130,1152,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0059-2.vpr,1,1090,40,3,1034,1107,1130,Vector(List([exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0059-2.vpr@17.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0059-2.vpr@17.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0059-2.vpr@17.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0059-2.vpr@17.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0059-2.vpr@17.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0059-3.vpr,1,1074,18,1,1056,1067,1100,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (0059-3.vpr@13.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (0059-3.vpr@13.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (0059-3.vpr@13.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (0059-3.vpr@13.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (0059-3.vpr@13.11)))
../../src/test/resources/frontend-generated/all/issues/carbon/0059.vpr,0,1188,4,0,1184,1187,1194,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0060.vpr,0,1126,41,3,1068,1153,1157,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0061.vpr,0,1111,19,1,1088,1110,1136,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0063-1.vpr,7,1110,9,0,1100,1110,1122,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (0063-1.vpr@35.11); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (0063-1.vpr@43.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (0063-1.vpr@50.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(P(this); write) in false) might not hold. (0063-1.vpr@57.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0063-1.vpr@64.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(V(this); write) in this.y == 2) might not hold. (0063-1.vpr@76.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(V(this); write) in this.y) == 2 might not hold. (0063-1.vpr@83.3)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (0063-1.vpr@35.11); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (0063-1.vpr@43.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (0063-1.vpr@50.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(P(this); write) in false) might not hold. (0063-1.vpr@57.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0063-1.vpr@64.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(V(this); write) in this.y == 2) might not hold. (0063-1.vpr@76.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(V(this); write) in this.y) == 2 might not hold. (0063-1.vpr@83.3)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (0063-1.vpr@35.11); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (0063-1.vpr@43.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (0063-1.vpr@50.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(P(this); write) in false) might not hold. (0063-1.vpr@57.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0063-1.vpr@64.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(V(this); write) in this.y == 2) might not hold. (0063-1.vpr@76.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(V(this); write) in this.y) == 2 might not hold. (0063-1.vpr@83.3)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (0063-1.vpr@35.11); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (0063-1.vpr@43.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (0063-1.vpr@50.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(P(this); write) in false) might not hold. (0063-1.vpr@57.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0063-1.vpr@64.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(V(this); write) in this.y == 2) might not hold. (0063-1.vpr@76.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(V(this); write) in this.y) == 2 might not hold. (0063-1.vpr@83.3)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (0063-1.vpr@35.11); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (0063-1.vpr@43.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (0063-1.vpr@50.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(P(this); write) in false) might not hold. (0063-1.vpr@57.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0063-1.vpr@64.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(V(this); write) in this.y == 2) might not hold. (0063-1.vpr@76.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(V(this); write) in this.y) == 2 might not hold. (0063-1.vpr@83.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0063.vpr,1,1136,10,0,1122,1140,1146,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access LinkedListvalid(this). (0063.vpr@12.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access LinkedListvalid(this). (0063.vpr@12.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access LinkedListvalid(this). (0063.vpr@12.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access LinkedListvalid(this). (0063.vpr@12.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access LinkedListvalid(this). (0063.vpr@12.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0064.vpr,0,1127,21,1,1099,1132,1151,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0065.vpr,0,1066,9,0,1053,1073,1074,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0066.vpr,0,1129,26,2,1108,1114,1167,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0067.vpr,0,1081,30,2,1053,1068,1124,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0069.vpr,3,1095,12,1,1077,1102,1106,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0069.vpr@12.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0069.vpr@22.11); [postcondition.violated:assertion.false] Postcondition of postFunction2 might not hold. Assertion this.x == 0 might not hold. (0069.vpr@29.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0069.vpr@12.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0069.vpr@22.11); [postcondition.violated:assertion.false] Postcondition of postFunction2 might not hold. Assertion this.x == 0 might not hold. (0069.vpr@29.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0069.vpr@12.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0069.vpr@22.11); [postcondition.violated:assertion.false] Postcondition of postFunction2 might not hold. Assertion this.x == 0 might not hold. (0069.vpr@29.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0069.vpr@12.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0069.vpr@22.11); [postcondition.violated:assertion.false] Postcondition of postFunction2 might not hold. Assertion this.x == 0 might not hold. (0069.vpr@29.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0069.vpr@12.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0069.vpr@22.11); [postcondition.violated:assertion.false] Postcondition of postFunction2 might not hold. Assertion this.x == 0 might not hold. (0069.vpr@29.11)))
../../src/test/resources/frontend-generated/all/issues/carbon/0070.vpr,1,1128,18,1,1104,1131,1149,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (0070.vpr@14.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (0070.vpr@14.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (0070.vpr@14.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (0070.vpr@14.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (0070.vpr@14.15)))
../../src/test/resources/frontend-generated/all/issues/carbon/0072.vpr,1,1069,16,1,1052,1064,1091,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.frac. (0072.vpr@10.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.frac. (0072.vpr@10.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.frac. (0072.vpr@10.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.frac. (0072.vpr@10.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.frac. (0072.vpr@10.11)))
../../src/test/resources/frontend-generated/all/issues/carbon/0073.vpr,0,1104,17,1,1083,1106,1125,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0074.vpr,0,1056,17,1,1031,1068,1070,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0076.vpr,0,1503,33,2,1457,1518,1534,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0080.vpr,1,1173,24,2,1139,1190,1191,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access a.f. (0080.vpr@52.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access a.f. (0080.vpr@52.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access a.f. (0080.vpr@52.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access a.f. (0080.vpr@52.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access a.f. (0080.vpr@52.5)))
../../src/test/resources/frontend-generated/all/issues/carbon/0081.vpr,0,1129,6,0,1121,1130,1136,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0082.vpr,0,1039,22,2,1011,1042,1066,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0092.vpr,1,1102,33,2,1062,1103,1143,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.x. (0092.vpr@21.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.x. (0092.vpr@21.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.x. (0092.vpr@21.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.x. (0092.vpr@21.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access this.x. (0092.vpr@21.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0095.vpr,0,1079,28,2,1045,1079,1115,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0097.vpr,1,1177,9,0,1165,1183,1185,Vector(List([postcondition.violated:assertion.false] Postcondition of func3 might not hold. Assertion result == (x != y) might not hold. (0097.vpr@35.11)); List([postcondition.violated:assertion.false] Postcondition of func3 might not hold. Assertion result == (x != y) might not hold. (0097.vpr@35.11)); List([postcondition.violated:assertion.false] Postcondition of func3 might not hold. Assertion result == (x != y) might not hold. (0097.vpr@35.11)); List([postcondition.violated:assertion.false] Postcondition of func3 might not hold. Assertion result == (x != y) might not hold. (0097.vpr@35.11)); List([postcondition.violated:assertion.false] Postcondition of func3 might not hold. Assertion result == (x != y) might not hold. (0097.vpr@35.11)))
../../src/test/resources/frontend-generated/all/issues/carbon/0100.vpr,0,1103,12,1,1092,1098,1121,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0112.vpr,4,1233,8,0,1227,1228,1245,Vector(List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (0112.vpr@27.11); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (0112.vpr@32.11); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0112.vpr@69.12); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0112.vpr@74.12)); List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (0112.vpr@27.11); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (0112.vpr@32.11); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0112.vpr@69.12); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0112.vpr@74.12)); List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (0112.vpr@27.11); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (0112.vpr@32.11); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0112.vpr@69.12); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0112.vpr@74.12)); List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (0112.vpr@27.11); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (0112.vpr@32.11); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0112.vpr@69.12); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0112.vpr@74.12)); List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (0112.vpr@27.11); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor result might be zero. (0112.vpr@32.11); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0112.vpr@69.12); [not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0112.vpr@74.12)))
../../src/test/resources/frontend-generated/all/issues/carbon/0118.vpr,3,1617,106,6,1487,1618,1748,Vector(List([exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@11.52]  might not be injective. (0118.vpr@11.3); [exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@19.52]  might not be injective. (0118.vpr@19.3); [exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@28.52]  might not be injective. (0118.vpr@28.3)); List([exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@11.52]  might not be injective. (0118.vpr@11.3); [exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@19.52]  might not be injective. (0118.vpr@19.3); [exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@28.52]  might not be injective. (0118.vpr@28.3)); List([exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@11.52]  might not be injective. (0118.vpr@11.3); [exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@19.52]  might not be injective. (0118.vpr@19.3); [exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@28.52]  might not be injective. (0118.vpr@28.3)); List([exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@11.52]  might not be injective. (0118.vpr@11.3); [exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@19.52]  might not be injective. (0118.vpr@19.3); [exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@28.52]  might not be injective. (0118.vpr@28.3)); List([exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@11.52]  might not be injective. (0118.vpr@11.3); [exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@19.52]  might not be injective. (0118.vpr@19.3); [exhale.failed:receiver.not.injective] Exhale might fail. Receiver of S[i].f [0118.vpr@28.52]  might not be injective. (0118.vpr@28.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0122.vpr,0,1069,38,3,1028,1059,1120,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0125.vpr,2,1119,20,1,1099,1111,1147,Vector(List([unfold.failed:negative.permission] Unfolding P(x) might fail. Fraction -(1 / 2) might be negative. (0125.vpr@11.3); [unfold.failed:negative.permission] Unfolding P(x) might fail. Fraction p might be negative. (0125.vpr@20.3)); List([unfold.failed:negative.permission] Unfolding P(x) might fail. Fraction -(1 / 2) might be negative. (0125.vpr@11.3); [unfold.failed:negative.permission] Unfolding P(x) might fail. Fraction p might be negative. (0125.vpr@20.3)); List([unfold.failed:negative.permission] Unfolding P(x) might fail. Fraction -(1 / 2) might be negative. (0125.vpr@11.3); [unfold.failed:negative.permission] Unfolding P(x) might fail. Fraction p might be negative. (0125.vpr@20.3)); List([unfold.failed:negative.permission] Unfolding P(x) might fail. Fraction -(1 / 2) might be negative. (0125.vpr@11.3); [unfold.failed:negative.permission] Unfolding P(x) might fail. Fraction p might be negative. (0125.vpr@20.3)); List([unfold.failed:negative.permission] Unfolding P(x) might fail. Fraction -(1 / 2) might be negative. (0125.vpr@11.3); [unfold.failed:negative.permission] Unfolding P(x) might fail. Fraction p might be negative. (0125.vpr@20.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0137.vpr,0,1659,75,4,1559,1675,1743,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0149.vpr,0,1081,41,3,1023,1101,1119,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0150.vpr,1,1129,7,0,1119,1133,1135,Vector(List([call.precondition:insufficient.permission] The precondition of method callee might not hold. There might be insufficient permission to access Tree_valid(self). (0150.vpr@21.5)); List([call.precondition:insufficient.permission] The precondition of method callee might not hold. There might be insufficient permission to access Tree_valid(self). (0150.vpr@21.5)); List([call.precondition:insufficient.permission] The precondition of method callee might not hold. There might be insufficient permission to access Tree_valid(self). (0150.vpr@21.5)); List([call.precondition:insufficient.permission] The precondition of method callee might not hold. There might be insufficient permission to access Tree_valid(self). (0150.vpr@21.5)); List([call.precondition:insufficient.permission] The precondition of method callee might not hold. There might be insufficient permission to access Tree_valid(self). (0150.vpr@21.5)))
../../src/test/resources/frontend-generated/all/issues/carbon/0151.vpr,1,1069,13,1,1050,1078,1081,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion perm(MustTerminate(_cthread)) == 2 * write might not hold. (0151.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion perm(MustTerminate(_cthread)) == 2 * write might not hold. (0151.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion perm(MustTerminate(_cthread)) == 2 * write might not hold. (0151.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion perm(MustTerminate(_cthread)) == 2 * write might not hold. (0151.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion perm(MustTerminate(_cthread)) == 2 * write might not hold. (0151.vpr@24.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0157.vpr,0,1197,18,1,1180,1189,1224,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0160.vpr,1,1568,49,3,1499,1596,1609,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access loc(arr2; t).val. (0160.vpr@14.9)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access loc(arr2; t).val. (0160.vpr@14.9)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access loc(arr2; t).val. (0160.vpr@14.9)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access loc(arr2; t).val. (0160.vpr@14.9)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access loc(arr2; t).val. (0160.vpr@14.9)))
../../src/test/resources/frontend-generated/all/issues/carbon/0165.vpr,0,1353,17,1,1332,1353,1375,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0170.vpr,0,1076,21,1,1056,1067,1106,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0172.vpr,1,1121,33,2,1075,1144,1146,Vector(List([application.precondition:assertion.false] Precondition of function t might not hold. Assertion 0 > 0 might not hold. (0172.vpr@14.13)); List([application.precondition:assertion.false] Precondition of function t might not hold. Assertion 0 > 0 might not hold. (0172.vpr@14.13)); List([application.precondition:assertion.false] Precondition of function t might not hold. Assertion 0 > 0 might not hold. (0172.vpr@14.13)); List([application.precondition:assertion.false] Precondition of function t might not hold. Assertion 0 > 0 might not hold. (0172.vpr@14.13)); List([application.precondition:assertion.false] Precondition of function t might not hold. Assertion 0 > 0 might not hold. (0172.vpr@14.13)))
../../src/test/resources/frontend-generated/all/issues/carbon/0173.vpr,1,1074,34,3,1029,1084,1111,Vector(List([application.precondition:assertion.false] Precondition of function t might not hold. Assertion 0 > 0 might not hold. (0173.vpr@16.13)); List([application.precondition:assertion.false] Precondition of function t might not hold. Assertion 0 > 0 might not hold. (0173.vpr@16.13)); List([application.precondition:assertion.false] Precondition of function t might not hold. Assertion 0 > 0 might not hold. (0173.vpr@16.13)); List([application.precondition:assertion.false] Precondition of function t might not hold. Assertion 0 > 0 might not hold. (0173.vpr@16.13)); List([application.precondition:assertion.false] Precondition of function t might not hold. Assertion 0 > 0 might not hold. (0173.vpr@16.13)))
../../src/test/resources/frontend-generated/all/issues/carbon/0177.vpr,0,1353,25,1,1329,1342,1389,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0178.vpr,0,1416,66,4,1357,1383,1509,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0179.vpr,0,1122,11,0,1107,1128,1133,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0181.vpr,0,1134,10,0,1121,1134,1147,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0188.vpr,1,1093,14,1,1075,1093,1111,Vector(List([application.precondition:assertion.false] Precondition of function g might not hold. Assertion a > i ==> f(a; i) might not hold. (0188.vpr@13.41)); List([application.precondition:assertion.false] Precondition of function g might not hold. Assertion a > i ==> f(a; i) might not hold. (0188.vpr@13.41)); List([application.precondition:assertion.false] Precondition of function g might not hold. Assertion a > i ==> f(a; i) might not hold. (0188.vpr@13.41)); List([application.precondition:assertion.false] Precondition of function g might not hold. Assertion a > i ==> f(a; i) might not hold. (0188.vpr@13.41)); List([application.precondition:assertion.false] Precondition of function g might not hold. Assertion a > i ==> f(a; i) might not hold. (0188.vpr@13.41)))
../../src/test/resources/frontend-generated/all/issues/carbon/0192.vpr,0,1713,102,5,1576,1742,1821,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0195.vpr,0,1135,16,1,1115,1138,1154,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0196.vpr,8,1904,39,2,1863,1893,1958,Vector(List([application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@37.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@48.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@59.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@70.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@81.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@92.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@103.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@114.21)); List([application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@37.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@48.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@59.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@70.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@81.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@92.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@103.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@114.21)); List([application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@37.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@48.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@59.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@70.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@81.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@92.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@103.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@114.21)); List([application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@37.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@48.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@59.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@70.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@81.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@92.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@103.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@114.21)); List([application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@37.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@48.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@59.21); [application.precondition:insufficient.permission] Precondition of function testerFull might not hold. There might be insufficient permission to access Q(get(r)). (0196.vpr@70.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@81.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@92.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@103.21); [application.precondition:insufficient.permission] Precondition of function testerfieldFull might not hold. There might be insufficient permission to access get(r).q. (0196.vpr@114.21)))
../../src/test/resources/frontend-generated/all/issues/carbon/0200.vpr,0,1107,35,3,1078,1087,1157,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0202.vpr,0,1552,35,2,1523,1533,1602,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0203.vpr,1,1507,65,4,1414,1549,1558,Vector(List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access n.val. (0203.vpr@11.5)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access n.val. (0203.vpr@11.5)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access n.val. (0203.vpr@11.5)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access n.val. (0203.vpr@11.5)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access n.val. (0203.vpr@11.5)))
../../src/test/resources/frontend-generated/all/issues/carbon/0204.vpr,0,1833,154,8,1616,1927,1957,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0206.vpr,1,2061,80,3,1960,2065,2158,Vector(List([postcondition.violated:assertion.false] Postcondition of swap might not hold. Assertion elements(a) == old(elements(a)) might not hold. (0206.vpr@36.13)); List([postcondition.violated:assertion.false] Postcondition of swap might not hold. Assertion elements(a) == old(elements(a)) might not hold. (0206.vpr@36.13)); List([postcondition.violated:assertion.false] Postcondition of swap might not hold. Assertion elements(a) == old(elements(a)) might not hold. (0206.vpr@36.13)); List([postcondition.violated:assertion.false] Postcondition of swap might not hold. Assertion elements(a) == old(elements(a)) might not hold. (0206.vpr@36.13)); List([postcondition.violated:assertion.false] Postcondition of swap might not hold. Assertion elements(a) == old(elements(a)) might not hold. (0206.vpr@36.13)))
../../src/test/resources/frontend-generated/all/issues/carbon/0207.vpr,2,2438,27,1,2399,2457,2458,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion elements(a) == old(elements(a)) might not hold. (0207.vpr@27.4); [assert.failed:assertion.false] Assert might fail. Assertion elements(a) == old[pre](elements(a)) might not hold. (0207.vpr@50.3)); List([assert.failed:assertion.false] Assert might fail. Assertion elements(a) == old(elements(a)) might not hold. (0207.vpr@27.4); [assert.failed:assertion.false] Assert might fail. Assertion elements(a) == old[pre](elements(a)) might not hold. (0207.vpr@50.3)); List([assert.failed:assertion.false] Assert might fail. Assertion elements(a) == old(elements(a)) might not hold. (0207.vpr@27.4); [assert.failed:assertion.false] Assert might fail. Assertion elements(a) == old[pre](elements(a)) might not hold. (0207.vpr@50.3)); List([assert.failed:assertion.false] Assert might fail. Assertion elements(a) == old(elements(a)) might not hold. (0207.vpr@27.4); [assert.failed:assertion.false] Assert might fail. Assertion elements(a) == old[pre](elements(a)) might not hold. (0207.vpr@50.3)); List([assert.failed:assertion.false] Assert might fail. Assertion elements(a) == old(elements(a)) might not hold. (0207.vpr@27.4); [assert.failed:assertion.false] Assert might fail. Assertion elements(a) == old[pre](elements(a)) might not hold. (0207.vpr@50.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0209.vpr,0,2141,65,3,2078,2113,2232,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0211.vpr,1,1113,12,1,1101,1107,1131,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion x > 3 might not hold. (0211.vpr@9.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x > 3 might not hold. (0211.vpr@9.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x > 3 might not hold. (0211.vpr@9.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x > 3 might not hold. (0211.vpr@9.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x > 3 might not hold. (0211.vpr@9.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0213.vpr,0,1089,29,2,1060,1078,1130,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0219.vpr,0,1528,108,7,1383,1557,1645,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0222.vpr,1,1154,14,1,1134,1161,1167,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion foo(x) == 42 might not hold. (0222.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion foo(x) == 42 might not hold. (0222.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion foo(x) == 42 might not hold. (0222.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion foo(x) == 42 might not hold. (0222.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion foo(x) == 42 might not hold. (0222.vpr@21.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0223.vpr,1,1967,68,3,1874,1993,2036,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion get(x) == 4 might not hold. (0223.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion get(x) == 4 might not hold. (0223.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion get(x) == 4 might not hold. (0223.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion get(x) == 4 might not hold. (0223.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion get(x) == 4 might not hold. (0223.vpr@32.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0236.vpr,0,1615,78,4,1516,1621,1709,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0237.vpr,0,1387,9,0,1376,1387,1399,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0238.vpr,1,1141,17,1,1126,1131,1166,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion get(y) == 3 might not hold. (0238.vpr@27.6)); List([assert.failed:assertion.false] Assert might fail. Assertion get(y) == 3 might not hold. (0238.vpr@27.6)); List([assert.failed:assertion.false] Assert might fail. Assertion get(y) == 3 might not hold. (0238.vpr@27.6)); List([assert.failed:assertion.false] Assert might fail. Assertion get(y) == 3 might not hold. (0238.vpr@27.6)); List([assert.failed:assertion.false] Assert might fail. Assertion get(y) == 3 might not hold. (0238.vpr@27.6)))
../../src/test/resources/frontend-generated/all/issues/carbon/0239.vpr,1,1457,85,5,1373,1423,1575,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0239.vpr@16.6)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0239.vpr@16.6)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0239.vpr@16.6)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0239.vpr@16.6)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0239.vpr@16.6)))
../../src/test/resources/frontend-generated/all/issues/carbon/0240.vpr,0,1057,22,2,1026,1070,1075,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0241.vpr,0,1472,31,2,1436,1467,1513,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0251.vpr,0,1059,17,1,1036,1063,1079,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0259.vpr,0,1144,7,0,1134,1147,1151,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0262.vpr,1,1136,49,4,1084,1122,1202,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion exists_path(y; y) ==> __learn_trigger__(foo(y; y)) might not hold. (0262.vpr@17.5)); List([assert.failed:assertion.false] Assert might fail. Assertion exists_path(y; y) ==> __learn_trigger__(foo(y; y)) might not hold. (0262.vpr@17.5)); List([assert.failed:assertion.false] Assert might fail. Assertion exists_path(y; y) ==> __learn_trigger__(foo(y; y)) might not hold. (0262.vpr@17.5)); List([assert.failed:assertion.false] Assert might fail. Assertion exists_path(y; y) ==> __learn_trigger__(foo(y; y)) might not hold. (0262.vpr@17.5)); List([assert.failed:assertion.false] Assert might fail. Assertion exists_path(y; y) ==> __learn_trigger__(foo(y; y)) might not hold. (0262.vpr@17.5)))
../../src/test/resources/frontend-generated/all/issues/carbon/0264.vpr,0,1431,37,2,1379,1449,1467,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/carbon/0265.vpr,1,1106,20,1,1078,1119,1123,Vector(List([inhale.failed:division.by.zero] Inhale might fail. Divisor 0 might be zero. (0265.vpr@6.10)); List([inhale.failed:division.by.zero] Inhale might fail. Divisor 0 might be zero. (0265.vpr@6.10)); List([inhale.failed:division.by.zero] Inhale might fail. Divisor 0 might be zero. (0265.vpr@6.10)); List([inhale.failed:division.by.zero] Inhale might fail. Divisor 0 might be zero. (0265.vpr@6.10)); List([inhale.failed:division.by.zero] Inhale might fail. Divisor 0 might be zero. (0265.vpr@6.10)))
../../src/test/resources/frontend-generated/all/issues/carbon/0271.vpr,1,1756,81,4,1653,1762,1853,Vector(List([function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access someList(l1; i). (0271.vpr@48.1)); List([function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access someList(l1; i). (0271.vpr@48.1)); List([function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access someList(l1; i). (0271.vpr@48.1)); List([function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access someList(l1; i). (0271.vpr@48.1)); List([function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access someList(l1; i). (0271.vpr@48.1)))
../../src/test/resources/frontend-generated/all/issues/carbon/0274.vpr,1,1633,51,3,1581,1616,1704,Vector(List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access access_fields(nn). (0274.vpr@18.5)); List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access access_fields(nn). (0274.vpr@18.5)); List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access access_fields(nn). (0274.vpr@18.5)); List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access access_fields(nn). (0274.vpr@18.5)); List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access access_fields(nn). (0274.vpr@18.5)))
../../src/test/resources/frontend-generated/all/issues/carbon/0282.vpr,1,1172,2,0,1169,1171,1176,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { foo(j; j) } foo(j; j)) might not hold. (0282.vpr@17.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { foo(j; j) } foo(j; j)) might not hold. (0282.vpr@17.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { foo(j; j) } foo(j; j)) might not hold. (0282.vpr@17.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { foo(j; j) } foo(j; j)) might not hold. (0282.vpr@17.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { foo(j; j) } foo(j; j)) might not hold. (0282.vpr@17.3)))
../../src/test/resources/frontend-generated/all/issues/carbon/0349.vpr,0,1291,39,3,1257,1271,1347,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0005a.vpr,0,1153,12,1,1139,1151,1169,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0005b.vpr,3,1450,55,3,1376,1467,1509,Vector(List([postcondition.violated:assertion.false] Postcondition of Triggerstriggers_two$ might not hold. Assertion (forall w: Int :: { Triggersg$(this$_7; w) } true ==> Triggersg$(this$_7; w)) might not hold. (0005b.vpr@110.12); [postcondition.violated:assertion.false] Postcondition of Triggerstriggers_three$ might not hold. Assertion (forall x: Int; y: Int; z: Int :: { Triggersf$(this$_8; x; y; z) } true ==> Triggersf$(this$_8; x; y; z)) might not hold. (0005b.vpr@127.12); [postcondition.violated:assertion.false] Postcondition of Triggerstriggers_four$ might not hold. Assertion (forall x: Int; y: Int; z: Int :: { Triggersf$(this$_9; x; y; z) } true ==> Triggersf$(this$_9; x; y; z)) might not hold. (0005b.vpr@143.12)); List([postcondition.violated:assertion.false] Postcondition of Triggerstriggers_two$ might not hold. Assertion (forall w: Int :: { Triggersg$(this$_7; w) } true ==> Triggersg$(this$_7; w)) might not hold. (0005b.vpr@110.12); [postcondition.violated:assertion.false] Postcondition of Triggerstriggers_three$ might not hold. Assertion (forall x: Int; y: Int; z: Int :: { Triggersf$(this$_8; x; y; z) } true ==> Triggersf$(this$_8; x; y; z)) might not hold. (0005b.vpr@127.12); [postcondition.violated:assertion.false] Postcondition of Triggerstriggers_four$ might not hold. Assertion (forall x: Int; y: Int; z: Int :: { Triggersf$(this$_9; x; y; z) } true ==> Triggersf$(this$_9; x; y; z)) might not hold. (0005b.vpr@143.12)); List([postcondition.violated:assertion.false] Postcondition of Triggerstriggers_two$ might not hold. Assertion (forall w: Int :: { Triggersg$(this$_7; w) } true ==> Triggersg$(this$_7; w)) might not hold. (0005b.vpr@110.12); [postcondition.violated:assertion.false] Postcondition of Triggerstriggers_three$ might not hold. Assertion (forall x: Int; y: Int; z: Int :: { Triggersf$(this$_8; x; y; z) } true ==> Triggersf$(this$_8; x; y; z)) might not hold. (0005b.vpr@127.12); [postcondition.violated:assertion.false] Postcondition of Triggerstriggers_four$ might not hold. Assertion (forall x: Int; y: Int; z: Int :: { Triggersf$(this$_9; x; y; z) } true ==> Triggersf$(this$_9; x; y; z)) might not hold. (0005b.vpr@143.12)); List([postcondition.violated:assertion.false] Postcondition of Triggerstriggers_two$ might not hold. Assertion (forall w: Int :: { Triggersg$(this$_7; w) } true ==> Triggersg$(this$_7; w)) might not hold. (0005b.vpr@110.12); [postcondition.violated:assertion.false] Postcondition of Triggerstriggers_three$ might not hold. Assertion (forall x: Int; y: Int; z: Int :: { Triggersf$(this$_8; x; y; z) } true ==> Triggersf$(this$_8; x; y; z)) might not hold. (0005b.vpr@127.12); [postcondition.violated:assertion.false] Postcondition of Triggerstriggers_four$ might not hold. Assertion (forall x: Int; y: Int; z: Int :: { Triggersf$(this$_9; x; y; z) } true ==> Triggersf$(this$_9; x; y; z)) might not hold. (0005b.vpr@143.12)); List([postcondition.violated:assertion.false] Postcondition of Triggerstriggers_two$ might not hold. Assertion (forall w: Int :: { Triggersg$(this$_7; w) } true ==> Triggersg$(this$_7; w)) might not hold. (0005b.vpr@110.12); [postcondition.violated:assertion.false] Postcondition of Triggerstriggers_three$ might not hold. Assertion (forall x: Int; y: Int; z: Int :: { Triggersf$(this$_8; x; y; z) } true ==> Triggersf$(this$_8; x; y; z)) might not hold. (0005b.vpr@127.12); [postcondition.violated:assertion.false] Postcondition of Triggerstriggers_four$ might not hold. Assertion (forall x: Int; y: Int; z: Int :: { Triggersf$(this$_9; x; y; z) } true ==> Triggersf$(this$_9; x; y; z)) might not hold. (0005b.vpr@143.12)))
../../src/test/resources/frontend-generated/all/issues/silicon/0006.vpr,1,1064,15,1,1045,1063,1084,Vector(List([application.precondition:insufficient.permission] Precondition of function bar might not hold. There might be insufficient permission to access x.f. (0006.vpr@9.11)); List([application.precondition:insufficient.permission] Precondition of function bar might not hold. There might be insufficient permission to access x.f. (0006.vpr@9.11)); List([application.precondition:insufficient.permission] Precondition of function bar might not hold. There might be insufficient permission to access x.f. (0006.vpr@9.11)); List([application.precondition:insufficient.permission] Precondition of function bar might not hold. There might be insufficient permission to access x.f. (0006.vpr@9.11)); List([application.precondition:insufficient.permission] Precondition of function bar might not hold. There might be insufficient permission to access x.f. (0006.vpr@9.11)))
../../src/test/resources/frontend-generated/all/issues/silicon/0008.vpr,0,1121,19,1,1094,1130,1140,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0011.vpr,3,1244,24,1,1219,1237,1278,Vector(List([postcondition.violated:insufficient.permission] Postcondition of fails0 might not hold. There might be insufficient permission to access x.f. (0011.vpr@43.11); [postcondition.violated:insufficient.permission] Postcondition of fails1 might not hold. There might be insufficient permission to access x.c.f. (0011.vpr@56.11); [postcondition.violated:assertion.false] Postcondition of fails2 might not hold. Assertion x.b == (x.c.f == x.d.f) might not hold. (0011.vpr@75.11)); List([postcondition.violated:insufficient.permission] Postcondition of fails0 might not hold. There might be insufficient permission to access x.f. (0011.vpr@43.11); [postcondition.violated:insufficient.permission] Postcondition of fails1 might not hold. There might be insufficient permission to access x.c.f. (0011.vpr@56.11); [postcondition.violated:assertion.false] Postcondition of fails2 might not hold. Assertion x.b == (x.c.f == x.d.f) might not hold. (0011.vpr@75.11)); List([postcondition.violated:insufficient.permission] Postcondition of fails0 might not hold. There might be insufficient permission to access x.f. (0011.vpr@43.11); [postcondition.violated:insufficient.permission] Postcondition of fails1 might not hold. There might be insufficient permission to access x.c.f. (0011.vpr@56.11); [postcondition.violated:assertion.false] Postcondition of fails2 might not hold. Assertion x.b == (x.c.f == x.d.f) might not hold. (0011.vpr@75.11)); List([postcondition.violated:insufficient.permission] Postcondition of fails0 might not hold. There might be insufficient permission to access x.f. (0011.vpr@43.11); [postcondition.violated:insufficient.permission] Postcondition of fails1 might not hold. There might be insufficient permission to access x.c.f. (0011.vpr@56.11); [postcondition.violated:assertion.false] Postcondition of fails2 might not hold. Assertion x.b == (x.c.f == x.d.f) might not hold. (0011.vpr@75.11)); List([postcondition.violated:insufficient.permission] Postcondition of fails0 might not hold. There might be insufficient permission to access x.f. (0011.vpr@43.11); [postcondition.violated:insufficient.permission] Postcondition of fails1 might not hold. There might be insufficient permission to access x.c.f. (0011.vpr@56.11); [postcondition.violated:assertion.false] Postcondition of fails2 might not hold. Assertion x.b == (x.c.f == x.d.f) might not hold. (0011.vpr@75.11)))
../../src/test/resources/frontend-generated/all/issues/silicon/0030.vpr,2,1141,23,2,1112,1142,1170,Vector(List([application.precondition:insufficient.permission] Precondition of function C__g might not hold. There might be insufficient permission to access C__P(diz). (0030.vpr@16.13); [application.precondition:insufficient.permission] Precondition of function C__g might not hold. There might be insufficient permission to access C__P(diz). (0030.vpr@35.13)); List([application.precondition:insufficient.permission] Precondition of function C__g might not hold. There might be insufficient permission to access C__P(diz). (0030.vpr@16.13); [application.precondition:insufficient.permission] Precondition of function C__g might not hold. There might be insufficient permission to access C__P(diz). (0030.vpr@35.13)); List([application.precondition:insufficient.permission] Precondition of function C__g might not hold. There might be insufficient permission to access C__P(diz). (0030.vpr@16.13); [application.precondition:insufficient.permission] Precondition of function C__g might not hold. There might be insufficient permission to access C__P(diz). (0030.vpr@35.13)); List([application.precondition:insufficient.permission] Precondition of function C__g might not hold. There might be insufficient permission to access C__P(diz). (0030.vpr@16.13); [application.precondition:insufficient.permission] Precondition of function C__g might not hold. There might be insufficient permission to access C__P(diz). (0030.vpr@35.13)); List([application.precondition:insufficient.permission] Precondition of function C__g might not hold. There might be insufficient permission to access C__P(diz). (0030.vpr@16.13); [application.precondition:insufficient.permission] Precondition of function C__g might not hold. There might be insufficient permission to access C__P(diz). (0030.vpr@35.13)))
../../src/test/resources/frontend-generated/all/issues/silicon/0033.vpr,1,1177,20,1,1152,1178,1202,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion this.next != null might not hold. (0033.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion this.next != null might not hold. (0033.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion this.next != null might not hold. (0033.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion this.next != null might not hold. (0033.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion this.next != null might not hold. (0033.vpr@27.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0034.vpr,1,1101,19,1,1075,1109,1121,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion x > 0 might not hold. (0034.vpr@6.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x > 0 might not hold. (0034.vpr@6.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x > 0 might not hold. (0034.vpr@6.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x > 0 might not hold. (0034.vpr@6.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x > 0 might not hold. (0034.vpr@6.5)))
../../src/test/resources/frontend-generated/all/issues/silicon/0037.vpr,0,1293,15,1,1280,1284,1315,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0039a.vpr,0,1184,26,2,1148,1196,1209,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0039b.vpr,1,1207,26,2,1170,1222,1229,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion List_size(this) == 1 might not hold. (0039b.vpr@26.3)); List([assert.failed:assertion.false] Assert might fail. Assertion List_size(this) == 1 might not hold. (0039b.vpr@26.3)); List([assert.failed:assertion.false] Assert might fail. Assertion List_size(this) == 1 might not hold. (0039b.vpr@26.3)); List([assert.failed:assertion.false] Assert might fail. Assertion List_size(this) == 1 might not hold. (0039b.vpr@26.3)); List([assert.failed:assertion.false] Assert might fail. Assertion List_size(this) == 1 might not hold. (0039b.vpr@26.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0041.vpr,0,1046,106,10,898,1095,1145,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0042.vpr,2,1163,14,1,1143,1167,1179,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion list != null might not hold. (0042.vpr@20.2); [assert.failed:assertion.false] Assert might fail. Assertion list != null might not hold. (0042.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion list != null might not hold. (0042.vpr@20.2); [assert.failed:assertion.false] Assert might fail. Assertion list != null might not hold. (0042.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion list != null might not hold. (0042.vpr@20.2); [assert.failed:assertion.false] Assert might fail. Assertion list != null might not hold. (0042.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion list != null might not hold. (0042.vpr@20.2); [assert.failed:assertion.false] Assert might fail. Assertion list != null might not hold. (0042.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion list != null might not hold. (0042.vpr@20.2); [assert.failed:assertion.false] Assert might fail. Assertion list != null might not hold. (0042.vpr@27.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0043.vpr,0,1128,11,0,1118,1122,1144,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0045.vpr,0,2123,39,1,2067,2145,2157,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0046.vpr,0,1115,7,0,1105,1118,1124,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0047.vpr,2,1075,13,1,1056,1082,1088,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion z == y might not hold. (0047.vpr@8.3); [assert.failed:assertion.false] Assert might fail. Assertion z == x might not hold. (0047.vpr@15.3)); List([assert.failed:assertion.false] Assert might fail. Assertion z == y might not hold. (0047.vpr@8.3); [assert.failed:assertion.false] Assert might fail. Assertion z == x might not hold. (0047.vpr@15.3)); List([assert.failed:assertion.false] Assert might fail. Assertion z == y might not hold. (0047.vpr@8.3); [assert.failed:assertion.false] Assert might fail. Assertion z == x might not hold. (0047.vpr@15.3)); List([assert.failed:assertion.false] Assert might fail. Assertion z == y might not hold. (0047.vpr@8.3); [assert.failed:assertion.false] Assert might fail. Assertion z == x might not hold. (0047.vpr@15.3)); List([assert.failed:assertion.false] Assert might fail. Assertion z == y might not hold. (0047.vpr@8.3); [assert.failed:assertion.false] Assert might fail. Assertion z == x might not hold. (0047.vpr@15.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0053.vpr,0,1160,2,0,1157,1162,1163,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0054.vpr,1,1070,20,1,1046,1068,1096,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0054.vpr@9.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0054.vpr@9.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0054.vpr@9.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0054.vpr@9.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0054.vpr@9.5)))
../../src/test/resources/frontend-generated/all/issues/silicon/0057.vpr,1,1090,18,1,1065,1097,1108,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion o.f == old(o.f) might not hold. (0057.vpr@17.3)); List([assert.failed:assertion.false] Assert might fail. Assertion o.f == old(o.f) might not hold. (0057.vpr@17.3)); List([assert.failed:assertion.false] Assert might fail. Assertion o.f == old(o.f) might not hold. (0057.vpr@17.3)); List([assert.failed:assertion.false] Assert might fail. Assertion o.f == old(o.f) might not hold. (0057.vpr@17.3)); List([assert.failed:assertion.false] Assert might fail. Assertion o.f == old(o.f) might not hold. (0057.vpr@17.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0072.vpr,3,1588,36,2,1547,1584,1635,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access s[i].f. (0072.vpr@14.11); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access s[i].f. (0072.vpr@24.3); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access s[i].f. (0072.vpr@36.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access s[i].f. (0072.vpr@14.11); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access s[i].f. (0072.vpr@24.3); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access s[i].f. (0072.vpr@36.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access s[i].f. (0072.vpr@14.11); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access s[i].f. (0072.vpr@24.3); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access s[i].f. (0072.vpr@36.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access s[i].f. (0072.vpr@14.11); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access s[i].f. (0072.vpr@24.3); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access s[i].f. (0072.vpr@36.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access s[i].f. (0072.vpr@14.11); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access s[i].f. (0072.vpr@24.3); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access s[i].f. (0072.vpr@36.12)))
../../src/test/resources/frontend-generated/all/issues/silicon/0075_AVLTree.nokeys.vpr,0,6044,168,2,5915,5935,6283,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0083.vpr,4,1995,12,0,1978,2000,2008,Vector(List([not.wellformed:seq.index.negative] Contract might not be well-formed. Index -1 into xs might be negative. (0083.vpr@8.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index 1 into xs might exceed sequence length. (0083.vpr@12.11); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (0083.vpr@17.12); [assignment.failed:seq.index.negative] Assignment might fail. Index i into xs might be negative. (0083.vpr@38.3)); List([not.wellformed:seq.index.negative] Contract might not be well-formed. Index -1 into xs might be negative. (0083.vpr@8.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index 1 into xs might exceed sequence length. (0083.vpr@12.11); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (0083.vpr@17.12); [assignment.failed:seq.index.negative] Assignment might fail. Index i into xs might be negative. (0083.vpr@38.3)); List([not.wellformed:seq.index.negative] Contract might not be well-formed. Index -1 into xs might be negative. (0083.vpr@8.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index 1 into xs might exceed sequence length. (0083.vpr@12.11); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (0083.vpr@17.12); [assignment.failed:seq.index.negative] Assignment might fail. Index i into xs might be negative. (0083.vpr@38.3)); List([not.wellformed:seq.index.negative] Contract might not be well-formed. Index -1 into xs might be negative. (0083.vpr@8.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index 1 into xs might exceed sequence length. (0083.vpr@12.11); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (0083.vpr@17.12); [assignment.failed:seq.index.negative] Assignment might fail. Index i into xs might be negative. (0083.vpr@38.3)); List([not.wellformed:seq.index.negative] Contract might not be well-formed. Index -1 into xs might be negative. (0083.vpr@8.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index 1 into xs might exceed sequence length. (0083.vpr@12.11); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (0083.vpr@17.12); [assignment.failed:seq.index.negative] Assignment might fail. Index i into xs might be negative. (0083.vpr@38.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0084.vpr,0,1585,20,1,1559,1588,1610,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0087.vpr,0,1182,20,1,1154,1195,1198,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0088.vpr,1,1171,5,0,1167,1168,1180,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forall n: Int :: { fib(n) } n >= 1 ==> fib(n) >= fib(n + 1)) might not hold. (0088.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall n: Int :: { fib(n) } n >= 1 ==> fib(n) >= fib(n + 1)) might not hold. (0088.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall n: Int :: { fib(n) } n >= 1 ==> fib(n) >= fib(n + 1)) might not hold. (0088.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall n: Int :: { fib(n) } n >= 1 ==> fib(n) >= fib(n + 1)) might not hold. (0088.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall n: Int :: { fib(n) } n >= 1 ==> fib(n) >= fib(n + 1)) might not hold. (0088.vpr@14.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0091.vpr,1,2835,33,1,2800,2825,2880,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0091.vpr@20.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0091.vpr@20.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0091.vpr@20.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0091.vpr@20.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0091.vpr@20.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0092.vpr,0,1387,22,1,1356,1398,1408,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0094.vpr,0,1070,41,3,1037,1044,1129,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0097.vpr,0,1329,10,0,1320,1323,1344,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0110.vpr,1,3,0,0,3,3,4,Vector(List(Consistency error: "wildcard" can only be used in accessibility predicates (0110.vpr@11.8)); List(Consistency error: "wildcard" can only be used in accessibility predicates (0110.vpr@11.8)); List(Consistency error: "wildcard" can only be used in accessibility predicates (0110.vpr@11.8)); List(Consistency error: "wildcard" can only be used in accessibility predicates (0110.vpr@11.8)); List(Consistency error: "wildcard" can only be used in accessibility predicates (0110.vpr@11.8)))
../../src/test/resources/frontend-generated/all/issues/silicon/0112.vpr,1,1318,30,2,1294,1299,1361,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0112.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0112.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0112.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0112.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0112.vpr@21.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0113.vpr,0,1206,28,2,1166,1225,1227,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0114.vpr,3,1254,40,3,1200,1269,1295,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { fun1(j) } (unfolding acc(P(x; b); write) in fun1(j) > 0)) might not hold. (0114.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion fun3(5) might not hold. (0114.vpr@46.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { fun1(j) } (unfolding acc(P(x; c); write) in fun1(j) > 0)) might not hold. (0114.vpr@61.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { fun1(j) } (unfolding acc(P(x; b); write) in fun1(j) > 0)) might not hold. (0114.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion fun3(5) might not hold. (0114.vpr@46.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { fun1(j) } (unfolding acc(P(x; c); write) in fun1(j) > 0)) might not hold. (0114.vpr@61.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { fun1(j) } (unfolding acc(P(x; b); write) in fun1(j) > 0)) might not hold. (0114.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion fun3(5) might not hold. (0114.vpr@46.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { fun1(j) } (unfolding acc(P(x; c); write) in fun1(j) > 0)) might not hold. (0114.vpr@61.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { fun1(j) } (unfolding acc(P(x; b); write) in fun1(j) > 0)) might not hold. (0114.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion fun3(5) might not hold. (0114.vpr@46.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { fun1(j) } (unfolding acc(P(x; c); write) in fun1(j) > 0)) might not hold. (0114.vpr@61.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { fun1(j) } (unfolding acc(P(x; b); write) in fun1(j) > 0)) might not hold. (0114.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion fun3(5) might not hold. (0114.vpr@46.3); [assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { fun1(j) } (unfolding acc(P(x; c); write) in fun1(j) > 0)) might not hold. (0114.vpr@61.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0117.vpr,0,1103,28,2,1067,1106,1136,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0118-reduced.vpr,0,1143,36,3,1104,1135,1191,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0118.vpr,0,1227,36,2,1187,1219,1275,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0119.vpr,0,1128,27,2,1093,1132,1159,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0120a.vpr,0,1899,18,0,1875,1903,1919,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0120b.vpr,0,1234,17,1,1216,1228,1258,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0127.vpr,0,1050,16,1,1037,1040,1074,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0134.vpr,5,1158,25,2,1123,1173,1179,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0134.vpr@15.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0134.vpr@30.5); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@56.3); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@71.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0134.vpr@15.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0134.vpr@30.5); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@56.3); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@71.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0134.vpr@15.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0134.vpr@30.5); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@56.3); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@71.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0134.vpr@15.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0134.vpr@30.5); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@56.3); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@71.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0134.vpr@15.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0134.vpr@30.5); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@56.3); [assert.failed:assertion.false] Assert might fail. Assertion t1 != t2 might not hold. (0134.vpr@71.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0135.vpr,3,1191,38,3,1136,1217,1220,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion unknown(x) >= none might not hold. (0135.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) >= none might not hold. (0135.vpr@23.3); [fold.failed:insufficient.permission] Folding token(diz) might fail. There might be insufficient permission to access diz.unknown_y. (0135.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion unknown(x) >= none might not hold. (0135.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) >= none might not hold. (0135.vpr@23.3); [fold.failed:insufficient.permission] Folding token(diz) might fail. There might be insufficient permission to access diz.unknown_y. (0135.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion unknown(x) >= none might not hold. (0135.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) >= none might not hold. (0135.vpr@23.3); [fold.failed:insufficient.permission] Folding token(diz) might fail. There might be insufficient permission to access diz.unknown_y. (0135.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion unknown(x) >= none might not hold. (0135.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) >= none might not hold. (0135.vpr@23.3); [fold.failed:insufficient.permission] Folding token(diz) might fail. There might be insufficient permission to access diz.unknown_y. (0135.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion unknown(x) >= none might not hold. (0135.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01(x) >= none might not hold. (0135.vpr@23.3); [fold.failed:insufficient.permission] Folding token(diz) might fail. There might be insufficient permission to access diz.unknown_y. (0135.vpr@37.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0138.vpr,2,1158,25,2,1133,1148,1193,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0138.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0138.vpr@48.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0138.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0138.vpr@48.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0138.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0138.vpr@48.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0138.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0138.vpr@48.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0138.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0138.vpr@48.5)))
../../src/test/resources/frontend-generated/all/issues/silicon/0144.vpr,3,1137,15,1,1116,1147,1149,Vector(List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0144.vpr@7.11); [call.failed:division.by.zero] Method call might fail. Divisor 1 / x might be zero. (0144.vpr@17.3); [call.failed:division.by.zero] Method call might fail. Divisor x might be zero. (0144.vpr@23.3)); List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0144.vpr@7.11); [call.failed:division.by.zero] Method call might fail. Divisor 1 / x might be zero. (0144.vpr@17.3); [call.failed:division.by.zero] Method call might fail. Divisor x might be zero. (0144.vpr@23.3)); List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0144.vpr@7.11); [call.failed:division.by.zero] Method call might fail. Divisor 1 / x might be zero. (0144.vpr@17.3); [call.failed:division.by.zero] Method call might fail. Divisor x might be zero. (0144.vpr@23.3)); List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0144.vpr@7.11); [call.failed:division.by.zero] Method call might fail. Divisor 1 / x might be zero. (0144.vpr@17.3); [call.failed:division.by.zero] Method call might fail. Divisor x might be zero. (0144.vpr@23.3)); List([not.wellformed:division.by.zero] Contract might not be well-formed. Divisor x might be zero. (0144.vpr@7.11); [call.failed:division.by.zero] Method call might fail. Divisor 1 / x might be zero. (0144.vpr@17.3); [call.failed:division.by.zero] Method call might fail. Divisor x might be zero. (0144.vpr@23.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0146.vpr,0,1316,13,0,1303,1311,1335,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0152.vpr,2,1072,11,1,1064,1065,1089,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0152.vpr@10.11); [call.failed:insufficient.permission] Method call might fail. There might be insufficient permission to access this.x. (0152.vpr@20.3)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0152.vpr@10.11); [call.failed:insufficient.permission] Method call might fail. There might be insufficient permission to access this.x. (0152.vpr@20.3)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0152.vpr@10.11); [call.failed:insufficient.permission] Method call might fail. There might be insufficient permission to access this.x. (0152.vpr@20.3)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0152.vpr@10.11); [call.failed:insufficient.permission] Method call might fail. There might be insufficient permission to access this.x. (0152.vpr@20.3)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0152.vpr@10.11); [call.failed:insufficient.permission] Method call might fail. There might be insufficient permission to access this.x. (0152.vpr@20.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0153.vpr,2,1135,21,1,1113,1129,1165,Vector(List([application.precondition:assertion.false] Precondition of function fun might not hold. Assertion this.f != null might not hold. (0153.vpr@20.12); [application.precondition:assertion.false] Precondition of function fun might not hold. Assertion this.f != null might not hold. (0153.vpr@30.12)); List([application.precondition:assertion.false] Precondition of function fun might not hold. Assertion this.f != null might not hold. (0153.vpr@20.12); [application.precondition:assertion.false] Precondition of function fun might not hold. Assertion this.f != null might not hold. (0153.vpr@30.12)); List([application.precondition:assertion.false] Precondition of function fun might not hold. Assertion this.f != null might not hold. (0153.vpr@20.12); [application.precondition:assertion.false] Precondition of function fun might not hold. Assertion this.f != null might not hold. (0153.vpr@30.12)); List([application.precondition:assertion.false] Precondition of function fun might not hold. Assertion this.f != null might not hold. (0153.vpr@20.12); [application.precondition:assertion.false] Precondition of function fun might not hold. Assertion this.f != null might not hold. (0153.vpr@30.12)); List([application.precondition:assertion.false] Precondition of function fun might not hold. Assertion this.f != null might not hold. (0153.vpr@20.12); [application.precondition:assertion.false] Precondition of function fun might not hold. Assertion this.f != null might not hold. (0153.vpr@30.12)))
../../src/test/resources/frontend-generated/all/issues/silicon/0154-1.vpr,9,1378,28,2,1353,1364,1418,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@34.3); [assert.failed:assertion.false] Assert might fail. Assertion this.Nodenext$ != this.Nodenext$.Nodenext$ might not hold. (0154-1.vpr@48.3); [assert.failed:assertion.false] Assert might fail. Assertion this != (unfolding acc(Nodevalid$(this); write) in this.Nodenext$) might not hold. (0154-1.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@72.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@88.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@104.3); [assert.failed:assertion.false] Assert might fail. Assertion this != (unfolding acc(Nodep$(this); write) in this.Nodenext$) might not hold. (0154-1.vpr@116.3); [assert.failed:assertion.false] Assert might fail. Assertion this != x might not hold. (0154-1.vpr@130.3); [postcondition.violated:assertion.false] Postcondition of NodetestNestingUnfoldingPostcondition$ might not hold. Assertion this != NodegetNext$(this) might not hold. (0154-1.vpr@137.11)); List([assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@34.3); [assert.failed:assertion.false] Assert might fail. Assertion this.Nodenext$ != this.Nodenext$.Nodenext$ might not hold. (0154-1.vpr@48.3); [assert.failed:assertion.false] Assert might fail. Assertion this != (unfolding acc(Nodevalid$(this); write) in this.Nodenext$) might not hold. (0154-1.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@72.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@88.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@104.3); [assert.failed:assertion.false] Assert might fail. Assertion this != (unfolding acc(Nodep$(this); write) in this.Nodenext$) might not hold. (0154-1.vpr@116.3); [assert.failed:assertion.false] Assert might fail. Assertion this != x might not hold. (0154-1.vpr@130.3); [postcondition.violated:assertion.false] Postcondition of NodetestNestingUnfoldingPostcondition$ might not hold. Assertion this != NodegetNext$(this) might not hold. (0154-1.vpr@137.11)); List([assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@34.3); [assert.failed:assertion.false] Assert might fail. Assertion this.Nodenext$ != this.Nodenext$.Nodenext$ might not hold. (0154-1.vpr@48.3); [assert.failed:assertion.false] Assert might fail. Assertion this != (unfolding acc(Nodevalid$(this); write) in this.Nodenext$) might not hold. (0154-1.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@72.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@88.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@104.3); [assert.failed:assertion.false] Assert might fail. Assertion this != (unfolding acc(Nodep$(this); write) in this.Nodenext$) might not hold. (0154-1.vpr@116.3); [assert.failed:assertion.false] Assert might fail. Assertion this != x might not hold. (0154-1.vpr@130.3); [postcondition.violated:assertion.false] Postcondition of NodetestNestingUnfoldingPostcondition$ might not hold. Assertion this != NodegetNext$(this) might not hold. (0154-1.vpr@137.11)); List([assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@34.3); [assert.failed:assertion.false] Assert might fail. Assertion this.Nodenext$ != this.Nodenext$.Nodenext$ might not hold. (0154-1.vpr@48.3); [assert.failed:assertion.false] Assert might fail. Assertion this != (unfolding acc(Nodevalid$(this); write) in this.Nodenext$) might not hold. (0154-1.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@72.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@88.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@104.3); [assert.failed:assertion.false] Assert might fail. Assertion this != (unfolding acc(Nodep$(this); write) in this.Nodenext$) might not hold. (0154-1.vpr@116.3); [assert.failed:assertion.false] Assert might fail. Assertion this != x might not hold. (0154-1.vpr@130.3); [postcondition.violated:assertion.false] Postcondition of NodetestNestingUnfoldingPostcondition$ might not hold. Assertion this != NodegetNext$(this) might not hold. (0154-1.vpr@137.11)); List([assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@34.3); [assert.failed:assertion.false] Assert might fail. Assertion this.Nodenext$ != this.Nodenext$.Nodenext$ might not hold. (0154-1.vpr@48.3); [assert.failed:assertion.false] Assert might fail. Assertion this != (unfolding acc(Nodevalid$(this); write) in this.Nodenext$) might not hold. (0154-1.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@72.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@88.3); [assert.failed:assertion.false] Assert might fail. Assertion this != this.Nodenext$ might not hold. (0154-1.vpr@104.3); [assert.failed:assertion.false] Assert might fail. Assertion this != (unfolding acc(Nodep$(this); write) in this.Nodenext$) might not hold. (0154-1.vpr@116.3); [assert.failed:assertion.false] Assert might fail. Assertion this != x might not hold. (0154-1.vpr@130.3); [postcondition.violated:assertion.false] Postcondition of NodetestNestingUnfoldingPostcondition$ might not hold. Assertion this != NodegetNext$(this) might not hold. (0154-1.vpr@137.11)))
../../src/test/resources/frontend-generated/all/issues/silicon/0154.vpr,1,1180,8,0,1170,1182,1190,Vector(List([application.precondition:insufficient.permission] Precondition of function Nodet$ might not hold. There might be insufficient permission to access Nodevalid$(this). (0154.vpr@21.45)); List([application.precondition:insufficient.permission] Precondition of function Nodet$ might not hold. There might be insufficient permission to access Nodevalid$(this). (0154.vpr@21.45)); List([application.precondition:insufficient.permission] Precondition of function Nodet$ might not hold. There might be insufficient permission to access Nodevalid$(this). (0154.vpr@21.45)); List([application.precondition:insufficient.permission] Precondition of function Nodet$ might not hold. There might be insufficient permission to access Nodevalid$(this). (0154.vpr@21.45)); List([application.precondition:insufficient.permission] Precondition of function Nodet$ might not hold. There might be insufficient permission to access Nodevalid$(this). (0154.vpr@21.45)))
../../src/test/resources/frontend-generated/all/issues/silicon/0155.vpr,0,1166,42,3,1107,1190,1203,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0157-1.vpr,3,1112,2,0,1110,1111,1115,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157-1.vpr@45.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157-1.vpr@53.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access this.Testtk$.par$Testfoo$this$_2. (0157-1.vpr@65.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157-1.vpr@45.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157-1.vpr@53.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access this.Testtk$.par$Testfoo$this$_2. (0157-1.vpr@65.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157-1.vpr@45.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157-1.vpr@53.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access this.Testtk$.par$Testfoo$this$_2. (0157-1.vpr@65.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157-1.vpr@45.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157-1.vpr@53.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access this.Testtk$.par$Testfoo$this$_2. (0157-1.vpr@65.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157-1.vpr@45.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157-1.vpr@53.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access this.Testtk$.par$Testfoo$this$_2. (0157-1.vpr@65.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0157.vpr,8,1130,26,2,1095,1140,1157,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@62.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@70.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@62.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@70.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@62.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@70.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@62.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@70.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@62.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0157.vpr@70.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0159.vpr,2,1113,22,1,1095,1099,1145,Vector(List([exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0159.vpr@10.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0159.vpr@18.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0159.vpr@10.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0159.vpr@18.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0159.vpr@10.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0159.vpr@18.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0159.vpr@10.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0159.vpr@18.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0159.vpr@10.3); [exhale.failed:assertion.false] Exhale might fail. Assertion false might not hold. (0159.vpr@18.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0161.vpr,10,1141,45,3,1078,1161,1184,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@8.12); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@14.1); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@26.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@33.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@38.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@46.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@53.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@61.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@66.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@71.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@8.12); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@14.1); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@26.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@33.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@38.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@46.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@53.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@61.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@66.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@71.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@8.12); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@14.1); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@26.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@33.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@38.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@46.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@53.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@61.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@66.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@71.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@8.12); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@14.1); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@26.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@33.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@38.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@46.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@53.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@61.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@66.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@71.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@8.12); [function.not.wellformed:insufficient.permission] Function might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@14.1); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@26.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@33.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@38.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@46.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@53.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@61.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@66.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0161.vpr@71.11)))
../../src/test/resources/frontend-generated/all/issues/silicon/0162.vpr,2,1133,26,2,1096,1148,1155,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0162.vpr@12.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0162.vpr@23.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0162.vpr@12.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0162.vpr@23.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0162.vpr@12.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0162.vpr@23.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0162.vpr@12.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0162.vpr@23.11)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0162.vpr@12.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (0162.vpr@23.11)))
../../src/test/resources/frontend-generated/all/issues/silicon/0163.vpr,2,1127,27,2,1096,1125,1162,Vector(List([postcondition.violated:assertion.false] Postcondition of onlyWorksWithInhale2 might not hold. Assertion result > 17 might not hold. (0163.vpr@27.13); [application.precondition:assertion.false] Precondition of function onlyWorksWithInhale2 might not hold. Assertion i2 > 17 might not hold. (0163.vpr@35.5)); List([postcondition.violated:assertion.false] Postcondition of onlyWorksWithInhale2 might not hold. Assertion result > 17 might not hold. (0163.vpr@27.13); [application.precondition:assertion.false] Precondition of function onlyWorksWithInhale2 might not hold. Assertion i2 > 17 might not hold. (0163.vpr@35.5)); List([postcondition.violated:assertion.false] Postcondition of onlyWorksWithInhale2 might not hold. Assertion result > 17 might not hold. (0163.vpr@27.13); [application.precondition:assertion.false] Precondition of function onlyWorksWithInhale2 might not hold. Assertion i2 > 17 might not hold. (0163.vpr@35.5)); List([postcondition.violated:assertion.false] Postcondition of onlyWorksWithInhale2 might not hold. Assertion result > 17 might not hold. (0163.vpr@27.13); [application.precondition:assertion.false] Precondition of function onlyWorksWithInhale2 might not hold. Assertion i2 > 17 might not hold. (0163.vpr@35.5)); List([postcondition.violated:assertion.false] Postcondition of onlyWorksWithInhale2 might not hold. Assertion result > 17 might not hold. (0163.vpr@27.13); [application.precondition:assertion.false] Precondition of function onlyWorksWithInhale2 might not hold. Assertion i2 > 17 might not hold. (0163.vpr@35.5)))
../../src/test/resources/frontend-generated/all/issues/silicon/0164.vpr,2,1085,19,1,1060,1089,1108,Vector(List([invariant.not.established:assertion.false] Loop invariant [true; false] might not hold on entry. Assertion false might not hold. (0164.vpr@10.15); [invariant.not.established:assertion.false] Loop invariant false might not hold on entry. Assertion false might not hold. (0164.vpr@22.15)); List([invariant.not.established:assertion.false] Loop invariant [true; false] might not hold on entry. Assertion false might not hold. (0164.vpr@10.15); [invariant.not.established:assertion.false] Loop invariant false might not hold on entry. Assertion false might not hold. (0164.vpr@22.15)); List([invariant.not.established:assertion.false] Loop invariant [true; false] might not hold on entry. Assertion false might not hold. (0164.vpr@10.15); [invariant.not.established:assertion.false] Loop invariant false might not hold on entry. Assertion false might not hold. (0164.vpr@22.15)); List([invariant.not.established:assertion.false] Loop invariant [true; false] might not hold on entry. Assertion false might not hold. (0164.vpr@10.15); [invariant.not.established:assertion.false] Loop invariant false might not hold on entry. Assertion false might not hold. (0164.vpr@22.15)); List([invariant.not.established:assertion.false] Loop invariant [true; false] might not hold on entry. Assertion false might not hold. (0164.vpr@10.15); [invariant.not.established:assertion.false] Loop invariant false might not hold on entry. Assertion false might not hold. (0164.vpr@22.15)))
../../src/test/resources/frontend-generated/all/issues/silicon/0165.vpr,1,1115,15,1,1093,1125,1127,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (0165.vpr@14.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (0165.vpr@14.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (0165.vpr@14.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (0165.vpr@14.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (0165.vpr@14.15)))
../../src/test/resources/frontend-generated/all/issues/silicon/0166.vpr,0,1285,7,0,1277,1284,1296,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0167.vpr,0,1103,12,1,1090,1101,1120,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0171.vpr,0,1336,56,4,1293,1300,1417,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0172.vpr,1,1408,27,1,1385,1394,1447,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0172.vpr@40.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0172.vpr@40.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0172.vpr@40.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0172.vpr@40.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0172.vpr@40.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0183.vpr,4,1227,31,2,1184,1243,1255,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access self.v. (0183.vpr@20.12); [assert.failed:assertion.false] Assert might fail. Assertion none < rd * rd might not hold. (0183.vpr@28.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access self.v. (0183.vpr@38.3); [assert.failed:assertion.false] Assert might fail. Assertion none < rd * rd might not hold. (0183.vpr@46.3)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access self.v. (0183.vpr@20.12); [assert.failed:assertion.false] Assert might fail. Assertion none < rd * rd might not hold. (0183.vpr@28.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access self.v. (0183.vpr@38.3); [assert.failed:assertion.false] Assert might fail. Assertion none < rd * rd might not hold. (0183.vpr@46.3)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access self.v. (0183.vpr@20.12); [assert.failed:assertion.false] Assert might fail. Assertion none < rd * rd might not hold. (0183.vpr@28.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access self.v. (0183.vpr@38.3); [assert.failed:assertion.false] Assert might fail. Assertion none < rd * rd might not hold. (0183.vpr@46.3)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access self.v. (0183.vpr@20.12); [assert.failed:assertion.false] Assert might fail. Assertion none < rd * rd might not hold. (0183.vpr@28.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access self.v. (0183.vpr@38.3); [assert.failed:assertion.false] Assert might fail. Assertion none < rd * rd might not hold. (0183.vpr@46.3)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access self.v. (0183.vpr@20.12); [assert.failed:assertion.false] Assert might fail. Assertion none < rd * rd might not hold. (0183.vpr@28.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access self.v. (0183.vpr@38.3); [assert.failed:assertion.false] Assert might fail. Assertion none < rd * rd might not hold. (0183.vpr@46.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0186.vpr,1,1151,36,3,1121,1130,1202,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access l.next.next. (0186.vpr@21.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access l.next.next. (0186.vpr@21.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access l.next.next. (0186.vpr@21.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access l.next.next. (0186.vpr@21.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access l.next.next. (0186.vpr@21.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0195.vpr,0,1124,7,0,1115,1125,1134,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0197.vpr,0,1123,30,2,1081,1142,1147,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0199.vpr,0,1198,25,2,1166,1201,1229,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0200.vpr,1,1081,19,1,1065,1070,1108,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0200.vpr@15.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0200.vpr@15.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0200.vpr@15.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0200.vpr@15.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0200.vpr@15.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0203.vpr,0,1135,24,2,1116,1120,1170,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0207.vpr,0,1565,28,1,1539,1551,1605,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0209.vpr,0,1167,20,1,1140,1172,1189,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0210.vpr,1,1294,9,0,1281,1300,1303,Vector(List([postcondition.violated:insufficient.permission] Postcondition of length_iter might not hold. There might be insufficient permission to access valid__List(list$1). (0210.vpr@17.11)); List([postcondition.violated:insufficient.permission] Postcondition of length_iter might not hold. There might be insufficient permission to access valid__List(list$1). (0210.vpr@17.11)); List([postcondition.violated:insufficient.permission] Postcondition of length_iter might not hold. There might be insufficient permission to access valid__List(list$1). (0210.vpr@17.11)); List([postcondition.violated:insufficient.permission] Postcondition of length_iter might not hold. There might be insufficient permission to access valid__List(list$1). (0210.vpr@17.11)); List([postcondition.violated:insufficient.permission] Postcondition of length_iter might not hold. There might be insufficient permission to access valid__List(list$1). (0210.vpr@17.11)))
../../src/test/resources/frontend-generated/all/issues/silicon/0213.vpr,0,1219,18,1,1204,1209,1245,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0215.vpr,1,1,0,0,1,1,2,Vector(List(identifier temp$1 not defined. (0215.vpr@9.19)); List(identifier temp$1 not defined. (0215.vpr@9.19)); List(identifier temp$1 not defined. (0215.vpr@9.19)); List(identifier temp$1 not defined. (0215.vpr@9.19)); List(identifier temp$1 not defined. (0215.vpr@9.19)))
../../src/test/resources/frontend-generated/all/issues/silicon/0216.vpr,0,1488,26,1,1453,1494,1517,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0217.vpr,0,1142,21,1,1114,1146,1167,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0219.vpr,1,1129,12,1,1118,1123,1147,Vector(List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (0219.vpr@14.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (0219.vpr@14.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (0219.vpr@14.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (0219.vpr@14.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (0219.vpr@14.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0221.vpr,2,1185,30,2,1144,1195,1216,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access P(x). (0221.vpr@29.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access P(y). (0221.vpr@39.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access P(x). (0221.vpr@29.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access P(y). (0221.vpr@39.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access P(x). (0221.vpr@29.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access P(y). (0221.vpr@39.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access P(x). (0221.vpr@29.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access P(y). (0221.vpr@39.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access P(x). (0221.vpr@29.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access P(y). (0221.vpr@39.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0222.vpr,0,1169,24,2,1150,1154,1203,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0224.vpr,0,1890,45,2,1832,1895,1943,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0225.vpr,0,1159,6,0,1151,1160,1168,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0227.vpr,1,1122,22,1,1092,1130,1146,Vector(List([exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r$_4: Ref [mustSendBounded$(r$_4)] :: false) might not hold. (0227.vpr@31.5)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r$_4: Ref [mustSendBounded$(r$_4)] :: false) might not hold. (0227.vpr@31.5)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r$_4: Ref [mustSendBounded$(r$_4)] :: false) might not hold. (0227.vpr@31.5)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r$_4: Ref [mustSendBounded$(r$_4)] :: false) might not hold. (0227.vpr@31.5)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r$_4: Ref [mustSendBounded$(r$_4)] :: false) might not hold. (0227.vpr@31.5)))
../../src/test/resources/frontend-generated/all/issues/silicon/0228a.vpr,0,1775,36,2,1730,1779,1818,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0228b.vpr,0,1664,89,5,1542,1697,1753,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0228c.vpr,0,1583,49,3,1547,1551,1653,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0229.vpr,0,1199,25,2,1167,1203,1228,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0231.vpr,2,1146,16,1,1127,1144,1167,Vector(List([exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r: Ref [P(r)] :: false) might not hold. (0231.vpr@18.3); [exhale.failed:assertion.false] Exhale might fail. Assertion perm(P(this)) >= write might not hold. (0231.vpr@36.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r: Ref [P(r)] :: false) might not hold. (0231.vpr@18.3); [exhale.failed:assertion.false] Exhale might fail. Assertion perm(P(this)) >= write might not hold. (0231.vpr@36.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r: Ref [P(r)] :: false) might not hold. (0231.vpr@18.3); [exhale.failed:assertion.false] Exhale might fail. Assertion perm(P(this)) >= write might not hold. (0231.vpr@36.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r: Ref [P(r)] :: false) might not hold. (0231.vpr@18.3); [exhale.failed:assertion.false] Exhale might fail. Assertion perm(P(this)) >= write might not hold. (0231.vpr@36.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r: Ref [P(r)] :: false) might not hold. (0231.vpr@18.3); [exhale.failed:assertion.false] Exhale might fail. Assertion perm(P(this)) >= write might not hold. (0231.vpr@36.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0232.vpr,1,1199,16,1,1181,1197,1220,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(e). (0232.vpr@15.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(e). (0232.vpr@15.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(e). (0232.vpr@15.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(e). (0232.vpr@15.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(e). (0232.vpr@15.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0236.vpr,0,1482,77,5,1375,1517,1555,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0237.vpr,2,1527,49,3,1470,1521,1591,Vector(List([postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion (forall p: Int :: { loc(arr; p) } true ==> loc(arr; p) != null) might not hold. (0237.vpr@20.11); [assert.failed:assertion.false] Assert might fail. Assertion arr != null might not hold. (0237.vpr@35.2)); List([postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion (forall p: Int :: { loc(arr; p) } true ==> loc(arr; p) != null) might not hold. (0237.vpr@20.11); [assert.failed:assertion.false] Assert might fail. Assertion arr != null might not hold. (0237.vpr@35.2)); List([postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion (forall p: Int :: { loc(arr; p) } true ==> loc(arr; p) != null) might not hold. (0237.vpr@20.11); [assert.failed:assertion.false] Assert might fail. Assertion arr != null might not hold. (0237.vpr@35.2)); List([postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion (forall p: Int :: { loc(arr; p) } true ==> loc(arr; p) != null) might not hold. (0237.vpr@20.11); [assert.failed:assertion.false] Assert might fail. Assertion arr != null might not hold. (0237.vpr@35.2)); List([postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion (forall p: Int :: { loc(arr; p) } true ==> loc(arr; p) != null) might not hold. (0237.vpr@20.11); [assert.failed:assertion.false] Assert might fail. Assertion arr != null might not hold. (0237.vpr@35.2)))
../../src/test/resources/frontend-generated/all/issues/silicon/0240.vpr,2,1828,2,0,1824,1829,1831,Vector(List([application.precondition:insufficient.permission] Precondition of function foo might not hold. There might be insufficient permission to access list(this). (0240.vpr@58.43); [application.precondition:insufficient.permission] Precondition of function foo_qp might not hold. There might be insufficient permission to access x.data. (0240.vpr@102.44)); List([application.precondition:insufficient.permission] Precondition of function foo might not hold. There might be insufficient permission to access list(this). (0240.vpr@58.43); [application.precondition:insufficient.permission] Precondition of function foo_qp might not hold. There might be insufficient permission to access x.data. (0240.vpr@102.44)); List([application.precondition:insufficient.permission] Precondition of function foo might not hold. There might be insufficient permission to access list(this). (0240.vpr@58.43); [application.precondition:insufficient.permission] Precondition of function foo_qp might not hold. There might be insufficient permission to access x.data. (0240.vpr@102.44)); List([application.precondition:insufficient.permission] Precondition of function foo might not hold. There might be insufficient permission to access list(this). (0240.vpr@58.43); [application.precondition:insufficient.permission] Precondition of function foo_qp might not hold. There might be insufficient permission to access x.data. (0240.vpr@102.44)); List([application.precondition:insufficient.permission] Precondition of function foo might not hold. There might be insufficient permission to access list(this). (0240.vpr@58.43); [application.precondition:insufficient.permission] Precondition of function foo_qp might not hold. There might be insufficient permission to access x.data. (0240.vpr@102.44)))
../../src/test/resources/frontend-generated/all/issues/silicon/0241.vpr,0,1117,24,2,1091,1110,1150,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0242a.vpr,1,1463,89,6,1361,1450,1578,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0242a.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0242a.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0242a.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0242a.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0242a.vpr@21.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0242b.vpr,1,1815,49,2,1761,1804,1880,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0242b.vpr@50.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0242b.vpr@50.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0242b.vpr@50.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0242b.vpr@50.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0242b.vpr@50.5)))
../../src/test/resources/frontend-generated/all/issues/silicon/0249.vpr,0,1083,21,1,1063,1074,1114,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0252.vpr,2,1610,79,4,1507,1623,1700,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access loc(arr2; 0).val. (0252.vpr@9.3); [unfold.failed:insufficient.permission] Unfolding P(loc(arr2; 0)) might fail. There might be insufficient permission to access P(loc(arr2; 0)). (0252.vpr@19.4)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access loc(arr2; 0).val. (0252.vpr@9.3); [unfold.failed:insufficient.permission] Unfolding P(loc(arr2; 0)) might fail. There might be insufficient permission to access P(loc(arr2; 0)). (0252.vpr@19.4)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access loc(arr2; 0).val. (0252.vpr@9.3); [unfold.failed:insufficient.permission] Unfolding P(loc(arr2; 0)) might fail. There might be insufficient permission to access P(loc(arr2; 0)). (0252.vpr@19.4)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access loc(arr2; 0).val. (0252.vpr@9.3); [unfold.failed:insufficient.permission] Unfolding P(loc(arr2; 0)) might fail. There might be insufficient permission to access P(loc(arr2; 0)). (0252.vpr@19.4)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access loc(arr2; 0).val. (0252.vpr@9.3); [unfold.failed:insufficient.permission] Unfolding P(loc(arr2; 0)) might fail. There might be insufficient permission to access P(loc(arr2; 0)). (0252.vpr@19.4)))
../../src/test/resources/frontend-generated/all/issues/silicon/0263.vpr,0,1109,30,2,1085,1091,1152,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0264.vpr,0,1201,22,1,1180,1192,1232,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0267a.vpr,2,1197,28,2,1158,1213,1221,Vector(List([postcondition.violated:assertion.false] Postcondition of ANOTHER_GLOBAL_VAR might not hold. Assertion issubtype(typeof(result); bool()) might not hold. (0267a.vpr@15.11); [postcondition.violated:assertion.false] Postcondition of SO_MANY_GLOBAL_VARS might not hold. Assertion issubtype(typeof(result); int()) might not hold. (0267a.vpr@23.11)); List([postcondition.violated:assertion.false] Postcondition of ANOTHER_GLOBAL_VAR might not hold. Assertion issubtype(typeof(result); bool()) might not hold. (0267a.vpr@15.11); [postcondition.violated:assertion.false] Postcondition of SO_MANY_GLOBAL_VARS might not hold. Assertion issubtype(typeof(result); int()) might not hold. (0267a.vpr@23.11)); List([postcondition.violated:assertion.false] Postcondition of ANOTHER_GLOBAL_VAR might not hold. Assertion issubtype(typeof(result); bool()) might not hold. (0267a.vpr@15.11); [postcondition.violated:assertion.false] Postcondition of SO_MANY_GLOBAL_VARS might not hold. Assertion issubtype(typeof(result); int()) might not hold. (0267a.vpr@23.11)); List([postcondition.violated:assertion.false] Postcondition of ANOTHER_GLOBAL_VAR might not hold. Assertion issubtype(typeof(result); bool()) might not hold. (0267a.vpr@15.11); [postcondition.violated:assertion.false] Postcondition of SO_MANY_GLOBAL_VARS might not hold. Assertion issubtype(typeof(result); int()) might not hold. (0267a.vpr@23.11)); List([postcondition.violated:assertion.false] Postcondition of ANOTHER_GLOBAL_VAR might not hold. Assertion issubtype(typeof(result); bool()) might not hold. (0267a.vpr@15.11); [postcondition.violated:assertion.false] Postcondition of SO_MANY_GLOBAL_VARS might not hold. Assertion issubtype(typeof(result); int()) might not hold. (0267a.vpr@23.11)))
../../src/test/resources/frontend-generated/all/issues/silicon/0267b.vpr,0,1666,124,7,1490,1750,1759,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0269.vpr,2,1118,2,0,1116,1118,1121,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access out.Container_value. (0269.vpr@39.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (0269.vpr@94.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access out.Container_value. (0269.vpr@39.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (0269.vpr@94.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access out.Container_value. (0269.vpr@39.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (0269.vpr@94.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access out.Container_value. (0269.vpr@39.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (0269.vpr@94.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access out.Container_value. (0269.vpr@39.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (0269.vpr@94.5)))
../../src/test/resources/frontend-generated/all/issues/silicon/0270.vpr,0,1470,37,2,1427,1466,1519,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0276.vpr,1,1137,9,0,1124,1140,1147,Vector(List([application.precondition:assertion.false] Precondition of function m might not hold. Assertion (forall b: Int :: f((3 > 2 ? 3 : 2); b)) might not hold. (0276.vpr@12.17)); List([application.precondition:assertion.false] Precondition of function m might not hold. Assertion (forall b: Int :: f((3 > 2 ? 3 : 2); b)) might not hold. (0276.vpr@12.17)); List([application.precondition:assertion.false] Precondition of function m might not hold. Assertion (forall b: Int :: f((3 > 2 ? 3 : 2); b)) might not hold. (0276.vpr@12.17)); List([application.precondition:assertion.false] Precondition of function m might not hold. Assertion (forall b: Int :: f((3 > 2 ? 3 : 2); b)) might not hold. (0276.vpr@12.17)); List([application.precondition:assertion.false] Precondition of function m might not hold. Assertion (forall b: Int :: f((3 > 2 ? 3 : 2); b)) might not hold. (0276.vpr@12.17)))
../../src/test/resources/frontend-generated/all/issues/silicon/0277.vpr,0,1083,18,1,1063,1080,1108,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0279.vpr,0,1447,37,2,1403,1444,1494,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0281.vpr,0,1607,79,4,1547,1556,1719,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0282.vpr,2,1636,97,5,1552,1583,1773,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access at2(i; xs).f. (0282.vpr@34.3); [assert.failed:assertion.false] Assert might fail. Assertion at1(xs; k) != null might not hold. (0282.vpr@56.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access at2(i; xs).f. (0282.vpr@34.3); [assert.failed:assertion.false] Assert might fail. Assertion at1(xs; k) != null might not hold. (0282.vpr@56.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access at2(i; xs).f. (0282.vpr@34.3); [assert.failed:assertion.false] Assert might fail. Assertion at1(xs; k) != null might not hold. (0282.vpr@56.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access at2(i; xs).f. (0282.vpr@34.3); [assert.failed:assertion.false] Assert might fail. Assertion at1(xs; k) != null might not hold. (0282.vpr@56.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access at2(i; xs).f. (0282.vpr@34.3); [assert.failed:assertion.false] Assert might fail. Assertion at1(xs; k) != null might not hold. (0282.vpr@56.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0283.vpr,1,1268,27,2,1229,1285,1290,Vector(List([not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (0283.vpr@6.12)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (0283.vpr@6.12)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (0283.vpr@6.12)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (0283.vpr@6.12)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (0283.vpr@6.12)))
../../src/test/resources/frontend-generated/all/issues/silicon/0285.vpr,0,1768,49,2,1723,1746,1837,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0286.vpr,1,1460,31,2,1415,1480,1485,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion lsegelems(l1; old(l2.next)) == old(lsegelems(l1; l2)) ++ Seq(old(l2.val)) might not hold. (0286.vpr@58.1)); List([assert.failed:assertion.false] Assert might fail. Assertion lsegelems(l1; old(l2.next)) == old(lsegelems(l1; l2)) ++ Seq(old(l2.val)) might not hold. (0286.vpr@58.1)); List([assert.failed:assertion.false] Assert might fail. Assertion lsegelems(l1; old(l2.next)) == old(lsegelems(l1; l2)) ++ Seq(old(l2.val)) might not hold. (0286.vpr@58.1)); List([assert.failed:assertion.false] Assert might fail. Assertion lsegelems(l1; old(l2.next)) == old(lsegelems(l1; l2)) ++ Seq(old(l2.val)) might not hold. (0286.vpr@58.1)); List([assert.failed:assertion.false] Assert might fail. Assertion lsegelems(l1; old(l2.next)) == old(lsegelems(l1; l2)) ++ Seq(old(l2.val)) might not hold. (0286.vpr@58.1)))
../../src/test/resources/frontend-generated/all/issues/silicon/0287.vpr,0,1445,52,3,1375,1460,1501,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0288.vpr,0,1566,90,5,1460,1557,1682,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0290.vpr,2,1097,38,3,1066,1074,1151,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0290.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0290.vpr@53.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0290.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0290.vpr@53.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0290.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0290.vpr@53.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0290.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0290.vpr@53.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0290.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0290.vpr@53.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0291.vpr,3,2,0,0,2,2,3,Vector(List(Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@9.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@9.25); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@11.11)); List(Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@9.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@9.25); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@11.11)); List(Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@9.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@9.25); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@11.11)); List(Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@9.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@9.25); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@11.11)); List(Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@9.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@9.25); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0291.vpr@11.11)))
../../src/test/resources/frontend-generated/all/issues/silicon/0292.vpr,0,1538,68,4,1471,1512,1632,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0293.vpr,0,1273,30,2,1231,1287,1301,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0294.vpr,0,1540,69,4,1490,1492,1638,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0297.vpr,0,1196,46,3,1133,1214,1243,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0299.vpr,1,1905,63,3,1844,1879,1992,Vector(List([postcondition.violated:assertion.false] Postcondition of quicksort_rec might not hold. Assertion (forall i: Int; j: Int :: { loc(a; i).val;loc(a; j).val } lo <= i && (i <= j && j <= hi) ==> loc(a; i).val <= loc(a; j).val) might not hold. (0299.vpr@34.11)); List([postcondition.violated:assertion.false] Postcondition of quicksort_rec might not hold. Assertion (forall i: Int; j: Int :: { loc(a; i).val;loc(a; j).val } lo <= i && (i <= j && j <= hi) ==> loc(a; i).val <= loc(a; j).val) might not hold. (0299.vpr@34.11)); List([postcondition.violated:assertion.false] Postcondition of quicksort_rec might not hold. Assertion (forall i: Int; j: Int :: { loc(a; i).val;loc(a; j).val } lo <= i && (i <= j && j <= hi) ==> loc(a; i).val <= loc(a; j).val) might not hold. (0299.vpr@34.11)); List([postcondition.violated:assertion.false] Postcondition of quicksort_rec might not hold. Assertion (forall i: Int; j: Int :: { loc(a; i).val;loc(a; j).val } lo <= i && (i <= j && j <= hi) ==> loc(a; i).val <= loc(a; j).val) might not hold. (0299.vpr@34.11)); List([postcondition.violated:assertion.false] Postcondition of quicksort_rec might not hold. Assertion (forall i: Int; j: Int :: { loc(a; i).val;loc(a; j).val } lo <= i && (i <= j && j <= hi) ==> loc(a; i).val <= loc(a; j).val) might not hold. (0299.vpr@34.11)))
../../src/test/resources/frontend-generated/all/issues/silicon/0302.vpr,2,2914,60,2,2839,2918,2987,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access loc(arr; j).val. (0302.vpr@33.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access loc(arr; j).val. (0302.vpr@49.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access loc(arr; j).val. (0302.vpr@33.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access loc(arr; j).val. (0302.vpr@49.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access loc(arr; j).val. (0302.vpr@33.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access loc(arr; j).val. (0302.vpr@49.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access loc(arr; j).val. (0302.vpr@33.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access loc(arr; j).val. (0302.vpr@49.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access loc(arr; j).val. (0302.vpr@33.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access loc(arr; j).val. (0302.vpr@49.5)))
../../src/test/resources/frontend-generated/all/issues/silicon/0307.vpr,2,1134,12,1,1120,1133,1151,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0307.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0307.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0307.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0307.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0307.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0307.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0307.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0307.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0307.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0307.vpr@37.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0310a.vpr,2,1622,63,3,1533,1667,1668,Vector(List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310a.vpr@20.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310a.vpr@49.3)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310a.vpr@20.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310a.vpr@49.3)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310a.vpr@20.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310a.vpr@49.3)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310a.vpr@20.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310a.vpr@49.3)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310a.vpr@20.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310a.vpr@49.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0310b.vpr,1,1700,49,2,1655,1678,1769,Vector(List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310b.vpr@52.5)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310b.vpr@52.5)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310b.vpr@52.5)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310b.vpr@52.5)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (0310b.vpr@52.5)))
../../src/test/resources/frontend-generated/all/issues/silicon/0312.vpr,0,1136,22,1,1119,1122,1168,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0313a.vpr,0,1125,37,3,1074,1139,1164,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0313b.vpr,0,1145,19,1,1118,1159,1160,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0314.vpr,0,1525,83,5,1438,1501,1638,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0314a.vpr,1,1777,66,3,1715,1748,1870,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion bar(num(z2)) might not hold. (0314a.vpr@51.3)); List([assert.failed:assertion.false] Assert might fail. Assertion bar(num(z2)) might not hold. (0314a.vpr@51.3)); List([assert.failed:assertion.false] Assert might fail. Assertion bar(num(z2)) might not hold. (0314a.vpr@51.3)); List([assert.failed:assertion.false] Assert might fail. Assertion bar(num(z2)) might not hold. (0314a.vpr@51.3)); List([assert.failed:assertion.false] Assert might fail. Assertion bar(num(z2)) might not hold. (0314a.vpr@51.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0314b.vpr,0,1668,108,6,1521,1702,1781,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0314d.vpr,0,1735,102,5,1602,1753,1852,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0324.vpr,1,1118,21,1,1096,1111,1147,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion x.val == 4 might not hold. (0324.vpr@11.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.val == 4 might not hold. (0324.vpr@11.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.val == 4 might not hold. (0324.vpr@11.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.val == 4 might not hold. (0324.vpr@11.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.val == 4 might not hold. (0324.vpr@11.5)))
../../src/test/resources/frontend-generated/all/issues/silicon/0326.vpr,1,1522,35,2,1473,1538,1556,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0326.vpr@11.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0326.vpr@11.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0326.vpr@11.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0326.vpr@11.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0326.vpr@11.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0328a.vpr,0,1234,15,1,1220,1228,1256,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0328b.vpr,0,1207,58,4,1158,1175,1290,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0331.vpr,0,1361,41,3,1325,1339,1420,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0333.vpr,1,1159,11,0,1146,1157,1174,Vector(List([postcondition.violated:assertion.false] Postcondition of fail might not hold. Assertion false might not hold. (0333.vpr@25.11)); List([postcondition.violated:assertion.false] Postcondition of fail might not hold. Assertion false might not hold. (0333.vpr@25.11)); List([postcondition.violated:assertion.false] Postcondition of fail might not hold. Assertion false might not hold. (0333.vpr@25.11)); List([postcondition.violated:assertion.false] Postcondition of fail might not hold. Assertion false might not hold. (0333.vpr@25.11)); List([postcondition.violated:assertion.false] Postcondition of fail might not hold. Assertion false might not hold. (0333.vpr@25.11)))
../../src/test/resources/frontend-generated/all/issues/silicon/0334.vpr,0,1646,36,2,1599,1655,1686,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0335.vpr,0,2486,71,2,2409,2468,2581,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0336a.vpr,1,1567,47,2,1530,1538,1634,Vector(List([postcondition.violated:assertion.false] Postcondition of bad might not hold. Assertion false might not hold. (0336a.vpr@17.11)); List([postcondition.violated:assertion.false] Postcondition of bad might not hold. Assertion false might not hold. (0336a.vpr@17.11)); List([postcondition.violated:assertion.false] Postcondition of bad might not hold. Assertion false might not hold. (0336a.vpr@17.11)); List([postcondition.violated:assertion.false] Postcondition of bad might not hold. Assertion false might not hold. (0336a.vpr@17.11)); List([postcondition.violated:assertion.false] Postcondition of bad might not hold. Assertion false might not hold. (0336a.vpr@17.11)))
../../src/test/resources/frontend-generated/all/issues/silicon/0336b.vpr,1,3561,47,1,3519,3538,3627,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (let n == ((unfolding acc(uf_bank(b); write) in l.rank)) in n > n) might not hold. (0336b.vpr@23.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (let n == ((unfolding acc(uf_bank(b); write) in l.rank)) in n > n) might not hold. (0336b.vpr@23.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (let n == ((unfolding acc(uf_bank(b); write) in l.rank)) in n > n) might not hold. (0336b.vpr@23.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (let n == ((unfolding acc(uf_bank(b); write) in l.rank)) in n > n) might not hold. (0336b.vpr@23.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (let n == ((unfolding acc(uf_bank(b); write) in l.rank)) in n > n) might not hold. (0336b.vpr@23.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0340.vpr,0,1379,21,1,1351,1386,1402,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0345.vpr,2,1134,24,2,1103,1138,1163,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (0345.vpr@13.5); [assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (0345.vpr@23.5)); List([assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (0345.vpr@13.5); [assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (0345.vpr@23.5)); List([assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (0345.vpr@13.5); [assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (0345.vpr@23.5)); List([assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (0345.vpr@13.5); [assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (0345.vpr@23.5)); List([assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (0345.vpr@13.5); [assert.failed:assertion.false] Assert might fail. Assertion c.f != c might not hold. (0345.vpr@23.5)))
../../src/test/resources/frontend-generated/all/issues/silicon/0346.vpr,0,1113,35,3,1064,1130,1146,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0348.vpr,4,1167,17,1,1148,1164,1190,Vector(List([application.precondition:assertion.false] Precondition of function bar might not hold. Assertion 0 < foo(x) might not hold. (0348.vpr@11.10); [application.precondition:assertion.false] Precondition of function outer might not hold. Assertion (unfolding acc(P(x); write) in inner(x) == 0) might not hold. (0348.vpr@28.12); [application.precondition:assertion.false] Precondition of function outer might not hold. Assertion (unfolding acc(P(x); write) in inner(x) == 0) might not hold. (0348.vpr@33.10); [call.precondition:assertion.false] The precondition of method callee might not hold. Assertion 0 < inner(x) might not hold. (0348.vpr@61.3)); List([application.precondition:assertion.false] Precondition of function bar might not hold. Assertion 0 < foo(x) might not hold. (0348.vpr@11.10); [application.precondition:assertion.false] Precondition of function outer might not hold. Assertion (unfolding acc(P(x); write) in inner(x) == 0) might not hold. (0348.vpr@28.12); [application.precondition:assertion.false] Precondition of function outer might not hold. Assertion (unfolding acc(P(x); write) in inner(x) == 0) might not hold. (0348.vpr@33.10); [call.precondition:assertion.false] The precondition of method callee might not hold. Assertion 0 < inner(x) might not hold. (0348.vpr@61.3)); List([application.precondition:assertion.false] Precondition of function bar might not hold. Assertion 0 < foo(x) might not hold. (0348.vpr@11.10); [application.precondition:assertion.false] Precondition of function outer might not hold. Assertion (unfolding acc(P(x); write) in inner(x) == 0) might not hold. (0348.vpr@28.12); [application.precondition:assertion.false] Precondition of function outer might not hold. Assertion (unfolding acc(P(x); write) in inner(x) == 0) might not hold. (0348.vpr@33.10); [call.precondition:assertion.false] The precondition of method callee might not hold. Assertion 0 < inner(x) might not hold. (0348.vpr@61.3)); List([application.precondition:assertion.false] Precondition of function bar might not hold. Assertion 0 < foo(x) might not hold. (0348.vpr@11.10); [application.precondition:assertion.false] Precondition of function outer might not hold. Assertion (unfolding acc(P(x); write) in inner(x) == 0) might not hold. (0348.vpr@28.12); [application.precondition:assertion.false] Precondition of function outer might not hold. Assertion (unfolding acc(P(x); write) in inner(x) == 0) might not hold. (0348.vpr@33.10); [call.precondition:assertion.false] The precondition of method callee might not hold. Assertion 0 < inner(x) might not hold. (0348.vpr@61.3)); List([application.precondition:assertion.false] Precondition of function bar might not hold. Assertion 0 < foo(x) might not hold. (0348.vpr@11.10); [application.precondition:assertion.false] Precondition of function outer might not hold. Assertion (unfolding acc(P(x); write) in inner(x) == 0) might not hold. (0348.vpr@28.12); [application.precondition:assertion.false] Precondition of function outer might not hold. Assertion (unfolding acc(P(x); write) in inner(x) == 0) might not hold. (0348.vpr@33.10); [call.precondition:assertion.false] The precondition of method callee might not hold. Assertion 0 < inner(x) might not hold. (0348.vpr@61.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0351.vpr,0,1405,60,4,1355,1370,1491,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0352.vpr,0,1124,14,1,1107,1123,1143,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0362.vpr,0,1851,80,4,1740,1889,1925,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0365.vpr,0,1485,6,0,1478,1484,1493,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0368.vpr,1,1135,21,1,1107,1143,1157,Vector(List([inhale.failed:division.by.zero] Inhale might fail. Divisor 0 might be zero. (0368.vpr@6.10)); List([inhale.failed:division.by.zero] Inhale might fail. Divisor 0 might be zero. (0368.vpr@6.10)); List([inhale.failed:division.by.zero] Inhale might fail. Divisor 0 might be zero. (0368.vpr@6.10)); List([inhale.failed:division.by.zero] Inhale might fail. Divisor 0 might be zero. (0368.vpr@6.10)); List([inhale.failed:division.by.zero] Inhale might fail. Divisor 0 might be zero. (0368.vpr@6.10)))
../../src/test/resources/frontend-generated/all/issues/silicon/0370.vpr,1,1810,82,4,1726,1784,1922,Vector(List([exhale.failed:assertion.false] Exhale might fail. Assertion (forall tid: Int; j: Int :: 0 <= tid && (tid < |getVCTOption1(output)| && (0 <= j && j < |getVCTOption1(output)|)) ==> getVCTOption1(output)[j].Integer__item == tid) might not hold. (0370.vpr@36.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forall tid: Int; j: Int :: 0 <= tid && (tid < |getVCTOption1(output)| && (0 <= j && j < |getVCTOption1(output)|)) ==> getVCTOption1(output)[j].Integer__item == tid) might not hold. (0370.vpr@36.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forall tid: Int; j: Int :: 0 <= tid && (tid < |getVCTOption1(output)| && (0 <= j && j < |getVCTOption1(output)|)) ==> getVCTOption1(output)[j].Integer__item == tid) might not hold. (0370.vpr@36.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forall tid: Int; j: Int :: 0 <= tid && (tid < |getVCTOption1(output)| && (0 <= j && j < |getVCTOption1(output)|)) ==> getVCTOption1(output)[j].Integer__item == tid) might not hold. (0370.vpr@36.3)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forall tid: Int; j: Int :: 0 <= tid && (tid < |getVCTOption1(output)| && (0 <= j && j < |getVCTOption1(output)|)) ==> getVCTOption1(output)[j].Integer__item == tid) might not hold. (0370.vpr@36.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0378a.vpr,0,1621,37,2,1595,1596,1674,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0378b.vpr,0,1498,14,0,1479,1501,1515,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0379a.vpr,0,1162,13,1,1147,1160,1179,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0379b.vpr,0,1109,21,1,1080,1114,1133,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0381.vpr,0,1468,9,0,1454,1475,1475,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0383a.vpr,1,1584,35,2,1556,1562,1634,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forall nn: Ref :: { (nn in all_nodes) } (nn in all_nodes) ==> (unfolding acc(Node(nn); write) in nn.visited)) might not hold. (0383a.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall nn: Ref :: { (nn in all_nodes) } (nn in all_nodes) ==> (unfolding acc(Node(nn); write) in nn.visited)) might not hold. (0383a.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall nn: Ref :: { (nn in all_nodes) } (nn in all_nodes) ==> (unfolding acc(Node(nn); write) in nn.visited)) might not hold. (0383a.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall nn: Ref :: { (nn in all_nodes) } (nn in all_nodes) ==> (unfolding acc(Node(nn); write) in nn.visited)) might not hold. (0383a.vpr@21.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall nn: Ref :: { (nn in all_nodes) } (nn in all_nodes) ==> (unfolding acc(Node(nn); write) in nn.visited)) might not hold. (0383a.vpr@21.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0383b.vpr,1,1542,78,5,1464,1512,1650,Vector(List([postcondition.violated:assertion.false] Postcondition of test might not hold. Assertion false might not hold. (0383b.vpr@19.11)); List([postcondition.violated:assertion.false] Postcondition of test might not hold. Assertion false might not hold. (0383b.vpr@19.11)); List([postcondition.violated:assertion.false] Postcondition of test might not hold. Assertion false might not hold. (0383b.vpr@19.11)); List([postcondition.violated:assertion.false] Postcondition of test might not hold. Assertion false might not hold. (0383b.vpr@19.11)); List([postcondition.violated:assertion.false] Postcondition of test might not hold. Assertion false might not hold. (0383b.vpr@19.11)))
../../src/test/resources/frontend-generated/all/issues/silicon/0383c.vpr,6,2053,65,3,2003,2011,2146,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@18.2); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(P(xs[1]); write) in xs[1].f == 0) might not hold. (0383c.vpr@30.2); [assert.failed:assertion.false] Assert might fail. Assertion xs[1].f == 0 might not hold. (0383c.vpr@49.2); [assert.failed:assertion.false] Assert might fail. Assertion xs[i].f == 0 might not hold. (0383c.vpr@63.2); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@74.2); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@83.2)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@18.2); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(P(xs[1]); write) in xs[1].f == 0) might not hold. (0383c.vpr@30.2); [assert.failed:assertion.false] Assert might fail. Assertion xs[1].f == 0 might not hold. (0383c.vpr@49.2); [assert.failed:assertion.false] Assert might fail. Assertion xs[i].f == 0 might not hold. (0383c.vpr@63.2); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@74.2); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@83.2)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@18.2); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(P(xs[1]); write) in xs[1].f == 0) might not hold. (0383c.vpr@30.2); [assert.failed:assertion.false] Assert might fail. Assertion xs[1].f == 0 might not hold. (0383c.vpr@49.2); [assert.failed:assertion.false] Assert might fail. Assertion xs[i].f == 0 might not hold. (0383c.vpr@63.2); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@74.2); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@83.2)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@18.2); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(P(xs[1]); write) in xs[1].f == 0) might not hold. (0383c.vpr@30.2); [assert.failed:assertion.false] Assert might fail. Assertion xs[1].f == 0 might not hold. (0383c.vpr@49.2); [assert.failed:assertion.false] Assert might fail. Assertion xs[i].f == 0 might not hold. (0383c.vpr@63.2); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@74.2); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@83.2)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@18.2); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(P(xs[1]); write) in xs[1].f == 0) might not hold. (0383c.vpr@30.2); [assert.failed:assertion.false] Assert might fail. Assertion xs[1].f == 0 might not hold. (0383c.vpr@49.2); [assert.failed:assertion.false] Assert might fail. Assertion xs[i].f == 0 might not hold. (0383c.vpr@63.2); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@74.2); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> (unfolding acc(P(xs[i]); write) in xs[i].f == 0)) might not hold. (0383c.vpr@83.2)))
../../src/test/resources/frontend-generated/all/issues/silicon/0384.sil,1,1123,23,2,1090,1135,1144,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion x.f == 1 might not hold. (0384.sil@12.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == 1 might not hold. (0384.sil@12.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == 1 might not hold. (0384.sil@12.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == 1 might not hold. (0384.sil@12.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == 1 might not hold. (0384.sil@12.5)))
../../src/test/resources/frontend-generated/all/issues/silicon/0384.vpr,1,1075,11,1,1060,1080,1086,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion x.f == 1 might not hold. (0384.vpr@13.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == 1 might not hold. (0384.vpr@13.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == 1 might not hold. (0384.vpr@13.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == 1 might not hold. (0384.vpr@13.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == 1 might not hold. (0384.vpr@13.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0385.vpr,1,1408,17,1,1384,1416,1425,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion foo_1_1(s; r) || (foo_1_2(s; r) || (foo_2_1(s; r) || foo_2_2(s; r))) might not hold. (0385.vpr@56.3)); List([assert.failed:assertion.false] Assert might fail. Assertion foo_1_1(s; r) || (foo_1_2(s; r) || (foo_2_1(s; r) || foo_2_2(s; r))) might not hold. (0385.vpr@56.3)); List([assert.failed:assertion.false] Assert might fail. Assertion foo_1_1(s; r) || (foo_1_2(s; r) || (foo_2_1(s; r) || foo_2_2(s; r))) might not hold. (0385.vpr@56.3)); List([assert.failed:assertion.false] Assert might fail. Assertion foo_1_1(s; r) || (foo_1_2(s; r) || (foo_2_1(s; r) || foo_2_2(s; r))) might not hold. (0385.vpr@56.3)); List([assert.failed:assertion.false] Assert might fail. Assertion foo_1_1(s; r) || (foo_1_2(s; r) || (foo_2_1(s; r) || foo_2_2(s; r))) might not hold. (0385.vpr@56.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0388.vpr,0,1307,46,3,1262,1290,1371,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0393a.vpr,0,1943,8,0,1936,1939,1955,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0393b.vpr,0,1102,34,3,1062,1099,1146,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0394.vpr,1,1221,28,2,1186,1222,1257,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion bar(a; b) might not hold. (0394.vpr@16.3)); List([assert.failed:assertion.false] Assert might fail. Assertion bar(a; b) might not hold. (0394.vpr@16.3)); List([assert.failed:assertion.false] Assert might fail. Assertion bar(a; b) might not hold. (0394.vpr@16.3)); List([assert.failed:assertion.false] Assert might fail. Assertion bar(a; b) might not hold. (0394.vpr@16.3)); List([assert.failed:assertion.false] Assert might fail. Assertion bar(a; b) might not hold. (0394.vpr@16.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0395a.vpr,0,1312,30,2,1275,1313,1349,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0395b.vpr,0,1420,25,1,1399,1406,1456,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0400.vpr,2,1485,16,1,1462,1491,1502,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0400.vpr@83.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0400.vpr@142.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0400.vpr@83.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0400.vpr@142.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0400.vpr@83.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0400.vpr@142.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0400.vpr@83.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0400.vpr@142.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0400.vpr@83.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0400.vpr@142.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0409.vpr,0,1511,72,4,1438,1485,1610,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0483a.vpr,0,3455,210,6,3234,3394,3738,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0483b.vpr,0,1640,58,3,1590,1608,1722,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0484.vpr,0,1154,25,2,1120,1161,1181,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0491.vpr,1,1608,40,2,1552,1630,1643,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion foo(l2; k) might not hold. (0491.vpr@39.3)); List([assert.failed:assertion.false] Assert might fail. Assertion foo(l2; k) might not hold. (0491.vpr@39.3)); List([assert.failed:assertion.false] Assert might fail. Assertion foo(l2; k) might not hold. (0491.vpr@39.3)); List([assert.failed:assertion.false] Assert might fail. Assertion foo(l2; k) might not hold. (0491.vpr@39.3)); List([assert.failed:assertion.false] Assert might fail. Assertion foo(l2; k) might not hold. (0491.vpr@39.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0493a.vpr,0,1612,21,1,1587,1610,1639,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0493b.vpr,0,2322,66,2,2230,2352,2386,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0493c.vpr,0,6532,148,2,6328,6594,6676,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0496.vpr,2,1175,32,2,1130,1195,1202,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion reqA(a) == 0 might not hold. (0496.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion reqB(a) == 0 might not hold. (0496.vpr@52.3)); List([assert.failed:assertion.false] Assert might fail. Assertion reqA(a) == 0 might not hold. (0496.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion reqB(a) == 0 might not hold. (0496.vpr@52.3)); List([assert.failed:assertion.false] Assert might fail. Assertion reqA(a) == 0 might not hold. (0496.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion reqB(a) == 0 might not hold. (0496.vpr@52.3)); List([assert.failed:assertion.false] Assert might fail. Assertion reqA(a) == 0 might not hold. (0496.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion reqB(a) == 0 might not hold. (0496.vpr@52.3)); List([assert.failed:assertion.false] Assert might fail. Assertion reqA(a) == 0 might not hold. (0496.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion reqB(a) == 0 might not hold. (0496.vpr@52.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0502.vpr,0,1588,75,4,1496,1587,1681,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0505.vpr,0,1558,31,1,1523,1552,1600,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0508a.vpr,1,1815,61,3,1729,1846,1871,Vector(List([assert.failed:receiver.not.injective] Assert might fail. Receiver of (id(s): Ref).item.bool_prop [0508a.vpr@29.54]  might not be injective. (0508a.vpr@29.3)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of (id(s): Ref).item.bool_prop [0508a.vpr@29.54]  might not be injective. (0508a.vpr@29.3)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of (id(s): Ref).item.bool_prop [0508a.vpr@29.54]  might not be injective. (0508a.vpr@29.3)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of (id(s): Ref).item.bool_prop [0508a.vpr@29.54]  might not be injective. (0508a.vpr@29.3)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of (id(s): Ref).item.bool_prop [0508a.vpr@29.54]  might not be injective. (0508a.vpr@29.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0508b.vpr,0,1579,8,0,1567,1583,1587,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/0509.vpr,1,1334,45,3,1288,1319,1396,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int; j: Int :: { lookup(arr; i);lookup(arr; j) } right_index <= i && (i < j && j < until) ==> lookup(arr; i) <= lookup(arr; j)) might not hold. (0509.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int; j: Int :: { lookup(arr; i);lookup(arr; j) } right_index <= i && (i < j && j < until) ==> lookup(arr; i) <= lookup(arr; j)) might not hold. (0509.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int; j: Int :: { lookup(arr; i);lookup(arr; j) } right_index <= i && (i < j && j < until) ==> lookup(arr; i) <= lookup(arr; j)) might not hold. (0509.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int; j: Int :: { lookup(arr; i);lookup(arr; j) } right_index <= i && (i < j && j < until) ==> lookup(arr; i) <= lookup(arr; j)) might not hold. (0509.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int; j: Int :: { lookup(arr; i);lookup(arr; j) } right_index <= i && (i < j && j < until) ==> lookup(arr; i) <= lookup(arr; j)) might not hold. (0509.vpr@44.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/0512.vpr,0,2348,68,2,2297,2302,2445,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/unofficial001.vpr,0,1170,38,3,1118,1183,1209,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/unofficial002.vpr,0,1399,63,4,1347,1362,1489,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/unofficial003.vpr,3,1387,34,2,1340,1403,1420,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unofficial003.vpr@27.3); [assert.failed:assertion.false] Assert might fail. Assertion !fun02(x; b) might not hold. (unofficial003.vpr@51.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(x; b) might not hold. (unofficial003.vpr@61.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unofficial003.vpr@27.3); [assert.failed:assertion.false] Assert might fail. Assertion !fun02(x; b) might not hold. (unofficial003.vpr@51.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(x; b) might not hold. (unofficial003.vpr@61.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unofficial003.vpr@27.3); [assert.failed:assertion.false] Assert might fail. Assertion !fun02(x; b) might not hold. (unofficial003.vpr@51.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(x; b) might not hold. (unofficial003.vpr@61.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unofficial003.vpr@27.3); [assert.failed:assertion.false] Assert might fail. Assertion !fun02(x; b) might not hold. (unofficial003.vpr@51.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(x; b) might not hold. (unofficial003.vpr@61.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unofficial003.vpr@27.3); [assert.failed:assertion.false] Assert might fail. Assertion !fun02(x; b) might not hold. (unofficial003.vpr@51.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(x; b) might not hold. (unofficial003.vpr@61.3)))
../../src/test/resources/frontend-generated/all/issues/silicon/unofficial004.vpr,0,1154,30,2,1132,1134,1197,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/unofficial005.vpr,0,1295,23,1,1274,1284,1329,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/unofficial006.vpr,0,1092,11,1,1081,1088,1109,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/unofficial007.vpr,0,1263,57,4,1182,1294,1313,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silicon/unofficial008.vpr,0,1183,42,3,1123,1211,1215,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0003.vpr,3,1135,42,3,1077,1152,1178,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (0003.vpr@15.19); [invariant.not.preserved:insufficient.permission] Loop invariant acc(r.f; write) might not be preserved. There might be insufficient permission to access r.f. (0003.vpr@27.15); [invariant.not.established:insufficient.permission] Loop invariant acc(r.f; write) might not hold on entry. There might be insufficient permission to access r.f. (0003.vpr@39.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (0003.vpr@15.19); [invariant.not.preserved:insufficient.permission] Loop invariant acc(r.f; write) might not be preserved. There might be insufficient permission to access r.f. (0003.vpr@27.15); [invariant.not.established:insufficient.permission] Loop invariant acc(r.f; write) might not hold on entry. There might be insufficient permission to access r.f. (0003.vpr@39.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (0003.vpr@15.19); [invariant.not.preserved:insufficient.permission] Loop invariant acc(r.f; write) might not be preserved. There might be insufficient permission to access r.f. (0003.vpr@27.15); [invariant.not.established:insufficient.permission] Loop invariant acc(r.f; write) might not hold on entry. There might be insufficient permission to access r.f. (0003.vpr@39.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (0003.vpr@15.19); [invariant.not.preserved:insufficient.permission] Loop invariant acc(r.f; write) might not be preserved. There might be insufficient permission to access r.f. (0003.vpr@27.15); [invariant.not.established:insufficient.permission] Loop invariant acc(r.f; write) might not hold on entry. There might be insufficient permission to access r.f. (0003.vpr@39.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access r.f. (0003.vpr@15.19); [invariant.not.preserved:insufficient.permission] Loop invariant acc(r.f; write) might not be preserved. There might be insufficient permission to access r.f. (0003.vpr@27.15); [invariant.not.established:insufficient.permission] Loop invariant acc(r.f; write) might not hold on entry. There might be insufficient permission to access r.f. (0003.vpr@39.15)))
../../src/test/resources/frontend-generated/all/issues/silver/0004.vpr,1,1061,22,2,1030,1072,1082,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (0004.vpr@10.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (0004.vpr@10.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (0004.vpr@10.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (0004.vpr@10.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (0004.vpr@10.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0007.vpr,5,2,0,0,2,3,3,Vector(List(expected local variable (0007.vpr@11.33); expected field (0007.vpr@11.38); expected local variable (0007.vpr@16.16); Type error in the expression at 0007.vpr@[16.16-16.26] (0007.vpr@16.16); expected identifier; but got PFunction(PIdnDef(fun);ArrayBuffer();Int;ArrayBuffer();ArrayBuffer();Some(PIntLit(0))) (0007.vpr@23.16)); List(expected local variable (0007.vpr@11.33); expected field (0007.vpr@11.38); expected local variable (0007.vpr@16.16); Type error in the expression at 0007.vpr@[16.16-16.26] (0007.vpr@16.16); expected identifier; but got PFunction(PIdnDef(fun);ArrayBuffer();Int;ArrayBuffer();ArrayBuffer();Some(PIntLit(0))) (0007.vpr@23.16)); List(expected local variable (0007.vpr@11.33); expected field (0007.vpr@11.38); expected local variable (0007.vpr@16.16); Type error in the expression at 0007.vpr@[16.16-16.26] (0007.vpr@16.16); expected identifier; but got PFunction(PIdnDef(fun);ArrayBuffer();Int;ArrayBuffer();ArrayBuffer();Some(PIntLit(0))) (0007.vpr@23.16)); List(expected local variable (0007.vpr@11.33); expected field (0007.vpr@11.38); expected local variable (0007.vpr@16.16); Type error in the expression at 0007.vpr@[16.16-16.26] (0007.vpr@16.16); expected identifier; but got PFunction(PIdnDef(fun);ArrayBuffer();Int;ArrayBuffer();ArrayBuffer();Some(PIntLit(0))) (0007.vpr@23.16)); List(expected local variable (0007.vpr@11.33); expected field (0007.vpr@11.38); expected local variable (0007.vpr@16.16); Type error in the expression at 0007.vpr@[16.16-16.26] (0007.vpr@16.16); expected identifier; but got PFunction(PIdnDef(fun);ArrayBuffer();Int;ArrayBuffer();ArrayBuffer();Some(PIntLit(0))) (0007.vpr@23.16)))
../../src/test/resources/frontend-generated/all/issues/silver/0008.vpr,0,1333,59,4,1254,1348,1397,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0009.vpr,0,1123,10,0,1109,1127,1133,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0010.vpr,0,1141,15,1,1121,1146,1157,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0011.vpr,3,6,0,0,6,6,6,Vector(List(found undeclared type X (0011.vpr@6.25); Type error in the expression at 0011.vpr@[43.26-43.37] (0011.vpr@43.26); Type error in the expression at 0011.vpr@[43.42-43.62] (0011.vpr@43.42)); List(found undeclared type X (0011.vpr@6.25); Type error in the expression at 0011.vpr@[43.26-43.37] (0011.vpr@43.26); Type error in the expression at 0011.vpr@[43.42-43.62] (0011.vpr@43.42)); List(found undeclared type X (0011.vpr@6.25); Type error in the expression at 0011.vpr@[43.26-43.37] (0011.vpr@43.26); Type error in the expression at 0011.vpr@[43.42-43.62] (0011.vpr@43.42)); List(found undeclared type X (0011.vpr@6.25); Type error in the expression at 0011.vpr@[43.26-43.37] (0011.vpr@43.26); Type error in the expression at 0011.vpr@[43.42-43.62] (0011.vpr@43.42)); List(found undeclared type X (0011.vpr@6.25); Type error in the expression at 0011.vpr@[43.26-43.37] (0011.vpr@43.26); Type error in the expression at 0011.vpr@[43.42-43.62] (0011.vpr@43.42)))
../../src/test/resources/frontend-generated/all/issues/silver/0012.vpr,0,1119,36,3,1071,1131,1157,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0013.vpr,0,1078,37,3,1029,1084,1121,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0014.vpr,0,1117,34,3,1069,1136,1147,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0015.vpr,0,1099,28,2,1067,1094,1137,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0017.vpr,1,1,0,0,1,1,1,Vector(List(expected field (0017.vpr@6.12)); List(expected field (0017.vpr@6.12)); List(expected field (0017.vpr@6.12)); List(expected field (0017.vpr@6.12)); List(expected field (0017.vpr@6.12)))
../../src/test/resources/frontend-generated/all/issues/silver/0018.vpr,2,5,0,0,5,6,6,Vector(List(Expected type Seq[Int]; but found Seq[Ref] at the expression at 0018.vpr@[17.22-17.32] (0018.vpr@17.22); Expected type Multiset[Bool]; but found Set[Bool] at the expression at 0018.vpr@[20.28-20.39] (0018.vpr@20.28)); List(Expected type Seq[Int]; but found Seq[Ref] at the expression at 0018.vpr@[17.22-17.32] (0018.vpr@17.22); Expected type Multiset[Bool]; but found Set[Bool] at the expression at 0018.vpr@[20.28-20.39] (0018.vpr@20.28)); List(Expected type Seq[Int]; but found Seq[Ref] at the expression at 0018.vpr@[17.22-17.32] (0018.vpr@17.22); Expected type Multiset[Bool]; but found Set[Bool] at the expression at 0018.vpr@[20.28-20.39] (0018.vpr@20.28)); List(Expected type Seq[Int]; but found Seq[Ref] at the expression at 0018.vpr@[17.22-17.32] (0018.vpr@17.22); Expected type Multiset[Bool]; but found Set[Bool] at the expression at 0018.vpr@[20.28-20.39] (0018.vpr@20.28)); List(Expected type Seq[Int]; but found Seq[Ref] at the expression at 0018.vpr@[17.22-17.32] (0018.vpr@17.22); Expected type Multiset[Bool]; but found Set[Bool] at the expression at 0018.vpr@[20.28-20.39] (0018.vpr@20.28)))
../../src/test/resources/frontend-generated/all/issues/silver/0019.vpr,0,1083,16,1,1061,1089,1099,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0021.vpr,0,1182,48,4,1145,1152,1251,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0022.vpr,0,1308,57,4,1240,1303,1381,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0024.vpr,2,2,0,0,2,2,2,Vector(List(expected expression but found field f (0024.vpr@8.12); expected expression but found field f (0024.vpr@13.27)); List(expected expression but found field f (0024.vpr@8.12); expected expression but found field f (0024.vpr@13.27)); List(expected expression but found field f (0024.vpr@8.12); expected expression but found field f (0024.vpr@13.27)); List(expected expression but found field f (0024.vpr@8.12); expected expression but found field f (0024.vpr@13.27)); List(expected expression but found field f (0024.vpr@8.12); expected expression but found field f (0024.vpr@13.27)))
../../src/test/resources/frontend-generated/all/issues/silver/0025.vpr,0,1500,41,2,1470,1472,1559,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0026.vpr,0,1239,45,3,1194,1223,1301,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0027.vpr,1,1,0,0,1,2,2,Vector(List(Duplicate identifier `f' at 0027.vpr@5.7 and at 0027.vpr@7.10 (0027.vpr@5.7)); List(Duplicate identifier `f' at 0027.vpr@5.7 and at 0027.vpr@7.10 (0027.vpr@5.7)); List(Duplicate identifier `f' at 0027.vpr@5.7 and at 0027.vpr@7.10 (0027.vpr@5.7)); List(Duplicate identifier `f' at 0027.vpr@5.7 and at 0027.vpr@7.10 (0027.vpr@5.7)); List(Duplicate identifier `f' at 0027.vpr@5.7 and at 0027.vpr@7.10 (0027.vpr@5.7)))
../../src/test/resources/frontend-generated/all/issues/silver/0029.vpr,1,1,0,0,1,1,1,Vector(List(Type error in the expression at 0029.vpr@[7.8-7.14] (0029.vpr@7.8)); List(Type error in the expression at 0029.vpr@[7.8-7.14] (0029.vpr@7.8)); List(Type error in the expression at 0029.vpr@[7.8-7.14] (0029.vpr@7.8)); List(Type error in the expression at 0029.vpr@[7.8-7.14] (0029.vpr@7.8)); List(Type error in the expression at 0029.vpr@[7.8-7.14] (0029.vpr@7.8)))
../../src/test/resources/frontend-generated/all/issues/silver/0030.vpr,0,1123,18,1,1100,1125,1146,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0031.vpr,0,1098,47,4,1038,1103,1153,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0033.vpr,0,1245,7,0,1238,1243,1256,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0035.vpr,4,2,0,0,2,2,3,Vector(List(predicate arity doesn't match (0035.vpr@13.16); predicate arity doesn't match (0035.vpr@15.16); predicate arity doesn't match (0035.vpr@17.16); Type error in the expression at 0035.vpr@[19.16-19.23] (0035.vpr@19.16)); List(predicate arity doesn't match (0035.vpr@13.16); predicate arity doesn't match (0035.vpr@15.16); predicate arity doesn't match (0035.vpr@17.16); Type error in the expression at 0035.vpr@[19.16-19.23] (0035.vpr@19.16)); List(predicate arity doesn't match (0035.vpr@13.16); predicate arity doesn't match (0035.vpr@15.16); predicate arity doesn't match (0035.vpr@17.16); Type error in the expression at 0035.vpr@[19.16-19.23] (0035.vpr@19.16)); List(predicate arity doesn't match (0035.vpr@13.16); predicate arity doesn't match (0035.vpr@15.16); predicate arity doesn't match (0035.vpr@17.16); Type error in the expression at 0035.vpr@[19.16-19.23] (0035.vpr@19.16)); List(predicate arity doesn't match (0035.vpr@13.16); predicate arity doesn't match (0035.vpr@15.16); predicate arity doesn't match (0035.vpr@17.16); Type error in the expression at 0035.vpr@[19.16-19.23] (0035.vpr@19.16)))
../../src/test/resources/frontend-generated/all/issues/silver/0036.vpr,1,1,0,0,1,1,1,Vector(List(found undeclared type P (0036.vpr@7.16)); List(found undeclared type P (0036.vpr@7.16)); List(found undeclared type P (0036.vpr@7.16)); List(found undeclared type P (0036.vpr@7.16)); List(found undeclared type P (0036.vpr@7.16)))
../../src/test/resources/frontend-generated/all/issues/silver/0037.vpr,0,1098,21,1,1079,1087,1129,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0038-1.vpr,2,1,0,0,1,1,1,Vector(List(found undeclared type Edge (0038-1.vpr@5.15); Expected type Bool; but found Edge at the expression at 0038-1.vpr@[10.12-10.15] (0038-1.vpr@10.12)); List(found undeclared type Edge (0038-1.vpr@5.15); Expected type Bool; but found Edge at the expression at 0038-1.vpr@[10.12-10.15] (0038-1.vpr@10.12)); List(found undeclared type Edge (0038-1.vpr@5.15); Expected type Bool; but found Edge at the expression at 0038-1.vpr@[10.12-10.15] (0038-1.vpr@10.12)); List(found undeclared type Edge (0038-1.vpr@5.15); Expected type Bool; but found Edge at the expression at 0038-1.vpr@[10.12-10.15] (0038-1.vpr@10.12)); List(found undeclared type Edge (0038-1.vpr@5.15); Expected type Bool; but found Edge at the expression at 0038-1.vpr@[10.12-10.15] (0038-1.vpr@10.12)))
../../src/test/resources/frontend-generated/all/issues/silver/0038.vpr,12,4,0,0,4,4,4,Vector(List(found undeclared type bool (0038.vpr@5.10); found undeclared type Fool (0038.vpr@7.10); found undeclared type int (0038.vpr@9.10); found undeclared type int (0038.vpr@12.17); found undeclared type int (0038.vpr@16.10); found undeclared type bool (0038.vpr@19.10); Expected type bool; but found Bool at the expression at 0038.vpr@[19.18-19.22] (0038.vpr@19.18); found undeclared type error (0038.vpr@23.16); found undeclared type boo (0038.vpr@26.18); found undeclared type int (0038.vpr@29.18); Expected type int; but found Int at the expression at 0038.vpr@[29.24-29.25] (0038.vpr@29.24); found undeclared type B (0038.vpr@34.19)); List(found undeclared type bool (0038.vpr@5.10); found undeclared type Fool (0038.vpr@7.10); found undeclared type int (0038.vpr@9.10); found undeclared type int (0038.vpr@12.17); found undeclared type int (0038.vpr@16.10); found undeclared type bool (0038.vpr@19.10); Expected type bool; but found Bool at the expression at 0038.vpr@[19.18-19.22] (0038.vpr@19.18); found undeclared type error (0038.vpr@23.16); found undeclared type boo (0038.vpr@26.18); found undeclared type int (0038.vpr@29.18); Expected type int; but found Int at the expression at 0038.vpr@[29.24-29.25] (0038.vpr@29.24); found undeclared type B (0038.vpr@34.19)); List(found undeclared type bool (0038.vpr@5.10); found undeclared type Fool (0038.vpr@7.10); found undeclared type int (0038.vpr@9.10); found undeclared type int (0038.vpr@12.17); found undeclared type int (0038.vpr@16.10); found undeclared type bool (0038.vpr@19.10); Expected type bool; but found Bool at the expression at 0038.vpr@[19.18-19.22] (0038.vpr@19.18); found undeclared type error (0038.vpr@23.16); found undeclared type boo (0038.vpr@26.18); found undeclared type int (0038.vpr@29.18); Expected type int; but found Int at the expression at 0038.vpr@[29.24-29.25] (0038.vpr@29.24); found undeclared type B (0038.vpr@34.19)); List(found undeclared type bool (0038.vpr@5.10); found undeclared type Fool (0038.vpr@7.10); found undeclared type int (0038.vpr@9.10); found undeclared type int (0038.vpr@12.17); found undeclared type int (0038.vpr@16.10); found undeclared type bool (0038.vpr@19.10); Expected type bool; but found Bool at the expression at 0038.vpr@[19.18-19.22] (0038.vpr@19.18); found undeclared type error (0038.vpr@23.16); found undeclared type boo (0038.vpr@26.18); found undeclared type int (0038.vpr@29.18); Expected type int; but found Int at the expression at 0038.vpr@[29.24-29.25] (0038.vpr@29.24); found undeclared type B (0038.vpr@34.19)); List(found undeclared type bool (0038.vpr@5.10); found undeclared type Fool (0038.vpr@7.10); found undeclared type int (0038.vpr@9.10); found undeclared type int (0038.vpr@12.17); found undeclared type int (0038.vpr@16.10); found undeclared type bool (0038.vpr@19.10); Expected type bool; but found Bool at the expression at 0038.vpr@[19.18-19.22] (0038.vpr@19.18); found undeclared type error (0038.vpr@23.16); found undeclared type boo (0038.vpr@26.18); found undeclared type int (0038.vpr@29.18); Expected type int; but found Int at the expression at 0038.vpr@[29.24-29.25] (0038.vpr@29.24); found undeclared type B (0038.vpr@34.19)))
../../src/test/resources/frontend-generated/all/issues/silver/0039.vpr,4,11,0,0,11,12,12,Vector(List(Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@24.16); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@29.18); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@31.15); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@33.12)); List(Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@24.16); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@29.18); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@31.15); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@33.12)); List(Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@24.16); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@29.18); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@31.15); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@33.12)); List(Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@24.16); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@29.18); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@31.15); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@33.12)); List(Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@24.16); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@29.18); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@31.15); Consistency error: acc(this.f; write) is non pure and appears where only pure expressions are allowed. (0039.vpr@33.12)))
../../src/test/resources/frontend-generated/all/issues/silver/0040.vpr,1,1,0,0,1,1,1,Vector(List(expected field (0040.vpr@11.24)); List(expected field (0040.vpr@11.24)); List(expected field (0040.vpr@11.24)); List(expected field (0040.vpr@11.24)); List(expected field (0040.vpr@11.24)))
../../src/test/resources/frontend-generated/all/issues/silver/0046a.vpr,0,1115,46,4,1065,1103,1178,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0046b.vpr,0,1182,6,0,1173,1185,1189,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0047.vpr,2,1,0,0,1,1,1,Vector(List(wrong number of arguments (0047.vpr@8.3); wrong number of arguments (0047.vpr@10.3)); List(wrong number of arguments (0047.vpr@8.3); wrong number of arguments (0047.vpr@10.3)); List(wrong number of arguments (0047.vpr@8.3); wrong number of arguments (0047.vpr@10.3)); List(wrong number of arguments (0047.vpr@8.3); wrong number of arguments (0047.vpr@10.3)); List(wrong number of arguments (0047.vpr@8.3); wrong number of arguments (0047.vpr@10.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0047b.vpr,0,1106,22,1,1075,1122,1123,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0048.vpr,1,0,0,0,0,0,1,Vector(List(Duplicate identifier `Bug' at 0048.vpr@5.8 and at 0048.vpr@6.8 (0048.vpr@5.8)); List(Duplicate identifier `Bug' at 0048.vpr@5.8 and at 0048.vpr@6.8 (0048.vpr@5.8)); List(Duplicate identifier `Bug' at 0048.vpr@5.8 and at 0048.vpr@6.8 (0048.vpr@5.8)); List(Duplicate identifier `Bug' at 0048.vpr@5.8 and at 0048.vpr@6.8 (0048.vpr@5.8)); List(Duplicate identifier `Bug' at 0048.vpr@5.8 and at 0048.vpr@6.8 (0048.vpr@5.8)))
../../src/test/resources/frontend-generated/all/issues/silver/0050.vpr,2,1,0,0,1,1,1,Vector(List(Identifier shadowing `x' at 0050.vpr@6.7 and at 0050.vpr@8.14 (0050.vpr@6.1); Identifier shadowing `x' at 0050.vpr@6.7 and at 0050.vpr@12.14 (0050.vpr@6.1)); List(Identifier shadowing `x' at 0050.vpr@6.7 and at 0050.vpr@8.14 (0050.vpr@6.1); Identifier shadowing `x' at 0050.vpr@6.7 and at 0050.vpr@12.14 (0050.vpr@6.1)); List(Identifier shadowing `x' at 0050.vpr@6.7 and at 0050.vpr@8.14 (0050.vpr@6.1); Identifier shadowing `x' at 0050.vpr@6.7 and at 0050.vpr@12.14 (0050.vpr@6.1)); List(Identifier shadowing `x' at 0050.vpr@6.7 and at 0050.vpr@8.14 (0050.vpr@6.1); Identifier shadowing `x' at 0050.vpr@6.7 and at 0050.vpr@12.14 (0050.vpr@6.1)); List(Identifier shadowing `x' at 0050.vpr@6.7 and at 0050.vpr@8.14 (0050.vpr@6.1); Identifier shadowing `x' at 0050.vpr@6.7 and at 0050.vpr@12.14 (0050.vpr@6.1)))
../../src/test/resources/frontend-generated/all/issues/silver/0051.vpr,0,1286,26,2,1249,1299,1311,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0054.vpr,3,6,0,0,6,6,6,Vector(List(Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@8.10); Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@11.12); Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@18.10)); List(Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@8.10); Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@11.12); Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@18.10)); List(Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@8.10); Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@11.12); Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@18.10)); List(Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@8.10); Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@11.12); Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@18.10)); List(Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@8.10); Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@11.12); Consistency error: "wildcard" can only be used in accessibility predicates (0054.vpr@18.10)))
../../src/test/resources/frontend-generated/all/issues/silver/0056.vpr,2,1,0,0,1,1,1,Vector(List(identifier x not defined. (0056.vpr@6.14); identifier y not defined. (0056.vpr@14.13)); List(identifier x not defined. (0056.vpr@6.14); identifier y not defined. (0056.vpr@14.13)); List(identifier x not defined. (0056.vpr@6.14); identifier y not defined. (0056.vpr@14.13)); List(identifier x not defined. (0056.vpr@6.14); identifier y not defined. (0056.vpr@14.13)); List(identifier x not defined. (0056.vpr@6.14); identifier y not defined. (0056.vpr@14.13)))
../../src/test/resources/frontend-generated/all/issues/silver/0059.vpr,0,1303,11,0,1287,1310,1314,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0062.vpr,2,3,0,0,3,3,3,Vector(List(Consistency error: Variable x is not mentioned in one or more triggers. (0062.vpr@7.12); Consistency error: Variable x is not mentioned in one or more triggers. (0062.vpr@13.19)); List(Consistency error: Variable x is not mentioned in one or more triggers. (0062.vpr@7.12); Consistency error: Variable x is not mentioned in one or more triggers. (0062.vpr@13.19)); List(Consistency error: Variable x is not mentioned in one or more triggers. (0062.vpr@7.12); Consistency error: Variable x is not mentioned in one or more triggers. (0062.vpr@13.19)); List(Consistency error: Variable x is not mentioned in one or more triggers. (0062.vpr@7.12); Consistency error: Variable x is not mentioned in one or more triggers. (0062.vpr@13.19)); List(Consistency error: Variable x is not mentioned in one or more triggers. (0062.vpr@7.12); Consistency error: Variable x is not mentioned in one or more triggers. (0062.vpr@13.19)))
../../src/test/resources/frontend-generated/all/issues/silver/0063.vpr,4,1112,38,3,1083,1087,1167,Vector(List([assignment.failed:division.by.zero] Assignment might fail. Divisor i might be zero. (0063.vpr@18.3); [assignment.failed:division.by.zero] Assignment might fail. Divisor i might be zero. (0063.vpr@23.3); [assert.failed:assertion.false] Assert might fail. Assertion q > none might not hold. (0063.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion q > none might not hold. (0063.vpr@41.3)); List([assignment.failed:division.by.zero] Assignment might fail. Divisor i might be zero. (0063.vpr@18.3); [assignment.failed:division.by.zero] Assignment might fail. Divisor i might be zero. (0063.vpr@23.3); [assert.failed:assertion.false] Assert might fail. Assertion q > none might not hold. (0063.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion q > none might not hold. (0063.vpr@41.3)); List([assignment.failed:division.by.zero] Assignment might fail. Divisor i might be zero. (0063.vpr@18.3); [assignment.failed:division.by.zero] Assignment might fail. Divisor i might be zero. (0063.vpr@23.3); [assert.failed:assertion.false] Assert might fail. Assertion q > none might not hold. (0063.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion q > none might not hold. (0063.vpr@41.3)); List([assignment.failed:division.by.zero] Assignment might fail. Divisor i might be zero. (0063.vpr@18.3); [assignment.failed:division.by.zero] Assignment might fail. Divisor i might be zero. (0063.vpr@23.3); [assert.failed:assertion.false] Assert might fail. Assertion q > none might not hold. (0063.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion q > none might not hold. (0063.vpr@41.3)); List([assignment.failed:division.by.zero] Assignment might fail. Divisor i might be zero. (0063.vpr@18.3); [assignment.failed:division.by.zero] Assignment might fail. Divisor i might be zero. (0063.vpr@23.3); [assert.failed:assertion.false] Assert might fail. Assertion q > none might not hold. (0063.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion q > none might not hold. (0063.vpr@41.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0065.vpr,3,4,0,0,4,4,4,Vector(List(Expected type Perm; but found Int at the expression at 0065.vpr@[20.19-20.24] (0065.vpr@20.19); Type error in the expression at 0065.vpr@[23.19-23.24] (0065.vpr@23.19); Type error in the expression at 0065.vpr@[26.19-26.24] (0065.vpr@26.19)); List(Expected type Perm; but found Int at the expression at 0065.vpr@[20.19-20.24] (0065.vpr@20.19); Type error in the expression at 0065.vpr@[23.19-23.24] (0065.vpr@23.19); Type error in the expression at 0065.vpr@[26.19-26.24] (0065.vpr@26.19)); List(Expected type Perm; but found Int at the expression at 0065.vpr@[20.19-20.24] (0065.vpr@20.19); Type error in the expression at 0065.vpr@[23.19-23.24] (0065.vpr@23.19); Type error in the expression at 0065.vpr@[26.19-26.24] (0065.vpr@26.19)); List(Expected type Perm; but found Int at the expression at 0065.vpr@[20.19-20.24] (0065.vpr@20.19); Type error in the expression at 0065.vpr@[23.19-23.24] (0065.vpr@23.19); Type error in the expression at 0065.vpr@[26.19-26.24] (0065.vpr@26.19)); List(Expected type Perm; but found Int at the expression at 0065.vpr@[20.19-20.24] (0065.vpr@20.19); Type error in the expression at 0065.vpr@[23.19-23.24] (0065.vpr@23.19); Type error in the expression at 0065.vpr@[26.19-26.24] (0065.vpr@26.19)))
../../src/test/resources/frontend-generated/all/issues/silver/0067.vpr,2,1553,37,2,1505,1558,1596,Vector(List([postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (0067.vpr@31.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (0067.vpr@38.12)); List([postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (0067.vpr@31.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (0067.vpr@38.12)); List([postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (0067.vpr@31.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (0067.vpr@38.12)); List([postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (0067.vpr@31.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (0067.vpr@38.12)); List([postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (0067.vpr@31.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (0067.vpr@38.12)))
../../src/test/resources/frontend-generated/all/issues/silver/0068.vpr,0,1270,60,4,1185,1309,1317,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0069.vpr,3,10,0,0,10,10,11,Vector(List(Consistency error: Function post-conditions must not contain permissions. (0069.vpr@10.11); Consistency error: Function post-conditions must not contain permissions. (0069.vpr@24.11); Consistency error: Function post-conditions must not contain permissions. (0069.vpr@35.11)); List(Consistency error: Function post-conditions must not contain permissions. (0069.vpr@10.11); Consistency error: Function post-conditions must not contain permissions. (0069.vpr@24.11); Consistency error: Function post-conditions must not contain permissions. (0069.vpr@35.11)); List(Consistency error: Function post-conditions must not contain permissions. (0069.vpr@10.11); Consistency error: Function post-conditions must not contain permissions. (0069.vpr@24.11); Consistency error: Function post-conditions must not contain permissions. (0069.vpr@35.11)); List(Consistency error: Function post-conditions must not contain permissions. (0069.vpr@10.11); Consistency error: Function post-conditions must not contain permissions. (0069.vpr@24.11); Consistency error: Function post-conditions must not contain permissions. (0069.vpr@35.11)); List(Consistency error: Function post-conditions must not contain permissions. (0069.vpr@10.11); Consistency error: Function post-conditions must not contain permissions. (0069.vpr@24.11); Consistency error: Function post-conditions must not contain permissions. (0069.vpr@35.11)))
../../src/test/resources/frontend-generated/all/issues/silver/0072.vpr,2,1109,11,0,1098,1106,1125,Vector(List([fold.failed:negative.permission] Folding token(x) might fail. Fraction -1 / 1 might be negative. (0072.vpr@20.5); [fold.failed:negative.permission] Folding token(x) might fail. Fraction -(1 / 1) might be negative. (0072.vpr@27.5)); List([fold.failed:negative.permission] Folding token(x) might fail. Fraction -1 / 1 might be negative. (0072.vpr@20.5); [fold.failed:negative.permission] Folding token(x) might fail. Fraction -(1 / 1) might be negative. (0072.vpr@27.5)); List([fold.failed:negative.permission] Folding token(x) might fail. Fraction -1 / 1 might be negative. (0072.vpr@20.5); [fold.failed:negative.permission] Folding token(x) might fail. Fraction -(1 / 1) might be negative. (0072.vpr@27.5)); List([fold.failed:negative.permission] Folding token(x) might fail. Fraction -1 / 1 might be negative. (0072.vpr@20.5); [fold.failed:negative.permission] Folding token(x) might fail. Fraction -(1 / 1) might be negative. (0072.vpr@27.5)); List([fold.failed:negative.permission] Folding token(x) might fail. Fraction -1 / 1 might be negative. (0072.vpr@20.5); [fold.failed:negative.permission] Folding token(x) might fail. Fraction -(1 / 1) might be negative. (0072.vpr@27.5)))
../../src/test/resources/frontend-generated/all/issues/silver/0073-1.vpr,1,1,0,0,1,2,2,Vector(List({ 3 } is not a valid Trigger (0073-1.vpr@8.27)); List({ 3 } is not a valid Trigger (0073-1.vpr@8.27)); List({ 3 } is not a valid Trigger (0073-1.vpr@8.27)); List({ 3 } is not a valid Trigger (0073-1.vpr@8.27)); List({ 3 } is not a valid Trigger (0073-1.vpr@8.27)))
../../src/test/resources/frontend-generated/all/issues/silver/0073.vpr,2,1,0,0,1,1,2,Vector(List({ f } is not a valid Trigger (0073.vpr@8.27); expected expression but found field f (0073.vpr@8.28)); List({ f } is not a valid Trigger (0073.vpr@8.27); expected expression but found field f (0073.vpr@8.28)); List({ f } is not a valid Trigger (0073.vpr@8.27); expected expression but found field f (0073.vpr@8.28)); List({ f } is not a valid Trigger (0073.vpr@8.27); expected expression but found field f (0073.vpr@8.28)); List({ f } is not a valid Trigger (0073.vpr@8.27); expected expression but found field f (0073.vpr@8.28)))
../../src/test/resources/frontend-generated/all/issues/silver/0077.vpr,1,1,0,0,1,1,2,Vector(List(Consistency error: Return variable ret cannot be accessed in precondition. (0077.vpr@6.14)); List(Consistency error: Return variable ret cannot be accessed in precondition. (0077.vpr@6.14)); List(Consistency error: Return variable ret cannot be accessed in precondition. (0077.vpr@6.14)); List(Consistency error: Return variable ret cannot be accessed in precondition. (0077.vpr@6.14)); List(Consistency error: Return variable ret cannot be accessed in precondition. (0077.vpr@6.14)))
../../src/test/resources/frontend-generated/all/issues/silver/0078.vpr,1,1105,50,4,1041,1111,1164,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (0078.vpr@12.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (0078.vpr@12.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (0078.vpr@12.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (0078.vpr@12.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (0078.vpr@12.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0081.vpr,3,6,0,0,6,6,7,Vector(List(Consistency error: Variable p is not mentioned in one or more triggers. (0081.vpr@20.13); Consistency error: Variable q is not mentioned in one or more triggers. (0081.vpr@20.25); Consistency error: Variable k is not mentioned in one or more triggers. (0081.vpr@25.29)); List(Consistency error: Variable p is not mentioned in one or more triggers. (0081.vpr@20.13); Consistency error: Variable q is not mentioned in one or more triggers. (0081.vpr@20.25); Consistency error: Variable k is not mentioned in one or more triggers. (0081.vpr@25.29)); List(Consistency error: Variable p is not mentioned in one or more triggers. (0081.vpr@20.13); Consistency error: Variable q is not mentioned in one or more triggers. (0081.vpr@20.25); Consistency error: Variable k is not mentioned in one or more triggers. (0081.vpr@25.29)); List(Consistency error: Variable p is not mentioned in one or more triggers. (0081.vpr@20.13); Consistency error: Variable q is not mentioned in one or more triggers. (0081.vpr@20.25); Consistency error: Variable k is not mentioned in one or more triggers. (0081.vpr@25.29)); List(Consistency error: Variable p is not mentioned in one or more triggers. (0081.vpr@20.13); Consistency error: Variable q is not mentioned in one or more triggers. (0081.vpr@20.25); Consistency error: Variable k is not mentioned in one or more triggers. (0081.vpr@25.29)))
../../src/test/resources/frontend-generated/all/issues/silver/0084.vpr,1,3,0,0,3,3,3,Vector(List(Consistency error: Predicates must not contain old expressions. (0084.vpr@9.4)); List(Consistency error: Predicates must not contain old expressions. (0084.vpr@9.4)); List(Consistency error: Predicates must not contain old expressions. (0084.vpr@9.4)); List(Consistency error: Predicates must not contain old expressions. (0084.vpr@9.4)); List(Consistency error: Predicates must not contain old expressions. (0084.vpr@9.4)))
../../src/test/resources/frontend-generated/all/issues/silver/0085.vpr,0,1290,28,2,1251,1306,1314,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0086.vpr,6,3,0,0,3,4,4,Vector(List(identifier i not defined. (0086.vpr@11.9); identifier i not defined. (0086.vpr@14.5); identifier k not defined. (0086.vpr@30.13); identifier j not defined. (0086.vpr@34.9); identifier i not defined. (0086.vpr@37.5); identifier y not defined. (0086.vpr@49.13)); List(identifier i not defined. (0086.vpr@11.9); identifier i not defined. (0086.vpr@14.5); identifier k not defined. (0086.vpr@30.13); identifier j not defined. (0086.vpr@34.9); identifier i not defined. (0086.vpr@37.5); identifier y not defined. (0086.vpr@49.13)); List(identifier i not defined. (0086.vpr@11.9); identifier i not defined. (0086.vpr@14.5); identifier k not defined. (0086.vpr@30.13); identifier j not defined. (0086.vpr@34.9); identifier i not defined. (0086.vpr@37.5); identifier y not defined. (0086.vpr@49.13)); List(identifier i not defined. (0086.vpr@11.9); identifier i not defined. (0086.vpr@14.5); identifier k not defined. (0086.vpr@30.13); identifier j not defined. (0086.vpr@34.9); identifier i not defined. (0086.vpr@37.5); identifier y not defined. (0086.vpr@49.13)); List(identifier i not defined. (0086.vpr@11.9); identifier i not defined. (0086.vpr@14.5); identifier k not defined. (0086.vpr@30.13); identifier j not defined. (0086.vpr@34.9); identifier i not defined. (0086.vpr@37.5); identifier y not defined. (0086.vpr@49.13)))
../../src/test/resources/frontend-generated/all/issues/silver/0088-1.vpr,0,1114,30,2,1093,1093,1157,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0088.vpr,2,1144,23,2,1114,1148,1171,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0088.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0088.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0088.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0088.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0088.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0088.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0088.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0088.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0088.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0088.vpr@32.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0090.vpr,2,2,0,0,2,2,2,Vector(List(Consistency error: b := foo(0) is a reassignment of formal argument b. (0090.vpr@6.5); Consistency error: r := new() is a reassignment of formal argument r. (0090.vpr@12.5)); List(Consistency error: b := foo(0) is a reassignment of formal argument b. (0090.vpr@6.5); Consistency error: r := new() is a reassignment of formal argument r. (0090.vpr@12.5)); List(Consistency error: b := foo(0) is a reassignment of formal argument b. (0090.vpr@6.5); Consistency error: r := new() is a reassignment of formal argument r. (0090.vpr@12.5)); List(Consistency error: b := foo(0) is a reassignment of formal argument b. (0090.vpr@6.5); Consistency error: r := new() is a reassignment of formal argument r. (0090.vpr@12.5)); List(Consistency error: b := foo(0) is a reassignment of formal argument b. (0090.vpr@6.5); Consistency error: r := new() is a reassignment of formal argument r. (0090.vpr@12.5)))
../../src/test/resources/frontend-generated/all/issues/silver/0091.vpr,2,1324,14,1,1303,1332,1337,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (y in B1) == yc + 1 might not hold. (0091.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion (y in B1) == yc - 2 might not hold. (0091.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (y in B1) == yc + 1 might not hold. (0091.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion (y in B1) == yc - 2 might not hold. (0091.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (y in B1) == yc + 1 might not hold. (0091.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion (y in B1) == yc - 2 might not hold. (0091.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (y in B1) == yc + 1 might not hold. (0091.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion (y in B1) == yc - 2 might not hold. (0091.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (y in B1) == yc + 1 might not hold. (0091.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion (y in B1) == yc - 2 might not hold. (0091.vpr@32.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0092.vpr,1,1094,4,0,1088,1097,1098,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0092.vpr@11.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0092.vpr@11.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0092.vpr@11.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0092.vpr@11.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0092.vpr@11.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0093.vpr,2,2,0,0,2,2,2,Vector(List(Type error in the expression at 0093.vpr@[10.10-10.38] (0093.vpr@10.10); Type error in the expression at 0093.vpr@[16.12-16.40] (0093.vpr@16.12)); List(Type error in the expression at 0093.vpr@[10.10-10.38] (0093.vpr@10.10); Type error in the expression at 0093.vpr@[16.12-16.40] (0093.vpr@16.12)); List(Type error in the expression at 0093.vpr@[10.10-10.38] (0093.vpr@10.10); Type error in the expression at 0093.vpr@[16.12-16.40] (0093.vpr@16.12)); List(Type error in the expression at 0093.vpr@[10.10-10.38] (0093.vpr@10.10); Type error in the expression at 0093.vpr@[16.12-16.40] (0093.vpr@16.12)); List(Type error in the expression at 0093.vpr@[10.10-10.38] (0093.vpr@10.10); Type error in the expression at 0093.vpr@[16.12-16.40] (0093.vpr@16.12)))
../../src/test/resources/frontend-generated/all/issues/silver/0102.vpr,2,2,0,0,2,2,2,Vector(List(Type error in the expression at 0102.vpr@[6.10-6.40] (0102.vpr@6.10); Type error in the expression at 0102.vpr@[11.10-11.42] (0102.vpr@11.10)); List(Type error in the expression at 0102.vpr@[6.10-6.40] (0102.vpr@6.10); Type error in the expression at 0102.vpr@[11.10-11.42] (0102.vpr@11.10)); List(Type error in the expression at 0102.vpr@[6.10-6.40] (0102.vpr@6.10); Type error in the expression at 0102.vpr@[11.10-11.42] (0102.vpr@11.10)); List(Type error in the expression at 0102.vpr@[6.10-6.40] (0102.vpr@6.10); Type error in the expression at 0102.vpr@[11.10-11.42] (0102.vpr@11.10)); List(Type error in the expression at 0102.vpr@[6.10-6.40] (0102.vpr@6.10); Type error in the expression at 0102.vpr@[11.10-11.42] (0102.vpr@11.10)))
../../src/test/resources/frontend-generated/all/issues/silver/0105-1.vpr,1,3,0,0,3,4,4,Vector(List(Parse error: Expected found "axiom ping_axiom_2_p"; expected invalid identifier (could be a keyword) | domainFunctionDecl | axiomDecl | "}" at index 308   axiom ping_axiom_2_p   ^ (0105-1.vpr@11.3)); List(Parse error: Expected found "axiom ping_axiom_2_p"; expected invalid identifier (could be a keyword) | domainFunctionDecl | axiomDecl | "}" at index 308   axiom ping_axiom_2_p   ^ (0105-1.vpr@11.3)); List(Parse error: Expected found "axiom ping_axiom_2_p"; expected invalid identifier (could be a keyword) | domainFunctionDecl | axiomDecl | "}" at index 308   axiom ping_axiom_2_p   ^ (0105-1.vpr@11.3)); List(Parse error: Expected found "axiom ping_axiom_2_p"; expected invalid identifier (could be a keyword) | domainFunctionDecl | axiomDecl | "}" at index 308   axiom ping_axiom_2_p   ^ (0105-1.vpr@11.3)); List(Parse error: Expected found "axiom ping_axiom_2_p"; expected invalid identifier (could be a keyword) | domainFunctionDecl | axiomDecl | "}" at index 308   axiom ping_axiom_2_p   ^ (0105-1.vpr@11.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0105.vpr,1,2,0,0,2,2,2,Vector(List(Parse error: Expected found "axiom ping_axiom_2_p"; expected invalid identifier (could be a keyword) | domainFunctionDecl | axiomDecl | "}" at index 310    axiom ping_axiom_2_p    ^ (0105.vpr@11.4)); List(Parse error: Expected found "axiom ping_axiom_2_p"; expected invalid identifier (could be a keyword) | domainFunctionDecl | axiomDecl | "}" at index 310    axiom ping_axiom_2_p    ^ (0105.vpr@11.4)); List(Parse error: Expected found "axiom ping_axiom_2_p"; expected invalid identifier (could be a keyword) | domainFunctionDecl | axiomDecl | "}" at index 310    axiom ping_axiom_2_p    ^ (0105.vpr@11.4)); List(Parse error: Expected found "axiom ping_axiom_2_p"; expected invalid identifier (could be a keyword) | domainFunctionDecl | axiomDecl | "}" at index 310    axiom ping_axiom_2_p    ^ (0105.vpr@11.4)); List(Parse error: Expected found "axiom ping_axiom_2_p"; expected invalid identifier (could be a keyword) | domainFunctionDecl | axiomDecl | "}" at index 310    axiom ping_axiom_2_p    ^ (0105.vpr@11.4)))
../../src/test/resources/frontend-generated/all/issues/silver/0106-1.vpr,5,21,2,9,19,23,23,Vector(List(Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@16.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@9.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@9.25); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@23.15); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@23.28)); List(Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@16.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@9.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@9.25); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@23.15); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@23.28)); List(Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@16.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@9.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@9.25); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@23.15); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@23.28)); List(Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@16.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@9.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@9.25); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@23.15); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@23.28)); List(Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@16.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@9.12); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@9.25); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@23.15); Consistency error: Perm and forperm in this context are only allowed if nested under inhale-exhale assertions. (0106-1.vpr@23.28)))
../../src/test/resources/frontend-generated/all/issues/silver/0106.vpr,6,7,1,14,7,7,9,Vector(List(Consistency error: Function bodies are not allowed to contain perm expressions (0106.vpr@30.2); Consistency error: Function bodies are not allowed to contain forperm expressions (0106.vpr@36.2); Consistency error: Function bodies are not allowed to contain perm expressions (0106.vpr@42.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@10.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@16.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@22.2)); List(Consistency error: Function bodies are not allowed to contain perm expressions (0106.vpr@30.2); Consistency error: Function bodies are not allowed to contain forperm expressions (0106.vpr@36.2); Consistency error: Function bodies are not allowed to contain perm expressions (0106.vpr@42.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@10.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@16.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@22.2)); List(Consistency error: Function bodies are not allowed to contain perm expressions (0106.vpr@30.2); Consistency error: Function bodies are not allowed to contain forperm expressions (0106.vpr@36.2); Consistency error: Function bodies are not allowed to contain perm expressions (0106.vpr@42.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@10.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@16.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@22.2)); List(Consistency error: Function bodies are not allowed to contain perm expressions (0106.vpr@30.2); Consistency error: Function bodies are not allowed to contain forperm expressions (0106.vpr@36.2); Consistency error: Function bodies are not allowed to contain perm expressions (0106.vpr@42.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@10.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@16.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@22.2)); List(Consistency error: Function bodies are not allowed to contain perm expressions (0106.vpr@30.2); Consistency error: Function bodies are not allowed to contain forperm expressions (0106.vpr@36.2); Consistency error: Function bodies are not allowed to contain perm expressions (0106.vpr@42.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@10.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@16.2); Consistency error: perm and forperm expressions are not allowed in predicate bodies (0106.vpr@22.2)))
../../src/test/resources/frontend-generated/all/issues/silver/0108.vpr,0,1142,13,1,1124,1146,1157,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0114-1.vpr,1,1,0,0,1,1,1,Vector(List(Parse error: Number of macro arguments does not match (0114-1.vpr@9.12)); List(Parse error: Number of macro arguments does not match (0114-1.vpr@9.12)); List(Parse error: Number of macro arguments does not match (0114-1.vpr@9.12)); List(Parse error: Number of macro arguments does not match (0114-1.vpr@9.12)); List(Parse error: Number of macro arguments does not match (0114-1.vpr@9.12)))
../../src/test/resources/frontend-generated/all/issues/silver/0114.vpr,1,1,0,0,1,1,1,Vector(List(Parse error: Number of macro arguments does not match (0114.vpr@8.14)); List(Parse error: Number of macro arguments does not match (0114.vpr@8.14)); List(Parse error: Number of macro arguments does not match (0114.vpr@8.14)); List(Parse error: Number of macro arguments does not match (0114.vpr@8.14)); List(Parse error: Number of macro arguments does not match (0114.vpr@8.14)))
../../src/test/resources/frontend-generated/all/issues/silver/0116.vpr,2,1,0,0,1,2,2,Vector(List(local variable a cannot be accessed before it is declared. (0116.vpr@7.2); identifier x not defined. (0116.vpr@20.15)); List(local variable a cannot be accessed before it is declared. (0116.vpr@7.2); identifier x not defined. (0116.vpr@20.15)); List(local variable a cannot be accessed before it is declared. (0116.vpr@7.2); identifier x not defined. (0116.vpr@20.15)); List(local variable a cannot be accessed before it is declared. (0116.vpr@7.2); identifier x not defined. (0116.vpr@20.15)); List(local variable a cannot be accessed before it is declared. (0116.vpr@7.2); identifier x not defined. (0116.vpr@20.15)))
../../src/test/resources/frontend-generated/all/issues/silver/0117.vpr,0,1104,26,2,1067,1115,1130,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0118.vpr,1,1360,17,1,1337,1367,1378,Vector(List([postcondition.violated:assertion.false] Postcondition of test02 might not hold. Assertion Seq(x; y) == zip(xs; ys) might not hold. (0118.vpr@16.12)); List([postcondition.violated:assertion.false] Postcondition of test02 might not hold. Assertion Seq(x; y) == zip(xs; ys) might not hold. (0118.vpr@16.12)); List([postcondition.violated:assertion.false] Postcondition of test02 might not hold. Assertion Seq(x; y) == zip(xs; ys) might not hold. (0118.vpr@16.12)); List([postcondition.violated:assertion.false] Postcondition of test02 might not hold. Assertion Seq(x; y) == zip(xs; ys) might not hold. (0118.vpr@16.12)); List([postcondition.violated:assertion.false] Postcondition of test02 might not hold. Assertion Seq(x; y) == zip(xs; ys) might not hold. (0118.vpr@16.12)))
../../src/test/resources/frontend-generated/all/issues/silver/0120.vpr,2,6,0,0,6,6,7,Vector(List(Consistency error: acc(r.f; 1 / 2) is non pure and appears where only pure expressions are allowed. (0120.vpr@11.33); Consistency error: acc(p(r); 1 / 2) is non pure and appears where only pure expressions are allowed. (0120.vpr@17.33)); List(Consistency error: acc(r.f; 1 / 2) is non pure and appears where only pure expressions are allowed. (0120.vpr@11.33); Consistency error: acc(p(r); 1 / 2) is non pure and appears where only pure expressions are allowed. (0120.vpr@17.33)); List(Consistency error: acc(r.f; 1 / 2) is non pure and appears where only pure expressions are allowed. (0120.vpr@11.33); Consistency error: acc(p(r); 1 / 2) is non pure and appears where only pure expressions are allowed. (0120.vpr@17.33)); List(Consistency error: acc(r.f; 1 / 2) is non pure and appears where only pure expressions are allowed. (0120.vpr@11.33); Consistency error: acc(p(r); 1 / 2) is non pure and appears where only pure expressions are allowed. (0120.vpr@17.33)); List(Consistency error: acc(r.f; 1 / 2) is non pure and appears where only pure expressions are allowed. (0120.vpr@11.33); Consistency error: acc(p(r); 1 / 2) is non pure and appears where only pure expressions are allowed. (0120.vpr@17.33)))
../../src/test/resources/frontend-generated/all/issues/silver/0126.vpr,0,1330,24,1,1312,1314,1364,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0127-1.vpr,5,3,0,0,3,3,4,Vector(List(expected function or predicate  (0127-1.vpr@22.12); specified location is not a field nor a predicate (0127-1.vpr@28.16); expected function or predicate  (0127-1.vpr@33.16); expected predicate access (0127-1.vpr@39.13); specified location is not a field nor a predicate (0127-1.vpr@39.13)); List(expected function or predicate  (0127-1.vpr@22.12); specified location is not a field nor a predicate (0127-1.vpr@28.16); expected function or predicate  (0127-1.vpr@33.16); expected predicate access (0127-1.vpr@39.13); specified location is not a field nor a predicate (0127-1.vpr@39.13)); List(expected function or predicate  (0127-1.vpr@22.12); specified location is not a field nor a predicate (0127-1.vpr@28.16); expected function or predicate  (0127-1.vpr@33.16); expected predicate access (0127-1.vpr@39.13); specified location is not a field nor a predicate (0127-1.vpr@39.13)); List(expected function or predicate  (0127-1.vpr@22.12); specified location is not a field nor a predicate (0127-1.vpr@28.16); expected function or predicate  (0127-1.vpr@33.16); expected predicate access (0127-1.vpr@39.13); specified location is not a field nor a predicate (0127-1.vpr@39.13)); List(expected function or predicate  (0127-1.vpr@22.12); specified location is not a field nor a predicate (0127-1.vpr@28.16); expected function or predicate  (0127-1.vpr@33.16); expected predicate access (0127-1.vpr@39.13); specified location is not a field nor a predicate (0127-1.vpr@39.13)))
../../src/test/resources/frontend-generated/all/issues/silver/0127-2.vpr,1,1156,35,3,1107,1172,1190,Vector(List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access P(). (0127-2.vpr@12.3)); List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access P(). (0127-2.vpr@12.3)); List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access P(). (0127-2.vpr@12.3)); List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access P(). (0127-2.vpr@12.3)); List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access P(). (0127-2.vpr@12.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0127.vpr,0,1175,28,2,1137,1186,1204,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0128.vpr,1,1,0,0,1,1,1,Vector(List(expected identifier; but got PFunction(PIdnDef(balance);ArrayBuffer(PFormalArgDecl(PIdnDef(this);Ref));Int;ArrayBuffer();ArrayBuffer();None) (0128.vpr@8.12)); List(expected identifier; but got PFunction(PIdnDef(balance);ArrayBuffer(PFormalArgDecl(PIdnDef(this);Ref));Int;ArrayBuffer();ArrayBuffer();None) (0128.vpr@8.12)); List(expected identifier; but got PFunction(PIdnDef(balance);ArrayBuffer(PFormalArgDecl(PIdnDef(this);Ref));Int;ArrayBuffer();ArrayBuffer();None) (0128.vpr@8.12)); List(expected identifier; but got PFunction(PIdnDef(balance);ArrayBuffer(PFormalArgDecl(PIdnDef(this);Ref));Int;ArrayBuffer();ArrayBuffer();None) (0128.vpr@8.12)); List(expected identifier; but got PFunction(PIdnDef(balance);ArrayBuffer(PFormalArgDecl(PIdnDef(this);Ref));Int;ArrayBuffer();ArrayBuffer();None) (0128.vpr@8.12)))
../../src/test/resources/frontend-generated/all/issues/silver/0129.vpr,0,1283,20,1,1256,1289,1306,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0130.vpr,0,1114,29,2,1073,1132,1137,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0131.vpr,4,9,0,0,9,10,10,Vector(List(Consistency error: Function f recurses via its precondition: the cycle contains the function(s) f (0131.vpr@5.1); Consistency error: Function f1 recurses via its precondition: the cycle contains the function(s) f1; f2 (0131.vpr@9.1); Consistency error: Function f2 recurses via its precondition: the cycle contains the function(s) f2; f1 (0131.vpr@13.1); Consistency error: Function f10 recurses via its precondition: the cycle contains the function(s) f10; g10 (0131.vpr@35.1)); List(Consistency error: Function f recurses via its precondition: the cycle contains the function(s) f (0131.vpr@5.1); Consistency error: Function f1 recurses via its precondition: the cycle contains the function(s) f1; f2 (0131.vpr@9.1); Consistency error: Function f2 recurses via its precondition: the cycle contains the function(s) f2; f1 (0131.vpr@13.1); Consistency error: Function f10 recurses via its precondition: the cycle contains the function(s) f10; g10 (0131.vpr@35.1)); List(Consistency error: Function f recurses via its precondition: the cycle contains the function(s) f (0131.vpr@5.1); Consistency error: Function f1 recurses via its precondition: the cycle contains the function(s) f1; f2 (0131.vpr@9.1); Consistency error: Function f2 recurses via its precondition: the cycle contains the function(s) f2; f1 (0131.vpr@13.1); Consistency error: Function f10 recurses via its precondition: the cycle contains the function(s) f10; g10 (0131.vpr@35.1)); List(Consistency error: Function f recurses via its precondition: the cycle contains the function(s) f (0131.vpr@5.1); Consistency error: Function f1 recurses via its precondition: the cycle contains the function(s) f1; f2 (0131.vpr@9.1); Consistency error: Function f2 recurses via its precondition: the cycle contains the function(s) f2; f1 (0131.vpr@13.1); Consistency error: Function f10 recurses via its precondition: the cycle contains the function(s) f10; g10 (0131.vpr@35.1)); List(Consistency error: Function f recurses via its precondition: the cycle contains the function(s) f (0131.vpr@5.1); Consistency error: Function f1 recurses via its precondition: the cycle contains the function(s) f1; f2 (0131.vpr@9.1); Consistency error: Function f2 recurses via its precondition: the cycle contains the function(s) f2; f1 (0131.vpr@13.1); Consistency error: Function f10 recurses via its precondition: the cycle contains the function(s) f10; g10 (0131.vpr@35.1)))
../../src/test/resources/frontend-generated/all/issues/silver/0132.vpr,1,1,0,0,1,2,2,Vector(List(Consistency error: No matching identifier l1 found of type Label. (0132.vpr@7.18)); List(Consistency error: No matching identifier l1 found of type Label. (0132.vpr@7.18)); List(Consistency error: No matching identifier l1 found of type Label. (0132.vpr@7.18)); List(Consistency error: No matching identifier l1 found of type Label. (0132.vpr@7.18)); List(Consistency error: No matching identifier l1 found of type Label. (0132.vpr@7.18)))
../../src/test/resources/frontend-generated/all/issues/silver/0137.vpr,1,1,0,0,1,1,2,Vector(List(expected function or predicate  (0137.vpr@9.18)); List(expected function or predicate  (0137.vpr@9.18)); List(expected function or predicate  (0137.vpr@9.18)); List(expected function or predicate  (0137.vpr@9.18)); List(expected function or predicate  (0137.vpr@9.18)))
../../src/test/resources/frontend-generated/all/issues/silver/0138.vpr,1,4,0,0,3,4,5,Vector(List(Parse error: Expected found "{\n  define inner {\n "; expected invalid identifier (could be a keyword) | exp | "{" ~ (nodefinestmt ~ ";".?).rep(sep = ("/*" ~ (!(StringIn("*/")) ~ AnyChar).rep ~ "*/" | "//" ~ CharsWhile(viper.silver.parser.FastParser$$$Lambda$617/37268876@1b5efcc4).? ~ ("\n" | End) | " " | "\t" | "\n" | "\r").rep) ~ "}" at index 156 { ^ (0138.vpr@6.1)); List(Parse error: Expected found "{\n  define inner {\n "; expected invalid identifier (could be a keyword) | exp | "{" ~ (nodefinestmt ~ ";".?).rep(sep = ("/*" ~ (!(StringIn("*/")) ~ AnyChar).rep ~ "*/" | "//" ~ CharsWhile(viper.silver.parser.FastParser$$$Lambda$617/37268876@1b5efcc4).? ~ ("\n" | End) | " " | "\t" | "\n" | "\r").rep) ~ "}" at index 156 { ^ (0138.vpr@6.1)); List(Parse error: Expected found "{\n  define inner {\n "; expected invalid identifier (could be a keyword) | exp | "{" ~ (nodefinestmt ~ ";".?).rep(sep = ("/*" ~ (!(StringIn("*/")) ~ AnyChar).rep ~ "*/" | "//" ~ CharsWhile(viper.silver.parser.FastParser$$$Lambda$617/37268876@1b5efcc4).? ~ ("\n" | End) | " " | "\t" | "\n" | "\r").rep) ~ "}" at index 156 { ^ (0138.vpr@6.1)); List(Parse error: Expected found "{\n  define inner {\n "; expected invalid identifier (could be a keyword) | exp | "{" ~ (nodefinestmt ~ ";".?).rep(sep = ("/*" ~ (!(StringIn("*/")) ~ AnyChar).rep ~ "*/" | "//" ~ CharsWhile(viper.silver.parser.FastParser$$$Lambda$617/37268876@1b5efcc4).? ~ ("\n" | End) | " " | "\t" | "\n" | "\r").rep) ~ "}" at index 156 { ^ (0138.vpr@6.1)); List(Parse error: Expected found "{\n  define inner {\n "; expected invalid identifier (could be a keyword) | exp | "{" ~ (nodefinestmt ~ ";".?).rep(sep = ("/*" ~ (!(StringIn("*/")) ~ AnyChar).rep ~ "*/" | "//" ~ CharsWhile(viper.silver.parser.FastParser$$$Lambda$617/37268876@1b5efcc4).? ~ ("\n" | End) | " " | "\t" | "\n" | "\r").rep) ~ "}" at index 156 { ^ (0138.vpr@6.1)))
../../src/test/resources/frontend-generated/all/issues/silver/0139.vpr,0,1076,3,0,1073,1075,1081,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0140.vpr,1,1130,10,0,1122,1123,1145,Vector(List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (0140.vpr@7.3)); List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (0140.vpr@7.3)); List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (0140.vpr@7.3)); List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (0140.vpr@7.3)); List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (0140.vpr@7.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0142.vpr,1,1130,32,2,1086,1142,1163,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion -a + b == -(a + b) might not hold. (0142.vpr@8.5)); List([assert.failed:assertion.false] Assert might fail. Assertion -a + b == -(a + b) might not hold. (0142.vpr@8.5)); List([assert.failed:assertion.false] Assert might fail. Assertion -a + b == -(a + b) might not hold. (0142.vpr@8.5)); List([assert.failed:assertion.false] Assert might fail. Assertion -a + b == -(a + b) might not hold. (0142.vpr@8.5)); List([assert.failed:assertion.false] Assert might fail. Assertion -a + b == -(a + b) might not hold. (0142.vpr@8.5)))
../../src/test/resources/frontend-generated/all/issues/silver/0148.vpr,0,1340,3,0,1336,1342,1344,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0151.vpr,0,1133,26,2,1106,1125,1170,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0152.vpr,0,1087,23,2,1071,1071,1120,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0155.vpr,0,1243,28,2,1218,1229,1284,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0158.vpr,1,1,0,0,1,1,1,Vector(List(Consistency error: Variable i is not mentioned in one or more triggers. (0158.vpr@7.19)); List(Consistency error: Variable i is not mentioned in one or more triggers. (0158.vpr@7.19)); List(Consistency error: Variable i is not mentioned in one or more triggers. (0158.vpr@7.19)); List(Consistency error: Variable i is not mentioned in one or more triggers. (0158.vpr@7.19)); List(Consistency error: Variable i is not mentioned in one or more triggers. (0158.vpr@7.19)))
../../src/test/resources/frontend-generated/all/issues/silver/0159.vpr,1,1551,52,3,1511,1517,1625,Vector(List([assert.failed:receiver.not.injective] Assert might fail. Receiver of e.x [0159.vpr@11.50]  might not be injective. (0159.vpr@11.3)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of e.x [0159.vpr@11.50]  might not be injective. (0159.vpr@11.3)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of e.x [0159.vpr@11.50]  might not be injective. (0159.vpr@11.3)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of e.x [0159.vpr@11.50]  might not be injective. (0159.vpr@11.3)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of e.x [0159.vpr@11.50]  might not be injective. (0159.vpr@11.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0160.vpr,1,0,0,0,0,0,1,Vector(List(Parse error: Expression macro used in statement position (0160.vpr@9.3)); List(Parse error: Expression macro used in statement position (0160.vpr@9.3)); List(Parse error: Expression macro used in statement position (0160.vpr@9.3)); List(Parse error: Expression macro used in statement position (0160.vpr@9.3)); List(Parse error: Expression macro used in statement position (0160.vpr@9.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0162-1.vpr,1,1109,25,2,1088,1095,1146,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion x != y might not hold. (0162-1.vpr@12.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x != y might not hold. (0162-1.vpr@12.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x != y might not hold. (0162-1.vpr@12.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x != y might not hold. (0162-1.vpr@12.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x != y might not hold. (0162-1.vpr@12.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0162-2.vpr,5,1129,47,4,1066,1141,1181,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@24.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@55.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@68.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@76.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@24.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@55.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@68.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@76.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@24.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@55.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@68.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@76.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@24.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@55.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@68.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@76.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@24.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@55.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@68.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0162-2.vpr@76.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0164.vpr,1,3,0,0,3,3,3,Vector(List(Consistency error: (4 == 4 ? acc(r.f; write) : 4 == 4) is non pure and appears where only pure expressions are allowed. (0164.vpr@11.11)); List(Consistency error: (4 == 4 ? acc(r.f; write) : 4 == 4) is non pure and appears where only pure expressions are allowed. (0164.vpr@11.11)); List(Consistency error: (4 == 4 ? acc(r.f; write) : 4 == 4) is non pure and appears where only pure expressions are allowed. (0164.vpr@11.11)); List(Consistency error: (4 == 4 ? acc(r.f; write) : 4 == 4) is non pure and appears where only pure expressions are allowed. (0164.vpr@11.11)); List(Consistency error: (4 == 4 ? acc(r.f; write) : 4 == 4) is non pure and appears where only pure expressions are allowed. (0164.vpr@11.11)))
../../src/test/resources/frontend-generated/all/issues/silver/0165.vpr,1,0,0,0,0,0,1,Vector(List(Parse error: Expected found "b () { }"; expected Fail | preambleImport | defineDecl | domainDecl | fieldDecl | functionDecl | predicateDecl | methodDecl | Fail | End at index 164 field a : Intmethod b () { }                     ^ (0165.vpr@5.21)); List(Parse error: Expected found "b () { }"; expected Fail | preambleImport | defineDecl | domainDecl | fieldDecl | functionDecl | predicateDecl | methodDecl | Fail | End at index 164 field a : Intmethod b () { }                     ^ (0165.vpr@5.21)); List(Parse error: Expected found "b () { }"; expected Fail | preambleImport | defineDecl | domainDecl | fieldDecl | functionDecl | predicateDecl | methodDecl | Fail | End at index 164 field a : Intmethod b () { }                     ^ (0165.vpr@5.21)); List(Parse error: Expected found "b () { }"; expected Fail | preambleImport | defineDecl | domainDecl | fieldDecl | functionDecl | predicateDecl | methodDecl | Fail | End at index 164 field a : Intmethod b () { }                     ^ (0165.vpr@5.21)); List(Parse error: Expected found "b () { }"; expected Fail | preambleImport | defineDecl | domainDecl | fieldDecl | functionDecl | predicateDecl | methodDecl | Fail | End at index 164 field a : Intmethod b () { }                     ^ (0165.vpr@5.21)))
../../src/test/resources/frontend-generated/all/issues/silver/0167-1.vpr,1,0,0,0,0,0,1,Vector(List(Parse error: Another macro named 'P' already exists at 0167-1.vpr@4.1 (0167-1.vpr@6.1)); List(Parse error: Another macro named 'P' already exists at 0167-1.vpr@4.1 (0167-1.vpr@6.1)); List(Parse error: Another macro named 'P' already exists at 0167-1.vpr@4.1 (0167-1.vpr@6.1)); List(Parse error: Another macro named 'P' already exists at 0167-1.vpr@4.1 (0167-1.vpr@6.1)); List(Parse error: Another macro named 'P' already exists at 0167-1.vpr@4.1 (0167-1.vpr@6.1)))
../../src/test/resources/frontend-generated/all/issues/silver/0167-2.vpr,1,0,0,0,0,0,1,Vector(List(Parse error: The macro name 'x' has already been used by another identifier (0167-2.vpr@9.1)); List(Parse error: The macro name 'x' has already been used by another identifier (0167-2.vpr@9.1)); List(Parse error: The macro name 'x' has already been used by another identifier (0167-2.vpr@9.1)); List(Parse error: The macro name 'x' has already been used by another identifier (0167-2.vpr@9.1)); List(Parse error: The macro name 'x' has already been used by another identifier (0167-2.vpr@9.1)))
../../src/test/resources/frontend-generated/all/issues/silver/0168.vpr,0,1100,15,1,1085,1096,1121,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0168_lib.vpr,0,1130,13,1,1115,1129,1147,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0170.vpr,0,1130,23,2,1107,1120,1163,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0172.vpr,0,1186,8,0,1175,1187,1196,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0174.vpr,1,2,0,0,2,2,2,Vector(List(Consistency error: Axioms can never contain location accesses. (0174.vpr@9.5)); List(Consistency error: Axioms can never contain location accesses. (0174.vpr@9.5)); List(Consistency error: Axioms can never contain location accesses. (0174.vpr@9.5)); List(Consistency error: Axioms can never contain location accesses. (0174.vpr@9.5)); List(Consistency error: Axioms can never contain location accesses. (0174.vpr@9.5)))
../../src/test/resources/frontend-generated/all/issues/silver/0175.vpr,1,4014,28,0,3980,4014,4049,Vector(List([not.wellformed:seq.index.length] Contract might not be well-formed. Index j into xs might exceed sequence length. (0175.vpr@9.13)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index j into xs might exceed sequence length. (0175.vpr@9.13)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index j into xs might exceed sequence length. (0175.vpr@9.13)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index j into xs might exceed sequence length. (0175.vpr@9.13)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index j into xs might exceed sequence length. (0175.vpr@9.13)))
../../src/test/resources/frontend-generated/all/issues/silver/0175b.vpr,2,6,0,0,6,6,6,Vector(List(Consistency error: Nested quantifiers are not allowed for quantified permissions. (0175b.vpr@8.30); Consistency error: (x in xs) && (forall i: Int :: (i in [0..|ys|)) ==> acc(ys[i].f; write)) is non pure and appears where only pure expressions are allowed. (0175b.vpr@8.30)); List(Consistency error: Nested quantifiers are not allowed for quantified permissions. (0175b.vpr@8.30); Consistency error: (x in xs) && (forall i: Int :: (i in [0..|ys|)) ==> acc(ys[i].f; write)) is non pure and appears where only pure expressions are allowed. (0175b.vpr@8.30)); List(Consistency error: Nested quantifiers are not allowed for quantified permissions. (0175b.vpr@8.30); Consistency error: (x in xs) && (forall i: Int :: (i in [0..|ys|)) ==> acc(ys[i].f; write)) is non pure and appears where only pure expressions are allowed. (0175b.vpr@8.30)); List(Consistency error: Nested quantifiers are not allowed for quantified permissions. (0175b.vpr@8.30); Consistency error: (x in xs) && (forall i: Int :: (i in [0..|ys|)) ==> acc(ys[i].f; write)) is non pure and appears where only pure expressions are allowed. (0175b.vpr@8.30)); List(Consistency error: Nested quantifiers are not allowed for quantified permissions. (0175b.vpr@8.30); Consistency error: (x in xs) && (forall i: Int :: (i in [0..|ys|)) ==> acc(ys[i].f; write)) is non pure and appears where only pure expressions are allowed. (0175b.vpr@8.30)))
../../src/test/resources/frontend-generated/all/issues/silver/0176.vpr,0,1131,19,1,1104,1144,1145,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0177-1.vpr,0,1120,31,2,1094,1102,1164,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0177-2.vpr,1,1,0,0,1,1,1,Vector(List(Parse error: The only calls that can be on the left-hand side of an assignment statement are calls to macros (0177-2.vpr@12.5)); List(Parse error: The only calls that can be on the left-hand side of an assignment statement are calls to macros (0177-2.vpr@12.5)); List(Parse error: The only calls that can be on the left-hand side of an assignment statement are calls to macros (0177-2.vpr@12.5)); List(Parse error: The only calls that can be on the left-hand side of an assignment statement are calls to macros (0177-2.vpr@12.5)); List(Parse error: The only calls that can be on the left-hand side of an assignment statement are calls to macros (0177-2.vpr@12.5)))
../../src/test/resources/frontend-generated/all/issues/silver/0177-3.vpr,1,1,0,0,1,1,1,Vector(List(Parse error: The body of this macro is not a suitable left-hand side for an assignment statement (0177-3.vpr@9.5)); List(Parse error: The body of this macro is not a suitable left-hand side for an assignment statement (0177-3.vpr@9.5)); List(Parse error: The body of this macro is not a suitable left-hand side for an assignment statement (0177-3.vpr@9.5)); List(Parse error: The body of this macro is not a suitable left-hand side for an assignment statement (0177-3.vpr@9.5)); List(Parse error: The body of this macro is not a suitable left-hand side for an assignment statement (0177-3.vpr@9.5)))
../../src/test/resources/frontend-generated/all/issues/silver/0178-1.vpr,1,2,0,0,2,2,2,Vector(List(identifier loc not defined. (0178-1.vpr@17.3)); List(identifier loc not defined. (0178-1.vpr@17.3)); List(identifier loc not defined. (0178-1.vpr@17.3)); List(identifier loc not defined. (0178-1.vpr@17.3)); List(identifier loc not defined. (0178-1.vpr@17.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0178-2.vpr,1,1136,13,1,1118,1144,1148,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.storedInt. (0178-2.vpr@17.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.storedInt. (0178-2.vpr@17.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.storedInt. (0178-2.vpr@17.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.storedInt. (0178-2.vpr@17.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.storedInt. (0178-2.vpr@17.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0178-3.vpr,1,2,0,0,2,2,2,Vector(List(Type error in the expression at 0178-3.vpr@[17.3-17.11] (0178-3.vpr@17.3)); List(Type error in the expression at 0178-3.vpr@[17.3-17.11] (0178-3.vpr@17.3)); List(Type error in the expression at 0178-3.vpr@[17.3-17.11] (0178-3.vpr@17.3)); List(Type error in the expression at 0178-3.vpr@[17.3-17.11] (0178-3.vpr@17.3)); List(Type error in the expression at 0178-3.vpr@[17.3-17.11] (0178-3.vpr@17.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0179.vpr,0,1127,16,1,1106,1132,1145,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0180.vpr,1,2,0,0,2,2,2,Vector(List(Consistency error: No matching identifier tst found of type Label. (0180.vpr@9.15)); List(Consistency error: No matching identifier tst found of type Label. (0180.vpr@9.15)); List(Consistency error: No matching identifier tst found of type Label. (0180.vpr@9.15)); List(Consistency error: No matching identifier tst found of type Label. (0180.vpr@9.15)); List(Consistency error: No matching identifier tst found of type Label. (0180.vpr@9.15)))
../../src/test/resources/frontend-generated/all/issues/silver/0182.vpr,2,4,0,0,4,4,5,Vector(List(Type error in the expression at 0182.vpr@[20.25-20.31] (0182.vpr@20.25); Type error in the expression at 0182.vpr@[29.28-29.37] (0182.vpr@29.28)); List(Type error in the expression at 0182.vpr@[20.25-20.31] (0182.vpr@20.25); Type error in the expression at 0182.vpr@[29.28-29.37] (0182.vpr@29.28)); List(Type error in the expression at 0182.vpr@[20.25-20.31] (0182.vpr@20.25); Type error in the expression at 0182.vpr@[29.28-29.37] (0182.vpr@29.28)); List(Type error in the expression at 0182.vpr@[20.25-20.31] (0182.vpr@20.25); Type error in the expression at 0182.vpr@[29.28-29.37] (0182.vpr@29.28)); List(Type error in the expression at 0182.vpr@[20.25-20.31] (0182.vpr@20.25); Type error in the expression at 0182.vpr@[29.28-29.37] (0182.vpr@29.28)))
../../src/test/resources/frontend-generated/all/issues/silver/0183-1.vpr,1,2,0,0,2,2,3,Vector(List(Parse error: Expected found ". // misplaced dot\n "; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 183     . // misplaced dot     ^ (0183-1.vpr@9.5)); List(Parse error: Expected found ". // misplaced dot\n "; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 183     . // misplaced dot     ^ (0183-1.vpr@9.5)); List(Parse error: Expected found ". // misplaced dot\n "; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 183     . // misplaced dot     ^ (0183-1.vpr@9.5)); List(Parse error: Expected found ". // misplaced dot\n "; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 183     . // misplaced dot     ^ (0183-1.vpr@9.5)); List(Parse error: Expected found ". // misplaced dot\n "; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 183     . // misplaced dot     ^ (0183-1.vpr@9.5)))
../../src/test/resources/frontend-generated/all/issues/silver/0183-2.vpr,1,6,1,16,5,7,8,Vector(List(Parse error: Expected found "... // allocate new "; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 1018     ... // allocate new      ^ (0183-2.vpr@43.5)); List(Parse error: Expected found "... // allocate new "; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 1018     ... // allocate new      ^ (0183-2.vpr@43.5)); List(Parse error: Expected found "... // allocate new "; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 1018     ... // allocate new      ^ (0183-2.vpr@43.5)); List(Parse error: Expected found "... // allocate new "; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 1018     ... // allocate new      ^ (0183-2.vpr@43.5)); List(Parse error: Expected found "... // allocate new "; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 1018     ... // allocate new      ^ (0183-2.vpr@43.5)))
../../src/test/resources/frontend-generated/all/issues/silver/0189.vpr,1,1113,13,1,1098,1111,1130,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion otherDummy(5) might not hold. (0189.vpr@10.9)); List([assert.failed:assertion.false] Assert might fail. Assertion otherDummy(5) might not hold. (0189.vpr@10.9)); List([assert.failed:assertion.false] Assert might fail. Assertion otherDummy(5) might not hold. (0189.vpr@10.9)); List([assert.failed:assertion.false] Assert might fail. Assertion otherDummy(5) might not hold. (0189.vpr@10.9)); List([assert.failed:assertion.false] Assert might fail. Assertion otherDummy(5) might not hold. (0189.vpr@10.9)))
../../src/test/resources/frontend-generated/all/issues/silver/0190.vpr,0,1138,12,1,1121,1141,1152,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0192.vpr,1,2,0,0,2,2,2,Vector(List(Consistency error: Targets are not allowed to have duplicates (0192.vpr@14.5)); List(Consistency error: Targets are not allowed to have duplicates (0192.vpr@14.5)); List(Consistency error: Targets are not allowed to have duplicates (0192.vpr@14.5)); List(Consistency error: Targets are not allowed to have duplicates (0192.vpr@14.5)); List(Consistency error: Targets are not allowed to have duplicates (0192.vpr@14.5)))
../../src/test/resources/frontend-generated/all/issues/silver/0193.vpr,0,1146,9,0,1140,1140,1160,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0198.vpr,3,6,0,0,6,7,7,Vector(List(Type error in the expression at 0198.vpr@[26.30-26.39] (0198.vpr@26.30); Type error in the expression at 0198.vpr@[26.41-26.50] (0198.vpr@26.41); Type error in the expression at 0198.vpr@[26.65-26.69] (0198.vpr@26.65)); List(Type error in the expression at 0198.vpr@[26.30-26.39] (0198.vpr@26.30); Type error in the expression at 0198.vpr@[26.41-26.50] (0198.vpr@26.41); Type error in the expression at 0198.vpr@[26.65-26.69] (0198.vpr@26.65)); List(Type error in the expression at 0198.vpr@[26.30-26.39] (0198.vpr@26.30); Type error in the expression at 0198.vpr@[26.41-26.50] (0198.vpr@26.41); Type error in the expression at 0198.vpr@[26.65-26.69] (0198.vpr@26.65)); List(Type error in the expression at 0198.vpr@[26.30-26.39] (0198.vpr@26.30); Type error in the expression at 0198.vpr@[26.41-26.50] (0198.vpr@26.41); Type error in the expression at 0198.vpr@[26.65-26.69] (0198.vpr@26.65)); List(Type error in the expression at 0198.vpr@[26.30-26.39] (0198.vpr@26.30); Type error in the expression at 0198.vpr@[26.41-26.50] (0198.vpr@26.41); Type error in the expression at 0198.vpr@[26.65-26.69] (0198.vpr@26.65)))
../../src/test/resources/frontend-generated/all/issues/silver/0200.vpr,4,3,0,0,3,3,3,Vector(List(specified location is not a field nor a predicate (0200.vpr@14.25); specified location is not a field nor a predicate (0200.vpr@25.16); specified location is not a field nor a predicate (0200.vpr@35.18); specified location is not a field nor a predicate (0200.vpr@48.18)); List(specified location is not a field nor a predicate (0200.vpr@14.25); specified location is not a field nor a predicate (0200.vpr@25.16); specified location is not a field nor a predicate (0200.vpr@35.18); specified location is not a field nor a predicate (0200.vpr@48.18)); List(specified location is not a field nor a predicate (0200.vpr@14.25); specified location is not a field nor a predicate (0200.vpr@25.16); specified location is not a field nor a predicate (0200.vpr@35.18); specified location is not a field nor a predicate (0200.vpr@48.18)); List(specified location is not a field nor a predicate (0200.vpr@14.25); specified location is not a field nor a predicate (0200.vpr@25.16); specified location is not a field nor a predicate (0200.vpr@35.18); specified location is not a field nor a predicate (0200.vpr@48.18)); List(specified location is not a field nor a predicate (0200.vpr@14.25); specified location is not a field nor a predicate (0200.vpr@25.16); specified location is not a field nor a predicate (0200.vpr@35.18); specified location is not a field nor a predicate (0200.vpr@48.18)))
../../src/test/resources/frontend-generated/all/issues/silver/0201.vpr,4,2,0,0,2,2,3,Vector(List(Consistency error: No matching identifier l found of type Label. (0201.vpr@6.16); Consistency error: No matching identifier l found of type Label. (0201.vpr@8.15); Consistency error: Labelled-old expressions are not allowed in preconditions. (0201.vpr@6.13); Consistency error: Labelled-old expressions are not allowed in postconditions. (0201.vpr@8.12)); List(Consistency error: No matching identifier l found of type Label. (0201.vpr@6.16); Consistency error: No matching identifier l found of type Label. (0201.vpr@8.15); Consistency error: Labelled-old expressions are not allowed in preconditions. (0201.vpr@6.13); Consistency error: Labelled-old expressions are not allowed in postconditions. (0201.vpr@8.12)); List(Consistency error: No matching identifier l found of type Label. (0201.vpr@6.16); Consistency error: No matching identifier l found of type Label. (0201.vpr@8.15); Consistency error: Labelled-old expressions are not allowed in preconditions. (0201.vpr@6.13); Consistency error: Labelled-old expressions are not allowed in postconditions. (0201.vpr@8.12)); List(Consistency error: No matching identifier l found of type Label. (0201.vpr@6.16); Consistency error: No matching identifier l found of type Label. (0201.vpr@8.15); Consistency error: Labelled-old expressions are not allowed in preconditions. (0201.vpr@6.13); Consistency error: Labelled-old expressions are not allowed in postconditions. (0201.vpr@8.12)); List(Consistency error: No matching identifier l found of type Label. (0201.vpr@6.16); Consistency error: No matching identifier l found of type Label. (0201.vpr@8.15); Consistency error: Labelled-old expressions are not allowed in preconditions. (0201.vpr@6.13); Consistency error: Labelled-old expressions are not allowed in postconditions. (0201.vpr@8.12)))
../../src/test/resources/frontend-generated/all/issues/silver/0202.vpr,1,1,0,0,1,1,2,Vector(List({ i + 1 } is not a valid Trigger (0202.vpr@7.28)); List({ i + 1 } is not a valid Trigger (0202.vpr@7.28)); List({ i + 1 } is not a valid Trigger (0202.vpr@7.28)); List({ i + 1 } is not a valid Trigger (0202.vpr@7.28)); List({ i + 1 } is not a valid Trigger (0202.vpr@7.28)))
../../src/test/resources/frontend-generated/all/issues/silver/0204.vpr,3,1783,32,1,1749,1775,1827,Vector(List([exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@54.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@63.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@71.3)); List([exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@54.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@63.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@71.3)); List([exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@54.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@63.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@71.3)); List([exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@54.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@63.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@71.3)); List([exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@54.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@63.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (0204.vpr@71.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0205.vpr,1,1088,58,5,1023,1078,1164,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0205.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0205.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0205.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0205.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0205.vpr@14.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0207.vpr,0,1297,28,2,1277,1277,1338,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0208.vpr,1,1242,13,1,1225,1246,1257,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forall i$0: Int :: { foo(i; i$0) } foo(i; i$0)) might not hold. (0208.vpr@25.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i$0: Int :: { foo(i; i$0) } foo(i; i$0)) might not hold. (0208.vpr@25.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i$0: Int :: { foo(i; i$0) } foo(i; i$0)) might not hold. (0208.vpr@25.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i$0: Int :: { foo(i; i$0) } foo(i; i$0)) might not hold. (0208.vpr@25.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i$0: Int :: { foo(i; i$0) } foo(i; i$0)) might not hold. (0208.vpr@25.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0209.vpr,0,1164,26,2,1128,1179,1187,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0210.vpr,1,1143,25,2,1107,1158,1165,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { f(i) } f(i)) might not hold. (0210.vpr@13.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { f(i) } f(i)) might not hold. (0210.vpr@13.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { f(i) } f(i)) might not hold. (0210.vpr@13.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { f(i) } f(i)) might not hold. (0210.vpr@13.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { f(i) } f(i)) might not hold. (0210.vpr@13.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0211.vpr,1,1150,31,2,1107,1161,1183,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion 1 / 2 * (2 / 1) == 0 / 1 might not hold. (0211.vpr@20.5)); List([assert.failed:assertion.false] Assert might fail. Assertion 1 / 2 * (2 / 1) == 0 / 1 might not hold. (0211.vpr@20.5)); List([assert.failed:assertion.false] Assert might fail. Assertion 1 / 2 * (2 / 1) == 0 / 1 might not hold. (0211.vpr@20.5)); List([assert.failed:assertion.false] Assert might fail. Assertion 1 / 2 * (2 / 1) == 0 / 1 might not hold. (0211.vpr@20.5)); List([assert.failed:assertion.false] Assert might fail. Assertion 1 / 2 * (2 / 1) == 0 / 1 might not hold. (0211.vpr@20.5)))
../../src/test/resources/frontend-generated/all/issues/silver/0212.vpr,0,1341,21,1,1315,1342,1368,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0213a.vpr,1,1,0,0,1,2,2,Vector(List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: viper.silver.parser.PBinExp@7244827e (0213a.vpr@16.32)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: viper.silver.parser.PBinExp@7244827e (0213a.vpr@16.32)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: viper.silver.parser.PBinExp@7244827e (0213a.vpr@16.32)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: viper.silver.parser.PBinExp@7244827e (0213a.vpr@16.32)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: viper.silver.parser.PBinExp@7244827e (0213a.vpr@16.32)))
../../src/test/resources/frontend-generated/all/issues/silver/0213b.vpr,1,1,0,0,1,2,2,Vector(List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213b.vpr@16.15)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213b.vpr@16.15)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213b.vpr@16.15)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213b.vpr@16.15)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213b.vpr@16.15)))
../../src/test/resources/frontend-generated/all/issues/silver/0213c.vpr,1,1,0,0,1,1,1,Vector(List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213c.vpr@9.15)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213c.vpr@9.15)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213c.vpr@9.15)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213c.vpr@9.15)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213c.vpr@9.15)))
../../src/test/resources/frontend-generated/all/issues/silver/0213d.vpr,1,1,0,0,1,1,2,Vector(List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213d.vpr@16.14)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213d.vpr@16.14)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213d.vpr@16.14)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213d.vpr@16.14)); List(Parse error: Macro expansion would result in invalid code... ...occurs in position where a location access is required; but the body is of the form: PBoolLit(true) (0213d.vpr@16.14)))
../../src/test/resources/frontend-generated/all/issues/silver/0214.vpr,0,1165,29,2,1129,1167,1200,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0215-1.vpr,1,0,0,0,0,1,1,Vector(List(Parse error: Macros cannot be defined inside magic wands proof scripts (0215-1.vpr@8.5)); List(Parse error: Macros cannot be defined inside magic wands proof scripts (0215-1.vpr@8.5)); List(Parse error: Macros cannot be defined inside magic wands proof scripts (0215-1.vpr@8.5)); List(Parse error: Macros cannot be defined inside magic wands proof scripts (0215-1.vpr@8.5)); List(Parse error: Macros cannot be defined inside magic wands proof scripts (0215-1.vpr@8.5)))
../../src/test/resources/frontend-generated/all/issues/silver/0215-2.vpr,1,2,0,0,2,2,2,Vector(List(Parse error: Macros cannot be defined inside magic wands proof scripts (0215-2.vpr@25.9)); List(Parse error: Macros cannot be defined inside magic wands proof scripts (0215-2.vpr@25.9)); List(Parse error: Macros cannot be defined inside magic wands proof scripts (0215-2.vpr@25.9)); List(Parse error: Macros cannot be defined inside magic wands proof scripts (0215-2.vpr@25.9)); List(Parse error: Macros cannot be defined inside magic wands proof scripts (0215-2.vpr@25.9)))
../../src/test/resources/frontend-generated/all/issues/silver/0217.vpr,1,0,0,0,0,1,1,Vector(List(Parse error: Number of macro arguments does not match (0217.vpr@10.10)); List(Parse error: Number of macro arguments does not match (0217.vpr@10.10)); List(Parse error: Number of macro arguments does not match (0217.vpr@10.10)); List(Parse error: Number of macro arguments does not match (0217.vpr@10.10)); List(Parse error: Number of macro arguments does not match (0217.vpr@10.10)))
../../src/test/resources/frontend-generated/all/issues/silver/0218a.vpr,1,1,0,0,1,1,1,Vector(List(Parse error: Recursive macro declaration found: P (0218a.vpr@7.1)); List(Parse error: Recursive macro declaration found: P (0218a.vpr@7.1)); List(Parse error: Recursive macro declaration found: P (0218a.vpr@7.1)); List(Parse error: Recursive macro declaration found: P (0218a.vpr@7.1)); List(Parse error: Recursive macro declaration found: P (0218a.vpr@7.1)))
../../src/test/resources/frontend-generated/all/issues/silver/0218b.vpr,1,1,0,0,1,1,1,Vector(List(Parse error: Recursive macro declaration found: P (0218b.vpr@6.1)); List(Parse error: Recursive macro declaration found: P (0218b.vpr@6.1)); List(Parse error: Recursive macro declaration found: P (0218b.vpr@6.1)); List(Parse error: Recursive macro declaration found: P (0218b.vpr@6.1)); List(Parse error: Recursive macro declaration found: P (0218b.vpr@6.1)))
../../src/test/resources/frontend-generated/all/issues/silver/0219.vpr,1,1,0,0,1,1,1,Vector(List(Parse error: Macro expansion would result in invalid code (encountered ParseTreeDuplicationError:) Cannot duplicate PCall(PIdnUse(check);ArrayBuffer(PIdnUse(x));None) with new children List(PBoolLit(true); ArrayBuffer(PIdnUse(x)); None) (0219.vpr@9.11)); List(Parse error: Macro expansion would result in invalid code (encountered ParseTreeDuplicationError:) Cannot duplicate PCall(PIdnUse(check);ArrayBuffer(PIdnUse(x));None) with new children List(PBoolLit(true); ArrayBuffer(PIdnUse(x)); None) (0219.vpr@9.11)); List(Parse error: Macro expansion would result in invalid code (encountered ParseTreeDuplicationError:) Cannot duplicate PCall(PIdnUse(check);ArrayBuffer(PIdnUse(x));None) with new children List(PBoolLit(true); ArrayBuffer(PIdnUse(x)); None) (0219.vpr@9.11)); List(Parse error: Macro expansion would result in invalid code (encountered ParseTreeDuplicationError:) Cannot duplicate PCall(PIdnUse(check);ArrayBuffer(PIdnUse(x));None) with new children List(PBoolLit(true); ArrayBuffer(PIdnUse(x)); None) (0219.vpr@9.11)); List(Parse error: Macro expansion would result in invalid code (encountered ParseTreeDuplicationError:) Cannot duplicate PCall(PIdnUse(check);ArrayBuffer(PIdnUse(x));None) with new children List(PBoolLit(true); ArrayBuffer(PIdnUse(x)); None) (0219.vpr@9.11)))
../../src/test/resources/frontend-generated/all/issues/silver/0222.vpr,2,1107,18,1,1083,1111,1128,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0222.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0222.vpr@23.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0222.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0222.vpr@23.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0222.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0222.vpr@23.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0222.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0222.vpr@23.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0222.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0222.vpr@23.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0226.vpr,0,1237,48,3,1174,1247,1291,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0227.vpr,0,1152,27,2,1114,1167,1175,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0230.vpr,0,1141,65,5,1051,1170,1204,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0233.vpr,0,1120,22,1,1099,1110,1152,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0235-1.vpr,1,1,0,0,1,2,2,Vector(List(Parse error: Expected found ":= 1 0\n}\n\n"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 176     var x: Int := 1 0                ^ (0235-1.vpr@7.16)); List(Parse error: Expected found ":= 1 0\n}\n\n"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 176     var x: Int := 1 0                ^ (0235-1.vpr@7.16)); List(Parse error: Expected found ":= 1 0\n}\n\n"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 176     var x: Int := 1 0                ^ (0235-1.vpr@7.16)); List(Parse error: Expected found ":= 1 0\n}\n\n"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 176     var x: Int := 1 0                ^ (0235-1.vpr@7.16)); List(Parse error: Expected found ":= 1 0\n}\n\n"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 176     var x: Int := 1 0                ^ (0235-1.vpr@7.16)))
../../src/test/resources/frontend-generated/all/issues/silver/0235-2.vpr,1,1,0,0,1,1,2,Vector(List(Parse error: Expected found ":= 1    0\n}\n"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 176     var x: Int := 1    0                ^ (0235-2.vpr@7.16)); List(Parse error: Expected found ":= 1    0\n}\n"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 176     var x: Int := 1    0                ^ (0235-2.vpr@7.16)); List(Parse error: Expected found ":= 1    0\n}\n"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 176     var x: Int := 1    0                ^ (0235-2.vpr@7.16)); List(Parse error: Expected found ":= 1    0\n}\n"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 176     var x: Int := 1    0                ^ (0235-2.vpr@7.16)); List(Parse error: Expected found ":= 1    0\n}\n"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 176     var x: Int := 1    0                ^ (0235-2.vpr@7.16)))
../../src/test/resources/frontend-generated/all/issues/silver/0235-3.vpr,0,1124,32,2,1096,1106,1170,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0238.vpr,10,5,0,0,5,6,6,Vector(List(q1 is not a domain function (0238.vpr@8.22); p1 is not a domain function (0238.vpr@8.32); q2 is not a domain function (0238.vpr@19.23); p2 is not a domain function (0238.vpr@19.33); g3 is not a domain function (0238.vpr@30.5); g4 is not a domain function (0238.vpr@43.5); g7 is not a domain function (0238.vpr@69.24); Type error in the expression at 0238.vpr@[69.24-69.29] (0238.vpr@69.24); q8 is not a domain function (0238.vpr@79.22); p8 is not a domain function (0238.vpr@79.32)); List(q1 is not a domain function (0238.vpr@8.22); p1 is not a domain function (0238.vpr@8.32); q2 is not a domain function (0238.vpr@19.23); p2 is not a domain function (0238.vpr@19.33); g3 is not a domain function (0238.vpr@30.5); g4 is not a domain function (0238.vpr@43.5); g7 is not a domain function (0238.vpr@69.24); Type error in the expression at 0238.vpr@[69.24-69.29] (0238.vpr@69.24); q8 is not a domain function (0238.vpr@79.22); p8 is not a domain function (0238.vpr@79.32)); List(q1 is not a domain function (0238.vpr@8.22); p1 is not a domain function (0238.vpr@8.32); q2 is not a domain function (0238.vpr@19.23); p2 is not a domain function (0238.vpr@19.33); g3 is not a domain function (0238.vpr@30.5); g4 is not a domain function (0238.vpr@43.5); g7 is not a domain function (0238.vpr@69.24); Type error in the expression at 0238.vpr@[69.24-69.29] (0238.vpr@69.24); q8 is not a domain function (0238.vpr@79.22); p8 is not a domain function (0238.vpr@79.32)); List(q1 is not a domain function (0238.vpr@8.22); p1 is not a domain function (0238.vpr@8.32); q2 is not a domain function (0238.vpr@19.23); p2 is not a domain function (0238.vpr@19.33); g3 is not a domain function (0238.vpr@30.5); g4 is not a domain function (0238.vpr@43.5); g7 is not a domain function (0238.vpr@69.24); Type error in the expression at 0238.vpr@[69.24-69.29] (0238.vpr@69.24); q8 is not a domain function (0238.vpr@79.22); p8 is not a domain function (0238.vpr@79.32)); List(q1 is not a domain function (0238.vpr@8.22); p1 is not a domain function (0238.vpr@8.32); q2 is not a domain function (0238.vpr@19.23); p2 is not a domain function (0238.vpr@19.33); g3 is not a domain function (0238.vpr@30.5); g4 is not a domain function (0238.vpr@43.5); g7 is not a domain function (0238.vpr@69.24); Type error in the expression at 0238.vpr@[69.24-69.29] (0238.vpr@69.24); q8 is not a domain function (0238.vpr@79.22); p8 is not a domain function (0238.vpr@79.32)))
../../src/test/resources/frontend-generated/all/issues/silver/0239-1.vpr,1,1160,6,0,1152,1160,1168,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion 0 <= i + 3 might not hold. (0239-1.vpr@12.5)); List([assert.failed:assertion.false] Assert might fail. Assertion 0 <= i + 3 might not hold. (0239-1.vpr@12.5)); List([assert.failed:assertion.false] Assert might fail. Assertion 0 <= i + 3 might not hold. (0239-1.vpr@12.5)); List([assert.failed:assertion.false] Assert might fail. Assertion 0 <= i + 3 might not hold. (0239-1.vpr@12.5)); List([assert.failed:assertion.false] Assert might fail. Assertion 0 <= i + 3 might not hold. (0239-1.vpr@12.5)))
../../src/test/resources/frontend-generated/all/issues/silver/0239-2.vpr,1,1136,17,1,1112,1147,1151,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion 0 <= i + 3 might not hold. (0239-2.vpr@12.5)); List([assert.failed:assertion.false] Assert might fail. Assertion 0 <= i + 3 might not hold. (0239-2.vpr@12.5)); List([assert.failed:assertion.false] Assert might fail. Assertion 0 <= i + 3 might not hold. (0239-2.vpr@12.5)); List([assert.failed:assertion.false] Assert might fail. Assertion 0 <= i + 3 might not hold. (0239-2.vpr@12.5)); List([assert.failed:assertion.false] Assert might fail. Assertion 0 <= i + 3 might not hold. (0239-2.vpr@12.5)))
../../src/test/resources/frontend-generated/all/issues/silver/0239-3.vpr,1,1652,50,3,1606,1629,1722,Vector(List([assert.failed:seq.index.length] Assert might fail. Index i into array might exceed sequence length. (0239-3.vpr@22.5)); List([assert.failed:seq.index.length] Assert might fail. Index i into array might exceed sequence length. (0239-3.vpr@22.5)); List([assert.failed:seq.index.length] Assert might fail. Index i into array might exceed sequence length. (0239-3.vpr@22.5)); List([assert.failed:seq.index.length] Assert might fail. Index i into array might exceed sequence length. (0239-3.vpr@22.5)); List([assert.failed:seq.index.length] Assert might fail. Index i into array might exceed sequence length. (0239-3.vpr@22.5)))
../../src/test/resources/frontend-generated/all/issues/silver/0247.vpr,2,1,0,0,1,1,1,Vector(List(expected a field as argument (0247.vpr@5.3); expected a field as argument (0247.vpr@8.3)); List(expected a field as argument (0247.vpr@5.3); expected a field as argument (0247.vpr@8.3)); List(expected a field as argument (0247.vpr@5.3); expected a field as argument (0247.vpr@8.3)); List(expected a field as argument (0247.vpr@5.3); expected a field as argument (0247.vpr@8.3)); List(expected a field as argument (0247.vpr@5.3); expected a field as argument (0247.vpr@8.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0251.vpr,0,1118,40,3,1080,1102,1174,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0257.vpr,1,1153,32,2,1117,1148,1195,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion !x ==> y != 123 might not hold. (0257.vpr@30.3)); List([assert.failed:assertion.false] Assert might fail. Assertion !x ==> y != 123 might not hold. (0257.vpr@30.3)); List([assert.failed:assertion.false] Assert might fail. Assertion !x ==> y != 123 might not hold. (0257.vpr@30.3)); List([assert.failed:assertion.false] Assert might fail. Assertion !x ==> y != 123 might not hold. (0257.vpr@30.3)); List([assert.failed:assertion.false] Assert might fail. Assertion !x ==> y != 123 might not hold. (0257.vpr@30.3)))
../../src/test/resources/frontend-generated/all/issues/silver/0258.vpr,1,1045,37,3,1011,1028,1098,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0258.vpr@20.1)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0258.vpr@20.1)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0258.vpr@20.1)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0258.vpr@20.1)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (0258.vpr@20.1)))
../../src/test/resources/frontend-generated/all/issues/silver/0260.vpr,0,1365,66,4,1311,1326,1460,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0266-2.vpr,1,0,0,0,0,0,0,Vector(List(Parse error: file "/home/mauro/desktop/viper/silicon/src/test/resources/frontend-generated/all/issues/silver/doesnotexist.vpr" does not exist (0266-2.vpr@6.8)); List(Parse error: file "/home/mauro/desktop/viper/silicon/src/test/resources/frontend-generated/all/issues/silver/doesnotexist.vpr" does not exist (0266-2.vpr@6.8)); List(Parse error: file "/home/mauro/desktop/viper/silicon/src/test/resources/frontend-generated/all/issues/silver/doesnotexist.vpr" does not exist (0266-2.vpr@6.8)); List(Parse error: file "/home/mauro/desktop/viper/silicon/src/test/resources/frontend-generated/all/issues/silver/doesnotexist.vpr" does not exist (0266-2.vpr@6.8)); List(Parse error: file "/home/mauro/desktop/viper/silicon/src/test/resources/frontend-generated/all/issues/silver/doesnotexist.vpr" does not exist (0266-2.vpr@6.8)))
../../src/test/resources/frontend-generated/all/issues/silver/0271-1.vpr,1,1,0,0,1,2,2,Vector(List(Parse error: Expected found ":= - 1 // No whitesp"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 168   var i: Int := - 1 // No whitesp              ^ (0271-1.vpr@7.14)); List(Parse error: Expected found ":= - 1 // No whitesp"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 168   var i: Int := - 1 // No whitesp              ^ (0271-1.vpr@7.14)); List(Parse error: Expected found ":= - 1 // No whitesp"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 168   var i: Int := - 1 // No whitesp              ^ (0271-1.vpr@7.14)); List(Parse error: Expected found ":= - 1 // No whitesp"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 168   var i: Int := - 1 // No whitesp              ^ (0271-1.vpr@7.14)); List(Parse error: Expected found ":= - 1 // No whitesp"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 168   var i: Int := - 1 // No whitesp              ^ (0271-1.vpr@7.14)))
../../src/test/resources/frontend-generated/all/issues/silver/0271-2.vpr,1,1,0,0,1,2,2,Vector(List(Parse error: Expected found ":= ! true // No whit"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 169   var b: Bool := ! true // No whit               ^ (0271-2.vpr@7.15)); List(Parse error: Expected found ":= ! true // No whit"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 169   var b: Bool := ! true // No whit               ^ (0271-2.vpr@7.15)); List(Parse error: Expected found ":= ! true // No whit"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 169   var b: Bool := ! true // No whit               ^ (0271-2.vpr@7.15)); List(Parse error: Expected found ":= ! true // No whit"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 169   var b: Bool := ! true // No whit               ^ (0271-2.vpr@7.15)); List(Parse error: Expected found ":= ! true // No whit"; expected Fail | macroassign | fieldassign | localassign | fold | unfold | exhale | assertP | inhale | assume | ifthnels | whle | varDecl | defineDecl | starredNewstmt | regularNewstmt | methodCall | goto | lbl | packageWand | applyWand | macroref | block | Fail | "}" at index 169   var b: Bool := ! true // No whit               ^ (0271-2.vpr@7.15)))
../../src/test/resources/frontend-generated/all/issues/silver/0274.vpr,0,1106,32,2,1083,1084,1153,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0464.vpr,0,1351,29,2,1314,1353,1386,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0465.vpr,0,1460,73,5,1384,1437,1560,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0466.vpr,0,1431,53,3,1367,1431,1497,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0467.vpr,0,1129,31,2,1085,1144,1158,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0468.vpr,0,1309,13,0,1290,1317,1321,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/issues/silver/0469.vpr,1,6,0,0,6,6,6,Vector(List(Consistency error: acc(x.b; write) && x.b is non pure and appears where only pure expressions are allowed. (0469.vpr@10.13)); List(Consistency error: acc(x.b; write) && x.b is non pure and appears where only pure expressions are allowed. (0469.vpr@10.13)); List(Consistency error: acc(x.b; write) && x.b is non pure and appears where only pure expressions are allowed. (0469.vpr@10.13)); List(Consistency error: acc(x.b; write) && x.b is non pure and appears where only pure expressions are allowed. (0469.vpr@10.13)); List(Consistency error: acc(x.b; write) && x.b is non pure and appears where only pure expressions are allowed. (0469.vpr@10.13)))
../../src/test/resources/frontend-generated/all/issues/silver/79.vpr,0,1094,23,2,1066,1093,1124,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/macros/capture_avoiding_substitution-1.vpr,1,5,0,0,5,6,6,Vector(List(Type error in the expression at capture_avoiding_substitution-1.vpr@[41.12-41.24] (capture_avoiding_substitution-1.vpr@41.12)); List(Type error in the expression at capture_avoiding_substitution-1.vpr@[41.12-41.24] (capture_avoiding_substitution-1.vpr@41.12)); List(Type error in the expression at capture_avoiding_substitution-1.vpr@[41.12-41.24] (capture_avoiding_substitution-1.vpr@41.12)); List(Type error in the expression at capture_avoiding_substitution-1.vpr@[41.12-41.24] (capture_avoiding_substitution-1.vpr@41.12)); List(Type error in the expression at capture_avoiding_substitution-1.vpr@[41.12-41.24] (capture_avoiding_substitution-1.vpr@41.12)))
../../src/test/resources/frontend-generated/all/macros/capture_avoiding_substitution-2.vpr,0,1135,10,0,1125,1131,1149,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/macros/capture_avoiding_substitution-3.vpr,0,1133,17,1,1110,1139,1152,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/macros/complex.vpr,1,1,0,0,1,1,2,Vector(List(Parse error: Recursive macro declaration found: macro2 (complex.vpr@10.1)); List(Parse error: Recursive macro declaration found: macro2 (complex.vpr@10.1)); List(Parse error: Recursive macro declaration found: macro2 (complex.vpr@10.1)); List(Parse error: Recursive macro declaration found: macro2 (complex.vpr@10.1)); List(Parse error: Recursive macro declaration found: macro2 (complex.vpr@10.1)))
../../src/test/resources/frontend-generated/all/macros/complexExp.vpr,1,1,0,0,1,1,1,Vector(List(Parse error: Recursive macro declaration found: macro (complexExp.vpr@5.1)); List(Parse error: Recursive macro declaration found: macro (complexExp.vpr@5.1)); List(Parse error: Recursive macro declaration found: macro (complexExp.vpr@5.1)); List(Parse error: Recursive macro declaration found: macro (complexExp.vpr@5.1)); List(Parse error: Recursive macro declaration found: macro (complexExp.vpr@5.1)))
../../src/test/resources/frontend-generated/all/macros/define.vpr,0,1170,23,1,1148,1160,1203,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/macros/define_consistency.vpr,2,2,0,0,2,2,2,Vector(List(identifier B not defined. (define_consistency.vpr@14.16); identifier foo not defined. (define_consistency.vpr@19.10)); List(identifier B not defined. (define_consistency.vpr@14.16); identifier foo not defined. (define_consistency.vpr@19.10)); List(identifier B not defined. (define_consistency.vpr@14.16); identifier foo not defined. (define_consistency.vpr@19.10)); List(identifier B not defined. (define_consistency.vpr@14.16); identifier foo not defined. (define_consistency.vpr@19.10)); List(identifier B not defined. (define_consistency.vpr@14.16); identifier foo not defined. (define_consistency.vpr@19.10)))
../../src/test/resources/frontend-generated/all/macros/define_consistency_typechecker.vpr,1,3,0,0,3,3,3,Vector(List(Type error in the expression at define_consistency_typechecker.vpr@[11.10-11.19] (define_consistency_typechecker.vpr@11.10)); List(Type error in the expression at define_consistency_typechecker.vpr@[11.10-11.19] (define_consistency_typechecker.vpr@11.10)); List(Type error in the expression at define_consistency_typechecker.vpr@[11.10-11.19] (define_consistency_typechecker.vpr@11.10)); List(Type error in the expression at define_consistency_typechecker.vpr@[11.10-11.19] (define_consistency_typechecker.vpr@11.10)); List(Type error in the expression at define_consistency_typechecker.vpr@[11.10-11.19] (define_consistency_typechecker.vpr@11.10)))
../../src/test/resources/frontend-generated/all/macros/define_nested.vpr,2,1118,16,1,1103,1111,1142,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (define_nested.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (define_nested.vpr@22.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (define_nested.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (define_nested.vpr@22.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (define_nested.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (define_nested.vpr@22.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (define_nested.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (define_nested.vpr@22.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (define_nested.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (define_nested.vpr@22.3)))
../../src/test/resources/frontend-generated/all/macros/simple.vpr,1,1,0,0,1,1,1,Vector(List(Parse error: Recursive macro declaration found: macro (simple.vpr@5.1)); List(Parse error: Recursive macro declaration found: macro (simple.vpr@5.1)); List(Parse error: Recursive macro declaration found: macro (simple.vpr@5.1)); List(Parse error: Recursive macro declaration found: macro (simple.vpr@5.1)); List(Parse error: Recursive macro declaration found: macro (simple.vpr@5.1)))
../../src/test/resources/frontend-generated/all/macros/simple2Broken.vpr,0,1126,22,1,1096,1134,1150,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/multisets/multisets.vpr,6,1305,59,4,1255,1271,1389,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion B1 == B2 might not hold. (multisets.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion ((x in B1)) > 0 might not hold. (multisets.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion ((x in B1)) > 0 might not hold. (multisets.vpr@55.3); [assert.failed:assertion.false] Assert might fail. Assertion |B1| == n might not hold. (multisets.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion |B1| <= 2 might not hold. (multisets.vpr@102.3); [assert.failed:assertion.false] Assert might fail. Assertion (A subset B) might not hold. (multisets.vpr@111.3)); List([assert.failed:assertion.false] Assert might fail. Assertion B1 == B2 might not hold. (multisets.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion ((x in B1)) > 0 might not hold. (multisets.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion ((x in B1)) > 0 might not hold. (multisets.vpr@55.3); [assert.failed:assertion.false] Assert might fail. Assertion |B1| == n might not hold. (multisets.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion |B1| <= 2 might not hold. (multisets.vpr@102.3); [assert.failed:assertion.false] Assert might fail. Assertion (A subset B) might not hold. (multisets.vpr@111.3)); List([assert.failed:assertion.false] Assert might fail. Assertion B1 == B2 might not hold. (multisets.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion ((x in B1)) > 0 might not hold. (multisets.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion ((x in B1)) > 0 might not hold. (multisets.vpr@55.3); [assert.failed:assertion.false] Assert might fail. Assertion |B1| == n might not hold. (multisets.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion |B1| <= 2 might not hold. (multisets.vpr@102.3); [assert.failed:assertion.false] Assert might fail. Assertion (A subset B) might not hold. (multisets.vpr@111.3)); List([assert.failed:assertion.false] Assert might fail. Assertion B1 == B2 might not hold. (multisets.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion ((x in B1)) > 0 might not hold. (multisets.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion ((x in B1)) > 0 might not hold. (multisets.vpr@55.3); [assert.failed:assertion.false] Assert might fail. Assertion |B1| == n might not hold. (multisets.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion |B1| <= 2 might not hold. (multisets.vpr@102.3); [assert.failed:assertion.false] Assert might fail. Assertion (A subset B) might not hold. (multisets.vpr@111.3)); List([assert.failed:assertion.false] Assert might fail. Assertion B1 == B2 might not hold. (multisets.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion ((x in B1)) > 0 might not hold. (multisets.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion ((x in B1)) > 0 might not hold. (multisets.vpr@55.3); [assert.failed:assertion.false] Assert might fail. Assertion |B1| == n might not hold. (multisets.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion |B1| <= 2 might not hold. (multisets.vpr@102.3); [assert.failed:assertion.false] Assert might fail. Assertion (A subset B) might not hold. (multisets.vpr@111.3)))
../../src/test/resources/frontend-generated/all/old/branching_labelled_old.vpr,2,1191,28,2,1151,1210,1212,Vector(List([assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state initial required to evaluate old[initial](m.f). (branching_labelled_old.vpr@23.3); [assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state initial required to evaluate old[initial](m.f). (branching_labelled_old.vpr@44.3)); List([assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state initial required to evaluate old[initial](m.f). (branching_labelled_old.vpr@23.3); [assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state initial required to evaluate old[initial](m.f). (branching_labelled_old.vpr@44.3)); List([assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state initial required to evaluate old[initial](m.f). (branching_labelled_old.vpr@23.3); [assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state initial required to evaluate old[initial](m.f). (branching_labelled_old.vpr@44.3)); List([assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state initial required to evaluate old[initial](m.f). (branching_labelled_old.vpr@23.3); [assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state initial required to evaluate old[initial](m.f). (branching_labelled_old.vpr@44.3)); List([assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state initial required to evaluate old[initial](m.f). (branching_labelled_old.vpr@23.3); [assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state initial required to evaluate old[initial](m.f). (branching_labelled_old.vpr@44.3)))
../../src/test/resources/frontend-generated/all/old/duplicate_label.vpr,1,3,0,0,3,3,4,Vector(List(Consistency error: Duplicate identifier initial found. (duplicate_label.vpr@18.1)); List(Consistency error: Duplicate identifier initial found. (duplicate_label.vpr@18.1)); List(Consistency error: Duplicate identifier initial found. (duplicate_label.vpr@18.1)); List(Consistency error: Duplicate identifier initial found. (duplicate_label.vpr@18.1)); List(Consistency error: Duplicate identifier initial found. (duplicate_label.vpr@18.1)))
../../src/test/resources/frontend-generated/all/old/labelled_old.vpr,4,1191,59,4,1133,1168,1272,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion old[initial](perm(m.tk)) == write might not hold. (labelled_old.vpr@36.3); [exhale.failed:assertion.false] Exhale might fail. Assertion old[initial](m.f) == 3 might not hold. (labelled_old.vpr@53.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access z.f. (labelled_old.vpr@67.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm z: Ref [z.f] :: z.f == old[first](z.f)) might not hold. (labelled_old.vpr@80.3)); List([assert.failed:assertion.false] Assert might fail. Assertion old[initial](perm(m.tk)) == write might not hold. (labelled_old.vpr@36.3); [exhale.failed:assertion.false] Exhale might fail. Assertion old[initial](m.f) == 3 might not hold. (labelled_old.vpr@53.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access z.f. (labelled_old.vpr@67.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm z: Ref [z.f] :: z.f == old[first](z.f)) might not hold. (labelled_old.vpr@80.3)); List([assert.failed:assertion.false] Assert might fail. Assertion old[initial](perm(m.tk)) == write might not hold. (labelled_old.vpr@36.3); [exhale.failed:assertion.false] Exhale might fail. Assertion old[initial](m.f) == 3 might not hold. (labelled_old.vpr@53.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access z.f. (labelled_old.vpr@67.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm z: Ref [z.f] :: z.f == old[first](z.f)) might not hold. (labelled_old.vpr@80.3)); List([assert.failed:assertion.false] Assert might fail. Assertion old[initial](perm(m.tk)) == write might not hold. (labelled_old.vpr@36.3); [exhale.failed:assertion.false] Exhale might fail. Assertion old[initial](m.f) == 3 might not hold. (labelled_old.vpr@53.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access z.f. (labelled_old.vpr@67.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm z: Ref [z.f] :: z.f == old[first](z.f)) might not hold. (labelled_old.vpr@80.3)); List([assert.failed:assertion.false] Assert might fail. Assertion old[initial](perm(m.tk)) == write might not hold. (labelled_old.vpr@36.3); [exhale.failed:assertion.false] Exhale might fail. Assertion old[initial](m.f) == 3 might not hold. (labelled_old.vpr@53.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access z.f. (labelled_old.vpr@67.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm z: Ref [z.f] :: z.f == old[first](z.f)) might not hold. (labelled_old.vpr@80.3)))
../../src/test/resources/frontend-generated/all/old/old.vpr,4,1142,30,2,1120,1121,1186,Vector(List([postcondition.violated:assertion.false] Postcondition of t2b might not hold. Assertion this.f == old(this.f) + 2 might not hold. (old.vpr@23.13); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access r.f. (old.vpr@33.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access r.f. (old.vpr@45.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (old.vpr@55.5)); List([postcondition.violated:assertion.false] Postcondition of t2b might not hold. Assertion this.f == old(this.f) + 2 might not hold. (old.vpr@23.13); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access r.f. (old.vpr@33.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access r.f. (old.vpr@45.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (old.vpr@55.5)); List([postcondition.violated:assertion.false] Postcondition of t2b might not hold. Assertion this.f == old(this.f) + 2 might not hold. (old.vpr@23.13); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access r.f. (old.vpr@33.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access r.f. (old.vpr@45.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (old.vpr@55.5)); List([postcondition.violated:assertion.false] Postcondition of t2b might not hold. Assertion this.f == old(this.f) + 2 might not hold. (old.vpr@23.13); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access r.f. (old.vpr@33.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access r.f. (old.vpr@45.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (old.vpr@55.5)); List([postcondition.violated:assertion.false] Postcondition of t2b might not hold. Assertion this.f == old(this.f) + 2 might not hold. (old.vpr@23.13); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access r.f. (old.vpr@33.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access r.f. (old.vpr@45.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (old.vpr@55.5)))
../../src/test/resources/frontend-generated/all/permission_introspection/forpermCheck.vpr,3,5,0,0,5,5,5,Vector(List(Consistency error: Body of forperm quantifier is not allowed to contain perm expressions. (forpermCheck.vpr@10.35); Consistency error: Body of forperm quantifier is not allowed to contain nested forperm expressions. (forpermCheck.vpr@16.38); Consistency error: acc(p(r); write) is non pure and appears where only pure expressions are allowed. (forpermCheck.vpr@22.37)); List(Consistency error: Body of forperm quantifier is not allowed to contain perm expressions. (forpermCheck.vpr@10.35); Consistency error: Body of forperm quantifier is not allowed to contain nested forperm expressions. (forpermCheck.vpr@16.38); Consistency error: acc(p(r); write) is non pure and appears where only pure expressions are allowed. (forpermCheck.vpr@22.37)); List(Consistency error: Body of forperm quantifier is not allowed to contain perm expressions. (forpermCheck.vpr@10.35); Consistency error: Body of forperm quantifier is not allowed to contain nested forperm expressions. (forpermCheck.vpr@16.38); Consistency error: acc(p(r); write) is non pure and appears where only pure expressions are allowed. (forpermCheck.vpr@22.37)); List(Consistency error: Body of forperm quantifier is not allowed to contain perm expressions. (forpermCheck.vpr@10.35); Consistency error: Body of forperm quantifier is not allowed to contain nested forperm expressions. (forpermCheck.vpr@16.38); Consistency error: acc(p(r); write) is non pure and appears where only pure expressions are allowed. (forpermCheck.vpr@22.37)); List(Consistency error: Body of forperm quantifier is not allowed to contain perm expressions. (forpermCheck.vpr@10.35); Consistency error: Body of forperm quantifier is not allowed to contain nested forperm expressions. (forpermCheck.vpr@16.38); Consistency error: acc(p(r); write) is non pure and appears where only pure expressions are allowed. (forpermCheck.vpr@22.37)))
../../src/test/resources/frontend-generated/all/permission_introspection/forpermFields.vpr,3,1197,2,0,1194,1199,1200,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f2. (forpermFields.vpr@49.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f2. (forpermFields.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.f1] :: false) might not hold. (forpermFields.vpr@77.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f2. (forpermFields.vpr@49.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f2. (forpermFields.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.f1] :: false) might not hold. (forpermFields.vpr@77.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f2. (forpermFields.vpr@49.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f2. (forpermFields.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.f1] :: false) might not hold. (forpermFields.vpr@77.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f2. (forpermFields.vpr@49.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f2. (forpermFields.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.f1] :: false) might not hold. (forpermFields.vpr@77.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f2. (forpermFields.vpr@49.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f2. (forpermFields.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.f1] :: false) might not hold. (forpermFields.vpr@77.3)))
../../src/test/resources/frontend-generated/all/permission_introspection/forpermInhaleExhale.vpr,3,1167,6,0,1158,1169,1174,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion x.f > 0 might not hold. (forpermInhaleExhale.vpr@9.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r: Ref [r.f] :: r.f > 0) might not hold. (forpermInhaleExhale.vpr@35.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access y.f. (forpermInhaleExhale.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f > 0 might not hold. (forpermInhaleExhale.vpr@9.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r: Ref [r.f] :: r.f > 0) might not hold. (forpermInhaleExhale.vpr@35.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access y.f. (forpermInhaleExhale.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f > 0 might not hold. (forpermInhaleExhale.vpr@9.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r: Ref [r.f] :: r.f > 0) might not hold. (forpermInhaleExhale.vpr@35.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access y.f. (forpermInhaleExhale.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f > 0 might not hold. (forpermInhaleExhale.vpr@9.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r: Ref [r.f] :: r.f > 0) might not hold. (forpermInhaleExhale.vpr@35.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access y.f. (forpermInhaleExhale.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f > 0 might not hold. (forpermInhaleExhale.vpr@9.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (forperm r: Ref [r.f] :: r.f > 0) might not hold. (forpermInhaleExhale.vpr@35.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access y.f. (forpermInhaleExhale.vpr@44.3)))
../../src/test/resources/frontend-generated/all/permission_introspection/forpermMisc.vpr,5,1221,18,1,1196,1227,1240,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (forpermMisc.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: false) might not hold. (forpermMisc.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: r == c3 ==> false) might not hold. (forpermMisc.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: r == c2 ==> false) might not hold. (forpermMisc.vpr@40.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (forpermMisc.vpr@61.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (forpermMisc.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: false) might not hold. (forpermMisc.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: r == c3 ==> false) might not hold. (forpermMisc.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: r == c2 ==> false) might not hold. (forpermMisc.vpr@40.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (forpermMisc.vpr@61.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (forpermMisc.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: false) might not hold. (forpermMisc.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: r == c3 ==> false) might not hold. (forpermMisc.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: r == c2 ==> false) might not hold. (forpermMisc.vpr@40.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (forpermMisc.vpr@61.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (forpermMisc.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: false) might not hold. (forpermMisc.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: r == c3 ==> false) might not hold. (forpermMisc.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: r == c2 ==> false) might not hold. (forpermMisc.vpr@40.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (forpermMisc.vpr@61.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (forpermMisc.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: false) might not hold. (forpermMisc.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: r == c3 ==> false) might not hold. (forpermMisc.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [r.val] :: r == c2 ==> false) might not hold. (forpermMisc.vpr@40.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (forpermMisc.vpr@61.3)))
../../src/test/resources/frontend-generated/all/permission_introspection/forpermPredicatesAdvanced.vpr,0,1221,19,1,1196,1226,1242,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/permission_introspection/forpermPredicatesSimple.vpr,2,1142,28,2,1103,1157,1167,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [P1(r)] :: false) might not hold. (forpermPredicatesSimple.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [P1(r)] :: false) might not hold. (forpermPredicatesSimple.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [P1(r)] :: false) might not hold. (forpermPredicatesSimple.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [P1(r)] :: false) might not hold. (forpermPredicatesSimple.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [P1(r)] :: false) might not hold. (forpermPredicatesSimple.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [P1(r)] :: false) might not hold. (forpermPredicatesSimple.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [P1(r)] :: false) might not hold. (forpermPredicatesSimple.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [P1(r)] :: false) might not hold. (forpermPredicatesSimple.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [P1(r)] :: false) might not hold. (forpermPredicatesSimple.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm r: Ref [P1(r)] :: false) might not hold. (forpermPredicatesSimple.vpr@44.3)))
../../src/test/resources/frontend-generated/all/permission_introspection/forpermQP.vpr,0,1783,62,3,1718,1764,1867,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/permission_introspection/forpermTypecheck.vpr,5,18,0,0,18,18,19,Vector(List(All quantified variables need to be used in a resource (forpermTypecheck.vpr@12.12); Quantified arguments can only be used directly (forpermTypecheck.vpr@19.42); Quantified arguments can only be used directly (forpermTypecheck.vpr@28.28); Quantified arguments can only be used directly (forpermTypecheck.vpr@35.44); Quantified arguments can only be used directly (forpermTypecheck.vpr@42.45)); List(All quantified variables need to be used in a resource (forpermTypecheck.vpr@12.12); Quantified arguments can only be used directly (forpermTypecheck.vpr@19.42); Quantified arguments can only be used directly (forpermTypecheck.vpr@28.28); Quantified arguments can only be used directly (forpermTypecheck.vpr@35.44); Quantified arguments can only be used directly (forpermTypecheck.vpr@42.45)); List(All quantified variables need to be used in a resource (forpermTypecheck.vpr@12.12); Quantified arguments can only be used directly (forpermTypecheck.vpr@19.42); Quantified arguments can only be used directly (forpermTypecheck.vpr@28.28); Quantified arguments can only be used directly (forpermTypecheck.vpr@35.44); Quantified arguments can only be used directly (forpermTypecheck.vpr@42.45)); List(All quantified variables need to be used in a resource (forpermTypecheck.vpr@12.12); Quantified arguments can only be used directly (forpermTypecheck.vpr@19.42); Quantified arguments can only be used directly (forpermTypecheck.vpr@28.28); Quantified arguments can only be used directly (forpermTypecheck.vpr@35.44); Quantified arguments can only be used directly (forpermTypecheck.vpr@42.45)); List(All quantified variables need to be used in a resource (forpermTypecheck.vpr@12.12); Quantified arguments can only be used directly (forpermTypecheck.vpr@19.42); Quantified arguments can only be used directly (forpermTypecheck.vpr@28.28); Quantified arguments can only be used directly (forpermTypecheck.vpr@35.44); Quantified arguments can only be used directly (forpermTypecheck.vpr@42.45)))
../../src/test/resources/frontend-generated/all/permission_introspection/forpermWands.vpr,0,1165,33,2,1131,1155,1210,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/permission_introspection/permWandAlias.vpr,0,1143,29,2,1117,1129,1185,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/permission_introspection/permWandApply.vpr,0,1157,4,0,1153,1156,1164,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/permission_introspection/permWandInhale.vpr,0,1087,11,1,1074,1087,1102,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/permission_introspection/permWandQP.vpr,1,1663,34,2,1627,1654,1709,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion perm(acc(y.f; write) --* acc(y.g; write)) == write might not hold. (permWandQP.vpr@16.5)); List([assert.failed:assertion.false] Assert might fail. Assertion perm(acc(y.f; write) --* acc(y.g; write)) == write might not hold. (permWandQP.vpr@16.5)); List([assert.failed:assertion.false] Assert might fail. Assertion perm(acc(y.f; write) --* acc(y.g; write)) == write might not hold. (permWandQP.vpr@16.5)); List([assert.failed:assertion.false] Assert might fail. Assertion perm(acc(y.f; write) --* acc(y.g; write)) == write might not hold. (permWandQP.vpr@16.5)); List([assert.failed:assertion.false] Assert might fail. Assertion perm(acc(y.f; write) --* acc(y.g; write)) == write might not hold. (permWandQP.vpr@16.5)))
../../src/test/resources/frontend-generated/all/permissions/aliasing.vpr,0,1781,73,4,1724,1736,1885,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/permissions/forperm.vpr,3,1184,20,1,1156,1191,1205,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forperm y: Ref [y.f] :: false) might not hold. (forperm.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm y: Ref [y.f] :: false) might not hold. (forperm.vpr@29.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.g. (forperm.vpr@50.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forperm y: Ref [y.f] :: false) might not hold. (forperm.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm y: Ref [y.f] :: false) might not hold. (forperm.vpr@29.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.g. (forperm.vpr@50.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forperm y: Ref [y.f] :: false) might not hold. (forperm.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm y: Ref [y.f] :: false) might not hold. (forperm.vpr@29.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.g. (forperm.vpr@50.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forperm y: Ref [y.f] :: false) might not hold. (forperm.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm y: Ref [y.f] :: false) might not hold. (forperm.vpr@29.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.g. (forperm.vpr@50.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forperm y: Ref [y.f] :: false) might not hold. (forperm.vpr@16.3); [assert.failed:assertion.false] Assert might fail. Assertion (forperm y: Ref [y.f] :: false) might not hold. (forperm.vpr@29.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.g. (forperm.vpr@50.3)))
../../src/test/resources/frontend-generated/all/permissions/framing_none_perms.vpr,2,1186,9,0,1178,1180,1200,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion vy == fun01(x; y; false) might not hold. (framing_none_perms.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion vx == fun02(x; y; true) might not hold. (framing_none_perms.vpr@30.3)); List([assert.failed:assertion.false] Assert might fail. Assertion vy == fun01(x; y; false) might not hold. (framing_none_perms.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion vx == fun02(x; y; true) might not hold. (framing_none_perms.vpr@30.3)); List([assert.failed:assertion.false] Assert might fail. Assertion vy == fun01(x; y; false) might not hold. (framing_none_perms.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion vx == fun02(x; y; true) might not hold. (framing_none_perms.vpr@30.3)); List([assert.failed:assertion.false] Assert might fail. Assertion vy == fun01(x; y; false) might not hold. (framing_none_perms.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion vx == fun02(x; y; true) might not hold. (framing_none_perms.vpr@30.3)); List([assert.failed:assertion.false] Assert might fail. Assertion vy == fun01(x; y; false) might not hold. (framing_none_perms.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion vx == fun02(x; y; true) might not hold. (framing_none_perms.vpr@30.3)))
../../src/test/resources/frontend-generated/all/permissions/loops.vpr,4,1169,18,1,1148,1166,1194,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (loops.vpr@14.15); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access x.f. (loops.vpr@36.10); [invariant.not.established:insufficient.permission] Loop invariant acc(x.f; write) might not hold on entry. There might be insufficient permission to access x.f. (loops.vpr@46.15); [invariant.not.preserved:insufficient.permission] Loop invariant acc(x.f; write) might not be preserved. There might be insufficient permission to access x.f. (loops.vpr@56.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (loops.vpr@14.15); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access x.f. (loops.vpr@36.10); [invariant.not.established:insufficient.permission] Loop invariant acc(x.f; write) might not hold on entry. There might be insufficient permission to access x.f. (loops.vpr@46.15); [invariant.not.preserved:insufficient.permission] Loop invariant acc(x.f; write) might not be preserved. There might be insufficient permission to access x.f. (loops.vpr@56.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (loops.vpr@14.15); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access x.f. (loops.vpr@36.10); [invariant.not.established:insufficient.permission] Loop invariant acc(x.f; write) might not hold on entry. There might be insufficient permission to access x.f. (loops.vpr@46.15); [invariant.not.preserved:insufficient.permission] Loop invariant acc(x.f; write) might not be preserved. There might be insufficient permission to access x.f. (loops.vpr@56.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (loops.vpr@14.15); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access x.f. (loops.vpr@36.10); [invariant.not.established:insufficient.permission] Loop invariant acc(x.f; write) might not hold on entry. There might be insufficient permission to access x.f. (loops.vpr@46.15); [invariant.not.preserved:insufficient.permission] Loop invariant acc(x.f; write) might not be preserved. There might be insufficient permission to access x.f. (loops.vpr@56.15)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (loops.vpr@14.15); [while.failed:insufficient.permission] While statement might fail. There might be insufficient permission to access x.f. (loops.vpr@36.10); [invariant.not.established:insufficient.permission] Loop invariant acc(x.f; write) might not hold on entry. There might be insufficient permission to access x.f. (loops.vpr@46.15); [invariant.not.preserved:insufficient.permission] Loop invariant acc(x.f; write) might not be preserved. There might be insufficient permission to access x.f. (loops.vpr@56.15)))
../../src/test/resources/frontend-generated/all/permissions/negative_amounts.vpr,2,1117,10,0,1110,1111,1132,Vector(List([exhale.failed:negative.permission] Exhale might fail. Fraction k might be negative. (negative_amounts.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion none < k might not hold. (negative_amounts.vpr@23.3)); List([exhale.failed:negative.permission] Exhale might fail. Fraction k might be negative. (negative_amounts.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion none < k might not hold. (negative_amounts.vpr@23.3)); List([exhale.failed:negative.permission] Exhale might fail. Fraction k might be negative. (negative_amounts.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion none < k might not hold. (negative_amounts.vpr@23.3)); List([exhale.failed:negative.permission] Exhale might fail. Fraction k might be negative. (negative_amounts.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion none < k might not hold. (negative_amounts.vpr@23.3)); List([exhale.failed:negative.permission] Exhale might fail. Fraction k might be negative. (negative_amounts.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion none < k might not hold. (negative_amounts.vpr@23.3)))
../../src/test/resources/frontend-generated/all/permissions/perm.vpr,6,1230,43,3,1181,1224,1286,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@20.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@29.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion perm(c1.val) <= 1 / 2 might not hold. (perm.vpr@46.3); [assert.failed:assertion.false] Assert might fail. Assertion perm(c3.val) <= 1 / 2 might not hold. (perm.vpr@54.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@20.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@29.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion perm(c1.val) <= 1 / 2 might not hold. (perm.vpr@46.3); [assert.failed:assertion.false] Assert might fail. Assertion perm(c3.val) <= 1 / 2 might not hold. (perm.vpr@54.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@20.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@29.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion perm(c1.val) <= 1 / 2 might not hold. (perm.vpr@46.3); [assert.failed:assertion.false] Assert might fail. Assertion perm(c3.val) <= 1 / 2 might not hold. (perm.vpr@54.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@20.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@29.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion perm(c1.val) <= 1 / 2 might not hold. (perm.vpr@46.3); [assert.failed:assertion.false] Assert might fail. Assertion perm(c3.val) <= 1 / 2 might not hold. (perm.vpr@54.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@20.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@29.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (perm.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion perm(c1.val) <= 1 / 2 might not hold. (perm.vpr@46.3); [assert.failed:assertion.false] Assert might fail. Assertion perm(c3.val) <= 1 / 2 might not hold. (perm.vpr@54.3)))
../../src/test/resources/frontend-generated/all/permissions/possibly_none_perms.vpr,3,1172,13,1,1156,1170,1190,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.f. (possibly_none_perms.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion a1 == a3 || (a1 == a2 || a2 == a3) might not hold. (possibly_none_perms.vpr@32.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (possibly_none_perms.vpr@39.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.f. (possibly_none_perms.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion a1 == a3 || (a1 == a2 || a2 == a3) might not hold. (possibly_none_perms.vpr@32.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (possibly_none_perms.vpr@39.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.f. (possibly_none_perms.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion a1 == a3 || (a1 == a2 || a2 == a3) might not hold. (possibly_none_perms.vpr@32.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (possibly_none_perms.vpr@39.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.f. (possibly_none_perms.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion a1 == a3 || (a1 == a2 || a2 == a3) might not hold. (possibly_none_perms.vpr@32.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (possibly_none_perms.vpr@39.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.f. (possibly_none_perms.vpr@10.3); [assert.failed:assertion.false] Assert might fail. Assertion a1 == a3 || (a1 == a2 || a2 == a3) might not hold. (possibly_none_perms.vpr@32.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (possibly_none_perms.vpr@39.3)))
../../src/test/resources/frontend-generated/all/permissions/various.vpr,6,1165,24,2,1147,1149,1200,Vector(List([call.precondition:insufficient.permission] The precondition of method t1 might not hold. There might be insufficient permission to access null.f. (various.vpr@14.5); [call.precondition:insufficient.permission] The precondition of method t1 might not hold. There might be insufficient permission to access r.f. (various.vpr@21.5); [call.precondition:insufficient.permission] The precondition of method t2 might not hold. There might be insufficient permission to access r.f. (various.vpr@36.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (various.vpr@48.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (various.vpr@60.5); [assert.failed:assertion.false] Assert might fail. Assertion write < 1 / 10000 might not hold. (various.vpr@74.5)); List([call.precondition:insufficient.permission] The precondition of method t1 might not hold. There might be insufficient permission to access null.f. (various.vpr@14.5); [call.precondition:insufficient.permission] The precondition of method t1 might not hold. There might be insufficient permission to access r.f. (various.vpr@21.5); [call.precondition:insufficient.permission] The precondition of method t2 might not hold. There might be insufficient permission to access r.f. (various.vpr@36.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (various.vpr@48.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (various.vpr@60.5); [assert.failed:assertion.false] Assert might fail. Assertion write < 1 / 10000 might not hold. (various.vpr@74.5)); List([call.precondition:insufficient.permission] The precondition of method t1 might not hold. There might be insufficient permission to access null.f. (various.vpr@14.5); [call.precondition:insufficient.permission] The precondition of method t1 might not hold. There might be insufficient permission to access r.f. (various.vpr@21.5); [call.precondition:insufficient.permission] The precondition of method t2 might not hold. There might be insufficient permission to access r.f. (various.vpr@36.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (various.vpr@48.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (various.vpr@60.5); [assert.failed:assertion.false] Assert might fail. Assertion write < 1 / 10000 might not hold. (various.vpr@74.5)); List([call.precondition:insufficient.permission] The precondition of method t1 might not hold. There might be insufficient permission to access null.f. (various.vpr@14.5); [call.precondition:insufficient.permission] The precondition of method t1 might not hold. There might be insufficient permission to access r.f. (various.vpr@21.5); [call.precondition:insufficient.permission] The precondition of method t2 might not hold. There might be insufficient permission to access r.f. (various.vpr@36.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (various.vpr@48.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (various.vpr@60.5); [assert.failed:assertion.false] Assert might fail. Assertion write < 1 / 10000 might not hold. (various.vpr@74.5)); List([call.precondition:insufficient.permission] The precondition of method t1 might not hold. There might be insufficient permission to access null.f. (various.vpr@14.5); [call.precondition:insufficient.permission] The precondition of method t1 might not hold. There might be insufficient permission to access r.f. (various.vpr@21.5); [call.precondition:insufficient.permission] The precondition of method t2 might not hold. There might be insufficient permission to access r.f. (various.vpr@36.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (various.vpr@48.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (various.vpr@60.5); [assert.failed:assertion.false] Assert might fail. Assertion write < 1 / 10000 might not hold. (various.vpr@74.5)))
../../src/test/resources/frontend-generated/all/predicates/arguments.vpr,4,1181,30,2,1139,1195,1209,Vector(List([fold.failed:insufficient.permission] Folding valid(this; false) might fail. There might be insufficient permission to access this.g. (arguments.vpr@47.5); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access valid(this; false). (arguments.vpr@55.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access valid(this; false). (arguments.vpr@70.15); [unfold.failed:insufficient.permission] Unfolding valid(this; true) might fail. There might be insufficient permission to access valid(this; true). (arguments.vpr@86.5)); List([fold.failed:insufficient.permission] Folding valid(this; false) might fail. There might be insufficient permission to access this.g. (arguments.vpr@47.5); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access valid(this; false). (arguments.vpr@55.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access valid(this; false). (arguments.vpr@70.15); [unfold.failed:insufficient.permission] Unfolding valid(this; true) might fail. There might be insufficient permission to access valid(this; true). (arguments.vpr@86.5)); List([fold.failed:insufficient.permission] Folding valid(this; false) might fail. There might be insufficient permission to access this.g. (arguments.vpr@47.5); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access valid(this; false). (arguments.vpr@55.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access valid(this; false). (arguments.vpr@70.15); [unfold.failed:insufficient.permission] Unfolding valid(this; true) might fail. There might be insufficient permission to access valid(this; true). (arguments.vpr@86.5)); List([fold.failed:insufficient.permission] Folding valid(this; false) might fail. There might be insufficient permission to access this.g. (arguments.vpr@47.5); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access valid(this; false). (arguments.vpr@55.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access valid(this; false). (arguments.vpr@70.15); [unfold.failed:insufficient.permission] Unfolding valid(this; true) might fail. There might be insufficient permission to access valid(this; true). (arguments.vpr@86.5)); List([fold.failed:insufficient.permission] Folding valid(this; false) might fail. There might be insufficient permission to access this.g. (arguments.vpr@47.5); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access valid(this; false). (arguments.vpr@55.15); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access valid(this; false). (arguments.vpr@70.15); [unfold.failed:insufficient.permission] Unfolding valid(this; true) might fail. There might be insufficient permission to access valid(this; true). (arguments.vpr@86.5)))
../../src/test/resources/frontend-generated/all/predicates/different_field_types.vpr,0,1171,13,1,1153,1179,1183,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/predicates/lseg.vpr,0,1377,30,2,1334,1399,1399,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/predicates/receiverless.vpr,2,1152,21,1,1128,1149,1180,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (receiverless.vpr@12.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (receiverless.vpr@27.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (receiverless.vpr@12.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (receiverless.vpr@27.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (receiverless.vpr@12.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (receiverless.vpr@27.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (receiverless.vpr@12.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (receiverless.vpr@27.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (receiverless.vpr@12.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (receiverless.vpr@27.5)))
../../src/test/resources/frontend-generated/all/predicates/unfolding.vpr,4,1187,15,1,1176,1176,1209,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (unfolding.vpr@16.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (unfolding.vpr@39.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (unfolding.vpr@72.12); [postcondition.violated:assertion.false] Postcondition of fail2 might not hold. Assertion (unfolding acc(P(this); write) in this.x == old(this.x)) might not hold. (unfolding.vpr@82.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (unfolding.vpr@16.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (unfolding.vpr@39.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (unfolding.vpr@72.12); [postcondition.violated:assertion.false] Postcondition of fail2 might not hold. Assertion (unfolding acc(P(this); write) in this.x == old(this.x)) might not hold. (unfolding.vpr@82.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (unfolding.vpr@16.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (unfolding.vpr@39.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (unfolding.vpr@72.12); [postcondition.violated:assertion.false] Postcondition of fail2 might not hold. Assertion (unfolding acc(P(this); write) in this.x == old(this.x)) might not hold. (unfolding.vpr@82.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (unfolding.vpr@16.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (unfolding.vpr@39.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (unfolding.vpr@72.12); [postcondition.violated:assertion.false] Postcondition of fail2 might not hold. Assertion (unfolding acc(P(this); write) in this.x == old(this.x)) might not hold. (unfolding.vpr@82.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (unfolding.vpr@16.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access this.x. (unfolding.vpr@39.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access P(this). (unfolding.vpr@72.12); [postcondition.violated:assertion.false] Postcondition of fail2 might not hold. Assertion (unfolding acc(P(this); write) in this.x == old(this.x)) might not hold. (unfolding.vpr@82.12)))
../../src/test/resources/frontend-generated/all/predicates/unfolding_exhale.vpr,4,1200,35,2,1161,1194,1247,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (unfolding_exhale.vpr@16.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (unfolding_exhale.vpr@39.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(this). (unfolding_exhale.vpr@67.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(P(this); write) in this.x == old(this.x)) might not hold. (unfolding_exhale.vpr@77.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (unfolding_exhale.vpr@16.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (unfolding_exhale.vpr@39.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(this). (unfolding_exhale.vpr@67.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(P(this); write) in this.x == old(this.x)) might not hold. (unfolding_exhale.vpr@77.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (unfolding_exhale.vpr@16.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (unfolding_exhale.vpr@39.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(this). (unfolding_exhale.vpr@67.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(P(this); write) in this.x == old(this.x)) might not hold. (unfolding_exhale.vpr@77.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (unfolding_exhale.vpr@16.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (unfolding_exhale.vpr@39.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(this). (unfolding_exhale.vpr@67.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(P(this); write) in this.x == old(this.x)) might not hold. (unfolding_exhale.vpr@77.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (unfolding_exhale.vpr@16.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.x. (unfolding_exhale.vpr@39.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(this). (unfolding_exhale.vpr@67.3); [exhale.failed:assertion.false] Exhale might fail. Assertion (unfolding acc(P(this); write) in this.x == old(this.x)) might not hold. (unfolding_exhale.vpr@77.3)))
../../src/test/resources/frontend-generated/all/sequences/binarySearchSeq.vpr,0,1472,25,1,1449,1459,1508,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/sequences/nil.vpr,0,1300,13,1,1282,1305,1314,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/sequences/sequence_incompletenesses.vpr,5,4609,87,1,4486,4665,4678,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { valid(slot(a; 1).val[j]; 1; true) } 0 <= j && j < |slot(a; 1).val| ==> slot(a; 1).val[j] == Seq(0; 1) && valid(slot(a; 1).val[j]; 1; true)) might not hold. (sequence_incompletenesses.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion valid(soln; n; true) might not hold. (sequence_incompletenesses.vpr@108.9); [assert.failed:assertion.false] Assert might fail. Assertion valid(soln; n; true) might not hold. (sequence_incompletenesses.vpr@184.9); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { (i in s) } { (i in ss[1..]) } (i in s) ==> (i in ss[1..])) might not hold. (sequence_incompletenesses.vpr@275.4); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { (i in t) } { (i in ss[|s|..]) } (i in t) ==> (i in ss[|s|..])) might not hold. (sequence_incompletenesses.vpr@288.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { valid(slot(a; 1).val[j]; 1; true) } 0 <= j && j < |slot(a; 1).val| ==> slot(a; 1).val[j] == Seq(0; 1) && valid(slot(a; 1).val[j]; 1; true)) might not hold. (sequence_incompletenesses.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion valid(soln; n; true) might not hold. (sequence_incompletenesses.vpr@108.9); [assert.failed:assertion.false] Assert might fail. Assertion valid(soln; n; true) might not hold. (sequence_incompletenesses.vpr@184.9); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { (i in s) } { (i in ss[1..]) } (i in s) ==> (i in ss[1..])) might not hold. (sequence_incompletenesses.vpr@275.4); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { (i in t) } { (i in ss[|s|..]) } (i in t) ==> (i in ss[|s|..])) might not hold. (sequence_incompletenesses.vpr@288.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { valid(slot(a; 1).val[j]; 1; true) } 0 <= j && j < |slot(a; 1).val| ==> slot(a; 1).val[j] == Seq(0; 1) && valid(slot(a; 1).val[j]; 1; true)) might not hold. (sequence_incompletenesses.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion valid(soln; n; true) might not hold. (sequence_incompletenesses.vpr@108.9); [assert.failed:assertion.false] Assert might fail. Assertion valid(soln; n; true) might not hold. (sequence_incompletenesses.vpr@184.9); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { (i in s) } { (i in ss[1..]) } (i in s) ==> (i in ss[1..])) might not hold. (sequence_incompletenesses.vpr@275.4); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { (i in t) } { (i in ss[|s|..]) } (i in t) ==> (i in ss[|s|..])) might not hold. (sequence_incompletenesses.vpr@288.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { valid(slot(a; 1).val[j]; 1; true) } 0 <= j && j < |slot(a; 1).val| ==> slot(a; 1).val[j] == Seq(0; 1) && valid(slot(a; 1).val[j]; 1; true)) might not hold. (sequence_incompletenesses.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion valid(soln; n; true) might not hold. (sequence_incompletenesses.vpr@108.9); [assert.failed:assertion.false] Assert might fail. Assertion valid(soln; n; true) might not hold. (sequence_incompletenesses.vpr@184.9); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { (i in s) } { (i in ss[1..]) } (i in s) ==> (i in ss[1..])) might not hold. (sequence_incompletenesses.vpr@275.4); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { (i in t) } { (i in ss[|s|..]) } (i in t) ==> (i in ss[|s|..])) might not hold. (sequence_incompletenesses.vpr@288.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { valid(slot(a; 1).val[j]; 1; true) } 0 <= j && j < |slot(a; 1).val| ==> slot(a; 1).val[j] == Seq(0; 1) && valid(slot(a; 1).val[j]; 1; true)) might not hold. (sequence_incompletenesses.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion valid(soln; n; true) might not hold. (sequence_incompletenesses.vpr@108.9); [assert.failed:assertion.false] Assert might fail. Assertion valid(soln; n; true) might not hold. (sequence_incompletenesses.vpr@184.9); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { (i in s) } { (i in ss[1..]) } (i in s) ==> (i in ss[1..])) might not hold. (sequence_incompletenesses.vpr@275.4); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { (i in t) } { (i in ss[|s|..]) } (i in t) ==> (i in ss[|s|..])) might not hold. (sequence_incompletenesses.vpr@288.3)))
../../src/test/resources/frontend-generated/all/sequences/sequences.vpr,9,21208,278,1,20835,21286,21504,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion |Seq(0)| == 0 might not hold. (sequences.vpr@10.5); [assert.failed:assertion.false] Assert might fail. Assertion a[1 := 22][0] == 22 might not hold. (sequences.vpr@31.5); [assert.failed:assertion.false] Assert might fail. Assertion |xs[1..]| == |xs| might not hold. (sequences.vpr@40.3); [assert.failed:assertion.false] Assert might fail. Assertion |s[j..]| == |s| - j might not hold. (sequences.vpr@51.3); [assert.failed:assertion.false] Assert might fail. Assertion Seq(3; 4; 5; 6)[3] == 5 might not hold. (sequences.vpr@65.3); [assert.failed:seq.index.negative] Assert might fail. Index i into Seq(3; 4; 5; 6) might be negative. (sequences.vpr@74.3); [assert.failed:seq.index.length] Assert might fail. Index i into Seq(3; 4; 5; 6) might exceed sequence length. (sequences.vpr@81.3); [assert.failed:seq.index.negative] Assert might fail. Index i into Seq(3; 4; 5; 6) might be negative. (sequences.vpr@89.3); [assignment.failed:seq.index.length] Assignment might fail. Index i into Seq(3; 4; 5; 6) might exceed sequence length. (sequences.vpr@97.3)); List([assert.failed:assertion.false] Assert might fail. Assertion |Seq(0)| == 0 might not hold. (sequences.vpr@10.5); [assert.failed:assertion.false] Assert might fail. Assertion a[1 := 22][0] == 22 might not hold. (sequences.vpr@31.5); [assert.failed:assertion.false] Assert might fail. Assertion |xs[1..]| == |xs| might not hold. (sequences.vpr@40.3); [assert.failed:assertion.false] Assert might fail. Assertion |s[j..]| == |s| - j might not hold. (sequences.vpr@51.3); [assert.failed:assertion.false] Assert might fail. Assertion Seq(3; 4; 5; 6)[3] == 5 might not hold. (sequences.vpr@65.3); [assert.failed:seq.index.negative] Assert might fail. Index i into Seq(3; 4; 5; 6) might be negative. (sequences.vpr@74.3); [assert.failed:seq.index.length] Assert might fail. Index i into Seq(3; 4; 5; 6) might exceed sequence length. (sequences.vpr@81.3); [assert.failed:seq.index.negative] Assert might fail. Index i into Seq(3; 4; 5; 6) might be negative. (sequences.vpr@89.3); [assignment.failed:seq.index.length] Assignment might fail. Index i into Seq(3; 4; 5; 6) might exceed sequence length. (sequences.vpr@97.3)); List([assert.failed:assertion.false] Assert might fail. Assertion |Seq(0)| == 0 might not hold. (sequences.vpr@10.5); [assert.failed:assertion.false] Assert might fail. Assertion a[1 := 22][0] == 22 might not hold. (sequences.vpr@31.5); [assert.failed:assertion.false] Assert might fail. Assertion |xs[1..]| == |xs| might not hold. (sequences.vpr@40.3); [assert.failed:assertion.false] Assert might fail. Assertion |s[j..]| == |s| - j might not hold. (sequences.vpr@51.3); [assert.failed:assertion.false] Assert might fail. Assertion Seq(3; 4; 5; 6)[3] == 5 might not hold. (sequences.vpr@65.3); [assert.failed:seq.index.negative] Assert might fail. Index i into Seq(3; 4; 5; 6) might be negative. (sequences.vpr@74.3); [assert.failed:seq.index.length] Assert might fail. Index i into Seq(3; 4; 5; 6) might exceed sequence length. (sequences.vpr@81.3); [assert.failed:seq.index.negative] Assert might fail. Index i into Seq(3; 4; 5; 6) might be negative. (sequences.vpr@89.3); [assignment.failed:seq.index.length] Assignment might fail. Index i into Seq(3; 4; 5; 6) might exceed sequence length. (sequences.vpr@97.3)); List([assert.failed:assertion.false] Assert might fail. Assertion |Seq(0)| == 0 might not hold. (sequences.vpr@10.5); [assert.failed:assertion.false] Assert might fail. Assertion a[1 := 22][0] == 22 might not hold. (sequences.vpr@31.5); [assert.failed:assertion.false] Assert might fail. Assertion |xs[1..]| == |xs| might not hold. (sequences.vpr@40.3); [assert.failed:assertion.false] Assert might fail. Assertion |s[j..]| == |s| - j might not hold. (sequences.vpr@51.3); [assert.failed:assertion.false] Assert might fail. Assertion Seq(3; 4; 5; 6)[3] == 5 might not hold. (sequences.vpr@65.3); [assert.failed:seq.index.negative] Assert might fail. Index i into Seq(3; 4; 5; 6) might be negative. (sequences.vpr@74.3); [assert.failed:seq.index.length] Assert might fail. Index i into Seq(3; 4; 5; 6) might exceed sequence length. (sequences.vpr@81.3); [assert.failed:seq.index.negative] Assert might fail. Index i into Seq(3; 4; 5; 6) might be negative. (sequences.vpr@89.3); [assignment.failed:seq.index.length] Assignment might fail. Index i into Seq(3; 4; 5; 6) might exceed sequence length. (sequences.vpr@97.3)); List([assert.failed:assertion.false] Assert might fail. Assertion |Seq(0)| == 0 might not hold. (sequences.vpr@10.5); [assert.failed:assertion.false] Assert might fail. Assertion a[1 := 22][0] == 22 might not hold. (sequences.vpr@31.5); [assert.failed:assertion.false] Assert might fail. Assertion |xs[1..]| == |xs| might not hold. (sequences.vpr@40.3); [assert.failed:assertion.false] Assert might fail. Assertion |s[j..]| == |s| - j might not hold. (sequences.vpr@51.3); [assert.failed:assertion.false] Assert might fail. Assertion Seq(3; 4; 5; 6)[3] == 5 might not hold. (sequences.vpr@65.3); [assert.failed:seq.index.negative] Assert might fail. Index i into Seq(3; 4; 5; 6) might be negative. (sequences.vpr@74.3); [assert.failed:seq.index.length] Assert might fail. Index i into Seq(3; 4; 5; 6) might exceed sequence length. (sequences.vpr@81.3); [assert.failed:seq.index.negative] Assert might fail. Index i into Seq(3; 4; 5; 6) might be negative. (sequences.vpr@89.3); [assignment.failed:seq.index.length] Assignment might fail. Index i into Seq(3; 4; 5; 6) might exceed sequence length. (sequences.vpr@97.3)))
../../src/test/resources/frontend-generated/all/sets/sets.vpr,0,1224,50,4,1160,1229,1283,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testCollections.vpr,0,1451,47,3,1411,1425,1518,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testGoto1.vpr,1,1120,17,1,1101,1118,1143,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion sys__result > 0 might not hold. (testGoto1.vpr@19.3)); List([assert.failed:assertion.false] Assert might fail. Assertion sys__result > 0 might not hold. (testGoto1.vpr@19.3)); List([assert.failed:assertion.false] Assert might fail. Assertion sys__result > 0 might not hold. (testGoto1.vpr@19.3)); List([assert.failed:assertion.false] Assert might fail. Assertion sys__result > 0 might not hold. (testGoto1.vpr@19.3)); List([assert.failed:assertion.false] Assert might fail. Assertion sys__result > 0 might not hold. (testGoto1.vpr@19.3)))
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testGoto2.vpr,0,1128,19,1,1105,1128,1153,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testHistoryApplication.vpr,0,1435,23,1,1403,1445,1459,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testHistoryLemmasPVL.vpr,0,1291,39,3,1236,1313,1325,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testHistoryLoop.vpr,0,1448,23,1,1422,1443,1479,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testHistoryProcessesPVL.vpr,0,1196,27,2,1158,1212,1220,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testHistoryThreadsApplication.vpr,0,1919,22,1,1890,1922,1945,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testHistoryThreadsLemmasPVL.vpr,0,1286,29,2,1258,1273,1327,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testHistoryThreadsProcessesPVL.vpr,0,1190,19,1,1169,1186,1217,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testListAppend.vpr,0,2792,11,0,2777,2795,2806,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testLockSetDemo.vpr,1,1338,14,1,1328,1328,1358,Vector(List([unfold.failed:insufficient.permission] Unfolding Client__inv(diz; write) might fail. There might be insufficient permission to access Client__inv(diz; write). (testLockSetDemo.vpr@117.3)); List([unfold.failed:insufficient.permission] Unfolding Client__inv(diz; write) might fail. There might be insufficient permission to access Client__inv(diz; write). (testLockSetDemo.vpr@117.3)); List([unfold.failed:insufficient.permission] Unfolding Client__inv(diz; write) might fail. There might be insufficient permission to access Client__inv(diz; write). (testLockSetDemo.vpr@117.3)); List([unfold.failed:insufficient.permission] Unfolding Client__inv(diz; write) might fail. There might be insufficient permission to access Client__inv(diz; write). (testLockSetDemo.vpr@117.3)); List([unfold.failed:insufficient.permission] Unfolding Client__inv(diz; write) might fail. There might be insufficient permission to access Client__inv(diz; write). (testLockSetDemo.vpr@117.3)))
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testLoopInvariant.vpr,0,1182,25,2,1150,1185,1212,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testLoopInvariantE1.vpr,1,1153,5,0,1148,1150,1161,Vector(List([invariant.not.preserved:assertion.false] Loop invariant i <= n might not be preserved. Assertion i <= n might not hold. (testLoopInvariantE1.vpr@30.15)); List([invariant.not.preserved:assertion.false] Loop invariant i <= n might not be preserved. Assertion i <= n might not hold. (testLoopInvariantE1.vpr@30.15)); List([invariant.not.preserved:assertion.false] Loop invariant i <= n might not be preserved. Assertion i <= n might not hold. (testLoopInvariantE1.vpr@30.15)); List([invariant.not.preserved:assertion.false] Loop invariant i <= n might not be preserved. Assertion i <= n might not hold. (testLoopInvariantE1.vpr@30.15)); List([invariant.not.preserved:assertion.false] Loop invariant i <= n might not be preserved. Assertion i <= n might not hold. (testLoopInvariantE1.vpr@30.15)))
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testPVLLocks.vpr,0,1355,12,0,1343,1350,1373,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testPVLSyntax.vpr,0,1296,9,0,1283,1298,1307,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testThreadInheritance.vpr,0,1391,35,2,1341,1412,1421,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testThreadInheritanceE1.vpr,1,1394,26,1,1358,1407,1418,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion w.Worker__output == 7 might not hold. (testThreadInheritanceE1.vpr@384.3)); List([assert.failed:assertion.false] Assert might fail. Assertion w.Worker__output == 7 might not hold. (testThreadInheritanceE1.vpr@384.3)); List([assert.failed:assertion.false] Assert might fail. Assertion w.Worker__output == 7 might not hold. (testThreadInheritanceE1.vpr@384.3)); List([assert.failed:assertion.false] Assert might fail. Assertion w.Worker__output == 7 might not hold. (testThreadInheritanceE1.vpr@384.3)); List([assert.failed:assertion.false] Assert might fail. Assertion w.Worker__output == 7 might not hold. (testThreadInheritanceE1.vpr@384.3)))
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testThreadInheritanceE2.vpr,1,1407,60,4,1336,1403,1484,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access w.Worker__output. (testThreadInheritanceE2.vpr@376.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access w.Worker__output. (testThreadInheritanceE2.vpr@376.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access w.Worker__output. (testThreadInheritanceE2.vpr@376.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access w.Worker__output. (testThreadInheritanceE2.vpr@376.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access w.Worker__output. (testThreadInheritanceE2.vpr@376.3)))
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testThreadInheritanceReal.vpr,0,1899,48,2,1839,1900,1958,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testTreeRecursive.vpr,0,1610,25,1,1582,1607,1643,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testTreeWand.vpr,0,20970,342,1,20716,20741,21454,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testTreeWandE1.vpr,1,20719,175,0,20540,20662,20957,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion old(Tree__tolist(top))[1..] == Tree__tolist(sys__result) might not hold. (testTreeWandE1.vpr@415.5)); List([assert.failed:assertion.false] Assert might fail. Assertion old(Tree__tolist(top))[1..] == Tree__tolist(sys__result) might not hold. (testTreeWandE1.vpr@415.5)); List([assert.failed:assertion.false] Assert might fail. Assertion old(Tree__tolist(top))[1..] == Tree__tolist(sys__result) might not hold. (testTreeWandE1.vpr@415.5)); List([assert.failed:assertion.false] Assert might fail. Assertion old(Tree__tolist(top))[1..] == Tree__tolist(sys__result) might not hold. (testTreeWandE1.vpr@415.5)); List([assert.failed:assertion.false] Assert might fail. Assertion old(Tree__tolist(top))[1..] == Tree__tolist(sys__result) might not hold. (testTreeWandE1.vpr@415.5)))
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testTreeWandE2.vpr,1,4692,25,0,4664,4689,4725,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion Tree__tolist(cur) == cur_contents[1..] might not hold. (testTreeWandE2.vpr@466.5)); List([assert.failed:assertion.false] Assert might fail. Assertion Tree__tolist(cur) == cur_contents[1..] might not hold. (testTreeWandE2.vpr@466.5)); List([assert.failed:assertion.false] Assert might fail. Assertion Tree__tolist(cur) == cur_contents[1..] might not hold. (testTreeWandE2.vpr@466.5)); List([assert.failed:assertion.false] Assert might fail. Assertion Tree__tolist(cur) == cur_contents[1..] might not hold. (testTreeWandE2.vpr@466.5)); List([assert.failed:assertion.false] Assert might fail. Assertion Tree__tolist(cur) == cur_contents[1..] might not hold. (testTreeWandE2.vpr@466.5)))
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testValue1.vpr,1,1141,19,1,1115,1148,1161,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testValue1.vpr@17.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testValue1.vpr@17.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testValue1.vpr@17.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testValue1.vpr@17.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testValue1.vpr@17.5)))
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testValue2.vpr,1,1124,2,0,1121,1124,1128,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testValue2.vpr@19.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testValue2.vpr@19.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testValue2.vpr@19.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testValue2.vpr@19.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (testValue2.vpr@19.5)))
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/testWandDemo.vpr,0,1454,19,1,1436,1447,1481,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/test_example1.vpr,1,1147,32,2,1119,1131,1193,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion c.Counter__x == 17 might not hold. (test_example1.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion c.Counter__x == 17 might not hold. (test_example1.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion c.Counter__x == 17 might not hold. (test_example1.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion c.Counter__x == 17 might not hold. (test_example1.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion c.Counter__x == 17 might not hold. (test_example1.vpr@24.3)))
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/test_example2.vpr,0,1178,30,2,1143,1176,1217,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/test_example3.vpr,1,1159,26,2,1139,1142,1197,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access c.Counter__x. (test_example3.vpr@39.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access c.Counter__x. (test_example3.vpr@39.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access c.Counter__x. (test_example3.vpr@39.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access c.Counter__x. (test_example3.vpr@39.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access c.Counter__x. (test_example3.vpr@39.3)))
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/test_example4.vpr,0,1151,8,0,1145,1147,1163,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/test_fibonacci.vpr,0,1237,17,1,1213,1249,1251,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/test_functions.vpr,0,1138,4,0,1133,1137,1144,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/test_list.vpr,0,1450,17,1,1425,1463,1463,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/test_vector_add_pvl.vpr,0,1437,15,1,1416,1443,1452,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/test_zero.vpr,0,1349,21,1,1321,1354,1374,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/stefan_recent/test_zero_err.vpr,1,1356,41,3,1308,1350,1410,Vector(List([postcondition.violated:assertion.false] Postcondition of zero__main_main might not hold. Assertion diz.zero__x[tid].Ref__Integer_value == 0 might not hold. (test_zero_err.vpr@32.11)); List([postcondition.violated:assertion.false] Postcondition of zero__main_main might not hold. Assertion diz.zero__x[tid].Ref__Integer_value == 0 might not hold. (test_zero_err.vpr@32.11)); List([postcondition.violated:assertion.false] Postcondition of zero__main_main might not hold. Assertion diz.zero__x[tid].Ref__Integer_value == 0 might not hold. (test_zero_err.vpr@32.11)); List([postcondition.violated:assertion.false] Postcondition of zero__main_main might not hold. Assertion diz.zero__x[tid].Ref__Integer_value == 0 might not hold. (test_zero_err.vpr@32.11)); List([postcondition.violated:assertion.false] Postcondition of zero__main_main might not hold. Assertion diz.zero__x[tid].Ref__Integer_value == 0 might not hold. (test_zero_err.vpr@32.11)))
../../src/test/resources/frontend-generated/all/third_party/vercors/vercors_magic_wand_demo.encoded.chalice.vpr,0,1401,8,0,1396,1396,1413,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/forward-dep.vpr,0,1412,25,1,1379,1420,1439,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/loop-inv-bug.vpr,0,1163,32,2,1125,1161,1205,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/testHistoryApplication.vpr,0,1288,53,4,1214,1314,1336,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/testHistoryApplicationPVL.vpr,0,1337,12,0,1326,1332,1355,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/testHistoryAxioms.vpr,0,1261,18,1,1236,1268,1279,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/testHistoryProcesses.vpr,0,1318,3,0,1314,1318,1322,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/testHistoryProcessesPVL.vpr,0,1331,35,2,1282,1349,1363,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/testLoopInvariant.vpr,0,1150,3,0,1146,1151,1154,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/all/third_party/testLoopInvariantE1.vpr,1,1195,10,0,1183,1193,1209,Vector(List([invariant.not.preserved:assertion.false] Loop invariant i <= n might not be preserved. Assertion i <= n might not hold. (testLoopInvariantE1.vpr@29.15)); List([invariant.not.preserved:assertion.false] Loop invariant i <= n might not be preserved. Assertion i <= n might not hold. (testLoopInvariantE1.vpr@29.15)); List([invariant.not.preserved:assertion.false] Loop invariant i <= n might not be preserved. Assertion i <= n might not hold. (testLoopInvariantE1.vpr@29.15)); List([invariant.not.preserved:assertion.false] Loop invariant i <= n might not be preserved. Assertion i <= n might not hold. (testLoopInvariantE1.vpr@29.15)); List([invariant.not.preserved:assertion.false] Loop invariant i <= n might not be preserved. Assertion i <= n might not hold. (testLoopInvariantE1.vpr@29.15)))
../../src/test/resources/frontend-generated/consistency/consistency.vpr,3,102,12,11,93,94,119,Vector(ArrayBuffer([internal:feature.unsupported] An internal error occurred. Feature is not supported. Silicon doesn't support the permission expression epsilon. (consistency.vpr@9.21); [internal:feature.unsupported] An internal error occurred. Feature is not supported. Silicon currently doesn't support inhale-exhale assertions in certain positions. See Silicon issue #271 for further details. (consistency.vpr@32.12); [internal:feature.unsupported] An internal error occurred. Feature is not supported. Silicon currently doesn't support inhale-exhale assertions in certain positions. See Silicon issue #271 for further details. (consistency.vpr@27.3)); ArrayBuffer([internal:feature.unsupported] An internal error occurred. Feature is not supported. Silicon doesn't support the permission expression epsilon. (consistency.vpr@9.21); [internal:feature.unsupported] An internal error occurred. Feature is not supported. Silicon currently doesn't support inhale-exhale assertions in certain positions. See Silicon issue #271 for further details. (consistency.vpr@32.12); [internal:feature.unsupported] An internal error occurred. Feature is not supported. Silicon currently doesn't support inhale-exhale assertions in certain positions. See Silicon issue #271 for further details. (consistency.vpr@27.3)); ArrayBuffer([internal:feature.unsupported] An internal error occurred. Feature is not supported. Silicon doesn't support the permission expression epsilon. (consistency.vpr@9.21); [internal:feature.unsupported] An internal error occurred. Feature is not supported. Silicon currently doesn't support inhale-exhale assertions in certain positions. See Silicon issue #271 for further details. (consistency.vpr@32.12); [internal:feature.unsupported] An internal error occurred. Feature is not supported. Silicon currently doesn't support inhale-exhale assertions in certain positions. See Silicon issue #271 for further details. (consistency.vpr@27.3)); ArrayBuffer([internal:feature.unsupported] An internal error occurred. Feature is not supported. Silicon doesn't support the permission expression epsilon. (consistency.vpr@9.21); [internal:feature.unsupported] An internal error occurred. Feature is not supported. Silicon currently doesn't support inhale-exhale assertions in certain positions. See Silicon issue #271 for further details. (consistency.vpr@32.12); [internal:feature.unsupported] An internal error occurred. Feature is not supported. Silicon currently doesn't support inhale-exhale assertions in certain positions. See Silicon issue #271 for further details. (consistency.vpr@27.3)); ArrayBuffer([internal:feature.unsupported] An internal error occurred. Feature is not supported. Silicon doesn't support the permission expression epsilon. (consistency.vpr@9.21); [internal:feature.unsupported] An internal error occurred. Feature is not supported. Silicon currently doesn't support inhale-exhale assertions in certain positions. See Silicon issue #271 for further details. (consistency.vpr@32.12); [internal:feature.unsupported] An internal error occurred. Feature is not supported. Silicon currently doesn't support inhale-exhale assertions in certain positions. See Silicon issue #271 for further details. (consistency.vpr@27.3)))
../../src/test/resources/frontend-generated/examples/binary-search/binary-search-array.vpr,0,1947,43,2,1886,1976,1980,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/examples/binary-search/binary-search-seq.vpr,0,1503,5,0,1496,1504,1509,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/examples/graph-copy/graph-copy.vpr,0,4126,37,0,4074,4152,4153,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/examples/graph-marking/graph-marking-reduced.vpr,0,1918,12,0,1901,1926,1928,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/examples/graph-marking/graph-marking.vpr,1,3038,108,3,2957,2967,3191,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forall n: Ref :: { (n in nodes) } (n in nodes) ==> n.is_marked) might not hold. (graph-marking.vpr@85.2)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall n: Ref :: { (n in nodes) } (n in nodes) ==> n.is_marked) might not hold. (graph-marking.vpr@85.2)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall n: Ref :: { (n in nodes) } (n in nodes) ==> n.is_marked) might not hold. (graph-marking.vpr@85.2)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall n: Ref :: { (n in nodes) } (n in nodes) ==> n.is_marked) might not hold. (graph-marking.vpr@85.2)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall n: Ref :: { (n in nodes) } (n in nodes) ==> n.is_marked) might not hold. (graph-marking.vpr@85.2)))
../../src/test/resources/frontend-generated/examples/max_array/max-array-elimination.vpr,0,1925,55,2,1854,1931,1990,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/examples/max_array/max-array-standard.vpr,0,1924,5,0,1918,1924,1932,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/examples/parallel-array-replace/parallel-array-replace.vpr,0,1857,66,3,1769,1874,1929,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/examples/quickselect/arrays_quickselect_rec.vpr,0,3667,59,1,3622,3629,3751,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/examples/quickselect/arrays_quickselect_rec_index-shifting.vpr,0,3973,34,0,3944,3955,4022,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/examples/tree-delete-min/tree_delete_min.vpr,0,1762,54,3,1691,1774,1823,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/examples/vmcai2016/arraylist-quantified-permissions.vpr,0,3022,25,0,2987,3032,3048,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/examples/vmcai2016/encoding-adts.vpr,1,1329,14,1,1309,1338,1341,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion !is_Nil(xs) && (!(is_Cons(xs) && (let ys == (tail_Cons(xs)) in is_Nil(ys))) && !(is_Cons(xs) && (let y == (head_Cons(xs)) in (let ys == (tail_Cons(xs)) in is_Cons(ys) && (let z == (head_Cons(ys)) in y < z))))) ==> false might not hold. (encoding-adts.vpr@116.4)); List([assert.failed:assertion.false] Assert might fail. Assertion !is_Nil(xs) && (!(is_Cons(xs) && (let ys == (tail_Cons(xs)) in is_Nil(ys))) && !(is_Cons(xs) && (let y == (head_Cons(xs)) in (let ys == (tail_Cons(xs)) in is_Cons(ys) && (let z == (head_Cons(ys)) in y < z))))) ==> false might not hold. (encoding-adts.vpr@116.4)); List([assert.failed:assertion.false] Assert might fail. Assertion !is_Nil(xs) && (!(is_Cons(xs) && (let ys == (tail_Cons(xs)) in is_Nil(ys))) && !(is_Cons(xs) && (let y == (head_Cons(xs)) in (let ys == (tail_Cons(xs)) in is_Cons(ys) && (let z == (head_Cons(ys)) in y < z))))) ==> false might not hold. (encoding-adts.vpr@116.4)); List([assert.failed:assertion.false] Assert might fail. Assertion !is_Nil(xs) && (!(is_Cons(xs) && (let ys == (tail_Cons(xs)) in is_Nil(ys))) && !(is_Cons(xs) && (let y == (head_Cons(xs)) in (let ys == (tail_Cons(xs)) in is_Cons(ys) && (let z == (head_Cons(ys)) in y < z))))) ==> false might not hold. (encoding-adts.vpr@116.4)); List([assert.failed:assertion.false] Assert might fail. Assertion !is_Nil(xs) && (!(is_Cons(xs) && (let ys == (tail_Cons(xs)) in is_Nil(ys))) && !(is_Cons(xs) && (let y == (head_Cons(xs)) in (let ys == (tail_Cons(xs)) in is_Cons(ys) && (let z == (head_Cons(ys)) in y < z))))) ==> false might not hold. (encoding-adts.vpr@116.4)))
../../src/test/resources/frontend-generated/examples/vmcai2016/linked-list-predicates.vpr,0,3939,39,0,3884,3963,3972,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/issue387/va1.vpr,0,1167,29,2,1141,1154,1208,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/issue387/va10.vpr,0,1144,19,1,1118,1154,1162,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/issue387/va11.vpr,0,1143,1,0,1141,1144,1145,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/issue387/va12.vpr,0,1159,27,2,1129,1153,1196,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/issue387/va13.vpr,0,1146,20,1,1119,1153,1168,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/issue387/va14.vpr,0,1193,23,1,1168,1188,1225,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/issue387/va15.vpr,0,1158,50,4,1087,1192,1195,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/issue387/va2.vpr,0,1174,29,2,1133,1189,1200,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/issue387/va3.vpr,0,1889,66,3,1800,1906,1961,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/issue387/va4.vpr,0,1146,7,0,1141,1141,1156,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/issue387/va5.vpr,0,1156,33,2,1125,1141,1202,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/issue387/va6.vpr,1,2088,69,3,2039,2040,2186,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion v2 == v1 might not hold. (va6.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion v2 == v1 might not hold. (va6.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion v2 == v1 might not hold. (va6.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion v2 == v1 might not hold. (va6.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion v2 == v1 might not hold. (va6.vpr@35.3)))
../../src/test/resources/frontend-generated/issue387/va7.vpr,0,1174,19,1,1147,1186,1191,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/issue387/va8.vpr,0,1174,24,2,1149,1166,1207,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/issue387/va9.vpr,1,1144,12,1,1128,1148,1158,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion o.f == 2 might not hold. (va9.vpr@14.5)); List([assert.failed:assertion.false] Assert might fail. Assertion o.f == 2 might not hold. (va9.vpr@14.5)); List([assert.failed:assertion.false] Assert might fail. Assertion o.f == 2 might not hold. (va9.vpr@14.5)); List([assert.failed:assertion.false] Assert might fail. Assertion o.f == 2 might not hold. (va9.vpr@14.5)); List([assert.failed:assertion.false] Assert might fail. Assertion o.f == 2 might not hold. (va9.vpr@14.5)))
../../src/test/resources/frontend-generated/quantifiedcombinations/dependency.vpr,3,2133,79,3,2053,2106,2241,Vector(List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (dependency.vpr@30.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access pred(x). (dependency.vpr@44.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.g. (dependency.vpr@54.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (dependency.vpr@30.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access pred(x). (dependency.vpr@44.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.g. (dependency.vpr@54.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (dependency.vpr@30.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access pred(x). (dependency.vpr@44.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.g. (dependency.vpr@54.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (dependency.vpr@30.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access pred(x). (dependency.vpr@44.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.g. (dependency.vpr@54.12)); List([not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.f. (dependency.vpr@30.12); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access pred(x). (dependency.vpr@44.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.g. (dependency.vpr@54.12)))
../../src/test/resources/frontend-generated/quantifiedcombinations/forall.vpr,0,1936,41,2,1878,1956,1975,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedcombinations/functions.vpr,0,2013,14,0,1997,2012,2032,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedcombinations/independence.vpr,1,1957,15,0,1944,1950,1979,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (independence.vpr@74.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (independence.vpr@74.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (independence.vpr@74.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (independence.vpr@74.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access r.f. (independence.vpr@74.5)))
../../src/test/resources/frontend-generated/quantifiedcombinations/injectivity.vpr,5,1921,77,4,1814,1955,1994,Vector(List([postcondition.violated:receiver.not.injective] Postcondition of test01_1 might not hold. Receiver of pred1(y) [injectivity.vpr@19.43]  might not be injective. (injectivity.vpr@19.9); [postcondition.violated:receiver.not.injective] Postcondition of test01_2 might not hold. Receiver of pred1(y) [injectivity.vpr@26.55]  might not be injective. (injectivity.vpr@26.9); [postcondition.violated:receiver.not.injective] Postcondition of test02 might not hold. Receiver of pred2(y; 1) [injectivity.vpr@34.44]  might not be injective. (injectivity.vpr@34.10); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@42.2); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@49.2)); List([postcondition.violated:receiver.not.injective] Postcondition of test01_1 might not hold. Receiver of pred1(y) [injectivity.vpr@19.43]  might not be injective. (injectivity.vpr@19.9); [postcondition.violated:receiver.not.injective] Postcondition of test01_2 might not hold. Receiver of pred1(y) [injectivity.vpr@26.55]  might not be injective. (injectivity.vpr@26.9); [postcondition.violated:receiver.not.injective] Postcondition of test02 might not hold. Receiver of pred2(y; 1) [injectivity.vpr@34.44]  might not be injective. (injectivity.vpr@34.10); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@42.2); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@49.2)); List([postcondition.violated:receiver.not.injective] Postcondition of test01_1 might not hold. Receiver of pred1(y) [injectivity.vpr@19.43]  might not be injective. (injectivity.vpr@19.9); [postcondition.violated:receiver.not.injective] Postcondition of test01_2 might not hold. Receiver of pred1(y) [injectivity.vpr@26.55]  might not be injective. (injectivity.vpr@26.9); [postcondition.violated:receiver.not.injective] Postcondition of test02 might not hold. Receiver of pred2(y; 1) [injectivity.vpr@34.44]  might not be injective. (injectivity.vpr@34.10); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@42.2); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@49.2)); List([postcondition.violated:receiver.not.injective] Postcondition of test01_1 might not hold. Receiver of pred1(y) [injectivity.vpr@19.43]  might not be injective. (injectivity.vpr@19.9); [postcondition.violated:receiver.not.injective] Postcondition of test01_2 might not hold. Receiver of pred1(y) [injectivity.vpr@26.55]  might not be injective. (injectivity.vpr@26.9); [postcondition.violated:receiver.not.injective] Postcondition of test02 might not hold. Receiver of pred2(y; 1) [injectivity.vpr@34.44]  might not be injective. (injectivity.vpr@34.10); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@42.2); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@49.2)); List([postcondition.violated:receiver.not.injective] Postcondition of test01_1 might not hold. Receiver of pred1(y) [injectivity.vpr@19.43]  might not be injective. (injectivity.vpr@19.9); [postcondition.violated:receiver.not.injective] Postcondition of test01_2 might not hold. Receiver of pred1(y) [injectivity.vpr@26.55]  might not be injective. (injectivity.vpr@26.9); [postcondition.violated:receiver.not.injective] Postcondition of test02 might not hold. Receiver of pred2(y; 1) [injectivity.vpr@34.44]  might not be injective. (injectivity.vpr@34.10); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@42.2); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@49.2)))
../../src/test/resources/frontend-generated/quantifiedcombinations/multiple_quantifiers.vpr,2,2823,40,1,2772,2827,2871,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access rcvr(i; j).f. (multiple_quantifiers.vpr@41.3); [unfold.failed:insufficient.permission] Unfolding P((aloc(rs1; k1): Ref); (aloc(rs2; k2): Ref)) might fail. There might be insufficient permission to access P((aloc(rs1; k1): Ref); (aloc(rs2; k2): Ref)). (multiple_quantifiers.vpr@149.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access rcvr(i; j).f. (multiple_quantifiers.vpr@41.3); [unfold.failed:insufficient.permission] Unfolding P((aloc(rs1; k1): Ref); (aloc(rs2; k2): Ref)) might fail. There might be insufficient permission to access P((aloc(rs1; k1): Ref); (aloc(rs2; k2): Ref)). (multiple_quantifiers.vpr@149.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access rcvr(i; j).f. (multiple_quantifiers.vpr@41.3); [unfold.failed:insufficient.permission] Unfolding P((aloc(rs1; k1): Ref); (aloc(rs2; k2): Ref)) might fail. There might be insufficient permission to access P((aloc(rs1; k1): Ref); (aloc(rs2; k2): Ref)). (multiple_quantifiers.vpr@149.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access rcvr(i; j).f. (multiple_quantifiers.vpr@41.3); [unfold.failed:insufficient.permission] Unfolding P((aloc(rs1; k1): Ref); (aloc(rs2; k2): Ref)) might fail. There might be insufficient permission to access P((aloc(rs1; k1): Ref); (aloc(rs2; k2): Ref)). (multiple_quantifiers.vpr@149.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access rcvr(i; j).f. (multiple_quantifiers.vpr@41.3); [unfold.failed:insufficient.permission] Unfolding P((aloc(rs1; k1): Ref); (aloc(rs2; k2): Ref)) might fail. There might be insufficient permission to access P((aloc(rs1; k1): Ref); (aloc(rs2; k2): Ref)). (multiple_quantifiers.vpr@149.3)))
../../src/test/resources/frontend-generated/quantifiedcombinations/no_condition.vpr,0,2046,18,0,2024,2045,2069,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedcombinations/perm.vpr,0,1631,67,4,1538,1666,1691,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedcombinations/write_permission.vpr,4,1982,46,2,1917,2009,2022,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.g. (write_permission.vpr@24.9); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.f. (write_permission.vpr@37.9); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.g. (write_permission.vpr@70.9); [unfold.failed:insufficient.permission] Unfolding p(r) might fail. There might be insufficient permission to access p(r). (write_permission.vpr@84.9)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.g. (write_permission.vpr@24.9); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.f. (write_permission.vpr@37.9); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.g. (write_permission.vpr@70.9); [unfold.failed:insufficient.permission] Unfolding p(r) might fail. There might be insufficient permission to access p(r). (write_permission.vpr@84.9)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.g. (write_permission.vpr@24.9); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.f. (write_permission.vpr@37.9); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.g. (write_permission.vpr@70.9); [unfold.failed:insufficient.permission] Unfolding p(r) might fail. There might be insufficient permission to access p(r). (write_permission.vpr@84.9)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.g. (write_permission.vpr@24.9); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.f. (write_permission.vpr@37.9); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.g. (write_permission.vpr@70.9); [unfold.failed:insufficient.permission] Unfolding p(r) might fail. There might be insufficient permission to access p(r). (write_permission.vpr@84.9)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.g. (write_permission.vpr@24.9); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.f. (write_permission.vpr@37.9); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access r.g. (write_permission.vpr@70.9); [unfold.failed:insufficient.permission] Unfolding p(r) might fail. There might be insufficient permission to access p(r). (write_permission.vpr@84.9)))
../../src/test/resources/frontend-generated/quantifiedpermissions/consistency/foralls.vpr,2,1931,65,3,1838,1976,1979,Vector(List([not.wellformed:seq.index.length] Contract might not be well-formed. Index a * i + b into xs might exceed sequence length. (foralls.vpr@35.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (foralls.vpr@45.12)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index a * i + b into xs might exceed sequence length. (foralls.vpr@35.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (foralls.vpr@45.12)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index a * i + b into xs might exceed sequence length. (foralls.vpr@35.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (foralls.vpr@45.12)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index a * i + b into xs might exceed sequence length. (foralls.vpr@35.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (foralls.vpr@45.12)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index a * i + b into xs might exceed sequence length. (foralls.vpr@35.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (foralls.vpr@45.12)))
../../src/test/resources/frontend-generated/quantifiedpermissions/consistency/injectivity-check.vpr,2,1469,17,1,1450,1466,1493,Vector(List([assert.failed:receiver.not.injective] Assert might fail. Receiver of P(0; 1) [injectivity-check.vpr@20.38]  might not be injective. (injectivity-check.vpr@20.5); [assert.failed:receiver.not.injective] Assert might fail. Receiver of P(j; j) [injectivity-check.vpr@31.46]  might not be injective. (injectivity-check.vpr@31.5)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of P(0; 1) [injectivity-check.vpr@20.38]  might not be injective. (injectivity-check.vpr@20.5); [assert.failed:receiver.not.injective] Assert might fail. Receiver of P(j; j) [injectivity-check.vpr@31.46]  might not be injective. (injectivity-check.vpr@31.5)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of P(0; 1) [injectivity-check.vpr@20.38]  might not be injective. (injectivity-check.vpr@20.5); [assert.failed:receiver.not.injective] Assert might fail. Receiver of P(j; j) [injectivity-check.vpr@31.46]  might not be injective. (injectivity-check.vpr@31.5)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of P(0; 1) [injectivity-check.vpr@20.38]  might not be injective. (injectivity-check.vpr@20.5); [assert.failed:receiver.not.injective] Assert might fail. Receiver of P(j; j) [injectivity-check.vpr@31.46]  might not be injective. (injectivity-check.vpr@31.5)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of P(0; 1) [injectivity-check.vpr@20.38]  might not be injective. (injectivity-check.vpr@20.5); [assert.failed:receiver.not.injective] Assert might fail. Receiver of P(j; j) [injectivity-check.vpr@31.46]  might not be injective. (injectivity-check.vpr@31.5)))
../../src/test/resources/frontend-generated/quantifiedpermissions/consistency/permissions.vpr,6,1734,136,7,1543,1808,1852,Vector(List([call.precondition:insufficient.permission] The precondition of method test01 might not hold. There might be insufficient permission to access x.f. (permissions.vpr@14.3); [call.precondition:insufficient.permission] The precondition of method test01_qp might not hold. There might be insufficient permission to access x.f. (permissions.vpr@28.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (permissions.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@48.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@56.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@70.3)); List([call.precondition:insufficient.permission] The precondition of method test01 might not hold. There might be insufficient permission to access x.f. (permissions.vpr@14.3); [call.precondition:insufficient.permission] The precondition of method test01_qp might not hold. There might be insufficient permission to access x.f. (permissions.vpr@28.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (permissions.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@48.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@56.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@70.3)); List([call.precondition:insufficient.permission] The precondition of method test01 might not hold. There might be insufficient permission to access x.f. (permissions.vpr@14.3); [call.precondition:insufficient.permission] The precondition of method test01_qp might not hold. There might be insufficient permission to access x.f. (permissions.vpr@28.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (permissions.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@48.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@56.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@70.3)); List([call.precondition:insufficient.permission] The precondition of method test01 might not hold. There might be insufficient permission to access x.f. (permissions.vpr@14.3); [call.precondition:insufficient.permission] The precondition of method test01_qp might not hold. There might be insufficient permission to access x.f. (permissions.vpr@28.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (permissions.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@48.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@56.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@70.3)); List([call.precondition:insufficient.permission] The precondition of method test01 might not hold. There might be insufficient permission to access x.f. (permissions.vpr@14.3); [call.precondition:insufficient.permission] The precondition of method test01_qp might not hold. There might be insufficient permission to access x.f. (permissions.vpr@28.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (permissions.vpr@35.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@48.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@56.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@70.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0059.vpr,0,1546,39,2,1512,1525,1602,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0060.vpr,0,2010,86,4,1896,2032,2104,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0062.vpr,1,1940,51,2,1868,1968,1984,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion x != y might not hold. (issue_0062.vpr@18.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x != y might not hold. (issue_0062.vpr@18.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x != y might not hold. (issue_0062.vpr@18.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x != y might not hold. (issue_0062.vpr@18.3)); List([assert.failed:assertion.false] Assert might fail. Assertion x != y might not hold. (issue_0062.vpr@18.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0063.vpr,0,2011,67,3,1917,2048,2070,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0064.vpr,4,1978,91,4,1885,1946,2103,Vector(List([postcondition.violated:insufficient.permission] Postcondition of m01 might not hold. There might be insufficient permission to access y.f. (issue_0064.vpr@12.12); [postcondition.violated:assertion.false] Postcondition of m03 might not hold. Assertion (forall y: Ref :: { (y in S2) } (y in S2) ==> y != null) might not hold. (issue_0064.vpr@26.12); [postcondition.violated:assertion.false] Postcondition of m04 might not hold. Assertion (forall y: Ref :: { (y in S2) } (y in S2) ==> y != null) might not hold. (issue_0064.vpr@34.12); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { s[i] } 0 <= i && i < |s| ==> s[i] != null) might not hold. (issue_0064.vpr@50.3)); List([postcondition.violated:insufficient.permission] Postcondition of m01 might not hold. There might be insufficient permission to access y.f. (issue_0064.vpr@12.12); [postcondition.violated:assertion.false] Postcondition of m03 might not hold. Assertion (forall y: Ref :: { (y in S2) } (y in S2) ==> y != null) might not hold. (issue_0064.vpr@26.12); [postcondition.violated:assertion.false] Postcondition of m04 might not hold. Assertion (forall y: Ref :: { (y in S2) } (y in S2) ==> y != null) might not hold. (issue_0064.vpr@34.12); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { s[i] } 0 <= i && i < |s| ==> s[i] != null) might not hold. (issue_0064.vpr@50.3)); List([postcondition.violated:insufficient.permission] Postcondition of m01 might not hold. There might be insufficient permission to access y.f. (issue_0064.vpr@12.12); [postcondition.violated:assertion.false] Postcondition of m03 might not hold. Assertion (forall y: Ref :: { (y in S2) } (y in S2) ==> y != null) might not hold. (issue_0064.vpr@26.12); [postcondition.violated:assertion.false] Postcondition of m04 might not hold. Assertion (forall y: Ref :: { (y in S2) } (y in S2) ==> y != null) might not hold. (issue_0064.vpr@34.12); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { s[i] } 0 <= i && i < |s| ==> s[i] != null) might not hold. (issue_0064.vpr@50.3)); List([postcondition.violated:insufficient.permission] Postcondition of m01 might not hold. There might be insufficient permission to access y.f. (issue_0064.vpr@12.12); [postcondition.violated:assertion.false] Postcondition of m03 might not hold. Assertion (forall y: Ref :: { (y in S2) } (y in S2) ==> y != null) might not hold. (issue_0064.vpr@26.12); [postcondition.violated:assertion.false] Postcondition of m04 might not hold. Assertion (forall y: Ref :: { (y in S2) } (y in S2) ==> y != null) might not hold. (issue_0064.vpr@34.12); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { s[i] } 0 <= i && i < |s| ==> s[i] != null) might not hold. (issue_0064.vpr@50.3)); List([postcondition.violated:insufficient.permission] Postcondition of m01 might not hold. There might be insufficient permission to access y.f. (issue_0064.vpr@12.12); [postcondition.violated:assertion.false] Postcondition of m03 might not hold. Assertion (forall y: Ref :: { (y in S2) } (y in S2) ==> y != null) might not hold. (issue_0064.vpr@26.12); [postcondition.violated:assertion.false] Postcondition of m04 might not hold. Assertion (forall y: Ref :: { (y in S2) } (y in S2) ==> y != null) might not hold. (issue_0064.vpr@34.12); [assert.failed:assertion.false] Assert might fail. Assertion (forall i: Int :: { s[i] } 0 <= i && i < |s| ==> s[i] != null) might not hold. (issue_0064.vpr@50.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0065.vpr,0,1700,56,3,1645,1678,1778,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0066.vpr,1,1612,30,1,1582,1601,1655,Vector(List([assert.failed:receiver.not.injective] Assert might fail. Receiver of s.f.g [issue_0066.vpr@26.42]  might not be injective. (issue_0066.vpr@26.3)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of s.f.g [issue_0066.vpr@26.42]  might not be injective. (issue_0066.vpr@26.3)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of s.f.g [issue_0066.vpr@26.42]  might not be injective. (issue_0066.vpr@26.3)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of s.f.g [issue_0066.vpr@26.42]  might not be injective. (issue_0066.vpr@26.3)); List([assert.failed:receiver.not.injective] Assert might fail. Receiver of s.f.g [issue_0066.vpr@26.42]  might not be injective. (issue_0066.vpr@26.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0067.vpr,4,1741,69,3,1643,1783,1797,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access a.f. (issue_0067.vpr@15.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access b.f. (issue_0067.vpr@26.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access b.f. (issue_0067.vpr@37.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0067.vpr@50.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access a.f. (issue_0067.vpr@15.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access b.f. (issue_0067.vpr@26.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access b.f. (issue_0067.vpr@37.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0067.vpr@50.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access a.f. (issue_0067.vpr@15.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access b.f. (issue_0067.vpr@26.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access b.f. (issue_0067.vpr@37.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0067.vpr@50.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access a.f. (issue_0067.vpr@15.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access b.f. (issue_0067.vpr@26.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access b.f. (issue_0067.vpr@37.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0067.vpr@50.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access a.f. (issue_0067.vpr@15.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access b.f. (issue_0067.vpr@26.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access b.f. (issue_0067.vpr@37.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0067.vpr@50.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0073.vpr,1,2019,39,1,1975,2013,2070,Vector(List([postcondition.violated:receiver.not.injective] Postcondition of n might not hold. Receiver of s[i1].f [issue_0073.vpr@30.49]  might not be injective. (issue_0073.vpr@30.11)); List([postcondition.violated:receiver.not.injective] Postcondition of n might not hold. Receiver of s[i1].f [issue_0073.vpr@30.49]  might not be injective. (issue_0073.vpr@30.11)); List([postcondition.violated:receiver.not.injective] Postcondition of n might not hold. Receiver of s[i1].f [issue_0073.vpr@30.49]  might not be injective. (issue_0073.vpr@30.11)); List([postcondition.violated:receiver.not.injective] Postcondition of n might not hold. Receiver of s[i1].f [issue_0073.vpr@30.49]  might not be injective. (issue_0073.vpr@30.11)); List([postcondition.violated:receiver.not.injective] Postcondition of n might not hold. Receiver of s[i1].f [issue_0073.vpr@30.49]  might not be injective. (issue_0073.vpr@30.11)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0077.vpr,1,1998,13,0,1980,2006,2009,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion p != none might not hold. (issue_0077.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion p != none might not hold. (issue_0077.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion p != none might not hold. (issue_0077.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion p != none might not hold. (issue_0077.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion p != none might not hold. (issue_0077.vpr@27.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0078-distilled.vpr,0,1511,65,4,1460,1469,1604,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0078-working.vpr,1,1586,75,4,1481,1625,1654,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion y.left == z.left might not hold. (issue_0078-working.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion y.left == z.left might not hold. (issue_0078-working.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion y.left == z.left might not hold. (issue_0078-working.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion y.left == z.left might not hold. (issue_0078-working.vpr@32.3)); List([assert.failed:assertion.false] Assert might fail. Assertion y.left == z.left might not hold. (issue_0078-working.vpr@32.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0078.vpr,1,1636,46,2,1572,1662,1676,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.p. (issue_0078.vpr@28.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.p. (issue_0078.vpr@28.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.p. (issue_0078.vpr@28.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.p. (issue_0078.vpr@28.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.p. (issue_0078.vpr@28.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0079.vpr,0,1738,66,3,1671,1716,1829,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0080.vpr,1,1801,53,2,1733,1805,1865,Vector(List([not.wellformed:seq.index.negative] Contract might not be well-formed. Index a * x + b into xs might be negative. (issue_0080.vpr@10.12)); List([not.wellformed:seq.index.negative] Contract might not be well-formed. Index a * x + b into xs might be negative. (issue_0080.vpr@10.12)); List([not.wellformed:seq.index.negative] Contract might not be well-formed. Index a * x + b into xs might be negative. (issue_0080.vpr@10.12)); List([not.wellformed:seq.index.negative] Contract might not be well-formed. Index a * x + b into xs might be negative. (issue_0080.vpr@10.12)); List([not.wellformed:seq.index.negative] Contract might not be well-formed. Index a * x + b into xs might be negative. (issue_0080.vpr@10.12)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0081.vpr,0,1979,53,2,1934,1949,2054,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0081b.vpr,0,1450,29,2,1411,1458,1482,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0085.vpr,1,1684,104,6,1537,1745,1772,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085.vpr@18.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085.vpr@18.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085.vpr@18.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085.vpr@18.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085.vpr@18.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0085a.vpr,3,1665,78,4,1579,1648,1770,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@16.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@26.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@40.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@16.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@26.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@40.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@16.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@26.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@40.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@16.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@26.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@40.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@16.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@26.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.n. (issue_0085a.vpr@40.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0095.vpr,0,1420,58,4,1364,1396,1500,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0096.vpr,1,41,0,0,41,42,42,Vector(List(Consistency error: "wildcard" can only be used in accessibility predicates (issue_0096.vpr@14.8)); List(Consistency error: "wildcard" can only be used in accessibility predicates (issue_0096.vpr@14.8)); List(Consistency error: "wildcard" can only be used in accessibility predicates (issue_0096.vpr@14.8)); List(Consistency error: "wildcard" can only be used in accessibility predicates (issue_0096.vpr@14.8)); List(Consistency error: "wildcard" can only be used in accessibility predicates (issue_0096.vpr@14.8)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0098.vpr,1,1535,59,3,1470,1522,1613,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion a.f == b.f might not hold. (issue_0098.vpr@15.3)); List([assert.failed:assertion.false] Assert might fail. Assertion a.f == b.f might not hold. (issue_0098.vpr@15.3)); List([assert.failed:assertion.false] Assert might fail. Assertion a.f == b.f might not hold. (issue_0098.vpr@15.3)); List([assert.failed:assertion.false] Assert might fail. Assertion a.f == b.f might not hold. (issue_0098.vpr@15.3)); List([assert.failed:assertion.false] Assert might fail. Assertion a.f == b.f might not hold. (issue_0098.vpr@15.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0099.vpr,5,1999,55,2,1939,1986,2073,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion n > 0 might not hold. (issue_0099.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion n > 0 might not hold. (issue_0099.vpr@21.3); [postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion n > 0 might not hold. (issue_0099.vpr@30.12); [assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (issue_0099.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (issue_0099.vpr@51.3)); List([assert.failed:assertion.false] Assert might fail. Assertion n > 0 might not hold. (issue_0099.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion n > 0 might not hold. (issue_0099.vpr@21.3); [postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion n > 0 might not hold. (issue_0099.vpr@30.12); [assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (issue_0099.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (issue_0099.vpr@51.3)); List([assert.failed:assertion.false] Assert might fail. Assertion n > 0 might not hold. (issue_0099.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion n > 0 might not hold. (issue_0099.vpr@21.3); [postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion n > 0 might not hold. (issue_0099.vpr@30.12); [assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (issue_0099.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (issue_0099.vpr@51.3)); List([assert.failed:assertion.false] Assert might fail. Assertion n > 0 might not hold. (issue_0099.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion n > 0 might not hold. (issue_0099.vpr@21.3); [postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion n > 0 might not hold. (issue_0099.vpr@30.12); [assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (issue_0099.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (issue_0099.vpr@51.3)); List([assert.failed:assertion.false] Assert might fail. Assertion n > 0 might not hold. (issue_0099.vpr@11.3); [assert.failed:assertion.false] Assert might fail. Assertion n > 0 might not hold. (issue_0099.vpr@21.3); [postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion n > 0 might not hold. (issue_0099.vpr@30.12); [assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (issue_0099.vpr@41.3); [assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (issue_0099.vpr@51.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0102.vpr,3,2084,20,0,2056,2091,2106,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0102.vpr@31.3); [postcondition.violated:assertion.false] Postcondition of test5 might not hold. Assertion false might not hold. (issue_0102.vpr@45.11); [postcondition.violated:assertion.false] Postcondition of test4 might not hold. Assertion false might not hold. (issue_0102.vpr@62.11)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0102.vpr@31.3); [postcondition.violated:assertion.false] Postcondition of test5 might not hold. Assertion false might not hold. (issue_0102.vpr@45.11); [postcondition.violated:assertion.false] Postcondition of test4 might not hold. Assertion false might not hold. (issue_0102.vpr@62.11)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0102.vpr@31.3); [postcondition.violated:assertion.false] Postcondition of test5 might not hold. Assertion false might not hold. (issue_0102.vpr@45.11); [postcondition.violated:assertion.false] Postcondition of test4 might not hold. Assertion false might not hold. (issue_0102.vpr@62.11)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0102.vpr@31.3); [postcondition.violated:assertion.false] Postcondition of test5 might not hold. Assertion false might not hold. (issue_0102.vpr@45.11); [postcondition.violated:assertion.false] Postcondition of test4 might not hold. Assertion false might not hold. (issue_0102.vpr@62.11)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0102.vpr@31.3); [postcondition.violated:assertion.false] Postcondition of test5 might not hold. Assertion false might not hold. (issue_0102.vpr@45.11); [postcondition.violated:assertion.false] Postcondition of test4 might not hold. Assertion false might not hold. (issue_0102.vpr@62.11)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0121.vpr,0,1506,7,0,1496,1511,1512,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0122.vpr,0,1598,73,4,1501,1617,1678,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0124.vpr,0,1925,57,2,1845,1957,1974,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0139.vpr,6,2585,96,3,2507,2528,2722,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@36.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@54.3); [assert.failed:assertion.false] Assert might fail. Assertion 20 == fun04(xs; false) might not hold. (issue_0139.vpr@90.3); [assert.failed:assertion.false] Assert might fail. Assertion 10 == fun05(x; xs) might not hold. (issue_0139.vpr@107.3); [assert.failed:assertion.false] Assert might fail. Assertion 10 == fun06(x; i; xs) might not hold. (issue_0139.vpr@128.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@36.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@54.3); [assert.failed:assertion.false] Assert might fail. Assertion 20 == fun04(xs; false) might not hold. (issue_0139.vpr@90.3); [assert.failed:assertion.false] Assert might fail. Assertion 10 == fun05(x; xs) might not hold. (issue_0139.vpr@107.3); [assert.failed:assertion.false] Assert might fail. Assertion 10 == fun06(x; i; xs) might not hold. (issue_0139.vpr@128.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@36.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@54.3); [assert.failed:assertion.false] Assert might fail. Assertion 20 == fun04(xs; false) might not hold. (issue_0139.vpr@90.3); [assert.failed:assertion.false] Assert might fail. Assertion 10 == fun05(x; xs) might not hold. (issue_0139.vpr@107.3); [assert.failed:assertion.false] Assert might fail. Assertion 10 == fun06(x; i; xs) might not hold. (issue_0139.vpr@128.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@36.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@54.3); [assert.failed:assertion.false] Assert might fail. Assertion 20 == fun04(xs; false) might not hold. (issue_0139.vpr@90.3); [assert.failed:assertion.false] Assert might fail. Assertion 10 == fun05(x; xs) might not hold. (issue_0139.vpr@107.3); [assert.failed:assertion.false] Assert might fail. Assertion 10 == fun06(x; i; xs) might not hold. (issue_0139.vpr@128.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@36.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0139.vpr@54.3); [assert.failed:assertion.false] Assert might fail. Assertion 20 == fun04(xs; false) might not hold. (issue_0139.vpr@90.3); [assert.failed:assertion.false] Assert might fail. Assertion 10 == fun05(x; xs) might not hold. (issue_0139.vpr@107.3); [assert.failed:assertion.false] Assert might fail. Assertion 10 == fun06(x; i; xs) might not hold. (issue_0139.vpr@128.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0142.vpr,2,1937,71,3,1839,1966,2006,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0142.vpr@29.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0142.vpr@39.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0142.vpr@29.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0142.vpr@39.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0142.vpr@29.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0142.vpr@39.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0142.vpr@29.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0142.vpr@39.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0142.vpr@29.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue_0142.vpr@39.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0147.vpr,1,1827,54,2,1764,1822,1896,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion xs[idx(5; 2; xs[3]; n)].f == 7 might not hold. (issue_0147.vpr@20.3)); List([assert.failed:assertion.false] Assert might fail. Assertion xs[idx(5; 2; xs[3]; n)].f == 7 might not hold. (issue_0147.vpr@20.3)); List([assert.failed:assertion.false] Assert might fail. Assertion xs[idx(5; 2; xs[3]; n)].f == 7 might not hold. (issue_0147.vpr@20.3)); List([assert.failed:assertion.false] Assert might fail. Assertion xs[idx(5; 2; xs[3]; n)].f == 7 might not hold. (issue_0147.vpr@20.3)); List([assert.failed:assertion.false] Assert might fail. Assertion xs[idx(5; 2; xs[3]; n)].f == 7 might not hold. (issue_0147.vpr@20.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0149.vpr,0,1971,29,1,1932,1981,2002,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0170.vpr,0,2048,6,0,2040,2049,2055,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0176.vpr,0,1955,52,2,1887,1964,2016,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0179.vpr,0,1518,54,3,1469,1492,1594,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0184.vpr,1,1905,39,2,1873,1882,1961,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_4__6.Ref__Integer_value. (issue_0184.vpr@56.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_4__6.Ref__Integer_value. (issue_0184.vpr@56.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_4__6.Ref__Integer_value. (issue_0184.vpr@56.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_4__6.Ref__Integer_value. (issue_0184.vpr@56.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_4__6.Ref__Integer_value. (issue_0184.vpr@56.5)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/issue_0205.vpr,6,5006,120,2,4836,5092,5092,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion fun02(x; y; true) == old(fun02(x; y; true)) might not hold. (issue_0205.vpr@24.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02pred(x; y; true) == old(fun02pred(x; y; true)) might not hold. (issue_0205.vpr@43.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01qp(xs; i2) == old(fun01qp(xs; i2)) might not hold. (issue_0205.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02qp(xs; i2) == old(fun02qp(xs; i2)) might not hold. (issue_0205.vpr@104.3); [assert.failed:assertion.false] Assert might fail. Assertion fun03qp(x; i2) == old(fun03qp(x; i2)) might not hold. (issue_0205.vpr@123.3); [assert.failed:assertion.false] Assert might fail. Assertion fun04qp(x; i2) == old(fun04qp(x; i2)) might not hold. (issue_0205.vpr@142.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun02(x; y; true) == old(fun02(x; y; true)) might not hold. (issue_0205.vpr@24.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02pred(x; y; true) == old(fun02pred(x; y; true)) might not hold. (issue_0205.vpr@43.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01qp(xs; i2) == old(fun01qp(xs; i2)) might not hold. (issue_0205.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02qp(xs; i2) == old(fun02qp(xs; i2)) might not hold. (issue_0205.vpr@104.3); [assert.failed:assertion.false] Assert might fail. Assertion fun03qp(x; i2) == old(fun03qp(x; i2)) might not hold. (issue_0205.vpr@123.3); [assert.failed:assertion.false] Assert might fail. Assertion fun04qp(x; i2) == old(fun04qp(x; i2)) might not hold. (issue_0205.vpr@142.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun02(x; y; true) == old(fun02(x; y; true)) might not hold. (issue_0205.vpr@24.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02pred(x; y; true) == old(fun02pred(x; y; true)) might not hold. (issue_0205.vpr@43.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01qp(xs; i2) == old(fun01qp(xs; i2)) might not hold. (issue_0205.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02qp(xs; i2) == old(fun02qp(xs; i2)) might not hold. (issue_0205.vpr@104.3); [assert.failed:assertion.false] Assert might fail. Assertion fun03qp(x; i2) == old(fun03qp(x; i2)) might not hold. (issue_0205.vpr@123.3); [assert.failed:assertion.false] Assert might fail. Assertion fun04qp(x; i2) == old(fun04qp(x; i2)) might not hold. (issue_0205.vpr@142.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun02(x; y; true) == old(fun02(x; y; true)) might not hold. (issue_0205.vpr@24.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02pred(x; y; true) == old(fun02pred(x; y; true)) might not hold. (issue_0205.vpr@43.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01qp(xs; i2) == old(fun01qp(xs; i2)) might not hold. (issue_0205.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02qp(xs; i2) == old(fun02qp(xs; i2)) might not hold. (issue_0205.vpr@104.3); [assert.failed:assertion.false] Assert might fail. Assertion fun03qp(x; i2) == old(fun03qp(x; i2)) might not hold. (issue_0205.vpr@123.3); [assert.failed:assertion.false] Assert might fail. Assertion fun04qp(x; i2) == old(fun04qp(x; i2)) might not hold. (issue_0205.vpr@142.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun02(x; y; true) == old(fun02(x; y; true)) might not hold. (issue_0205.vpr@24.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02pred(x; y; true) == old(fun02pred(x; y; true)) might not hold. (issue_0205.vpr@43.3); [assert.failed:assertion.false] Assert might fail. Assertion fun01qp(xs; i2) == old(fun01qp(xs; i2)) might not hold. (issue_0205.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02qp(xs; i2) == old(fun02qp(xs; i2)) might not hold. (issue_0205.vpr@104.3); [assert.failed:assertion.false] Assert might fail. Assertion fun03qp(x; i2) == old(fun03qp(x; i2)) might not hold. (issue_0205.vpr@123.3); [assert.failed:assertion.false] Assert might fail. Assertion fun04qp(x; i2) == old(fun04qp(x; i2)) might not hold. (issue_0205.vpr@142.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/unofficial_0001.vpr,0,1755,95,5,1627,1784,1856,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/unofficial_0002.vpr,1,1501,52,3,1441,1494,1570,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access node.is_marked. (unofficial_0002.vpr@29.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access node.is_marked. (unofficial_0002.vpr@29.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access node.is_marked. (unofficial_0002.vpr@29.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access node.is_marked. (unofficial_0002.vpr@29.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access node.is_marked. (unofficial_0002.vpr@29.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/unofficial_0003.vpr,0,1960,30,1,1918,1978,1985,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/issues/unofficial_0004.vpr,0,1981,56,2,1931,1953,2061,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/arrays.vpr,0,1935,25,1,1901,1944,1961,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/countfalse.vpr,1,1875,31,1,1844,1863,1919,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (countfalse.vpr@31.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (countfalse.vpr@31.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (countfalse.vpr@31.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (countfalse.vpr@31.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (countfalse.vpr@31.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/dutch-flag.vpr,0,1978,16,0,1955,1989,1992,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/functions.vpr,6,3388,145,4,3193,3430,3542,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion fun02(xs) == 14 might not hold. (functions.vpr@37.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions.vpr@87.3); [assert.failed:assertion.false] Assert might fail. Assertion v2 == v1 might not hold. (functions.vpr@115.3); [assert.failed:assertion.false] Assert might fail. Assertion v2 == fun04(x; n; 4) might not hold. (functions.vpr@155.3); [assert.failed:assertion.false] Assert might fail. Assertion fun07(xs; -10) > 0 might not hold. (functions.vpr@181.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun02(xs) == 14 might not hold. (functions.vpr@37.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions.vpr@87.3); [assert.failed:assertion.false] Assert might fail. Assertion v2 == v1 might not hold. (functions.vpr@115.3); [assert.failed:assertion.false] Assert might fail. Assertion v2 == fun04(x; n; 4) might not hold. (functions.vpr@155.3); [assert.failed:assertion.false] Assert might fail. Assertion fun07(xs; -10) > 0 might not hold. (functions.vpr@181.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun02(xs) == 14 might not hold. (functions.vpr@37.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions.vpr@87.3); [assert.failed:assertion.false] Assert might fail. Assertion v2 == v1 might not hold. (functions.vpr@115.3); [assert.failed:assertion.false] Assert might fail. Assertion v2 == fun04(x; n; 4) might not hold. (functions.vpr@155.3); [assert.failed:assertion.false] Assert might fail. Assertion fun07(xs; -10) > 0 might not hold. (functions.vpr@181.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun02(xs) == 14 might not hold. (functions.vpr@37.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions.vpr@87.3); [assert.failed:assertion.false] Assert might fail. Assertion v2 == v1 might not hold. (functions.vpr@115.3); [assert.failed:assertion.false] Assert might fail. Assertion v2 == fun04(x; n; 4) might not hold. (functions.vpr@155.3); [assert.failed:assertion.false] Assert might fail. Assertion fun07(xs; -10) > 0 might not hold. (functions.vpr@181.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun02(xs) == 14 might not hold. (functions.vpr@37.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions.vpr@73.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions.vpr@87.3); [assert.failed:assertion.false] Assert might fail. Assertion v2 == v1 might not hold. (functions.vpr@115.3); [assert.failed:assertion.false] Assert might fail. Assertion v2 == fun04(x; n; 4) might not hold. (functions.vpr@155.3); [assert.failed:assertion.false] Assert might fail. Assertion fun07(xs; -10) > 0 might not hold. (functions.vpr@181.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/functions2.vpr,2,2101,52,2,2028,2130,2146,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions2.vpr@22.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(xs; ys) might not hold. (functions2.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions2.vpr@22.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(xs; ys) might not hold. (functions2.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions2.vpr@22.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(xs; ys) might not hold. (functions2.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions2.vpr@22.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(xs; ys) might not hold. (functions2.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (functions2.vpr@22.3); [assert.failed:assertion.false] Assert might fail. Assertion fun02(xs; ys) might not hold. (functions2.vpr@37.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/functions3.vpr,1,1846,49,2,1777,1875,1887,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion f(xs; x) == 0 might not hold. (functions3.vpr@15.2)); List([assert.failed:assertion.false] Assert might fail. Assertion f(xs; x) == 0 might not hold. (functions3.vpr@15.2)); List([assert.failed:assertion.false] Assert might fail. Assertion f(xs; x) == 0 might not hold. (functions3.vpr@15.2)); List([assert.failed:assertion.false] Assert might fail. Assertion f(xs; x) == 0 might not hold. (functions3.vpr@15.2)); List([assert.failed:assertion.false] Assert might fail. Assertion f(xs; x) == 0 might not hold. (functions3.vpr@15.2)))
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/heap_dependent_triggers.vpr,0,2049,29,1,2010,2059,2080,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/misc1.vpr,0,1632,60,3,1553,1647,1698,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/performance.vpr,0,2179,17,0,2163,2172,2203,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/repeated_reading.vpr,0,1866,95,5,1739,1890,1970,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/snapshots.vpr,0,2071,43,2,2011,2094,2110,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/snapshots2.vpr,2,3154,116,3,3053,3094,3317,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion f1(xs) might not hold. (snapshots2.vpr@28.2); [assert.failed:assertion.false] Assert might fail. Assertion f3(xs) == b might not hold. (snapshots2.vpr@44.2)); List([assert.failed:assertion.false] Assert might fail. Assertion f1(xs) might not hold. (snapshots2.vpr@28.2); [assert.failed:assertion.false] Assert might fail. Assertion f3(xs) == b might not hold. (snapshots2.vpr@44.2)); List([assert.failed:assertion.false] Assert might fail. Assertion f1(xs) might not hold. (snapshots2.vpr@28.2); [assert.failed:assertion.false] Assert might fail. Assertion f3(xs) == b might not hold. (snapshots2.vpr@44.2)); List([assert.failed:assertion.false] Assert might fail. Assertion f1(xs) might not hold. (snapshots2.vpr@28.2); [assert.failed:assertion.false] Assert might fail. Assertion f3(xs) == b might not hold. (snapshots2.vpr@44.2)); List([assert.failed:assertion.false] Assert might fail. Assertion f1(xs) might not hold. (snapshots2.vpr@28.2); [assert.failed:assertion.false] Assert might fail. Assertion f3(xs) == b might not hold. (snapshots2.vpr@44.2)))
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/snapshots_partial_fvfs.vpr,1,1915,43,2,1855,1931,1959,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion xs[4].f == old(xs[4].f) might not hold. (snapshots_partial_fvfs.vpr@25.3)); List([assert.failed:assertion.false] Assert might fail. Assertion xs[4].f == old(xs[4].f) might not hold. (snapshots_partial_fvfs.vpr@25.3)); List([assert.failed:assertion.false] Assert might fail. Assertion xs[4].f == old(xs[4].f) might not hold. (snapshots_partial_fvfs.vpr@25.3)); List([assert.failed:assertion.false] Assert might fail. Assertion xs[4].f == old(xs[4].f) might not hold. (snapshots_partial_fvfs.vpr@25.3)); List([assert.failed:assertion.false] Assert might fail. Assertion xs[4].f == old(xs[4].f) might not hold. (snapshots_partial_fvfs.vpr@25.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/triggers_field_deref.vpr,3,2013,10,0,2003,2010,2028,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion fun02(x.g) > 0 might not hold. (triggers_field_deref.vpr@27.3); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (triggers_field_deref.vpr@93.3); [assert.failed:assertion.false] Assert might fail. Assertion y.g > 0 might not hold. (triggers_field_deref.vpr@139.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun02(x.g) > 0 might not hold. (triggers_field_deref.vpr@27.3); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (triggers_field_deref.vpr@93.3); [assert.failed:assertion.false] Assert might fail. Assertion y.g > 0 might not hold. (triggers_field_deref.vpr@139.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun02(x.g) > 0 might not hold. (triggers_field_deref.vpr@27.3); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (triggers_field_deref.vpr@93.3); [assert.failed:assertion.false] Assert might fail. Assertion y.g > 0 might not hold. (triggers_field_deref.vpr@139.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun02(x.g) > 0 might not hold. (triggers_field_deref.vpr@27.3); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (triggers_field_deref.vpr@93.3); [assert.failed:assertion.false] Assert might fail. Assertion y.g > 0 might not hold. (triggers_field_deref.vpr@139.3)); List([assert.failed:assertion.false] Assert might fail. Assertion fun02(x.g) > 0 might not hold. (triggers_field_deref.vpr@27.3); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (triggers_field_deref.vpr@93.3); [assert.failed:assertion.false] Assert might fail. Assertion y.g > 0 might not hold. (triggers_field_deref.vpr@139.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/misc/unbounded.vpr,2,1520,15,0,1498,1528,1534,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unbounded.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unbounded.vpr@52.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unbounded.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unbounded.vpr@52.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unbounded.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unbounded.vpr@52.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unbounded.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unbounded.vpr@52.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unbounded.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unbounded.vpr@52.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/array.vpr,0,1960,9,0,1946,1966,1968,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/bsearch.vpr,1,2899,30,1,2869,2888,2942,Vector(List([postcondition.violated:assertion.false] Postcondition of bfind_orig might not hold. Assertion index == -1 ==> (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x) might not hold. (bsearch.vpr@18.11)); List([postcondition.violated:assertion.false] Postcondition of bfind_orig might not hold. Assertion index == -1 ==> (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x) might not hold. (bsearch.vpr@18.11)); List([postcondition.violated:assertion.false] Postcondition of bfind_orig might not hold. Assertion index == -1 ==> (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x) might not hold. (bsearch.vpr@18.11)); List([postcondition.violated:assertion.false] Postcondition of bfind_orig might not hold. Assertion index == -1 ==> (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x) might not hold. (bsearch.vpr@18.11)); List([postcondition.violated:assertion.false] Postcondition of bfind_orig might not hold. Assertion index == -1 ==> (forall i: Int :: { S[i].f } (i in [0..|S|)) ==> S[i].f != x) might not hold. (bsearch.vpr@18.11)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/exhaleseqparts.vpr,0,2030,26,1,2005,2020,2067,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/linked-list-qp-append.vpr,0,2937,86,2,2823,2958,3032,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/mergesort.vpr,0,2466,12,0,2452,2463,2483,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/parallel_max.vpr,0,2423,107,4,2312,2388,2569,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/parallel_qsort.vpr,0,2074,88,4,2005,2018,2199,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/random_access.vpr,1,1952,28,1,1917,1953,1988,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion s[a + j * b] != null might not hold. (random_access.vpr@31.3)); List([assert.failed:assertion.false] Assert might fail. Assertion s[a + j * b] != null might not hold. (random_access.vpr@31.3)); List([assert.failed:assertion.false] Assert might fail. Assertion s[a + j * b] != null might not hold. (random_access.vpr@31.3)); List([assert.failed:assertion.false] Assert might fail. Assertion s[a + j * b] != null might not hold. (random_access.vpr@31.3)); List([assert.failed:assertion.false] Assert might fail. Assertion s[a + j * b] != null might not hold. (random_access.vpr@31.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/self_framing.vpr,3,1855,61,3,1792,1836,1938,Vector(List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[2].f. (self_framing.vpr@10.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[i2].f. (self_framing.vpr@24.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[i3].f. (self_framing.vpr@41.3)); List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[2].f. (self_framing.vpr@10.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[i2].f. (self_framing.vpr@24.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[i3].f. (self_framing.vpr@41.3)); List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[2].f. (self_framing.vpr@10.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[i2].f. (self_framing.vpr@24.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[i3].f. (self_framing.vpr@41.3)); List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[2].f. (self_framing.vpr@10.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[i2].f. (self_framing.vpr@24.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[i3].f. (self_framing.vpr@41.3)); List([inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[2].f. (self_framing.vpr@10.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[i2].f. (self_framing.vpr@24.3); [inhale.failed:insufficient.permission] Inhale might fail. There might be insufficient permission to access s[i3].f. (self_framing.vpr@41.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/seq_pure.vpr,3,2059,27,1,2024,2064,2091,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { (j in [0..|S|)) } { S[j] } (j in [0..|S|)) ==> S[j].f > 0) might not hold. (seq_pure.vpr@25.3); [postcondition.violated:assertion.false] Postcondition of test04 might not hold. Assertion (forall j: Int :: { S[j] } (j in [0..|S| - 1)) ==> S[j].f <= S[j + 1].f) might not hold. (seq_pure.vpr@41.11); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access S[j].f. (seq_pure.vpr@52.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { (j in [0..|S|)) } { S[j] } (j in [0..|S|)) ==> S[j].f > 0) might not hold. (seq_pure.vpr@25.3); [postcondition.violated:assertion.false] Postcondition of test04 might not hold. Assertion (forall j: Int :: { S[j] } (j in [0..|S| - 1)) ==> S[j].f <= S[j + 1].f) might not hold. (seq_pure.vpr@41.11); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access S[j].f. (seq_pure.vpr@52.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { (j in [0..|S|)) } { S[j] } (j in [0..|S|)) ==> S[j].f > 0) might not hold. (seq_pure.vpr@25.3); [postcondition.violated:assertion.false] Postcondition of test04 might not hold. Assertion (forall j: Int :: { S[j] } (j in [0..|S| - 1)) ==> S[j].f <= S[j + 1].f) might not hold. (seq_pure.vpr@41.11); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access S[j].f. (seq_pure.vpr@52.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { (j in [0..|S|)) } { S[j] } (j in [0..|S|)) ==> S[j].f > 0) might not hold. (seq_pure.vpr@25.3); [postcondition.violated:assertion.false] Postcondition of test04 might not hold. Assertion (forall j: Int :: { S[j] } (j in [0..|S| - 1)) ==> S[j].f <= S[j + 1].f) might not hold. (seq_pure.vpr@41.11); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access S[j].f. (seq_pure.vpr@52.3)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall j: Int :: { (j in [0..|S|)) } { S[j] } (j in [0..|S|)) ==> S[j].f > 0) might not hold. (seq_pure.vpr@25.3); [postcondition.violated:assertion.false] Postcondition of test04 might not hold. Assertion (forall j: Int :: { S[j] } (j in [0..|S| - 1)) ==> S[j].f <= S[j + 1].f) might not hold. (seq_pure.vpr@41.11); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access S[j].f. (seq_pure.vpr@52.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/seqsingleelements.vpr,1,2642,105,3,2493,2715,2718,Vector(List([postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion S[k].value == 0 might not hold. (seqsingleelements.vpr@36.11)); List([postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion S[k].value == 0 might not hold. (seqsingleelements.vpr@36.11)); List([postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion S[k].value == 0 might not hold. (seqsingleelements.vpr@36.11)); List([postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion S[k].value == 0 might not hold. (seqsingleelements.vpr@36.11)); List([postcondition.violated:assertion.false] Postcondition of test03 might not hold. Assertion S[k].value == 0 might not hold. (seqsingleelements.vpr@36.11)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/snapshots1.vpr,1,2312,61,2,2235,2315,2386,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion a == b might not hold. (snapshots1.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion a == b might not hold. (snapshots1.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion a == b might not hold. (snapshots1.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion a == b might not hold. (snapshots1.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion a == b might not hold. (snapshots1.vpr@24.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/snapshots2.vpr,0,1915,43,2,1855,1935,1956,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/test1.vpr,0,1779,119,6,1610,1853,1874,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/test2.vpr,2,1960,35,1,1913,1969,1999,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (test2.vpr@17.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (test2.vpr@35.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (test2.vpr@17.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (test2.vpr@35.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (test2.vpr@17.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (test2.vpr@35.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (test2.vpr@17.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (test2.vpr@35.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (test2.vpr@17.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (test2.vpr@35.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sequences/wildcardedold.vpr,1,1828,77,4,1745,1807,1932,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion a.f == old(a.f) might not hold. (wildcardedold.vpr@20.5)); List([assert.failed:assertion.false] Assert might fail. Assertion a.f == old(a.f) might not hold. (wildcardedold.vpr@20.5)); List([assert.failed:assertion.false] Assert might fail. Assertion a.f == old(a.f) might not hold. (wildcardedold.vpr@20.5)); List([assert.failed:assertion.false] Assert might fail. Assertion a.f == old(a.f) might not hold. (wildcardedold.vpr@20.5)); List([assert.failed:assertion.false] Assert might fail. Assertion a.f == old(a.f) might not hold. (wildcardedold.vpr@20.5)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/access.vpr,1,1820,41,2,1768,1823,1869,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.g. (access.vpr@28.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.g. (access.vpr@28.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.g. (access.vpr@28.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.g. (access.vpr@28.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access this.g. (access.vpr@28.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/assignments.vpr,3,1455,59,4,1400,1429,1538,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@21.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@35.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@51.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@21.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@35.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@51.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@21.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@35.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@51.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@21.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@35.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@51.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@21.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@35.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (assignments.vpr@51.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/constraining_permissions.vpr,1,1534,27,1,1505,1526,1572,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (constraining_permissions.vpr@31.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (constraining_permissions.vpr@31.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (constraining_permissions.vpr@31.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (constraining_permissions.vpr@31.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (constraining_permissions.vpr@31.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/consumepureforall.vpr,1,1868,8,0,1857,1871,1877,Vector(List([exhale.failed:assertion.false] Exhale might fail. Assertion (forall t: Ref :: { (t in S) } (t in S) ==> t.f > 2 * a) might not hold. (consumepureforall.vpr@66.5)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forall t: Ref :: { (t in S) } (t in S) ==> t.f > 2 * a) might not hold. (consumepureforall.vpr@66.5)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forall t: Ref :: { (t in S) } (t in S) ==> t.f > 2 * a) might not hold. (consumepureforall.vpr@66.5)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forall t: Ref :: { (t in S) } (t in S) ==> t.f > 2 * a) might not hold. (consumepureforall.vpr@66.5)); List([exhale.failed:assertion.false] Exhale might fail. Assertion (forall t: Ref :: { (t in S) } (t in S) ==> t.f > 2 * a) might not hold. (consumepureforall.vpr@66.5)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/emptyforall.vpr,1,1650,72,4,1567,1640,1743,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion this.nodes == old(this.nodes) might not hold. (emptyforall.vpr@15.2)); List([assert.failed:assertion.false] Assert might fail. Assertion this.nodes == old(this.nodes) might not hold. (emptyforall.vpr@15.2)); List([assert.failed:assertion.false] Assert might fail. Assertion this.nodes == old(this.nodes) might not hold. (emptyforall.vpr@15.2)); List([assert.failed:assertion.false] Assert might fail. Assertion this.nodes == old(this.nodes) might not hold. (emptyforall.vpr@15.2)); List([assert.failed:assertion.false] Assert might fail. Assertion this.nodes == old(this.nodes) might not hold. (emptyforall.vpr@15.2)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/forall.vpr,0,1522,51,3,1450,1554,1563,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/forall_exhale.vpr,4,1694,83,4,1589,1701,1794,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access w.f. (forall_exhale.vpr@11.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access q.f. (forall_exhale.vpr@20.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access a.f. (forall_exhale.vpr@30.4); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access c.f. (forall_exhale.vpr@43.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access w.f. (forall_exhale.vpr@11.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access q.f. (forall_exhale.vpr@20.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access a.f. (forall_exhale.vpr@30.4); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access c.f. (forall_exhale.vpr@43.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access w.f. (forall_exhale.vpr@11.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access q.f. (forall_exhale.vpr@20.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access a.f. (forall_exhale.vpr@30.4); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access c.f. (forall_exhale.vpr@43.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access w.f. (forall_exhale.vpr@11.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access q.f. (forall_exhale.vpr@20.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access a.f. (forall_exhale.vpr@30.4); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access c.f. (forall_exhale.vpr@43.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access w.f. (forall_exhale.vpr@11.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access q.f. (forall_exhale.vpr@20.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access a.f. (forall_exhale.vpr@30.4); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access c.f. (forall_exhale.vpr@43.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/forall_exhale_single_elements.vpr,3,1545,47,3,1510,1514,1613,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (forall_exhale_single_elements.vpr@15.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (forall_exhale_single_elements.vpr@26.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (forall_exhale_single_elements.vpr@36.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (forall_exhale_single_elements.vpr@15.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (forall_exhale_single_elements.vpr@26.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (forall_exhale_single_elements.vpr@36.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (forall_exhale_single_elements.vpr@15.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (forall_exhale_single_elements.vpr@26.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (forall_exhale_single_elements.vpr@36.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (forall_exhale_single_elements.vpr@15.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (forall_exhale_single_elements.vpr@26.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (forall_exhale_single_elements.vpr@36.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (forall_exhale_single_elements.vpr@15.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (forall_exhale_single_elements.vpr@26.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (forall_exhale_single_elements.vpr@36.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/functions.vpr,0,1853,64,3,1776,1852,1933,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/generalised_shape.vpr,9,3927,115,2,3765,3992,4024,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x2.f. (generalised_shape.vpr@16.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access y1.g. (generalised_shape.vpr@27.3); [postcondition.violated:insufficient.permission] Postcondition of test12 might not hold. There might be insufficient permission to access x1.g. (generalised_shape.vpr@34.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.g. (generalised_shape.vpr@46.11); [postcondition.violated:receiver.not.injective] Postcondition of test10 might not hold. Receiver of x.g.f [generalised_shape.vpr@54.54]  might not be injective. (generalised_shape.vpr@54.12); [assert.failed:assertion.false] Assert might fail. Assertion y1.g != y3.g might not hold. (generalised_shape.vpr@92.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.f. (generalised_shape.vpr@124.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.g. (generalised_shape.vpr@136.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.g.f. (generalised_shape.vpr@152.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x2.f. (generalised_shape.vpr@16.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access y1.g. (generalised_shape.vpr@27.3); [postcondition.violated:insufficient.permission] Postcondition of test12 might not hold. There might be insufficient permission to access x1.g. (generalised_shape.vpr@34.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.g. (generalised_shape.vpr@46.11); [postcondition.violated:receiver.not.injective] Postcondition of test10 might not hold. Receiver of x.g.f [generalised_shape.vpr@54.54]  might not be injective. (generalised_shape.vpr@54.12); [assert.failed:assertion.false] Assert might fail. Assertion y1.g != y3.g might not hold. (generalised_shape.vpr@92.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.f. (generalised_shape.vpr@124.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.g. (generalised_shape.vpr@136.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.g.f. (generalised_shape.vpr@152.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x2.f. (generalised_shape.vpr@16.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access y1.g. (generalised_shape.vpr@27.3); [postcondition.violated:insufficient.permission] Postcondition of test12 might not hold. There might be insufficient permission to access x1.g. (generalised_shape.vpr@34.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.g. (generalised_shape.vpr@46.11); [postcondition.violated:receiver.not.injective] Postcondition of test10 might not hold. Receiver of x.g.f [generalised_shape.vpr@54.54]  might not be injective. (generalised_shape.vpr@54.12); [assert.failed:assertion.false] Assert might fail. Assertion y1.g != y3.g might not hold. (generalised_shape.vpr@92.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.f. (generalised_shape.vpr@124.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.g. (generalised_shape.vpr@136.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.g.f. (generalised_shape.vpr@152.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x2.f. (generalised_shape.vpr@16.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access y1.g. (generalised_shape.vpr@27.3); [postcondition.violated:insufficient.permission] Postcondition of test12 might not hold. There might be insufficient permission to access x1.g. (generalised_shape.vpr@34.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.g. (generalised_shape.vpr@46.11); [postcondition.violated:receiver.not.injective] Postcondition of test10 might not hold. Receiver of x.g.f [generalised_shape.vpr@54.54]  might not be injective. (generalised_shape.vpr@54.12); [assert.failed:assertion.false] Assert might fail. Assertion y1.g != y3.g might not hold. (generalised_shape.vpr@92.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.f. (generalised_shape.vpr@124.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.g. (generalised_shape.vpr@136.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.g.f. (generalised_shape.vpr@152.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x2.f. (generalised_shape.vpr@16.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access y1.g. (generalised_shape.vpr@27.3); [postcondition.violated:insufficient.permission] Postcondition of test12 might not hold. There might be insufficient permission to access x1.g. (generalised_shape.vpr@34.11); [not.wellformed:insufficient.permission] Contract might not be well-formed. There might be insufficient permission to access x.g. (generalised_shape.vpr@46.11); [postcondition.violated:receiver.not.injective] Postcondition of test10 might not hold. Receiver of x.g.f [generalised_shape.vpr@54.54]  might not be injective. (generalised_shape.vpr@54.12); [assert.failed:assertion.false] Assert might fail. Assertion y1.g != y3.g might not hold. (generalised_shape.vpr@92.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.f. (generalised_shape.vpr@124.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.g. (generalised_shape.vpr@136.3); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access x.g.f. (generalised_shape.vpr@152.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/nonnull.vpr,3,1388,18,1,1371,1381,1414,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (nonnull.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (nonnull.vpr@21.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (nonnull.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (nonnull.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (nonnull.vpr@21.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (nonnull.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (nonnull.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (nonnull.vpr@21.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (nonnull.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (nonnull.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (nonnull.vpr@21.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (nonnull.vpr@44.3)); List([assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (nonnull.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (nonnull.vpr@21.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (nonnull.vpr@44.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/quantification_over_pred_permissions.vpr,0,1521,60,3,1441,1536,1588,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/quantifiedvalues.vpr,1,1695,70,4,1602,1713,1772,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion x.f == old(x.f) might not hold. (quantifiedvalues.vpr@24.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == old(x.f) might not hold. (quantifiedvalues.vpr@24.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == old(x.f) might not hold. (quantifiedvalues.vpr@24.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == old(x.f) might not hold. (quantifiedvalues.vpr@24.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == old(x.f) might not hold. (quantifiedvalues.vpr@24.5)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/snapshots1.vpr,4,3191,16,0,3168,3199,3206,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion fun1(xs; y) == yf might not hold. (snapshots1.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@106.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion fun1(xs; y) == yf might not hold. (snapshots1.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@106.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion fun1(xs; y) == yf might not hold. (snapshots1.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@106.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion fun1(xs; y) == yf might not hold. (snapshots1.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@106.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion fun1(xs; y) == yf might not hold. (snapshots1.vpr@59.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@85.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots1.vpr@106.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/snapshots2.vpr,1,2019,13,0,2009,2010,2039,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion v == fun(xs; x; n) might not hold. (snapshots2.vpr@36.3)); List([assert.failed:assertion.false] Assert might fail. Assertion v == fun(xs; x; n) might not hold. (snapshots2.vpr@36.3)); List([assert.failed:assertion.false] Assert might fail. Assertion v == fun(xs; x; n) might not hold. (snapshots2.vpr@36.3)); List([assert.failed:assertion.false] Assert might fail. Assertion v == fun(xs; x; n) might not hold. (snapshots2.vpr@36.3)); List([assert.failed:assertion.false] Assert might fail. Assertion v == fun(xs; x; n) might not hold. (snapshots2.vpr@36.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/snapshots3.vpr,2,1750,106,6,1647,1708,1897,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion a == t.f might not hold. (snapshots3.vpr@48.2); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots3.vpr@68.9)); List([assert.failed:assertion.false] Assert might fail. Assertion a == t.f might not hold. (snapshots3.vpr@48.2); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots3.vpr@68.9)); List([assert.failed:assertion.false] Assert might fail. Assertion a == t.f might not hold. (snapshots3.vpr@48.2); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots3.vpr@68.9)); List([assert.failed:assertion.false] Assert might fail. Assertion a == t.f might not hold. (snapshots3.vpr@48.2); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots3.vpr@68.9)); List([assert.failed:assertion.false] Assert might fail. Assertion a == t.f might not hold. (snapshots3.vpr@48.2); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (snapshots3.vpr@68.9)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/unionfind.vpr,2,1813,30,1,1770,1833,1836,Vector(List([application.precondition:assertion.false] Precondition of function find might not hold. Assertion o != null might not hold. (unionfind.vpr@31.59); [application.precondition:assertion.false] Precondition of function find might not hold. Assertion p != null might not hold. (unionfind.vpr@90.90)); List([application.precondition:assertion.false] Precondition of function find might not hold. Assertion o != null might not hold. (unionfind.vpr@31.59); [application.precondition:assertion.false] Precondition of function find might not hold. Assertion p != null might not hold. (unionfind.vpr@90.90)); List([application.precondition:assertion.false] Precondition of function find might not hold. Assertion o != null might not hold. (unionfind.vpr@31.59); [application.precondition:assertion.false] Precondition of function find might not hold. Assertion p != null might not hold. (unionfind.vpr@90.90)); List([application.precondition:assertion.false] Precondition of function find might not hold. Assertion o != null might not hold. (unionfind.vpr@31.59); [application.precondition:assertion.false] Precondition of function find might not hold. Assertion p != null might not hold. (unionfind.vpr@90.90)); List([application.precondition:assertion.false] Precondition of function find might not hold. Assertion o != null might not hold. (unionfind.vpr@31.59); [application.precondition:assertion.false] Precondition of function find might not hold. Assertion p != null might not hold. (unionfind.vpr@90.90)))
../../src/test/resources/frontend-generated/quantifiedpermissions/sets/unionone.vpr,0,1436,32,2,1392,1448,1470,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/ZeroArray.vpr,0,1933,21,1,1903,1947,1949,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/array-sum.vpr,0,1987,19,0,1961,1992,2009,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/array_problem.vpr,0,2475,134,5,2330,2441,2654,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/back.vpr,0,2055,39,1,2000,2077,2090,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/blom01.vpr,0,1953,31,1,1909,1972,1979,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/blom02.vpr,0,2022,37,1,1972,2032,2062,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/blom03.vpr,0,1937,7,0,1927,1939,1946,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/fmse-2015-04-16.vpr,0,3611,23,0,3581,3617,3637,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/fwd.vpr,0,1947,53,2,1908,1911,2022,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/max-two-range.vpr,0,2895,17,0,2872,2900,2914,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/par_id.vpr,0,1867,58,3,1820,1832,1950,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/shift.vpr,0,1965,44,2,1905,1979,2011,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/summation.vpr,0,2553,108,4,2472,2482,2707,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testAccessSubmatrix.vpr,0,1769,58,3,1703,1760,1846,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testAccessSubmatrixErr1.vpr,1,1733,47,2,1685,1717,1797,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_3.Ref__Integer_value. (testAccessSubmatrixErr1.vpr@38.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_3.Ref__Integer_value. (testAccessSubmatrixErr1.vpr@38.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_3.Ref__Integer_value. (testAccessSubmatrixErr1.vpr@38.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_3.Ref__Integer_value. (testAccessSubmatrixErr1.vpr@38.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_3.Ref__Integer_value. (testAccessSubmatrixErr1.vpr@38.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testDepParLoop.vpr,0,2777,60,2,2704,2776,2851,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testDepParLoopBack.vpr,0,2905,59,2,2834,2903,2979,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testDepParLoopBackE1.vpr,1,2723,72,2,2656,2690,2823,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_4.Ref__Integer_value. (testDepParLoopBackE1.vpr@124.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_4.Ref__Integer_value. (testDepParLoopBackE1.vpr@124.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_4.Ref__Integer_value. (testDepParLoopBackE1.vpr@124.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_4.Ref__Integer_value. (testDepParLoopBackE1.vpr@124.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_4.Ref__Integer_value. (testDepParLoopBackE1.vpr@124.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testDepParLoopE1.vpr,1,2704,28,1,2671,2702,2741,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_11.Ref__Integer_value. (testDepParLoopE1.vpr@132.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_11.Ref__Integer_value. (testDepParLoopE1.vpr@132.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_11.Ref__Integer_value. (testDepParLoopE1.vpr@132.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_11.Ref__Integer_value. (testDepParLoopE1.vpr@132.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_11.Ref__Integer_value. (testDepParLoopE1.vpr@132.5)))
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testHistogram.vpr,0,3022,44,1,2969,3021,3077,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testNestedDoubleIC.vpr,0,2510,100,3,2379,2527,2624,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testNestedSingleIC.vpr,0,2389,65,2,2300,2414,2455,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testTranspose.vpr,0,3604,275,7,3216,3778,3820,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testZeroArray.vpr,0,2420,108,4,2333,2356,2573,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testZeroArrayC.vpr,0,2307,36,1,2257,2323,2343,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testZeroArrayE1.vpr,1,2398,76,3,2339,2351,2506,Vector(List([postcondition.violated:assertion.false] Postcondition of Ref__loop_body_23 might not hold. Assertion ar[i].Ref__Integer_value == 0 might not hold. (testZeroArrayE1.vpr@77.11)); List([postcondition.violated:assertion.false] Postcondition of Ref__loop_body_23 might not hold. Assertion ar[i].Ref__Integer_value == 0 might not hold. (testZeroArrayE1.vpr@77.11)); List([postcondition.violated:assertion.false] Postcondition of Ref__loop_body_23 might not hold. Assertion ar[i].Ref__Integer_value == 0 might not hold. (testZeroArrayE1.vpr@77.11)); List([postcondition.violated:assertion.false] Postcondition of Ref__loop_body_23 might not hold. Assertion ar[i].Ref__Integer_value == 0 might not hold. (testZeroArrayE1.vpr@77.11)); List([postcondition.violated:assertion.false] Postcondition of Ref__loop_body_23 might not hold. Assertion ar[i].Ref__Integer_value == 0 might not hold. (testZeroArrayE1.vpr@77.11)))
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testZeroArrayJava.vpr,0,2472,99,4,2332,2535,2549,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testZeroArraySilicon.vpr,0,1681,34,2,1635,1691,1718,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testZeroMatrix.vpr,0,2412,101,4,2273,2450,2514,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/testZeroSubmatrix.vpr,0,2578,102,3,2482,2534,2720,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_IterationExample.vpr,0,2596,100,3,2487,2573,2730,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_array.vpr,0,1919,26,1,1884,1925,1949,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_backward_dep_c.vpr,0,3035,36,1,3005,3015,3087,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_backward_dep_drf_c.vpr,0,2874,120,4,2705,2936,2981,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_backward_dep_e1_c.vpr,1,2976,6,0,2968,2979,2982,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_4.Ref__Integer_value. (test_backward_dep_e1_c.vpr@124.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_4.Ref__Integer_value. (test_backward_dep_e1_c.vpr@124.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_4.Ref__Integer_value. (test_backward_dep_e1_c.vpr@124.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_4.Ref__Integer_value. (test_backward_dep_e1_c.vpr@124.3)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_4.Ref__Integer_value. (test_backward_dep_e1_c.vpr@124.3)))
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_binomial_auto.vpr,0,4198,73,1,4099,4225,4272,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_binomial_noauto.vpr,0,2294,48,2,2231,2306,2347,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_forward_dep_c.vpr,0,2861,48,1,2798,2871,2915,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_forward_dep_drf_c.vpr,0,2932,14,0,2916,2929,2951,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_forward_dep_e1_c.vpr,1,2765,117,4,2673,2692,2931,Vector(List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_11.Ref__Integer_value. (test_forward_dep_e1_c.vpr@132.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_11.Ref__Integer_value. (test_forward_dep_e1_c.vpr@132.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_11.Ref__Integer_value. (test_forward_dep_e1_c.vpr@132.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_11.Ref__Integer_value. (test_forward_dep_e1_c.vpr@132.5)); List([assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access __flatten_11.Ref__Integer_value. (test_forward_dep_e1_c.vpr@132.5)))
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_forward_dep_noauto_pvl.vpr,0,2257,54,2,2182,2284,2306,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_forward_dep_pvl.vpr,0,2503,93,3,2399,2484,2626,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_idx_3.vpr,0,1866,80,4,1760,1883,1955,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_indep_loop_drf_c.vpr,0,2628,96,3,2522,2607,2755,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_kernel_example_pvl.vpr,0,2161,40,1,2105,2181,2197,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_kernel_example_v2_pvl.vpr,0,2522,82,3,2439,2493,2634,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_kernel_example_v3_pvl.vpr,0,2123,45,2,2071,2117,2181,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_par_id.vpr,0,2427,82,3,2312,2470,2501,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_vector_add_c.vpr,0,2897,14,0,2884,2892,2917,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_zero_array_pvl.vpr,0,2275,107,4,2196,2203,2427,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/test_zero_matrix_pvl.vpr,0,2554,103,4,2413,2592,2659,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpermissions/third_party/trigger-z3-bug.vpr,1,2704,71,2,2603,2751,2758,Vector(List([invariant.not.established:insufficient.permission] Loop invariant acc(this.dst[tid].Integer_value; write) might not hold on entry. There might be insufficient permission to access this.dst[tid].Integer_value. (trigger-z3-bug.vpr@73.17)); List([invariant.not.established:insufficient.permission] Loop invariant acc(this.dst[tid].Integer_value; write) might not hold on entry. There might be insufficient permission to access this.dst[tid].Integer_value. (trigger-z3-bug.vpr@73.17)); List([invariant.not.established:insufficient.permission] Loop invariant acc(this.dst[tid].Integer_value; write) might not hold on entry. There might be insufficient permission to access this.dst[tid].Integer_value. (trigger-z3-bug.vpr@73.17)); List([invariant.not.established:insufficient.permission] Loop invariant acc(this.dst[tid].Integer_value; write) might not hold on entry. There might be insufficient permission to access this.dst[tid].Integer_value. (trigger-z3-bug.vpr@73.17)); List([invariant.not.established:insufficient.permission] Loop invariant acc(this.dst[tid].Integer_value; write) might not hold on entry. There might be insufficient permission to access this.dst[tid].Integer_value. (trigger-z3-bug.vpr@73.17)))
../../src/test/resources/frontend-generated/quantifiedpredicates/arity/fold_arity1.vpr,5,1926,38,1,1887,1914,1979,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (fold_arity1.vpr@47.5); [fold.failed:assertion.false] Folding p3(x) might fail. Assertion r.f == 0 might not hold. (fold_arity1.vpr@59.5); [fold.failed:insufficient.permission] Folding p5(x; 4) might fail. There might be insufficient permission to access r.f. (fold_arity1.vpr@91.5); [fold.failed:assertion.false] Folding p5(x; i) might fail. Assertion r.f == i might not hold. (fold_arity1.vpr@102.5); [fold.failed:insufficient.permission] Folding p5(x; i) might fail. There might be insufficient permission to access r.f. (fold_arity1.vpr@110.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (fold_arity1.vpr@47.5); [fold.failed:assertion.false] Folding p3(x) might fail. Assertion r.f == 0 might not hold. (fold_arity1.vpr@59.5); [fold.failed:insufficient.permission] Folding p5(x; 4) might fail. There might be insufficient permission to access r.f. (fold_arity1.vpr@91.5); [fold.failed:assertion.false] Folding p5(x; i) might fail. Assertion r.f == i might not hold. (fold_arity1.vpr@102.5); [fold.failed:insufficient.permission] Folding p5(x; i) might fail. There might be insufficient permission to access r.f. (fold_arity1.vpr@110.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (fold_arity1.vpr@47.5); [fold.failed:assertion.false] Folding p3(x) might fail. Assertion r.f == 0 might not hold. (fold_arity1.vpr@59.5); [fold.failed:insufficient.permission] Folding p5(x; 4) might fail. There might be insufficient permission to access r.f. (fold_arity1.vpr@91.5); [fold.failed:assertion.false] Folding p5(x; i) might fail. Assertion r.f == i might not hold. (fold_arity1.vpr@102.5); [fold.failed:insufficient.permission] Folding p5(x; i) might fail. There might be insufficient permission to access r.f. (fold_arity1.vpr@110.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (fold_arity1.vpr@47.5); [fold.failed:assertion.false] Folding p3(x) might fail. Assertion r.f == 0 might not hold. (fold_arity1.vpr@59.5); [fold.failed:insufficient.permission] Folding p5(x; 4) might fail. There might be insufficient permission to access r.f. (fold_arity1.vpr@91.5); [fold.failed:assertion.false] Folding p5(x; i) might fail. Assertion r.f == i might not hold. (fold_arity1.vpr@102.5); [fold.failed:insufficient.permission] Folding p5(x; i) might fail. There might be insufficient permission to access r.f. (fold_arity1.vpr@110.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (fold_arity1.vpr@47.5); [fold.failed:assertion.false] Folding p3(x) might fail. Assertion r.f == 0 might not hold. (fold_arity1.vpr@59.5); [fold.failed:insufficient.permission] Folding p5(x; 4) might fail. There might be insufficient permission to access r.f. (fold_arity1.vpr@91.5); [fold.failed:assertion.false] Folding p5(x; i) might fail. Assertion r.f == i might not hold. (fold_arity1.vpr@102.5); [fold.failed:insufficient.permission] Folding p5(x; i) might fail. There might be insufficient permission to access r.f. (fold_arity1.vpr@110.5)))
../../src/test/resources/frontend-generated/quantifiedpredicates/arity/qpprod_arity.vpr,0,1762,58,3,1692,1759,1835,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpredicates/arity/snapshots.vpr,2,10775,620,5,9910,11082,11335,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion f1(n; m) might not hold. (snapshots.vpr@29.2); [assert.failed:assertion.false] Assert might fail. Assertion f3(n; m) == b might not hold. (snapshots.vpr@47.2)); List([assert.failed:assertion.false] Assert might fail. Assertion f1(n; m) might not hold. (snapshots.vpr@29.2); [assert.failed:assertion.false] Assert might fail. Assertion f3(n; m) == b might not hold. (snapshots.vpr@47.2)); List([assert.failed:assertion.false] Assert might fail. Assertion f1(n; m) might not hold. (snapshots.vpr@29.2); [assert.failed:assertion.false] Assert might fail. Assertion f3(n; m) == b might not hold. (snapshots.vpr@47.2)); List([assert.failed:assertion.false] Assert might fail. Assertion f1(n; m) might not hold. (snapshots.vpr@29.2); [assert.failed:assertion.false] Assert might fail. Assertion f3(n; m) == b might not hold. (snapshots.vpr@47.2)); List([assert.failed:assertion.false] Assert might fail. Assertion f1(n; m) might not hold. (snapshots.vpr@29.2); [assert.failed:assertion.false] Assert might fail. Assertion f3(n; m) == b might not hold. (snapshots.vpr@47.2)))
../../src/test/resources/frontend-generated/quantifiedpredicates/arity/spexhale_arity.vpr,4,1954,34,1,1906,1977,1980,Vector(List([postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p2(x). (spexhale_arity.vpr@43.9); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p3(x). (spexhale_arity.vpr@56.9); [postcondition.violated:insufficient.permission] Postcondition of m7 might not hold. There might be insufficient permission to access p4(x; i). (spexhale_arity.vpr@69.9); [postcondition.violated:insufficient.permission] Postcondition of m9 might not hold. There might be insufficient permission to access p5(x; i). (spexhale_arity.vpr@82.9)); List([postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p2(x). (spexhale_arity.vpr@43.9); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p3(x). (spexhale_arity.vpr@56.9); [postcondition.violated:insufficient.permission] Postcondition of m7 might not hold. There might be insufficient permission to access p4(x; i). (spexhale_arity.vpr@69.9); [postcondition.violated:insufficient.permission] Postcondition of m9 might not hold. There might be insufficient permission to access p5(x; i). (spexhale_arity.vpr@82.9)); List([postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p2(x). (spexhale_arity.vpr@43.9); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p3(x). (spexhale_arity.vpr@56.9); [postcondition.violated:insufficient.permission] Postcondition of m7 might not hold. There might be insufficient permission to access p4(x; i). (spexhale_arity.vpr@69.9); [postcondition.violated:insufficient.permission] Postcondition of m9 might not hold. There might be insufficient permission to access p5(x; i). (spexhale_arity.vpr@82.9)); List([postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p2(x). (spexhale_arity.vpr@43.9); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p3(x). (spexhale_arity.vpr@56.9); [postcondition.violated:insufficient.permission] Postcondition of m7 might not hold. There might be insufficient permission to access p4(x; i). (spexhale_arity.vpr@69.9); [postcondition.violated:insufficient.permission] Postcondition of m9 might not hold. There might be insufficient permission to access p5(x; i). (spexhale_arity.vpr@82.9)); List([postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p2(x). (spexhale_arity.vpr@43.9); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p3(x). (spexhale_arity.vpr@56.9); [postcondition.violated:insufficient.permission] Postcondition of m7 might not hold. There might be insufficient permission to access p4(x; i). (spexhale_arity.vpr@69.9); [postcondition.violated:insufficient.permission] Postcondition of m9 might not hold. There might be insufficient permission to access p5(x; i). (spexhale_arity.vpr@82.9)))
../../src/test/resources/frontend-generated/quantifiedpredicates/arity/spprod_arity.vpr,0,1805,82,4,1723,1774,1918,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpredicates/arity/unfold_arity1.vpr,6,1967,25,1,1933,1976,1993,Vector(List([unfold.failed:insufficient.permission] Unfolding p2(x) might fail. There might be insufficient permission to access p2(x). (unfold_arity1.vpr@45.5); [unfold.failed:insufficient.permission] Unfolding p3(x) might fail. There might be insufficient permission to access p3(x). (unfold_arity1.vpr@58.2); [unfold.failed:insufficient.permission] Unfolding p3(x) might fail. There might be insufficient permission to access p3(x). (unfold_arity1.vpr@65.5); [unfold.failed:insufficient.permission] Unfolding p4(x; i) might fail. There might be insufficient permission to access p4(x; i). (unfold_arity1.vpr@81.5); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (unfold_arity1.vpr@100.5); [unfold.failed:insufficient.permission] Unfolding p5(x; i) might fail. There might be insufficient permission to access p5(x; i). (unfold_arity1.vpr@108.5)); List([unfold.failed:insufficient.permission] Unfolding p2(x) might fail. There might be insufficient permission to access p2(x). (unfold_arity1.vpr@45.5); [unfold.failed:insufficient.permission] Unfolding p3(x) might fail. There might be insufficient permission to access p3(x). (unfold_arity1.vpr@58.2); [unfold.failed:insufficient.permission] Unfolding p3(x) might fail. There might be insufficient permission to access p3(x). (unfold_arity1.vpr@65.5); [unfold.failed:insufficient.permission] Unfolding p4(x; i) might fail. There might be insufficient permission to access p4(x; i). (unfold_arity1.vpr@81.5); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (unfold_arity1.vpr@100.5); [unfold.failed:insufficient.permission] Unfolding p5(x; i) might fail. There might be insufficient permission to access p5(x; i). (unfold_arity1.vpr@108.5)); List([unfold.failed:insufficient.permission] Unfolding p2(x) might fail. There might be insufficient permission to access p2(x). (unfold_arity1.vpr@45.5); [unfold.failed:insufficient.permission] Unfolding p3(x) might fail. There might be insufficient permission to access p3(x). (unfold_arity1.vpr@58.2); [unfold.failed:insufficient.permission] Unfolding p3(x) might fail. There might be insufficient permission to access p3(x). (unfold_arity1.vpr@65.5); [unfold.failed:insufficient.permission] Unfolding p4(x; i) might fail. There might be insufficient permission to access p4(x; i). (unfold_arity1.vpr@81.5); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (unfold_arity1.vpr@100.5); [unfold.failed:insufficient.permission] Unfolding p5(x; i) might fail. There might be insufficient permission to access p5(x; i). (unfold_arity1.vpr@108.5)); List([unfold.failed:insufficient.permission] Unfolding p2(x) might fail. There might be insufficient permission to access p2(x). (unfold_arity1.vpr@45.5); [unfold.failed:insufficient.permission] Unfolding p3(x) might fail. There might be insufficient permission to access p3(x). (unfold_arity1.vpr@58.2); [unfold.failed:insufficient.permission] Unfolding p3(x) might fail. There might be insufficient permission to access p3(x). (unfold_arity1.vpr@65.5); [unfold.failed:insufficient.permission] Unfolding p4(x; i) might fail. There might be insufficient permission to access p4(x; i). (unfold_arity1.vpr@81.5); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (unfold_arity1.vpr@100.5); [unfold.failed:insufficient.permission] Unfolding p5(x; i) might fail. There might be insufficient permission to access p5(x; i). (unfold_arity1.vpr@108.5)); List([unfold.failed:insufficient.permission] Unfolding p2(x) might fail. There might be insufficient permission to access p2(x). (unfold_arity1.vpr@45.5); [unfold.failed:insufficient.permission] Unfolding p3(x) might fail. There might be insufficient permission to access p3(x). (unfold_arity1.vpr@58.2); [unfold.failed:insufficient.permission] Unfolding p3(x) might fail. There might be insufficient permission to access p3(x). (unfold_arity1.vpr@65.5); [unfold.failed:insufficient.permission] Unfolding p4(x; i) might fail. There might be insufficient permission to access p4(x; i). (unfold_arity1.vpr@81.5); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (unfold_arity1.vpr@100.5); [unfold.failed:insufficient.permission] Unfolding p5(x; i) might fail. There might be insufficient permission to access p5(x; i). (unfold_arity1.vpr@108.5)))
../../src/test/resources/frontend-generated/quantifiedpredicates/arity/unfolding_arity.vpr,1,1695,81,4,1622,1656,1809,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion (forall r: Ref :: { (r in xs) } (r in xs) ==> (unfolding acc(p3(r; i); write) in r.f == i)) might not hold. (unfolding_arity.vpr@49.4)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall r: Ref :: { (r in xs) } (r in xs) ==> (unfolding acc(p3(r; i); write) in r.f == i)) might not hold. (unfolding_arity.vpr@49.4)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall r: Ref :: { (r in xs) } (r in xs) ==> (unfolding acc(p3(r; i); write) in r.f == i)) might not hold. (unfolding_arity.vpr@49.4)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall r: Ref :: { (r in xs) } (r in xs) ==> (unfolding acc(p3(r; i); write) in r.f == i)) might not hold. (unfolding_arity.vpr@49.4)); List([assert.failed:assertion.false] Assert might fail. Assertion (forall r: Ref :: { (r in xs) } (r in xs) ==> (unfolding acc(p3(r; i); write) in r.f == i)) might not hold. (unfolding_arity.vpr@49.4)))
../../src/test/resources/frontend-generated/quantifiedpredicates/basic/array.vpr,2,1955,12,0,1938,1961,1967,Vector(List([postcondition.violated:insufficient.permission] Postcondition of t2 might not hold. There might be insufficient permission to access p(a; i). (array.vpr@44.11); [postcondition.violated:insufficient.permission] Postcondition of t4 might not hold. There might be insufficient permission to access p(a; 1). (array.vpr@60.11)); List([postcondition.violated:insufficient.permission] Postcondition of t2 might not hold. There might be insufficient permission to access p(a; i). (array.vpr@44.11); [postcondition.violated:insufficient.permission] Postcondition of t4 might not hold. There might be insufficient permission to access p(a; 1). (array.vpr@60.11)); List([postcondition.violated:insufficient.permission] Postcondition of t2 might not hold. There might be insufficient permission to access p(a; i). (array.vpr@44.11); [postcondition.violated:insufficient.permission] Postcondition of t4 might not hold. There might be insufficient permission to access p(a; 1). (array.vpr@60.11)); List([postcondition.violated:insufficient.permission] Postcondition of t2 might not hold. There might be insufficient permission to access p(a; i). (array.vpr@44.11); [postcondition.violated:insufficient.permission] Postcondition of t4 might not hold. There might be insufficient permission to access p(a; 1). (array.vpr@60.11)); List([postcondition.violated:insufficient.permission] Postcondition of t2 might not hold. There might be insufficient permission to access p(a; i). (array.vpr@44.11); [postcondition.violated:insufficient.permission] Postcondition of t4 might not hold. There might be insufficient permission to access p(a; 1). (array.vpr@60.11)))
../../src/test/resources/frontend-generated/quantifiedpredicates/basic/exhale.vpr,4,1995,11,0,1979,2003,2004,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred1(x). (exhale.vpr@54.4); [unfold.failed:insufficient.permission] Unfolding pred1(y) might fail. There might be insufficient permission to access pred1(y). (exhale.vpr@67.4); [unfold.failed:insufficient.permission] Unfolding pred1(y) might fail. There might be insufficient permission to access pred1(y). (exhale.vpr@84.4); [unfold.failed:insufficient.permission] Unfolding pred1(z) might fail. There might be insufficient permission to access pred1(z). (exhale.vpr@93.4)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred1(x). (exhale.vpr@54.4); [unfold.failed:insufficient.permission] Unfolding pred1(y) might fail. There might be insufficient permission to access pred1(y). (exhale.vpr@67.4); [unfold.failed:insufficient.permission] Unfolding pred1(y) might fail. There might be insufficient permission to access pred1(y). (exhale.vpr@84.4); [unfold.failed:insufficient.permission] Unfolding pred1(z) might fail. There might be insufficient permission to access pred1(z). (exhale.vpr@93.4)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred1(x). (exhale.vpr@54.4); [unfold.failed:insufficient.permission] Unfolding pred1(y) might fail. There might be insufficient permission to access pred1(y). (exhale.vpr@67.4); [unfold.failed:insufficient.permission] Unfolding pred1(y) might fail. There might be insufficient permission to access pred1(y). (exhale.vpr@84.4); [unfold.failed:insufficient.permission] Unfolding pred1(z) might fail. There might be insufficient permission to access pred1(z). (exhale.vpr@93.4)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred1(x). (exhale.vpr@54.4); [unfold.failed:insufficient.permission] Unfolding pred1(y) might fail. There might be insufficient permission to access pred1(y). (exhale.vpr@67.4); [unfold.failed:insufficient.permission] Unfolding pred1(y) might fail. There might be insufficient permission to access pred1(y). (exhale.vpr@84.4); [unfold.failed:insufficient.permission] Unfolding pred1(z) might fail. There might be insufficient permission to access pred1(z). (exhale.vpr@93.4)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred1(x). (exhale.vpr@54.4); [unfold.failed:insufficient.permission] Unfolding pred1(y) might fail. There might be insufficient permission to access pred1(y). (exhale.vpr@67.4); [unfold.failed:insufficient.permission] Unfolding pred1(y) might fail. There might be insufficient permission to access pred1(y). (exhale.vpr@84.4); [unfold.failed:insufficient.permission] Unfolding pred1(z) might fail. There might be insufficient permission to access pred1(z). (exhale.vpr@93.4)))
../../src/test/resources/frontend-generated/quantifiedpredicates/basic/foralls.vpr,2,1978,17,0,1961,1972,2003,Vector(List([not.wellformed:seq.index.length] Contract might not be well-formed. Index a * i + b into xs might exceed sequence length. (foralls.vpr@34.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (foralls.vpr@44.12)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index a * i + b into xs might exceed sequence length. (foralls.vpr@34.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (foralls.vpr@44.12)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index a * i + b into xs might exceed sequence length. (foralls.vpr@34.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (foralls.vpr@44.12)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index a * i + b into xs might exceed sequence length. (foralls.vpr@34.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (foralls.vpr@44.12)); List([not.wellformed:seq.index.length] Contract might not be well-formed. Index a * i + b into xs might exceed sequence length. (foralls.vpr@34.12); [not.wellformed:seq.index.length] Contract might not be well-formed. Index i into xs might exceed sequence length. (foralls.vpr@44.12)))
../../src/test/resources/frontend-generated/quantifiedpredicates/basic/functions1.vpr,0,1975,78,3,1865,2014,2046,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpredicates/basic/functions2.vpr,1,1786,21,1,1762,1784,1814,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion f(xs; x) == 0 might not hold. (functions2.vpr@15.2)); List([assert.failed:assertion.false] Assert might fail. Assertion f(xs; x) == 0 might not hold. (functions2.vpr@15.2)); List([assert.failed:assertion.false] Assert might fail. Assertion f(xs; x) == 0 might not hold. (functions2.vpr@15.2)); List([assert.failed:assertion.false] Assert might fail. Assertion f(xs; x) == 0 might not hold. (functions2.vpr@15.2)); List([assert.failed:assertion.false] Assert might fail. Assertion f(xs; x) == 0 might not hold. (functions2.vpr@15.2)))
../../src/test/resources/frontend-generated/quantifiedpredicates/basic/independence.vpr,0,1764,25,1,1729,1776,1788,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpredicates/basic/injectivity.vpr,3,1851,78,4,1742,1887,1925,Vector(List([postcondition.violated:receiver.not.injective] Postcondition of test01 might not hold. Receiver of pred1(y) [injectivity.vpr@18.43]  might not be injective. (injectivity.vpr@18.9); [postcondition.violated:receiver.not.injective] Postcondition of test02 might not hold. Receiver of pred2(y; 1) [injectivity.vpr@25.44]  might not be injective. (injectivity.vpr@25.10); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@32.2)); List([postcondition.violated:receiver.not.injective] Postcondition of test01 might not hold. Receiver of pred1(y) [injectivity.vpr@18.43]  might not be injective. (injectivity.vpr@18.9); [postcondition.violated:receiver.not.injective] Postcondition of test02 might not hold. Receiver of pred2(y; 1) [injectivity.vpr@25.44]  might not be injective. (injectivity.vpr@25.10); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@32.2)); List([postcondition.violated:receiver.not.injective] Postcondition of test01 might not hold. Receiver of pred1(y) [injectivity.vpr@18.43]  might not be injective. (injectivity.vpr@18.9); [postcondition.violated:receiver.not.injective] Postcondition of test02 might not hold. Receiver of pred2(y; 1) [injectivity.vpr@25.44]  might not be injective. (injectivity.vpr@25.10); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@32.2)); List([postcondition.violated:receiver.not.injective] Postcondition of test01 might not hold. Receiver of pred1(y) [injectivity.vpr@18.43]  might not be injective. (injectivity.vpr@18.9); [postcondition.violated:receiver.not.injective] Postcondition of test02 might not hold. Receiver of pred2(y; 1) [injectivity.vpr@25.44]  might not be injective. (injectivity.vpr@25.10); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@32.2)); List([postcondition.violated:receiver.not.injective] Postcondition of test01 might not hold. Receiver of pred1(y) [injectivity.vpr@18.43]  might not be injective. (injectivity.vpr@18.9); [postcondition.violated:receiver.not.injective] Postcondition of test02 might not hold. Receiver of pred2(y; 1) [injectivity.vpr@25.44]  might not be injective. (injectivity.vpr@25.10); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred2(x; 1). (injectivity.vpr@32.2)))
../../src/test/resources/frontend-generated/quantifiedpredicates/basic/knownfolded.vpr,0,1793,25,1,1757,1810,1813,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpredicates/basic/partial_permissions.vpr,3,1997,4,0,1992,1998,2003,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (partial_permissions.vpr@51.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (partial_permissions.vpr@60.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred(x). (partial_permissions.vpr@67.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (partial_permissions.vpr@51.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (partial_permissions.vpr@60.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred(x). (partial_permissions.vpr@67.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (partial_permissions.vpr@51.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (partial_permissions.vpr@60.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred(x). (partial_permissions.vpr@67.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (partial_permissions.vpr@51.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (partial_permissions.vpr@60.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred(x). (partial_permissions.vpr@67.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (partial_permissions.vpr@51.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (partial_permissions.vpr@60.5); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access pred(x). (partial_permissions.vpr@67.5)))
../../src/test/resources/frontend-generated/quantifiedpredicates/basic/permissions.vpr,7,1769,69,3,1711,1729,1867,Vector(List([call.precondition:insufficient.permission] The precondition of method test01 might not hold. There might be insufficient permission to access pred1(x). (permissions.vpr@23.3); [call.precondition:insufficient.permission] The precondition of method test01_qp might not hold. There might be insufficient permission to access pred1(x). (permissions.vpr@38.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (permissions.vpr@45.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@54.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@64.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@73.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@83.3)); List([call.precondition:insufficient.permission] The precondition of method test01 might not hold. There might be insufficient permission to access pred1(x). (permissions.vpr@23.3); [call.precondition:insufficient.permission] The precondition of method test01_qp might not hold. There might be insufficient permission to access pred1(x). (permissions.vpr@38.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (permissions.vpr@45.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@54.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@64.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@73.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@83.3)); List([call.precondition:insufficient.permission] The precondition of method test01 might not hold. There might be insufficient permission to access pred1(x). (permissions.vpr@23.3); [call.precondition:insufficient.permission] The precondition of method test01_qp might not hold. There might be insufficient permission to access pred1(x). (permissions.vpr@38.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (permissions.vpr@45.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@54.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@64.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@73.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@83.3)); List([call.precondition:insufficient.permission] The precondition of method test01 might not hold. There might be insufficient permission to access pred1(x). (permissions.vpr@23.3); [call.precondition:insufficient.permission] The precondition of method test01_qp might not hold. There might be insufficient permission to access pred1(x). (permissions.vpr@38.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (permissions.vpr@45.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@54.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@64.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@73.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@83.3)); List([call.precondition:insufficient.permission] The precondition of method test01 might not hold. There might be insufficient permission to access pred1(x). (permissions.vpr@23.3); [call.precondition:insufficient.permission] The precondition of method test01_qp might not hold. There might be insufficient permission to access pred1(x). (permissions.vpr@38.3); [assert.failed:assertion.false] Assert might fail. Assertion x != null might not hold. (permissions.vpr@45.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@54.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@64.3); [assert.failed:assertion.false] Assert might fail. Assertion y != null might not hold. (permissions.vpr@73.4); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (permissions.vpr@83.3)))
../../src/test/resources/frontend-generated/quantifiedpredicates/basic/qp_exhale.vpr,2,1736,63,3,1650,1758,1800,Vector(List([postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access p2(r). (qp_exhale.vpr@61.9); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p2(r). (qp_exhale.vpr@69.9)); List([postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access p2(r). (qp_exhale.vpr@61.9); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p2(r). (qp_exhale.vpr@69.9)); List([postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access p2(r). (qp_exhale.vpr@61.9); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p2(r). (qp_exhale.vpr@69.9)); List([postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access p2(r). (qp_exhale.vpr@61.9); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p2(r). (qp_exhale.vpr@69.9)); List([postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access p2(r). (qp_exhale.vpr@61.9); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p2(r). (qp_exhale.vpr@69.9)))
../../src/test/resources/frontend-generated/quantifiedpredicates/basic/recursive.vpr,0,1689,70,4,1590,1734,1743,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpredicates/basic/triggers.vpr,0,1871,62,3,1785,1902,1928,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpredicates/examples/list.vpr,0,7282,298,4,6952,7220,7676,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpredicates/examples/list_false.vpr,1,4368,219,5,4118,4333,4653,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (list_false.vpr@65.9)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (list_false.vpr@65.9)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (list_false.vpr@65.9)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (list_false.vpr@65.9)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (list_false.vpr@65.9)))
../../src/test/resources/frontend-generated/quantifiedpredicates/issues/array_exhale.vpr,5,1880,62,3,1827,1845,1968,Vector(List([postcondition.violated:insufficient.permission] Postcondition of m1 might not hold. There might be insufficient permission to access p(a; i + 1). (array_exhale.vpr@37.12); [postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (array_exhale.vpr@51.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (array_exhale.vpr@59.12); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p(a; i). (array_exhale.vpr@67.12); [postcondition.violated:insufficient.permission] Postcondition of m6 might not hold. There might be insufficient permission to access loc(a; i).val. (array_exhale.vpr@75.12)); List([postcondition.violated:insufficient.permission] Postcondition of m1 might not hold. There might be insufficient permission to access p(a; i + 1). (array_exhale.vpr@37.12); [postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (array_exhale.vpr@51.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (array_exhale.vpr@59.12); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p(a; i). (array_exhale.vpr@67.12); [postcondition.violated:insufficient.permission] Postcondition of m6 might not hold. There might be insufficient permission to access loc(a; i).val. (array_exhale.vpr@75.12)); List([postcondition.violated:insufficient.permission] Postcondition of m1 might not hold. There might be insufficient permission to access p(a; i + 1). (array_exhale.vpr@37.12); [postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (array_exhale.vpr@51.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (array_exhale.vpr@59.12); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p(a; i). (array_exhale.vpr@67.12); [postcondition.violated:insufficient.permission] Postcondition of m6 might not hold. There might be insufficient permission to access loc(a; i).val. (array_exhale.vpr@75.12)); List([postcondition.violated:insufficient.permission] Postcondition of m1 might not hold. There might be insufficient permission to access p(a; i + 1). (array_exhale.vpr@37.12); [postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (array_exhale.vpr@51.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (array_exhale.vpr@59.12); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p(a; i). (array_exhale.vpr@67.12); [postcondition.violated:insufficient.permission] Postcondition of m6 might not hold. There might be insufficient permission to access loc(a; i).val. (array_exhale.vpr@75.12)); List([postcondition.violated:insufficient.permission] Postcondition of m1 might not hold. There might be insufficient permission to access p(a; i + 1). (array_exhale.vpr@37.12); [postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (array_exhale.vpr@51.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (array_exhale.vpr@59.12); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p(a; i). (array_exhale.vpr@67.12); [postcondition.violated:insufficient.permission] Postcondition of m6 might not hold. There might be insufficient permission to access loc(a; i).val. (array_exhale.vpr@75.12)))
../../src/test/resources/frontend-generated/quantifiedpredicates/issues/array_exhale2.vpr,5,1937,14,0,1917,1945,1951,Vector(List([postcondition.violated:insufficient.permission] Postcondition of m1 might not hold. There might be insufficient permission to access p(a; i + 1). (array_exhale2.vpr@37.12); [postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (array_exhale2.vpr@51.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (array_exhale2.vpr@59.12); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p(a; i). (array_exhale2.vpr@67.12); [postcondition.violated:insufficient.permission] Postcondition of m6 might not hold. There might be insufficient permission to access loc(a; i).val. (array_exhale2.vpr@75.12)); List([postcondition.violated:insufficient.permission] Postcondition of m1 might not hold. There might be insufficient permission to access p(a; i + 1). (array_exhale2.vpr@37.12); [postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (array_exhale2.vpr@51.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (array_exhale2.vpr@59.12); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p(a; i). (array_exhale2.vpr@67.12); [postcondition.violated:insufficient.permission] Postcondition of m6 might not hold. There might be insufficient permission to access loc(a; i).val. (array_exhale2.vpr@75.12)); List([postcondition.violated:insufficient.permission] Postcondition of m1 might not hold. There might be insufficient permission to access p(a; i + 1). (array_exhale2.vpr@37.12); [postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (array_exhale2.vpr@51.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (array_exhale2.vpr@59.12); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p(a; i). (array_exhale2.vpr@67.12); [postcondition.violated:insufficient.permission] Postcondition of m6 might not hold. There might be insufficient permission to access loc(a; i).val. (array_exhale2.vpr@75.12)); List([postcondition.violated:insufficient.permission] Postcondition of m1 might not hold. There might be insufficient permission to access p(a; i + 1). (array_exhale2.vpr@37.12); [postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (array_exhale2.vpr@51.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (array_exhale2.vpr@59.12); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p(a; i). (array_exhale2.vpr@67.12); [postcondition.violated:insufficient.permission] Postcondition of m6 might not hold. There might be insufficient permission to access loc(a; i).val. (array_exhale2.vpr@75.12)); List([postcondition.violated:insufficient.permission] Postcondition of m1 might not hold. There might be insufficient permission to access p(a; i + 1). (array_exhale2.vpr@37.12); [postcondition.violated:insufficient.permission] Postcondition of m3 might not hold. There might be insufficient permission to access p(a; 1). (array_exhale2.vpr@51.12); [postcondition.violated:insufficient.permission] Postcondition of m4 might not hold. There might be insufficient permission to access loc(a; 1).val. (array_exhale2.vpr@59.12); [postcondition.violated:insufficient.permission] Postcondition of m5 might not hold. There might be insufficient permission to access p(a; i). (array_exhale2.vpr@67.12); [postcondition.violated:insufficient.permission] Postcondition of m6 might not hold. There might be insufficient permission to access loc(a; i).val. (array_exhale2.vpr@75.12)))
../../src/test/resources/frontend-generated/quantifiedpredicates/issues/trigger_check.vpr,0,1755,106,6,1652,1712,1902,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpredicates/issues/unfolding.vpr,1,1543,43,2,1482,1572,1577,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p2(r). (unfolding.vpr@26.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p2(r). (unfolding.vpr@26.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p2(r). (unfolding.vpr@26.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p2(r). (unfolding.vpr@26.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p2(r). (unfolding.vpr@26.5)))
../../src/test/resources/frontend-generated/quantifiedpredicates/issues/wildcards.vpr,0,1413,23,1,1381,1423,1435,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/quantifiedpredicates/predicates/arguments.vpr,2,2052,33,1,2022,2035,2099,Vector(List([fold.failed:insufficient.permission] Folding valid(x2; false) might fail. There might be insufficient permission to access this.g. (arguments.vpr@99.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.g. (arguments.vpr@141.5)); List([fold.failed:insufficient.permission] Folding valid(x2; false) might fail. There might be insufficient permission to access this.g. (arguments.vpr@99.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.g. (arguments.vpr@141.5)); List([fold.failed:insufficient.permission] Folding valid(x2; false) might fail. There might be insufficient permission to access this.g. (arguments.vpr@99.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.g. (arguments.vpr@141.5)); List([fold.failed:insufficient.permission] Folding valid(x2; false) might fail. There might be insufficient permission to access this.g. (arguments.vpr@99.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.g. (arguments.vpr@141.5)); List([fold.failed:insufficient.permission] Folding valid(x2; false) might fail. There might be insufficient permission to access this.g. (arguments.vpr@99.5); [assignment.failed:insufficient.permission] Assignment might fail. There might be insufficient permission to access this.g. (arguments.vpr@141.5)))
../../src/test/resources/frontend-generated/termination/errorMessages/cycleDecreases.vpr,3,20,4,20,15,21,26,Vector(List(Consistency error: Function fun1 recurses via its precondition: the cycle contains the function(s) fun1; fun2 (cycleDecreases.vpr@8.1); Consistency error: Function g1 recurses via its precondition: the cycle contains the function(s) g1; g2 (cycleDecreases.vpr@24.1); Consistency error: Function g2 recurses via its precondition: the cycle contains the function(s) g2; g1 (cycleDecreases.vpr@29.1)); List(Consistency error: Function fun1 recurses via its precondition: the cycle contains the function(s) fun1; fun2 (cycleDecreases.vpr@8.1); Consistency error: Function g1 recurses via its precondition: the cycle contains the function(s) g1; g2 (cycleDecreases.vpr@24.1); Consistency error: Function g2 recurses via its precondition: the cycle contains the function(s) g2; g1 (cycleDecreases.vpr@29.1)); List(Consistency error: Function fun1 recurses via its precondition: the cycle contains the function(s) fun1; fun2 (cycleDecreases.vpr@8.1); Consistency error: Function g1 recurses via its precondition: the cycle contains the function(s) g1; g2 (cycleDecreases.vpr@24.1); Consistency error: Function g2 recurses via its precondition: the cycle contains the function(s) g2; g1 (cycleDecreases.vpr@29.1)); List(Consistency error: Function fun1 recurses via its precondition: the cycle contains the function(s) fun1; fun2 (cycleDecreases.vpr@8.1); Consistency error: Function g1 recurses via its precondition: the cycle contains the function(s) g1; g2 (cycleDecreases.vpr@24.1); Consistency error: Function g2 recurses via its precondition: the cycle contains the function(s) g2; g1 (cycleDecreases.vpr@29.1)); List(Consistency error: Function fun1 recurses via its precondition: the cycle contains the function(s) fun1; fun2 (cycleDecreases.vpr@8.1); Consistency error: Function g1 recurses via its precondition: the cycle contains the function(s) g1; g2 (cycleDecreases.vpr@24.1); Consistency error: Function g2 recurses via its precondition: the cycle contains the function(s) g2; g1 (cycleDecreases.vpr@29.1)))
../../src/test/resources/frontend-generated/termination/errorMessages/illegalDecreases.vpr,2,52,15,28,41,42,74,Vector(List(Consistency error: Inhale Exhale expressions are not allowed as termination measure. (illegalDecreases.vpr@15.23); Consistency error: Inhale Exhale expressions are not allowed as termination measure. (illegalDecreases.vpr@15.38)); List(Consistency error: Inhale Exhale expressions are not allowed as termination measure. (illegalDecreases.vpr@15.23); Consistency error: Inhale Exhale expressions are not allowed as termination measure. (illegalDecreases.vpr@15.38)); List(Consistency error: Inhale Exhale expressions are not allowed as termination measure. (illegalDecreases.vpr@15.23); Consistency error: Inhale Exhale expressions are not allowed as termination measure. (illegalDecreases.vpr@15.38)); List(Consistency error: Inhale Exhale expressions are not allowed as termination measure. (illegalDecreases.vpr@15.23); Consistency error: Inhale Exhale expressions are not allowed as termination measure. (illegalDecreases.vpr@15.38)); List(Consistency error: Inhale Exhale expressions are not allowed as termination measure. (illegalDecreases.vpr@15.23); Consistency error: Inhale Exhale expressions are not allowed as termination measure. (illegalDecreases.vpr@15.38)))
../../src/test/resources/frontend-generated/termination/errorMessages/multipleDecreases.vpr,3,15,0,0,15,16,16,Vector(List(Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@8.11); Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@17.15); Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@23.18)); List(Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@8.11); Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@17.15); Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@23.18)); List(Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@8.11); Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@17.15); Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@23.18)); List(Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@8.11); Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@17.15); Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@23.18)); List(Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@8.11); Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@17.15); Consistency error: Multiple decreases tuple. (multipleDecreases.vpr@23.18)))
../../src/test/resources/frontend-generated/termination/errorMessages/notDefined.vpr,6,10,0,0,9,10,11,Vector(List(Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@8.15); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@8.15); Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@21.19); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@21.19); Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@16.15); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@16.15)); List(Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@8.15); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@8.15); Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@21.19); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@21.19); Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@16.15); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@16.15)); List(Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@8.15); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@8.15); Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@21.19); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@21.19); Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@16.15); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@16.15)); List(Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@8.15); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@8.15); Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@21.19); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@21.19); Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@16.15); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@16.15)); List(Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@8.15); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@8.15); Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@21.19); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@21.19); Consistency error: Function "decreasing" is required but not declared. (notDefined.vpr@16.15); Consistency error: Function "bounded" is required but not defined. (notDefined.vpr@16.15)))
../../src/test/resources/frontend-generated/termination/errorMessages/typeCheckErrorDecreases.vpr,2,5,0,0,5,6,6,Vector(List(expected function or predicate  (typeCheckErrorDecreases.vpr@8.11); expected function or predicate  (typeCheckErrorDecreases.vpr@25.27)); List(expected function or predicate  (typeCheckErrorDecreases.vpr@8.11); expected function or predicate  (typeCheckErrorDecreases.vpr@25.27)); List(expected function or predicate  (typeCheckErrorDecreases.vpr@8.11); expected function or predicate  (typeCheckErrorDecreases.vpr@25.27)); List(expected function or predicate  (typeCheckErrorDecreases.vpr@8.11); expected function or predicate  (typeCheckErrorDecreases.vpr@25.27)); List(expected function or predicate  (typeCheckErrorDecreases.vpr@8.11); expected function or predicate  (typeCheckErrorDecreases.vpr@25.27)))
../../src/test/resources/frontend-generated/termination/functions/basic/adt.vpr,0,1705,34,1,1676,1687,1754,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/termination/functions/basic/allTypes.vpr,11,3015,45,1,2952,3039,3055,Vector(List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@19.18); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@33.21); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@50.10); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@63.16); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@79.18); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@89.22); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@103.31); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@117.35); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@157.47); [assert.failed:assertion.false] Assert might fail. Assertion (decreasing(Multiset(1; 1); Multiset(1; 1)): Bool) might not hold. (allTypes.vpr@128.5); [assert.failed:assertion.false] Assert might fail. Assertion (decreasing(Multiset(2); Multiset(1)): Bool) might not hold. (allTypes.vpr@135.5)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@19.18); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@33.21); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@50.10); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@63.16); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@79.18); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@89.22); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@103.31); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@117.35); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@157.47); [assert.failed:assertion.false] Assert might fail. Assertion (decreasing(Multiset(1; 1); Multiset(1; 1)): Bool) might not hold. (allTypes.vpr@128.5); [assert.failed:assertion.false] Assert might fail. Assertion (decreasing(Multiset(2); Multiset(1)): Bool) might not hold. (allTypes.vpr@135.5)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@19.18); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@33.21); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@50.10); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@63.16); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@79.18); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@89.22); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@103.31); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@117.35); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@157.47); [assert.failed:assertion.false] Assert might fail. Assertion (decreasing(Multiset(1; 1); Multiset(1; 1)): Bool) might not hold. (allTypes.vpr@128.5); [assert.failed:assertion.false] Assert might fail. Assertion (decreasing(Multiset(2); Multiset(1)): Bool) might not hold. (allTypes.vpr@135.5)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@19.18); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@33.21); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@50.10); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@63.16); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@79.18); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@89.22); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@103.31); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@117.35); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@157.47); [assert.failed:assertion.false] Assert might fail. Assertion (decreasing(Multiset(1; 1); Multiset(1; 1)): Bool) might not hold. (allTypes.vpr@128.5); [assert.failed:assertion.false] Assert might fail. Assertion (decreasing(Multiset(2); Multiset(1)): Bool) might not hold. (allTypes.vpr@135.5)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@19.18); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@33.21); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@50.10); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@63.16); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@79.18); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@89.22); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@103.31); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@117.35); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (allTypes.vpr@157.47); [assert.failed:assertion.false] Assert might fail. Assertion (decreasing(Multiset(1; 1); Multiset(1; 1)): Bool) might not hold. (allTypes.vpr@128.5); [assert.failed:assertion.false] Assert might fail. Assertion (decreasing(Multiset(2); Multiset(1)): Bool) might not hold. (allTypes.vpr@135.5)))
../../src/test/resources/frontend-generated/termination/functions/basic/conditions.vpr,0,1364,38,2,1309,1389,1394,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/termination/functions/basic/decCondition.vpr,2,1394,14,1,1375,1397,1410,Vector(List([termination.failed:tuple.condition.false] Function might not terminate. Required tuple condition might not hold. (decCondition.vpr@34.31); [termination.failed:termination.condition.false] Function might not terminate. Required termination condition might not hold. (decCondition.vpr@43.46)); List([termination.failed:tuple.condition.false] Function might not terminate. Required tuple condition might not hold. (decCondition.vpr@34.31); [termination.failed:termination.condition.false] Function might not terminate. Required termination condition might not hold. (decCondition.vpr@43.46)); List([termination.failed:tuple.condition.false] Function might not terminate. Required tuple condition might not hold. (decCondition.vpr@34.31); [termination.failed:termination.condition.false] Function might not terminate. Required termination condition might not hold. (decCondition.vpr@43.46)); List([termination.failed:tuple.condition.false] Function might not terminate. Required tuple condition might not hold. (decCondition.vpr@34.31); [termination.failed:termination.condition.false] Function might not terminate. Required termination condition might not hold. (decCondition.vpr@43.46)); List([termination.failed:tuple.condition.false] Function might not terminate. Required tuple condition might not hold. (decCondition.vpr@34.31); [termination.failed:termination.condition.false] Function might not terminate. Required termination condition might not hold. (decCondition.vpr@43.46)))
../../src/test/resources/frontend-generated/termination/functions/basic/nestedFunctionCalls.sil,2,1298,5,0,1293,1295,1306,Vector(List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (nestedFunctionCalls.sil@16.11); [postcondition.violated:assertion.false] Postcondition of h might not hold. Assertion result == 1 might not hold. (nestedFunctionCalls.sil@30.9)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (nestedFunctionCalls.sil@16.11); [postcondition.violated:assertion.false] Postcondition of h might not hold. Assertion result == 1 might not hold. (nestedFunctionCalls.sil@30.9)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (nestedFunctionCalls.sil@16.11); [postcondition.violated:assertion.false] Postcondition of h might not hold. Assertion result == 1 might not hold. (nestedFunctionCalls.sil@30.9)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (nestedFunctionCalls.sil@16.11); [postcondition.violated:assertion.false] Postcondition of h might not hold. Assertion result == 1 might not hold. (nestedFunctionCalls.sil@30.9)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (nestedFunctionCalls.sil@16.11); [postcondition.violated:assertion.false] Postcondition of h might not hold. Assertion result == 1 might not hold. (nestedFunctionCalls.sil@30.9)))
../../src/test/resources/frontend-generated/termination/functions/basic/postsCheck.vpr,2,1329,31,2,1303,1312,1374,Vector(List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (postsCheck.vpr@20.23); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (postsCheck.vpr@30.23)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (postsCheck.vpr@20.23); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (postsCheck.vpr@30.23)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (postsCheck.vpr@20.23); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (postsCheck.vpr@30.23)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (postsCheck.vpr@20.23); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (postsCheck.vpr@30.23)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (postsCheck.vpr@20.23); [termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (postsCheck.vpr@30.23)))
../../src/test/resources/frontend-generated/termination/functions/basic/presCheck.vpr,1,1300,24,1,1270,1299,1331,Vector(List([termination.failed:termination.condition.false] Function might not terminate. Required termination condition might not hold. (presCheck.vpr@33.14)); List([termination.failed:termination.condition.false] Function might not terminate. Required termination condition might not hold. (presCheck.vpr@33.14)); List([termination.failed:termination.condition.false] Function might not terminate. Required termination condition might not hold. (presCheck.vpr@33.14)); List([termination.failed:termination.condition.false] Function might not terminate. Required termination condition might not hold. (presCheck.vpr@33.14)); List([termination.failed:termination.condition.false] Function might not terminate. Required termination condition might not hold. (presCheck.vpr@33.14)))
../../src/test/resources/frontend-generated/termination/functions/basic/simpleTests.vpr,0,1338,24,1,1305,1351,1360,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/termination/functions/existingExamples/AckermanFnc.sil,0,1261,15,1,1250,1251,1284,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/termination/functions/existingExamples/AckermanFncWithOwnTuples.sil,0,1404,5,0,1397,1405,1410,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/termination/functions/existingExamples/BinarySearch.sil,0,1461,23,1,1434,1458,1491,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/termination/functions/existingExamples/Factorial.sil,0,1264,16,1,1248,1259,1287,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/termination/functions/existingExamples/Fibonacci.sil,0,1269,30,2,1235,1265,1309,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/termination/functions/existingExamples/LinkedLists.sil,0,1911,20,1,1887,1910,1937,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/termination/functions/existingExamples/McCarthys91Fnc.sil,0,1238,16,1,1215,1248,1252,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/termination/functions/expressions/inhaleexhale.vpr,0,1229,12,0,1214,1230,1244,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/termination/functions/expressions/letexpr.vpr,1,1268,34,2,1220,1288,1298,Vector(List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (letexpr.vpr@16.15)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (letexpr.vpr@16.15)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (letexpr.vpr@16.15)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (letexpr.vpr@16.15)); List([termination.failed:tuple.false] Function might not terminate. Termination measure might not decrease or might not be bounded. (letexpr.vpr@16.15)))
../../src/test/resources/frontend-generated/termination/functions/expressions/unfolding.vpr,0,1141,30,2,1103,1143,1178,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/termination/methods/basic/decCondition.vpr,2,1258,12,0,1246,1254,1276,Vector(List([termination.failed:tuple.condition.false] Method might not terminate. Required tuple condition might not hold. (decCondition.vpr@34.7); [termination.failed:termination.condition.false] Method might not terminate. Required termination condition might not hold. (decCondition.vpr@46.5)); List([termination.failed:tuple.condition.false] Method might not terminate. Required tuple condition might not hold. (decCondition.vpr@34.7); [termination.failed:termination.condition.false] Method might not terminate. Required termination condition might not hold. (decCondition.vpr@46.5)); List([termination.failed:tuple.condition.false] Method might not terminate. Required tuple condition might not hold. (decCondition.vpr@34.7); [termination.failed:termination.condition.false] Method might not terminate. Required termination condition might not hold. (decCondition.vpr@46.5)); List([termination.failed:tuple.condition.false] Method might not terminate. Required tuple condition might not hold. (decCondition.vpr@34.7); [termination.failed:termination.condition.false] Method might not terminate. Required termination condition might not hold. (decCondition.vpr@46.5)); List([termination.failed:tuple.condition.false] Method might not terminate. Required tuple condition might not hold. (decCondition.vpr@34.7); [termination.failed:termination.condition.false] Method might not terminate. Required termination condition might not hold. (decCondition.vpr@46.5)))
../../src/test/resources/frontend-generated/termination/methods/basic/simpleTests.vpr,0,1216,40,3,1168,1214,1266,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/termination/methods/basic/someTypes.vpr,1,1397,28,2,1358,1415,1420,Vector(List([termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (someTypes.vpr@35.5)); List([termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (someTypes.vpr@35.5)); List([termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (someTypes.vpr@35.5)); List([termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (someTypes.vpr@35.5)); List([termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (someTypes.vpr@35.5)))
../../src/test/resources/frontend-generated/termination/methods/loops/loopCondition.vpr,1,1299,32,2,1262,1293,1342,Vector(List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (loopCondition.vpr@40.15)); List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (loopCondition.vpr@40.15)); List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (loopCondition.vpr@40.15)); List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (loopCondition.vpr@40.15)); List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (loopCondition.vpr@40.15)))
../../src/test/resources/frontend-generated/termination/methods/loops/predicates.vpr,1,1473,19,1,1447,1483,1491,Vector(List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (predicates.vpr@26.23)); List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (predicates.vpr@26.23)); List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (predicates.vpr@26.23)); List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (predicates.vpr@26.23)); List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (predicates.vpr@26.23)))
../../src/test/resources/frontend-generated/termination/methods/loops/whileLoop.vpr,6,1375,12,0,1359,1380,1388,Vector(List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@24.19); [termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@40.9); [termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@75.9); [termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@115.23); [termination.failed:termination.condition.false] Method might not terminate. Required termination condition might not hold. (whileLoop.vpr@148.5); [termination.failed:tuple.condition.false] Loop might not terminate. Required tuple condition might not hold. (whileLoop.vpr@165.19)); List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@24.19); [termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@40.9); [termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@75.9); [termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@115.23); [termination.failed:termination.condition.false] Method might not terminate. Required termination condition might not hold. (whileLoop.vpr@148.5); [termination.failed:tuple.condition.false] Loop might not terminate. Required tuple condition might not hold. (whileLoop.vpr@165.19)); List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@24.19); [termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@40.9); [termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@75.9); [termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@115.23); [termination.failed:termination.condition.false] Method might not terminate. Required termination condition might not hold. (whileLoop.vpr@148.5); [termination.failed:tuple.condition.false] Loop might not terminate. Required tuple condition might not hold. (whileLoop.vpr@165.19)); List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@24.19); [termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@40.9); [termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@75.9); [termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@115.23); [termination.failed:termination.condition.false] Method might not terminate. Required termination condition might not hold. (whileLoop.vpr@148.5); [termination.failed:tuple.condition.false] Loop might not terminate. Required tuple condition might not hold. (whileLoop.vpr@165.19)); List([termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@24.19); [termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@40.9); [termination.failed:tuple.false] Method might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@75.9); [termination.failed:tuple.false] Loop might not terminate. Termination measure might not decrease or might not be bounded. (whileLoop.vpr@115.23); [termination.failed:termination.condition.false] Method might not terminate. Required termination condition might not hold. (whileLoop.vpr@148.5); [termination.failed:tuple.condition.false] Loop might not terminate. Required tuple condition might not hold. (whileLoop.vpr@165.19)))
../../src/test/resources/frontend-generated/wands/examples/list_insert_tmp.vpr,1,1711,12,0,1702,1704,1729,Vector(List([apply.failed:assertion.false] Applying wand might fail. Assertion elems(prev) == Seq(x) ++ oElems might not hold. (list_insert_tmp.vpr@91.9)); List([apply.failed:assertion.false] Applying wand might fail. Assertion elems(prev) == Seq(x) ++ oElems might not hold. (list_insert_tmp.vpr@91.9)); List([apply.failed:assertion.false] Applying wand might fail. Assertion elems(prev) == Seq(x) ++ oElems might not hold. (list_insert_tmp.vpr@91.9)); List([apply.failed:assertion.false] Applying wand might fail. Assertion elems(prev) == Seq(x) ++ oElems might not hold. (list_insert_tmp.vpr@91.9)); List([apply.failed:assertion.false] Applying wand might fail. Assertion elems(prev) == Seq(x) ++ oElems might not hold. (list_insert_tmp.vpr@91.9)))
../../src/test/resources/frontend-generated/wands/examples/list_sum_verbose.vpr,0,1468,19,1,1451,1457,1496,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/examples/tree_delete_min_no_assert.vpr,0,7509,299,3,7087,7690,7751,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/examples_new_syntax/ListIterator.vpr,0,2901,58,1,2819,2934,2952,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/examples_paper/conditionals.vpr,0,1220,21,1,1199,1212,1249,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/examples_paper/list_insert.vpr,0,24452,18,0,24430,24451,24476,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/examples_paper/list_insert_noseq.vpr,0,1414,19,1,1386,1428,1428,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/examples_paper/list_insert_noseq_heuristics.vpr,0,1714,7,0,1705,1716,1722,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/examples_paper/list_sum.vpr,0,1382,17,1,1362,1380,1405,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/examples_paper/list_sum_heuristics.vpr,0,1472,24,1,1440,1481,1497,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/examples_paper/tree_delete_min.vpr,0,1811,39,2,1757,1825,1852,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/examples_paper/tree_delete_min_heuristics.vpr,0,2550,25,0,2528,2537,2587,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/examples_paper/un_currying.vpr,0,1209,46,3,1150,1214,1264,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/examples_paper/un_currying_heuristics.vpr,0,1179,43,3,1134,1166,1239,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/new_syntax/ApplyingBranching.vpr,0,1247,19,1,1231,1237,1275,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/new_syntax/ApplyingExpression.vpr,1,1208,15,1,1193,1201,1230,Vector(List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (ApplyingExpression.vpr@28.9)); List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (ApplyingExpression.vpr@28.9)); List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (ApplyingExpression.vpr@28.9)); List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (ApplyingExpression.vpr@28.9)); List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (ApplyingExpression.vpr@28.9)))
../../src/test/resources/frontend-generated/wands/new_syntax/Assert.vpr,2,1161,9,0,1153,1157,1175,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (Assert.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (Assert.vpr@22.9)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (Assert.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (Assert.vpr@22.9)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (Assert.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (Assert.vpr@22.9)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (Assert.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (Assert.vpr@22.9)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (Assert.vpr@14.5); [assert.failed:assertion.false] Assert might fail. Assertion x.f == 0 might not hold. (Assert.vpr@22.9)))
../../src/test/resources/frontend-generated/wands/new_syntax/AssertTransfer.vpr,3,1181,17,1,1159,1182,1202,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (AssertTransfer.vpr@12.9); [if.failed:insufficient.permission] Conditional statement might fail. There might be insufficient permission to access x.g. (AssertTransfer.vpr@40.17); [if.failed:insufficient.permission] Conditional statement might fail. There might be insufficient permission to access x.g. (AssertTransfer.vpr@55.17)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (AssertTransfer.vpr@12.9); [if.failed:insufficient.permission] Conditional statement might fail. There might be insufficient permission to access x.g. (AssertTransfer.vpr@40.17); [if.failed:insufficient.permission] Conditional statement might fail. There might be insufficient permission to access x.g. (AssertTransfer.vpr@55.17)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (AssertTransfer.vpr@12.9); [if.failed:insufficient.permission] Conditional statement might fail. There might be insufficient permission to access x.g. (AssertTransfer.vpr@40.17); [if.failed:insufficient.permission] Conditional statement might fail. There might be insufficient permission to access x.g. (AssertTransfer.vpr@55.17)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (AssertTransfer.vpr@12.9); [if.failed:insufficient.permission] Conditional statement might fail. There might be insufficient permission to access x.g. (AssertTransfer.vpr@40.17); [if.failed:insufficient.permission] Conditional statement might fail. There might be insufficient permission to access x.g. (AssertTransfer.vpr@55.17)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (AssertTransfer.vpr@12.9); [if.failed:insufficient.permission] Conditional statement might fail. There might be insufficient permission to access x.g. (AssertTransfer.vpr@40.17); [if.failed:insufficient.permission] Conditional statement might fail. There might be insufficient permission to access x.g. (AssertTransfer.vpr@55.17)))
../../src/test/resources/frontend-generated/wands/new_syntax/AssertUnfolding.vpr,1,1193,40,3,1136,1215,1229,Vector(List([application.precondition:insufficient.permission] Precondition of function func might not hold. There might be insufficient permission to access P(x). (AssertUnfolding.vpr@20.44)); List([application.precondition:insufficient.permission] Precondition of function func might not hold. There might be insufficient permission to access P(x). (AssertUnfolding.vpr@20.44)); List([application.precondition:insufficient.permission] Precondition of function func might not hold. There might be insufficient permission to access P(x). (AssertUnfolding.vpr@20.44)); List([application.precondition:insufficient.permission] Precondition of function func might not hold. There might be insufficient permission to access P(x). (AssertUnfolding.vpr@20.44)); List([application.precondition:insufficient.permission] Precondition of function func might not hold. There might be insufficient permission to access P(x). (AssertUnfolding.vpr@20.44)))
../../src/test/resources/frontend-generated/wands/new_syntax/Assume.vpr,0,1174,44,3,1112,1199,1213,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/new_syntax/FunctionCall.vpr,1,1172,10,0,1157,1178,1182,Vector(List([postcondition.violated:insufficient.permission] Postcondition of test1 might not hold. There might be insufficient permission to access Cell(x). (FunctionCall.vpr@29.9)); List([postcondition.violated:insufficient.permission] Postcondition of test1 might not hold. There might be insufficient permission to access Cell(x). (FunctionCall.vpr@29.9)); List([postcondition.violated:insufficient.permission] Postcondition of test1 might not hold. There might be insufficient permission to access Cell(x). (FunctionCall.vpr@29.9)); List([postcondition.violated:insufficient.permission] Postcondition of test1 might not hold. There might be insufficient permission to access Cell(x). (FunctionCall.vpr@29.9)); List([postcondition.violated:insufficient.permission] Postcondition of test1 might not hold. There might be insufficient permission to access Cell(x). (FunctionCall.vpr@29.9)))
../../src/test/resources/frontend-generated/wands/new_syntax/IfElseDifferentFootprint.vpr,1,1173,19,1,1150,1173,1197,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (IfElseDifferentFootprint.vpr@23.9)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (IfElseDifferentFootprint.vpr@23.9)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (IfElseDifferentFootprint.vpr@23.9)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (IfElseDifferentFootprint.vpr@23.9)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (IfElseDifferentFootprint.vpr@23.9)))
../../src/test/resources/frontend-generated/wands/new_syntax/IfElsePackage.vpr,0,1213,43,3,1153,1231,1256,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/new_syntax/InhaleExhale.vpr,2,1127,18,1,1102,1136,1144,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (InhaleExhale.vpr@16.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(x). (InhaleExhale.vpr@27.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (InhaleExhale.vpr@16.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(x). (InhaleExhale.vpr@27.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (InhaleExhale.vpr@16.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(x). (InhaleExhale.vpr@27.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (InhaleExhale.vpr@16.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(x). (InhaleExhale.vpr@27.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (InhaleExhale.vpr@16.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(x). (InhaleExhale.vpr@27.5)))
../../src/test/resources/frontend-generated/wands/new_syntax/LhsOldConsistency.vpr,1,0,0,0,0,1,1,Vector(List(Parse error: Expected found "lhs\n}\n"; expected invalid identifier (could be a keyword) at index 174     label lhs           ^ (LhsOldConsistency.vpr@6.11)); List(Parse error: Expected found "lhs\n}\n"; expected invalid identifier (could be a keyword) at index 174     label lhs           ^ (LhsOldConsistency.vpr@6.11)); List(Parse error: Expected found "lhs\n}\n"; expected invalid identifier (could be a keyword) at index 174     label lhs           ^ (LhsOldConsistency.vpr@6.11)); List(Parse error: Expected found "lhs\n}\n"; expected invalid identifier (could be a keyword) at index 174     label lhs           ^ (LhsOldConsistency.vpr@6.11)); List(Parse error: Expected found "lhs\n}\n"; expected invalid identifier (could be a keyword) at index 174     label lhs           ^ (LhsOldConsistency.vpr@6.11)))
../../src/test/resources/frontend-generated/wands/new_syntax/LocalVarScoping.vpr,3,7,0,0,7,7,8,Vector(List(Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@9.9); Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@28.13); Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@38.13)); List(Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@9.9); Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@28.13); Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@38.13)); List(Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@9.9); Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@28.13); Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@38.13)); List(Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@9.9); Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@28.13); Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@38.13)); List(Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@9.9); Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@28.13); Consistency error: Can only assign to local variables that were declared inside the proof script. (LocalVarScoping.vpr@38.13)))
../../src/test/resources/frontend-generated/wands/new_syntax/MethodCall.vpr,1,1178,28,2,1139,1187,1208,Vector(List([postcondition.violated:insufficient.permission] Postcondition of test1 might not hold. There might be insufficient permission to access Cell(x). (MethodCall.vpr@29.9)); List([postcondition.violated:insufficient.permission] Postcondition of test1 might not hold. There might be insufficient permission to access Cell(x). (MethodCall.vpr@29.9)); List([postcondition.violated:insufficient.permission] Postcondition of test1 might not hold. There might be insufficient permission to access Cell(x). (MethodCall.vpr@29.9)); List([postcondition.violated:insufficient.permission] Postcondition of test1 might not hold. There might be insufficient permission to access Cell(x). (MethodCall.vpr@29.9)); List([postcondition.violated:insufficient.permission] Postcondition of test1 might not hold. There might be insufficient permission to access Cell(x). (MethodCall.vpr@29.9)))
../../src/test/resources/frontend-generated/wands/new_syntax/Old.vpr,3,1278,12,0,1266,1275,1295,Vector(List([assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state first required to evaluate old[first](x.f). (Old.vpr@35.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (Old.vpr@50.9); [postcondition.violated:assertion.false] Postcondition of test4 might not hold. Assertion x.f == 0 might not hold. (Old.vpr@65.9)); List([assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state first required to evaluate old[first](x.f). (Old.vpr@35.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (Old.vpr@50.9); [postcondition.violated:assertion.false] Postcondition of test4 might not hold. Assertion x.f == 0 might not hold. (Old.vpr@65.9)); List([assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state first required to evaluate old[first](x.f). (Old.vpr@35.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (Old.vpr@50.9); [postcondition.violated:assertion.false] Postcondition of test4 might not hold. Assertion x.f == 0 might not hold. (Old.vpr@65.9)); List([assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state first required to evaluate old[first](x.f). (Old.vpr@35.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (Old.vpr@50.9); [postcondition.violated:assertion.false] Postcondition of test4 might not hold. Assertion x.f == 0 might not hold. (Old.vpr@65.9)); List([assert.failed:labelled.state.not.reached] Assert might fail. Did not reach labelled state first required to evaluate old[first](x.f). (Old.vpr@35.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (Old.vpr@50.9); [postcondition.violated:assertion.false] Postcondition of test4 might not hold. Assertion x.f == 0 might not hold. (Old.vpr@65.9)))
../../src/test/resources/frontend-generated/wands/new_syntax/OldLhsConsistency.vpr,4,10,0,0,10,10,10,Vector(List(Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@11.22); Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@17.15); Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@22.13); Consistency error: Wands may use the old[lhs]-expression on the rhs and in their proof script only. (OldLhsConsistency.vpr@26.25)); List(Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@11.22); Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@17.15); Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@22.13); Consistency error: Wands may use the old[lhs]-expression on the rhs and in their proof script only. (OldLhsConsistency.vpr@26.25)); List(Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@11.22); Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@17.15); Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@22.13); Consistency error: Wands may use the old[lhs]-expression on the rhs and in their proof script only. (OldLhsConsistency.vpr@26.25)); List(Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@11.22); Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@17.15); Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@22.13); Consistency error: Wands may use the old[lhs]-expression on the rhs and in their proof script only. (OldLhsConsistency.vpr@26.25)); List(Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@11.22); Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@17.15); Consistency error: Labelled old expressions with "lhs" label may only occur inside wands and their proof scripts. (OldLhsConsistency.vpr@22.13); Consistency error: Wands may use the old[lhs]-expression on the rhs and in their proof script only. (OldLhsConsistency.vpr@26.25)))
../../src/test/resources/frontend-generated/wands/new_syntax/Perm.vpr,2,1162,26,2,1125,1177,1185,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion perm(x.a) == perm(x.b) might not hold. (Perm.vpr@12.9); [assert.failed:assertion.false] Assert might fail. Assertion perm(x.a) == perm(x.b) might not hold. (Perm.vpr@22.13)); List([assert.failed:assertion.false] Assert might fail. Assertion perm(x.a) == perm(x.b) might not hold. (Perm.vpr@12.9); [assert.failed:assertion.false] Assert might fail. Assertion perm(x.a) == perm(x.b) might not hold. (Perm.vpr@22.13)); List([assert.failed:assertion.false] Assert might fail. Assertion perm(x.a) == perm(x.b) might not hold. (Perm.vpr@12.9); [assert.failed:assertion.false] Assert might fail. Assertion perm(x.a) == perm(x.b) might not hold. (Perm.vpr@22.13)); List([assert.failed:assertion.false] Assert might fail. Assertion perm(x.a) == perm(x.b) might not hold. (Perm.vpr@12.9); [assert.failed:assertion.false] Assert might fail. Assertion perm(x.a) == perm(x.b) might not hold. (Perm.vpr@22.13)); List([assert.failed:assertion.false] Assert might fail. Assertion perm(x.a) == perm(x.b) might not hold. (Perm.vpr@12.9); [assert.failed:assertion.false] Assert might fail. Assertion perm(x.a) == perm(x.b) might not hold. (Perm.vpr@22.13)))
../../src/test/resources/frontend-generated/wands/new_syntax/ProofScriptStatementsConsistency.vpr,4,10,0,0,10,10,10,Vector(List(Consistency error: Field assignments are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@10.9); Consistency error: Field assignments are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@18.13); Consistency error: While statements are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@27.9); Consistency error: New statements statements are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@37.9)); List(Consistency error: Field assignments are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@10.9); Consistency error: Field assignments are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@18.13); Consistency error: While statements are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@27.9); Consistency error: New statements statements are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@37.9)); List(Consistency error: Field assignments are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@10.9); Consistency error: Field assignments are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@18.13); Consistency error: While statements are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@27.9); Consistency error: New statements statements are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@37.9)); List(Consistency error: Field assignments are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@10.9); Consistency error: Field assignments are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@18.13); Consistency error: While statements are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@27.9); Consistency error: New statements statements are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@37.9)); List(Consistency error: Field assignments are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@10.9); Consistency error: Field assignments are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@18.13); Consistency error: While statements are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@27.9); Consistency error: New statements statements are not allowed in magic wand proof scripts. (ProofScriptStatementsConsistency.vpr@37.9)))
../../src/test/resources/frontend-generated/wands/new_syntax/QPFields.vpr,7,1969,28,1,1938,1964,2007,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@18.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (QPFields.vpr@32.9); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@43.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@55.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@68.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@77.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@89.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@18.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (QPFields.vpr@32.9); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@43.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@55.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@68.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@77.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@89.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@18.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (QPFields.vpr@32.9); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@43.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@55.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@68.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@77.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@89.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@18.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (QPFields.vpr@32.9); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@43.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@55.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@68.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@77.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@89.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@18.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (QPFields.vpr@32.9); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@43.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@55.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@68.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@77.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access y.f. (QPFields.vpr@89.5)))
../../src/test/resources/frontend-generated/wands/new_syntax/QPPredicates.vpr,8,2092,52,2,2034,2082,2161,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@35.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(x). (QPPredicates.vpr@49.9); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@60.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@72.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@85.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@94.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@106.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Pair(y0; y1). (QPPredicates.vpr@166.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@35.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(x). (QPPredicates.vpr@49.9); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@60.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@72.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@85.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@94.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@106.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Pair(y0; y1). (QPPredicates.vpr@166.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@35.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(x). (QPPredicates.vpr@49.9); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@60.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@72.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@85.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@94.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@106.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Pair(y0; y1). (QPPredicates.vpr@166.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@35.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(x). (QPPredicates.vpr@49.9); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@60.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@72.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@85.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@94.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@106.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Pair(y0; y1). (QPPredicates.vpr@166.5)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@35.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(x). (QPPredicates.vpr@49.9); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@60.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@72.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@85.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@94.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Cell(y). (QPPredicates.vpr@106.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access Pair(y0; y1). (QPPredicates.vpr@166.5)))
../../src/test/resources/frontend-generated/wands/new_syntax/QPWands.vpr,7,4118,84,2,3999,4166,4190,Vector(List([invariant.not.preserved:assertion.false] Loop invariant (forall x: Ref :: { (x in completed) } (x in completed) ==> (applying acc(y.f; write) --* acc(x.f; write) && (acc(y.f; write) && y.f == old[lhs](y.f)) in x.f == old[setupComplete](x.f))) might not be preserved. Assertion (forall x: Ref :: { (x in completed) } (x in completed) ==> (applying acc(y.f; write) --* acc(x.f; write) && (acc(y.f; write) && y.f == old[lhs](y.f)) in x.f == old[setupComplete](x.f))) might not hold. (QPWands.vpr@28.15); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@48.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@55.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@70.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@79.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (QPWands.vpr@98.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (QPWands.vpr@111.5)); List([invariant.not.preserved:assertion.false] Loop invariant (forall x: Ref :: { (x in completed) } (x in completed) ==> (applying acc(y.f; write) --* acc(x.f; write) && (acc(y.f; write) && y.f == old[lhs](y.f)) in x.f == old[setupComplete](x.f))) might not be preserved. Assertion (forall x: Ref :: { (x in completed) } (x in completed) ==> (applying acc(y.f; write) --* acc(x.f; write) && (acc(y.f; write) && y.f == old[lhs](y.f)) in x.f == old[setupComplete](x.f))) might not hold. (QPWands.vpr@28.15); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@48.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@55.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@70.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@79.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (QPWands.vpr@98.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (QPWands.vpr@111.5)); List([invariant.not.preserved:assertion.false] Loop invariant (forall x: Ref :: { (x in completed) } (x in completed) ==> (applying acc(y.f; write) --* acc(x.f; write) && (acc(y.f; write) && y.f == old[lhs](y.f)) in x.f == old[setupComplete](x.f))) might not be preserved. Assertion (forall x: Ref :: { (x in completed) } (x in completed) ==> (applying acc(y.f; write) --* acc(x.f; write) && (acc(y.f; write) && y.f == old[lhs](y.f)) in x.f == old[setupComplete](x.f))) might not hold. (QPWands.vpr@28.15); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@48.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@55.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@70.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@79.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (QPWands.vpr@98.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (QPWands.vpr@111.5)); List([invariant.not.preserved:assertion.false] Loop invariant (forall x: Ref :: { (x in completed) } (x in completed) ==> (applying acc(y.f; write) --* acc(x.f; write) && (acc(y.f; write) && y.f == old[lhs](y.f)) in x.f == old[setupComplete](x.f))) might not be preserved. Assertion (forall x: Ref :: { (x in completed) } (x in completed) ==> (applying acc(y.f; write) --* acc(x.f; write) && (acc(y.f; write) && y.f == old[lhs](y.f)) in x.f == old[setupComplete](x.f))) might not hold. (QPWands.vpr@28.15); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@48.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@55.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@70.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@79.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (QPWands.vpr@98.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (QPWands.vpr@111.5)); List([invariant.not.preserved:assertion.false] Loop invariant (forall x: Ref :: { (x in completed) } (x in completed) ==> (applying acc(y.f; write) --* acc(x.f; write) && (acc(y.f; write) && y.f == old[lhs](y.f)) in x.f == old[setupComplete](x.f))) might not be preserved. Assertion (forall x: Ref :: { (x in completed) } (x in completed) ==> (applying acc(y.f; write) --* acc(x.f; write) && (acc(y.f; write) && y.f == old[lhs](y.f)) in x.f == old[setupComplete](x.f))) might not hold. (QPWands.vpr@28.15); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@48.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@55.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@70.5); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (QPWands.vpr@79.5); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (QPWands.vpr@98.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (QPWands.vpr@111.5)))
../../src/test/resources/frontend-generated/wands/new_syntax/SnapshotsBranching.vpr,0,1220,23,1,1196,1213,1253,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/new_syntax/SnapshotsLearning.vpr,0,1198,26,2,1170,1193,1233,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/new_syntax/SnapshotsLocallyPackaged.vpr,2,1333,20,1,1307,1335,1358,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (SnapshotsLocallyPackaged.vpr@82.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (SnapshotsLocallyPackaged.vpr@90.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (SnapshotsLocallyPackaged.vpr@82.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (SnapshotsLocallyPackaged.vpr@90.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (SnapshotsLocallyPackaged.vpr@82.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (SnapshotsLocallyPackaged.vpr@90.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (SnapshotsLocallyPackaged.vpr@82.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (SnapshotsLocallyPackaged.vpr@90.5)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (SnapshotsLocallyPackaged.vpr@82.5); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (SnapshotsLocallyPackaged.vpr@90.5)))
../../src/test/resources/frontend-generated/wands/new_syntax/SnapshotsNestedMagicWands-reduced.vpr,0,1168,44,3,1126,1150,1230,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/new_syntax/SnapshotsNestedMagicWands.vpr,0,1266,6,0,1259,1265,1274,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/new_syntax/SnapshotsWithPredicates.vpr,0,1220,22,1,1200,1210,1251,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/new_syntax/UnfoldPredicateOnField.vpr,0,1161,19,1,1134,1174,1177,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/new_syntax/UnfoldTwice.vpr,1,1183,22,1,1165,1170,1216,Vector(List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access Cell(x.f). (UnfoldTwice.vpr@15.5)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access Cell(x.f). (UnfoldTwice.vpr@15.5)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access Cell(x.f). (UnfoldTwice.vpr@15.5)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access Cell(x.f). (UnfoldTwice.vpr@15.5)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access Cell(x.f). (UnfoldTwice.vpr@15.5)))
../../src/test/resources/frontend-generated/wands/new_syntax/VariableAccess.vpr,0,1226,28,2,1192,1226,1261,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/new_syntax/localVarAssign.vpr,0,1163,45,3,1100,1186,1204,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/PackageStateConsolidation.vpr,0,1191,12,1,1175,1193,1206,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/apply.vpr,3,1197,25,2,1163,1207,1223,Vector(List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (apply.vpr@10.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (apply.vpr@30.3); [call.precondition:wand.not.found] The precondition of method test02 might not hold. Magic wand instance not found. (apply.vpr@48.3)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (apply.vpr@10.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (apply.vpr@30.3); [call.precondition:wand.not.found] The precondition of method test02 might not hold. Magic wand instance not found. (apply.vpr@48.3)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (apply.vpr@10.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (apply.vpr@30.3); [call.precondition:wand.not.found] The precondition of method test02 might not hold. Magic wand instance not found. (apply.vpr@48.3)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (apply.vpr@10.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (apply.vpr@30.3); [call.precondition:wand.not.found] The precondition of method test02 might not hold. Magic wand instance not found. (apply.vpr@48.3)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (apply.vpr@10.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (apply.vpr@30.3); [call.precondition:wand.not.found] The precondition of method test02 might not hold. Magic wand instance not found. (apply.vpr@48.3)))
../../src/test/resources/frontend-generated/wands/regression/apply1.vpr,2,1164,27,2,1144,1147,1203,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply1.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply1.vpr@23.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply1.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply1.vpr@23.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply1.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply1.vpr@23.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply1.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply1.vpr@23.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply1.vpr@13.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply1.vpr@23.3)))
../../src/test/resources/frontend-generated/wands/regression/apply_potential_incompleteness.vpr,1,1187,11,0,1174,1186,1202,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply_potential_incompleteness.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply_potential_incompleteness.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply_potential_incompleteness.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply_potential_incompleteness.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (apply_potential_incompleteness.vpr@14.3)))
../../src/test/resources/frontend-generated/wands/regression/applying.vpr,4,1266,34,2,1218,1284,1298,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (applying.vpr@26.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (applying.vpr@34.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.g. (applying.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (applying.vpr@72.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (applying.vpr@26.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (applying.vpr@34.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.g. (applying.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (applying.vpr@72.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (applying.vpr@26.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (applying.vpr@34.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.g. (applying.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (applying.vpr@72.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (applying.vpr@26.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (applying.vpr@34.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.g. (applying.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (applying.vpr@72.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (applying.vpr@26.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (applying.vpr@34.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.g. (applying.vpr@49.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (applying.vpr@72.3)))
../../src/test/resources/frontend-generated/wands/regression/closures_encoded.vpr,0,1276,11,0,1262,1276,1290,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/conditionals1.vpr,7,1359,29,2,1323,1360,1396,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access M(x). (conditionals1.vpr@32.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access M(x). (conditionals1.vpr@44.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@72.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@86.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@97.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals1.vpr@118.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals1.vpr@137.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access M(x). (conditionals1.vpr@32.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access M(x). (conditionals1.vpr@44.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@72.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@86.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@97.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals1.vpr@118.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals1.vpr@137.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access M(x). (conditionals1.vpr@32.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access M(x). (conditionals1.vpr@44.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@72.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@86.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@97.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals1.vpr@118.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals1.vpr@137.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access M(x). (conditionals1.vpr@32.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access M(x). (conditionals1.vpr@44.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@72.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@86.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@97.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals1.vpr@118.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals1.vpr@137.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access M(x). (conditionals1.vpr@32.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access M(x). (conditionals1.vpr@44.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@72.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@86.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access T(x). (conditionals1.vpr@97.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals1.vpr@118.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals1.vpr@137.3)))
../../src/test/resources/frontend-generated/wands/regression/conditionals2.vpr,3,1362,13,0,1344,1367,1376,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals2.vpr@81.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.h. (conditionals2.vpr@102.5); [assert.failed:assertion.false] Assert might fail. Assertion perm(x.g) == write might not hold. (conditionals2.vpr@123.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals2.vpr@81.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.h. (conditionals2.vpr@102.5); [assert.failed:assertion.false] Assert might fail. Assertion perm(x.g) == write might not hold. (conditionals2.vpr@123.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals2.vpr@81.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.h. (conditionals2.vpr@102.5); [assert.failed:assertion.false] Assert might fail. Assertion perm(x.g) == write might not hold. (conditionals2.vpr@123.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals2.vpr@81.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.h. (conditionals2.vpr@102.5); [assert.failed:assertion.false] Assert might fail. Assertion perm(x.g) == write might not hold. (conditionals2.vpr@123.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals2.vpr@81.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.h. (conditionals2.vpr@102.5); [assert.failed:assertion.false] Assert might fail. Assertion perm(x.g) == write might not hold. (conditionals2.vpr@123.3)))
../../src/test/resources/frontend-generated/wands/regression/conditionals3.vpr,3,1991,15,0,1975,1988,2012,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals3.vpr@70.3); [assert.failed:assertion.false] Assert might fail. Assertion !b1 && (!b2 && !b3) ==> false might not hold. (conditionals3.vpr@114.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals3.vpr@205.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals3.vpr@70.3); [assert.failed:assertion.false] Assert might fail. Assertion !b1 && (!b2 && !b3) ==> false might not hold. (conditionals3.vpr@114.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals3.vpr@205.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals3.vpr@70.3); [assert.failed:assertion.false] Assert might fail. Assertion !b1 && (!b2 && !b3) ==> false might not hold. (conditionals3.vpr@114.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals3.vpr@205.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals3.vpr@70.3); [assert.failed:assertion.false] Assert might fail. Assertion !b1 && (!b2 && !b3) ==> false might not hold. (conditionals3.vpr@114.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals3.vpr@205.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals3.vpr@70.3); [assert.failed:assertion.false] Assert might fail. Assertion !b1 && (!b2 && !b3) ==> false might not hold. (conditionals3.vpr@114.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (conditionals3.vpr@205.3)))
../../src/test/resources/frontend-generated/wands/regression/consistency.vpr,12,23,0,0,23,23,24,Vector(List(Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@18.12); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@25.10); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@30.20); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@71.11); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@77.9); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@18.46); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@25.64); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@30.42); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@39.33); Consistency error: acc(Pair(p); write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@48.31); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@71.33); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@77.31)); List(Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@18.12); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@25.10); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@30.20); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@71.11); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@77.9); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@18.46); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@25.64); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@30.42); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@39.33); Consistency error: acc(Pair(p); write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@48.31); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@71.33); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@77.31)); List(Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@18.12); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@25.10); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@30.20); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@71.11); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@77.9); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@18.46); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@25.64); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@30.42); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@39.33); Consistency error: acc(Pair(p); write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@48.31); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@71.33); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@77.31)); List(Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@18.12); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@25.10); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@30.20); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@71.11); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@77.9); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@18.46); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@25.64); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@30.42); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@39.33); Consistency error: acc(Pair(p); write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@48.31); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@71.33); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@77.31)); List(Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@18.12); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@25.10); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@30.20); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@71.11); Consistency error: Ghost operations may not occur inside of wands. (consistency.vpr@77.9); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@18.46); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@25.64); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@30.42); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@39.33); Consistency error: acc(Pair(p); write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@48.31); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@71.33); Consistency error: acc(p.f; write) is non pure and appears where only pure expressions are allowed. (consistency.vpr@77.31)))
../../src/test/resources/frontend-generated/wands/regression/consistency_define.vpr,2,2,0,0,2,2,2,Vector(List(identifier B not defined. (consistency_define.vpr@14.16); identifier foo not defined. (consistency_define.vpr@19.10)); List(identifier B not defined. (consistency_define.vpr@14.16); identifier foo not defined. (consistency_define.vpr@19.10)); List(identifier B not defined. (consistency_define.vpr@14.16); identifier foo not defined. (consistency_define.vpr@19.10)); List(identifier B not defined. (consistency_define.vpr@14.16); identifier foo not defined. (consistency_define.vpr@19.10)); List(identifier B not defined. (consistency_define.vpr@14.16); identifier foo not defined. (consistency_define.vpr@19.10)))
../../src/test/resources/frontend-generated/wands/regression/consistency_define_typechecker.vpr,1,2,0,0,2,3,3,Vector(List(Type error in the expression at consistency_define_typechecker.vpr@[11.10-11.19] (consistency_define_typechecker.vpr@11.10)); List(Type error in the expression at consistency_define_typechecker.vpr@[11.10-11.19] (consistency_define_typechecker.vpr@11.10)); List(Type error in the expression at consistency_define_typechecker.vpr@[11.10-11.19] (consistency_define_typechecker.vpr@11.10)); List(Type error in the expression at consistency_define_typechecker.vpr@[11.10-11.19] (consistency_define_typechecker.vpr@11.10)); List(Type error in the expression at consistency_define_typechecker.vpr@[11.10-11.19] (consistency_define_typechecker.vpr@11.10)))
../../src/test/resources/frontend-generated/wands/regression/consistency_let_resolver.vpr,6,3,0,0,3,3,3,Vector(List(identifier y not defined. (consistency_let_resolver.vpr@7.10); identifier y not defined. (consistency_let_resolver.vpr@12.36); Duplicate identifier `test03' at consistency_let_resolver.vpr@16.8 and at consistency_let_resolver.vpr@20.8 (consistency_let_resolver.vpr@16.8); Duplicate identifier `y' at consistency_let_resolver.vpr@16.15 and at consistency_let_resolver.vpr@17.14 (consistency_let_resolver.vpr@16.15); Duplicate identifier `y' at consistency_let_resolver.vpr@22.14 and at consistency_let_resolver.vpr@22.30 (consistency_let_resolver.vpr@22.14); identifier y not defined. (consistency_let_resolver.vpr@27.20)); List(identifier y not defined. (consistency_let_resolver.vpr@7.10); identifier y not defined. (consistency_let_resolver.vpr@12.36); Duplicate identifier `test03' at consistency_let_resolver.vpr@16.8 and at consistency_let_resolver.vpr@20.8 (consistency_let_resolver.vpr@16.8); Duplicate identifier `y' at consistency_let_resolver.vpr@16.15 and at consistency_let_resolver.vpr@17.14 (consistency_let_resolver.vpr@16.15); Duplicate identifier `y' at consistency_let_resolver.vpr@22.14 and at consistency_let_resolver.vpr@22.30 (consistency_let_resolver.vpr@22.14); identifier y not defined. (consistency_let_resolver.vpr@27.20)); List(identifier y not defined. (consistency_let_resolver.vpr@7.10); identifier y not defined. (consistency_let_resolver.vpr@12.36); Duplicate identifier `test03' at consistency_let_resolver.vpr@16.8 and at consistency_let_resolver.vpr@20.8 (consistency_let_resolver.vpr@16.8); Duplicate identifier `y' at consistency_let_resolver.vpr@16.15 and at consistency_let_resolver.vpr@17.14 (consistency_let_resolver.vpr@16.15); Duplicate identifier `y' at consistency_let_resolver.vpr@22.14 and at consistency_let_resolver.vpr@22.30 (consistency_let_resolver.vpr@22.14); identifier y not defined. (consistency_let_resolver.vpr@27.20)); List(identifier y not defined. (consistency_let_resolver.vpr@7.10); identifier y not defined. (consistency_let_resolver.vpr@12.36); Duplicate identifier `test03' at consistency_let_resolver.vpr@16.8 and at consistency_let_resolver.vpr@20.8 (consistency_let_resolver.vpr@16.8); Duplicate identifier `y' at consistency_let_resolver.vpr@16.15 and at consistency_let_resolver.vpr@17.14 (consistency_let_resolver.vpr@16.15); Duplicate identifier `y' at consistency_let_resolver.vpr@22.14 and at consistency_let_resolver.vpr@22.30 (consistency_let_resolver.vpr@22.14); identifier y not defined. (consistency_let_resolver.vpr@27.20)); List(identifier y not defined. (consistency_let_resolver.vpr@7.10); identifier y not defined. (consistency_let_resolver.vpr@12.36); Duplicate identifier `test03' at consistency_let_resolver.vpr@16.8 and at consistency_let_resolver.vpr@20.8 (consistency_let_resolver.vpr@16.8); Duplicate identifier `y' at consistency_let_resolver.vpr@16.15 and at consistency_let_resolver.vpr@17.14 (consistency_let_resolver.vpr@16.15); Duplicate identifier `y' at consistency_let_resolver.vpr@22.14 and at consistency_let_resolver.vpr@22.30 (consistency_let_resolver.vpr@22.14); identifier y not defined. (consistency_let_resolver.vpr@27.20)))
../../src/test/resources/frontend-generated/wands/regression/consistency_let_typechecker.vpr,1,1,0,0,1,1,1,Vector(List(Type error in the expression at consistency_let_typechecker.vpr@[6.26-6.28] (consistency_let_typechecker.vpr@6.26)); List(Type error in the expression at consistency_let_typechecker.vpr@[6.26-6.28] (consistency_let_typechecker.vpr@6.26)); List(Type error in the expression at consistency_let_typechecker.vpr@[6.26-6.28] (consistency_let_typechecker.vpr@6.26)); List(Type error in the expression at consistency_let_typechecker.vpr@[6.26-6.28] (consistency_let_typechecker.vpr@6.26)); List(Type error in the expression at consistency_let_typechecker.vpr@[6.26-6.28] (consistency_let_typechecker.vpr@6.26)))
../../src/test/resources/frontend-generated/wands/regression/consistency_resolver.vpr,2,4,0,0,4,4,5,Vector(List(expected magic wand (consistency_resolver.vpr@18.9); expected magic wand (consistency_resolver.vpr@30.11)); List(expected magic wand (consistency_resolver.vpr@18.9); expected magic wand (consistency_resolver.vpr@30.11)); List(expected magic wand (consistency_resolver.vpr@18.9); expected magic wand (consistency_resolver.vpr@30.11)); List(expected magic wand (consistency_resolver.vpr@18.9); expected magic wand (consistency_resolver.vpr@30.11)); List(expected magic wand (consistency_resolver.vpr@18.9); expected magic wand (consistency_resolver.vpr@30.11)))
../../src/test/resources/frontend-generated/wands/regression/consumption.vpr,5,1227,1,0,1226,1227,1229,Vector(List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.f. (consumption.vpr@30.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.f. (consumption.vpr@47.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (consumption.vpr@57.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (consumption.vpr@64.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access y.f. (consumption.vpr@74.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.f. (consumption.vpr@30.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.f. (consumption.vpr@47.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (consumption.vpr@57.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (consumption.vpr@64.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access y.f. (consumption.vpr@74.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.f. (consumption.vpr@30.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.f. (consumption.vpr@47.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (consumption.vpr@57.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (consumption.vpr@64.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access y.f. (consumption.vpr@74.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.f. (consumption.vpr@30.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.f. (consumption.vpr@47.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (consumption.vpr@57.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (consumption.vpr@64.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access y.f. (consumption.vpr@74.3)); List([assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.f. (consumption.vpr@30.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access p.f. (consumption.vpr@47.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (consumption.vpr@57.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (consumption.vpr@64.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access y.f. (consumption.vpr@74.3)))
../../src/test/resources/frontend-generated/wands/regression/eval_states.vpr,0,1228,12,0,1214,1225,1245,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/exec_unfolding.vpr,2,1158,61,5,1074,1186,1216,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (exec_unfolding.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (exec_unfolding.vpr@29.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (exec_unfolding.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (exec_unfolding.vpr@29.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (exec_unfolding.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (exec_unfolding.vpr@29.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (exec_unfolding.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (exec_unfolding.vpr@29.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (exec_unfolding.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (exec_unfolding.vpr@29.3)))
../../src/test/resources/frontend-generated/wands/regression/folding.vpr,0,1158,14,1,1143,1153,1178,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/folding_2.vpr,3,1199,26,2,1171,1194,1234,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (folding_2.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_2.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_2.vpr@45.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (folding_2.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_2.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_2.vpr@45.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (folding_2.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_2.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_2.vpr@45.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (folding_2.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_2.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_2.vpr@45.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (folding_2.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_2.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_2.vpr@45.3)))
../../src/test/resources/frontend-generated/wands/regression/folding_fun_frame.vpr,1,1195,8,0,1186,1193,1207,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_fun_frame.vpr@38.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_fun_frame.vpr@38.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_fun_frame.vpr@38.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_fun_frame.vpr@38.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_fun_frame.vpr@38.3)))
../../src/test/resources/frontend-generated/wands/regression/folding_fun_frame_2.vpr,1,1182,6,0,1174,1182,1190,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_fun_frame_2.vpr@30.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_fun_frame_2.vpr@30.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_fun_frame_2.vpr@30.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_fun_frame_2.vpr@30.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_fun_frame_2.vpr@30.3)))
../../src/test/resources/frontend-generated/wands/regression/folding_inc1.vpr,3,1208,44,3,1147,1226,1253,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_inc1.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_inc1.vpr@36.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (folding_inc1.vpr@41.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_inc1.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_inc1.vpr@36.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (folding_inc1.vpr@41.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_inc1.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_inc1.vpr@36.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (folding_inc1.vpr@41.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_inc1.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_inc1.vpr@36.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (folding_inc1.vpr@41.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_inc1.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_inc1.vpr@36.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (folding_inc1.vpr@41.3)))
../../src/test/resources/frontend-generated/wands/regression/folding_unfolding_combo.vpr,3,1212,21,1,1182,1223,1232,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@47.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@60.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@47.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@60.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@47.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@60.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@47.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@60.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@32.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@47.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (folding_unfolding_combo.vpr@60.3)))
../../src/test/resources/frontend-generated/wands/regression/footprints.vpr,3,1219,9,0,1211,1215,1233,Vector(List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (footprints.vpr@13.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (footprints.vpr@23.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.v. (footprints.vpr@39.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (footprints.vpr@13.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (footprints.vpr@23.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.v. (footprints.vpr@39.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (footprints.vpr@13.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (footprints.vpr@23.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.v. (footprints.vpr@39.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (footprints.vpr@13.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (footprints.vpr@23.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.v. (footprints.vpr@39.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (footprints.vpr@13.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.l.v. (footprints.vpr@23.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.v. (footprints.vpr@39.3)))
../../src/test/resources/frontend-generated/wands/regression/heuristics_access_paths.vpr,0,1198,18,1,1173,1206,1215,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/heuristics_apply.vpr,1,1308,23,1,1275,1322,1329,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (heuristics_apply.vpr@28.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (heuristics_apply.vpr@28.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (heuristics_apply.vpr@28.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (heuristics_apply.vpr@28.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (heuristics_apply.vpr@28.3)))
../../src/test/resources/frontend-generated/wands/regression/heuristics_fold_unfold.vpr,0,1181,24,2,1148,1193,1204,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/heuristics_misc.vpr,0,1440,39,2,1388,1447,1485,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/heuristics_package.vpr,5,1511,28,1,1484,1500,1550,Vector(List([postcondition.violated:wand.not.found] Postcondition of test03 might not hold. Magic wand instance not found. (heuristics_package.vpr@32.11); [postcondition.violated:wand.not.found] Postcondition of test04 might not hold. Magic wand instance not found. (heuristics_package.vpr@39.11); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (heuristics_package.vpr@67.3); [postcondition.violated:wand.not.found] Postcondition of test07 might not hold. Magic wand instance not found. (heuristics_package.vpr@74.11); [postcondition.violated:wand.not.found] Postcondition of test08b might not hold. Magic wand instance not found. (heuristics_package.vpr@87.11)); List([postcondition.violated:wand.not.found] Postcondition of test03 might not hold. Magic wand instance not found. (heuristics_package.vpr@32.11); [postcondition.violated:wand.not.found] Postcondition of test04 might not hold. Magic wand instance not found. (heuristics_package.vpr@39.11); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (heuristics_package.vpr@67.3); [postcondition.violated:wand.not.found] Postcondition of test07 might not hold. Magic wand instance not found. (heuristics_package.vpr@74.11); [postcondition.violated:wand.not.found] Postcondition of test08b might not hold. Magic wand instance not found. (heuristics_package.vpr@87.11)); List([postcondition.violated:wand.not.found] Postcondition of test03 might not hold. Magic wand instance not found. (heuristics_package.vpr@32.11); [postcondition.violated:wand.not.found] Postcondition of test04 might not hold. Magic wand instance not found. (heuristics_package.vpr@39.11); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (heuristics_package.vpr@67.3); [postcondition.violated:wand.not.found] Postcondition of test07 might not hold. Magic wand instance not found. (heuristics_package.vpr@74.11); [postcondition.violated:wand.not.found] Postcondition of test08b might not hold. Magic wand instance not found. (heuristics_package.vpr@87.11)); List([postcondition.violated:wand.not.found] Postcondition of test03 might not hold. Magic wand instance not found. (heuristics_package.vpr@32.11); [postcondition.violated:wand.not.found] Postcondition of test04 might not hold. Magic wand instance not found. (heuristics_package.vpr@39.11); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (heuristics_package.vpr@67.3); [postcondition.violated:wand.not.found] Postcondition of test07 might not hold. Magic wand instance not found. (heuristics_package.vpr@74.11); [postcondition.violated:wand.not.found] Postcondition of test08b might not hold. Magic wand instance not found. (heuristics_package.vpr@87.11)); List([postcondition.violated:wand.not.found] Postcondition of test03 might not hold. Magic wand instance not found. (heuristics_package.vpr@32.11); [postcondition.violated:wand.not.found] Postcondition of test04 might not hold. Magic wand instance not found. (heuristics_package.vpr@39.11); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (heuristics_package.vpr@67.3); [postcondition.violated:wand.not.found] Postcondition of test07 might not hold. Magic wand instance not found. (heuristics_package.vpr@74.11); [postcondition.violated:wand.not.found] Postcondition of test08b might not hold. Magic wand instance not found. (heuristics_package.vpr@87.11)))
../../src/test/resources/frontend-generated/wands/regression/inconsistency_scenario_2.vpr,1,1136,44,3,1081,1137,1190,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (inconsistency_scenario_2.vpr@16.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (inconsistency_scenario_2.vpr@16.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (inconsistency_scenario_2.vpr@16.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (inconsistency_scenario_2.vpr@16.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (inconsistency_scenario_2.vpr@16.3)))
../../src/test/resources/frontend-generated/wands/regression/issue005.vpr,1,1142,10,0,1130,1141,1155,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue005.vpr@34.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue005.vpr@34.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue005.vpr@34.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue005.vpr@34.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue005.vpr@34.3)))
../../src/test/resources/frontend-generated/wands/regression/issue006.vpr,3,1500,22,1,1469,1511,1520,Vector(List([apply.failed:assertion.false] Applying wand might fail. Assertion x == a - 1 might not hold. (issue006.vpr@33.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (issue006.vpr@54.3); [apply.failed:assertion.false] Applying wand might fail. Assertion x < y might not hold. (issue006.vpr@93.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion x == a - 1 might not hold. (issue006.vpr@33.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (issue006.vpr@54.3); [apply.failed:assertion.false] Applying wand might fail. Assertion x < y might not hold. (issue006.vpr@93.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion x == a - 1 might not hold. (issue006.vpr@33.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (issue006.vpr@54.3); [apply.failed:assertion.false] Applying wand might fail. Assertion x < y might not hold. (issue006.vpr@93.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion x == a - 1 might not hold. (issue006.vpr@33.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (issue006.vpr@54.3); [apply.failed:assertion.false] Applying wand might fail. Assertion x < y might not hold. (issue006.vpr@93.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion x == a - 1 might not hold. (issue006.vpr@33.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (issue006.vpr@54.3); [apply.failed:assertion.false] Applying wand might fail. Assertion x < y might not hold. (issue006.vpr@93.3)))
../../src/test/resources/frontend-generated/wands/regression/issue007.vpr,2,1193,24,2,1158,1207,1214,Vector(List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (issue007.vpr@17.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (issue007.vpr@48.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (issue007.vpr@17.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (issue007.vpr@48.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (issue007.vpr@17.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (issue007.vpr@48.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (issue007.vpr@17.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (issue007.vpr@48.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (issue007.vpr@17.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (issue007.vpr@48.3)))
../../src/test/resources/frontend-generated/wands/regression/issue009.vpr,0,1191,9,0,1181,1190,1204,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/issue010.vpr,0,1171,35,2,1138,1156,1221,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/issue011.vpr,0,1171,23,1,1141,1174,1199,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/issue012.vpr,0,1232,14,1,1219,1226,1252,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/issue013.vpr,0,1156,34,2,1107,1179,1182,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/issue015.vpr,1,1194,32,2,1155,1192,1235,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue015.vpr@26.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue015.vpr@26.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue015.vpr@26.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue015.vpr@26.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue015.vpr@26.3)))
../../src/test/resources/frontend-generated/wands/regression/issue017.vpr,0,1190,15,1,1172,1189,1211,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/issue023.vpr,0,1199,20,1,1172,1206,1221,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/issue024.vpr,1,1227,25,2,1200,1220,1262,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion x.f == old(x.f) might not hold. (issue024.vpr@28.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == old(x.f) might not hold. (issue024.vpr@28.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == old(x.f) might not hold. (issue024.vpr@28.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == old(x.f) might not hold. (issue024.vpr@28.5)); List([assert.failed:assertion.false] Assert might fail. Assertion x.f == old(x.f) might not hold. (issue024.vpr@28.5)))
../../src/test/resources/frontend-generated/wands/regression/issue029.vpr,4,1600,16,1,1586,1591,1624,Vector(List([apply.failed:assertion.false] Applying wand might fail. Assertion (unfolding acc(LL(x); write) in x.val == 10) might not hold. (issue029.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(LL(x); write) in x.next != null ==> (unfolding acc(LL(x.next); write) in x.next.val == 2 * x.val)) might not hold. (issue029.vpr@57.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access P(). (issue029.vpr@93.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue029.vpr@119.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion (unfolding acc(LL(x); write) in x.val == 10) might not hold. (issue029.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(LL(x); write) in x.next != null ==> (unfolding acc(LL(x.next); write) in x.next.val == 2 * x.val)) might not hold. (issue029.vpr@57.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access P(). (issue029.vpr@93.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue029.vpr@119.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion (unfolding acc(LL(x); write) in x.val == 10) might not hold. (issue029.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(LL(x); write) in x.next != null ==> (unfolding acc(LL(x.next); write) in x.next.val == 2 * x.val)) might not hold. (issue029.vpr@57.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access P(). (issue029.vpr@93.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue029.vpr@119.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion (unfolding acc(LL(x); write) in x.val == 10) might not hold. (issue029.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(LL(x); write) in x.next != null ==> (unfolding acc(LL(x.next); write) in x.next.val == 2 * x.val)) might not hold. (issue029.vpr@57.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access P(). (issue029.vpr@93.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue029.vpr@119.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion (unfolding acc(LL(x); write) in x.val == 10) might not hold. (issue029.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion (unfolding acc(LL(x); write) in x.next != null ==> (unfolding acc(LL(x.next); write) in x.next.val == 2 * x.val)) might not hold. (issue029.vpr@57.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access P(). (issue029.vpr@93.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (issue029.vpr@119.3)))
../../src/test/resources/frontend-generated/wands/regression/issue198.vpr,0,1183,25,2,1147,1201,1203,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/known_folded_1.vpr,2,1181,15,1,1160,1191,1194,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (known_folded_1.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (known_folded_1.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (known_folded_1.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (known_folded_1.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (known_folded_1.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (known_folded_1.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (known_folded_1.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (known_folded_1.vpr@27.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (known_folded_1.vpr@14.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (known_folded_1.vpr@27.3)))
../../src/test/resources/frontend-generated/wands/regression/let.vpr,0,1160,6,0,1155,1158,1169,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/let_ghostops.vpr,0,1190,25,2,1154,1205,1212,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/let_test1.vpr,0,1181,24,2,1151,1184,1210,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/let_wands.vpr,7,1416,29,2,1376,1427,1446,Vector(List([apply.failed:assertion.false] Applying wand might fail. Assertion x.f == w might not hold. (let_wands.vpr@36.3); [apply.failed:assertion.false] Applying wand might fail. Assertion x.f == w might not hold. (let_wands.vpr@54.3); [apply.failed:assertion.false] Applying wand might fail. Assertion sum(x) == old(sum(x)) might not hold. (let_wands.vpr@79.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (let_wands.vpr@96.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (let_wands.vpr@115.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (let_wands.vpr@135.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access y.g. (let_wands.vpr@145.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion x.f == w might not hold. (let_wands.vpr@36.3); [apply.failed:assertion.false] Applying wand might fail. Assertion x.f == w might not hold. (let_wands.vpr@54.3); [apply.failed:assertion.false] Applying wand might fail. Assertion sum(x) == old(sum(x)) might not hold. (let_wands.vpr@79.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (let_wands.vpr@96.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (let_wands.vpr@115.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (let_wands.vpr@135.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access y.g. (let_wands.vpr@145.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion x.f == w might not hold. (let_wands.vpr@36.3); [apply.failed:assertion.false] Applying wand might fail. Assertion x.f == w might not hold. (let_wands.vpr@54.3); [apply.failed:assertion.false] Applying wand might fail. Assertion sum(x) == old(sum(x)) might not hold. (let_wands.vpr@79.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (let_wands.vpr@96.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (let_wands.vpr@115.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (let_wands.vpr@135.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access y.g. (let_wands.vpr@145.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion x.f == w might not hold. (let_wands.vpr@36.3); [apply.failed:assertion.false] Applying wand might fail. Assertion x.f == w might not hold. (let_wands.vpr@54.3); [apply.failed:assertion.false] Applying wand might fail. Assertion sum(x) == old(sum(x)) might not hold. (let_wands.vpr@79.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (let_wands.vpr@96.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (let_wands.vpr@115.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (let_wands.vpr@135.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access y.g. (let_wands.vpr@145.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion x.f == w might not hold. (let_wands.vpr@36.3); [apply.failed:assertion.false] Applying wand might fail. Assertion x.f == w might not hold. (let_wands.vpr@54.3); [apply.failed:assertion.false] Applying wand might fail. Assertion sum(x) == old(sum(x)) might not hold. (let_wands.vpr@79.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (let_wands.vpr@96.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (let_wands.vpr@115.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (let_wands.vpr@135.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access y.g. (let_wands.vpr@145.3)))
../../src/test/resources/frontend-generated/wands/regression/lhs.vpr,0,1221,2,0,1218,1222,1225,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/loop_sum_ghostvar_old.vpr,0,1350,36,2,1310,1344,1398,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/nesting.vpr,0,1193,28,2,1162,1188,1230,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/old.vpr,0,1206,9,0,1197,1202,1220,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/package-sandboxed.vpr,1,1145,15,1,1127,1144,1166,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (package-sandboxed.vpr@14.2)); List([assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (package-sandboxed.vpr@14.2)); List([assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (package-sandboxed.vpr@14.2)); List([assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (package-sandboxed.vpr@14.2)); List([assert.failed:assertion.false] Assert might fail. Assertion b might not hold. (package-sandboxed.vpr@14.2)))
../../src/test/resources/frontend-generated/wands/regression/package.vpr,11,1315,33,2,1290,1294,1363,Vector(List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (package.vpr@16.3); [package.failed:assertion.false] Packaging wand might fail. Assertion x.f == 0 might not hold. (package.vpr@24.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (package.vpr@34.3); [package.failed:assertion.false] Packaging wand might fail. Assertion x.f == 0 might not hold. (package.vpr@49.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package.vpr@63.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@94.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package.vpr@101.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@109.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@122.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@136.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (package.vpr@149.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (package.vpr@16.3); [package.failed:assertion.false] Packaging wand might fail. Assertion x.f == 0 might not hold. (package.vpr@24.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (package.vpr@34.3); [package.failed:assertion.false] Packaging wand might fail. Assertion x.f == 0 might not hold. (package.vpr@49.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package.vpr@63.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@94.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package.vpr@101.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@109.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@122.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@136.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (package.vpr@149.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (package.vpr@16.3); [package.failed:assertion.false] Packaging wand might fail. Assertion x.f == 0 might not hold. (package.vpr@24.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (package.vpr@34.3); [package.failed:assertion.false] Packaging wand might fail. Assertion x.f == 0 might not hold. (package.vpr@49.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package.vpr@63.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@94.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package.vpr@101.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@109.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@122.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@136.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (package.vpr@149.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (package.vpr@16.3); [package.failed:assertion.false] Packaging wand might fail. Assertion x.f == 0 might not hold. (package.vpr@24.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (package.vpr@34.3); [package.failed:assertion.false] Packaging wand might fail. Assertion x.f == 0 might not hold. (package.vpr@49.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package.vpr@63.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@94.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package.vpr@101.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@109.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@122.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@136.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (package.vpr@149.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (package.vpr@16.3); [package.failed:assertion.false] Packaging wand might fail. Assertion x.f == 0 might not hold. (package.vpr@24.3); [assert.failed:insufficient.permission] Assert might fail. There might be insufficient permission to access x.f. (package.vpr@34.3); [package.failed:assertion.false] Packaging wand might fail. Assertion x.f == 0 might not hold. (package.vpr@49.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package.vpr@63.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@94.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package.vpr@101.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@109.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@122.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package.vpr@136.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (package.vpr@149.3)))
../../src/test/resources/frontend-generated/wands/regression/package_hyp.vpr,5,1179,32,2,1149,1164,1224,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@37.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package_hyp.vpr@44.7); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@56.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@37.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package_hyp.vpr@44.7); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@56.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@37.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package_hyp.vpr@44.7); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@56.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@37.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package_hyp.vpr@44.7); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@56.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@37.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package_hyp.vpr@44.7); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_hyp.vpr@56.3)))
../../src/test/resources/frontend-generated/wands/regression/package_inc1.vpr,2,1119,31,2,1078,1123,1156,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc1.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc1.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc1.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc1.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc1.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc1.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc1.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc1.vpr@24.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc1.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc1.vpr@24.3)))
../../src/test/resources/frontend-generated/wands/regression/package_inc2.vpr,4,1237,12,0,1225,1233,1254,Vector(List([apply.failed:assertion.false] Applying wand might fail. Assertion x.f == 2 might not hold. (package_inc2.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc2.vpr@30.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (package_inc2.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc2.vpr@48.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion x.f == 2 might not hold. (package_inc2.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc2.vpr@30.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (package_inc2.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc2.vpr@48.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion x.f == 2 might not hold. (package_inc2.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc2.vpr@30.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (package_inc2.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc2.vpr@48.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion x.f == 2 might not hold. (package_inc2.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc2.vpr@30.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (package_inc2.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc2.vpr@48.3)); List([apply.failed:assertion.false] Applying wand might fail. Assertion x.f == 2 might not hold. (package_inc2.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc2.vpr@30.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (package_inc2.vpr@39.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc2.vpr@48.3)))
../../src/test/resources/frontend-generated/wands/regression/package_inc3.vpr,3,1170,46,3,1119,1161,1232,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@37.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc3.vpr@37.3)))
../../src/test/resources/frontend-generated/wands/regression/package_inc5.vpr,2,1194,35,2,1164,1175,1244,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc5.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc5.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc5.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc5.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc5.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc5.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc5.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc5.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc5.vpr@19.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_inc5.vpr@35.3)))
../../src/test/resources/frontend-generated/wands/regression/package_simple_no_perm.vpr,3,1149,12,1,1132,1153,1162,Vector(List([package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package_simple_no_perm.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_simple_no_perm.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_simple_no_perm.vpr@35.3)); List([package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package_simple_no_perm.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_simple_no_perm.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_simple_no_perm.vpr@35.3)); List([package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package_simple_no_perm.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_simple_no_perm.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_simple_no_perm.vpr@35.3)); List([package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package_simple_no_perm.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_simple_no_perm.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_simple_no_perm.vpr@35.3)); List([package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (package_simple_no_perm.vpr@18.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_simple_no_perm.vpr@26.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (package_simple_no_perm.vpr@35.3)))
../../src/test/resources/frontend-generated/wands/regression/packaging.vpr,4,1207,33,2,1162,1216,1243,Vector(List([package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (packaging.vpr@12.7); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@24.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@36.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@43.3)); List([package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (packaging.vpr@12.7); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@24.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@36.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@43.3)); List([package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (packaging.vpr@12.7); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@24.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@36.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@43.3)); List([package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (packaging.vpr@12.7); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@24.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@36.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@43.3)); List([package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (packaging.vpr@12.7); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@24.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@36.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (packaging.vpr@43.3)))
../../src/test/resources/frontend-generated/wands/regression/packaging_1.vpr,4,1231,20,1,1204,1239,1252,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@23.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@39.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (packaging_1.vpr@47.7); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@59.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@23.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@39.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (packaging_1.vpr@47.7); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@59.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@23.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@39.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (packaging_1.vpr@47.7); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@59.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@23.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@39.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (packaging_1.vpr@47.7); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@59.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@23.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@39.3); [package.failed:assertion.false] Packaging wand might fail. Assertion false might not hold. (packaging_1.vpr@47.7); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_1.vpr@59.3)))
../../src/test/resources/frontend-generated/wands/regression/packaging_apply.vpr,1,1196,37,3,1168,1172,1249,Vector(List([apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging_apply.vpr@20.3)); List([apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging_apply.vpr@20.3)); List([apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging_apply.vpr@20.3)); List([apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging_apply.vpr@20.3)); List([apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access x.f. (packaging_apply.vpr@20.3)))
../../src/test/resources/frontend-generated/wands/regression/packaging_cond_perm.vpr,4,1250,30,2,1211,1255,1286,Vector(List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@23.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_cond_perm.vpr@45.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@56.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@23.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_cond_perm.vpr@45.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@56.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@23.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_cond_perm.vpr@45.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@56.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@23.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_cond_perm.vpr@45.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@56.3)); List([exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@23.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@33.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_cond_perm.vpr@45.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access x.f. (packaging_cond_perm.vpr@56.3)))
../../src/test/resources/frontend-generated/wands/regression/packaging_nested.vpr,2,1222,16,1,1205,1217,1245,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_nested.vpr@23.1); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_nested.vpr@40.1)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_nested.vpr@23.1); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_nested.vpr@40.1)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_nested.vpr@23.1); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_nested.vpr@40.1)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_nested.vpr@23.1); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_nested.vpr@40.1)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_nested.vpr@23.1); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (packaging_nested.vpr@40.1)))
../../src/test/resources/frontend-generated/wands/regression/packaging_shield.vpr,1,1188,41,3,1130,1206,1228,Vector(List([package.failed:assertion.false] Packaging wand might fail. Assertion ys.f == 2 might not hold. (packaging_shield.vpr@15.5)); List([package.failed:assertion.false] Packaging wand might fail. Assertion ys.f == 2 might not hold. (packaging_shield.vpr@15.5)); List([package.failed:assertion.false] Packaging wand might fail. Assertion ys.f == 2 might not hold. (packaging_shield.vpr@15.5)); List([package.failed:assertion.false] Packaging wand might fail. Assertion ys.f == 2 might not hold. (packaging_shield.vpr@15.5)); List([package.failed:assertion.false] Packaging wand might fail. Assertion ys.f == 2 might not hold. (packaging_shield.vpr@15.5)))
../../src/test/resources/frontend-generated/wands/regression/resultstate1.vpr,1,1154,12,1,1142,1149,1172,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (resultstate1.vpr@20.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (resultstate1.vpr@20.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (resultstate1.vpr@20.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (resultstate1.vpr@20.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (resultstate1.vpr@20.3)))
../../src/test/resources/frontend-generated/wands/regression/shorthand_define.vpr,3,1193,27,2,1155,1204,1220,Vector(List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (shorthand_define.vpr@12.3); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (shorthand_define.vpr@24.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (shorthand_define.vpr@35.3)); List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (shorthand_define.vpr@12.3); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (shorthand_define.vpr@24.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (shorthand_define.vpr@35.3)); List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (shorthand_define.vpr@12.3); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (shorthand_define.vpr@24.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (shorthand_define.vpr@35.3)); List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (shorthand_define.vpr@12.3); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (shorthand_define.vpr@24.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (shorthand_define.vpr@35.3)); List([assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (shorthand_define.vpr@12.3); [assert.failed:wand.not.found] Assert might fail. Magic wand instance not found. (shorthand_define.vpr@24.3); [apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (shorthand_define.vpr@35.3)))
../../src/test/resources/frontend-generated/wands/regression/shorthand_wand.vpr,1,1220,9,0,1208,1222,1232,Vector(List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (shorthand_wand.vpr@39.3)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (shorthand_wand.vpr@39.3)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (shorthand_wand.vpr@39.3)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (shorthand_wand.vpr@39.3)); List([apply.failed:wand.not.found] Applying wand might fail. Magic wand instance not found. (shorthand_wand.vpr@39.3)))
../../src/test/resources/frontend-generated/wands/regression/snapshot_report.vpr,0,1229,13,1,1210,1238,1240,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/snapshots.vpr,0,1208,17,1,1185,1216,1225,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/snapshots2.vpr,1,1238,31,2,1194,1254,1267,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion v1 == v2 might not hold. (snapshots2.vpr@29.5)); List([assert.failed:assertion.false] Assert might fail. Assertion v1 == v2 might not hold. (snapshots2.vpr@29.5)); List([assert.failed:assertion.false] Assert might fail. Assertion v1 == v2 might not hold. (snapshots2.vpr@29.5)); List([assert.failed:assertion.false] Assert might fail. Assertion v1 == v2 might not hold. (snapshots2.vpr@29.5)); List([assert.failed:assertion.false] Assert might fail. Assertion v1 == v2 might not hold. (snapshots2.vpr@29.5)))
../../src/test/resources/frontend-generated/wands/regression/transfer_naive_issue_1.vpr,0,1154,9,0,1142,1160,1162,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/un_currying.vpr,5,1284,33,2,1237,1305,1312,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@30.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@47.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access Q(). (un_currying.vpr@60.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(). (un_currying.vpr@76.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@94.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@30.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@47.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access Q(). (un_currying.vpr@60.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(). (un_currying.vpr@76.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@94.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@30.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@47.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access Q(). (un_currying.vpr@60.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(). (un_currying.vpr@76.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@94.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@30.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@47.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access Q(). (un_currying.vpr@60.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(). (un_currying.vpr@76.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@94.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@30.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@47.3); [apply.failed:insufficient.permission] Applying wand might fail. There might be insufficient permission to access Q(). (un_currying.vpr@60.3); [exhale.failed:insufficient.permission] Exhale might fail. There might be insufficient permission to access P(). (un_currying.vpr@76.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (un_currying.vpr@94.3)))
../../src/test/resources/frontend-generated/wands/regression/unfolding.vpr,3,1273,16,1,1252,1276,1293,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@44.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@63.3); [unfold.failed:insufficient.permission] Unfolding Pair(p) might fail. There might be insufficient permission to access Pair(p). (unfolding.vpr@77.7)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@44.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@63.3); [unfold.failed:insufficient.permission] Unfolding Pair(p) might fail. There might be insufficient permission to access Pair(p). (unfolding.vpr@77.7)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@44.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@63.3); [unfold.failed:insufficient.permission] Unfolding Pair(p) might fail. There might be insufficient permission to access Pair(p). (unfolding.vpr@77.7)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@44.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@63.3); [unfold.failed:insufficient.permission] Unfolding Pair(p) might fail. There might be insufficient permission to access Pair(p). (unfolding.vpr@77.7)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@44.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding.vpr@63.3); [unfold.failed:insufficient.permission] Unfolding Pair(p) might fail. There might be insufficient permission to access Pair(p). (unfolding.vpr@77.7)))
../../src/test/resources/frontend-generated/wands/regression/unfolding_ambiguity.vpr,1,1187,25,2,1152,1199,1212,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding_ambiguity.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding_ambiguity.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding_ambiguity.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding_ambiguity.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding_ambiguity.vpr@14.3)))
../../src/test/resources/frontend-generated/wands/regression/unfolding_ambiguity2.vpr,0,1179,23,1,1152,1175,1210,Vector(List(); List(); List(); List(); List())
../../src/test/resources/frontend-generated/wands/regression/unfolding_trivial_wand.vpr,1,1170,25,2,1136,1179,1197,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding_trivial_wand.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding_trivial_wand.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding_trivial_wand.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding_trivial_wand.vpr@14.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (unfolding_trivial_wand.vpr@14.3)))
../../src/test/resources/frontend-generated/wands/regression/wand_conjunction.vpr,3,1173,58,4,1090,1212,1217,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@35.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@15.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@25.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_conjunction.vpr@35.3)))
../../src/test/resources/frontend-generated/wands/regression/wand_shapes_1.vpr,4,1184,30,2,1159,1167,1227,Vector(List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_shapes_1.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_shapes_1.vpr@29.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_1.vpr@40.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_1.vpr@47.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_shapes_1.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_shapes_1.vpr@29.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_1.vpr@40.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_1.vpr@47.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_shapes_1.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_shapes_1.vpr@29.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_1.vpr@40.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_1.vpr@47.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_shapes_1.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_shapes_1.vpr@29.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_1.vpr@40.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_1.vpr@47.3)); List([assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_shapes_1.vpr@17.3); [assert.failed:assertion.false] Assert might fail. Assertion false might not hold. (wand_shapes_1.vpr@29.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_1.vpr@40.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_1.vpr@47.3)))
../../src/test/resources/frontend-generated/wands/regression/wand_shapes_simple_exhale.vpr,2,1170,18,1,1151,1166,1195,Vector(List([exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_simple_exhale.vpr@15.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_simple_exhale.vpr@25.3)); List([exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_simple_exhale.vpr@15.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_simple_exhale.vpr@25.3)); List([exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_simple_exhale.vpr@15.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_simple_exhale.vpr@25.3)); List([exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_simple_exhale.vpr@15.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_simple_exhale.vpr@25.3)); List([exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_simple_exhale.vpr@15.3); [exhale.failed:wand.not.found] Exhale might fail. Magic wand instance not found. (wand_shapes_simple_exhale.vpr@25.3)))
../../src/test/resources/frontend-generated/wands/regression/well_formedness_wand_1.vpr,3,1171,3,0,1167,1172,1176,Vector(List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@13.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@32.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@51.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@13.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@32.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@51.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@13.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@32.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@51.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@13.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@32.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@51.3)); List([package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@13.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@32.3); [package.failed:insufficient.permission] Packaging wand might fail. There might be insufficient permission to access x.f. (well_formedness_wand_1.vpr@51.3)))
